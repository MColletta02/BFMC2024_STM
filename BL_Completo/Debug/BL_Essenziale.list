
BL_Essenziale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e978  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  0800eb18  0800eb18  0001eb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f450  0800f450  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f458  0800f458  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f458  0800f458  0001f458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f45c  0800f45c  0001f45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001f8  0800f658  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800f658  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b36  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f1  00000000  00000000  00032da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00035798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea1  00000000  00000000  00036a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1d3  00000000  00000000  000378d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001719e  00000000  00000000  00051aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f6ec  00000000  00000000  00068c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a4c  00000000  00000000  00108330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0010ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb00 	.word	0x0800eb00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800eb00 	.word	0x0800eb00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <BL_DegreeSec2RPM>:


#include <BL_motor.h>
#include "Configuration.h"

float BL_DegreeSec2RPM(float speed_degsec){
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001038 <BL_DegreeSec2RPM+0x38>
 8001012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001016:	eddf 6a09 	vldr	s13, [pc, #36]	; 800103c <BL_DegreeSec2RPM+0x3c>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	42700000 	.word	0x42700000
 800103c:	43b40000 	.word	0x43b40000

08001040 <BL_set_PWM>:

void BL_set_PWM(float duty){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM10->CCR1 = duty*TIM10->ARR;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <BL_set_PWM+0x38>)
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <BL_set_PWM+0x38>)
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	ee17 2a90 	vmov	r2, s15
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40014400 	.word	0x40014400

0800107c <init_PID>:
#include "Configuration.h"

#include <stdio.h>


void init_PID(PID* p, float Tc, float u_max, float u_min){
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	ed87 0a02 	vstr	s0, [r7, #8]
 8001088:	edc7 0a01 	vstr	s1, [r7, #4]
 800108c:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80010ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80010ce:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	609a      	str	r2, [r3, #8]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PID_controller>:

float PID_controller(PID* p , float y, float r, float zero){
 80010f0:	b480      	push	{r7}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001100:	ed87 1a00 	vstr	s2, [r7]
	float u;
	float newIterm;
	float e = 0;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	623b      	str	r3, [r7, #32]

	e = r-y;
 800110a:	ed97 7a01 	vldr	s14, [r7, #4]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	edc7 7a08 	vstr	s15, [r7, #32]


	float Pterm = p->Kp*e;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ed97 7a08 	vldr	s14, [r7, #32]
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 6a01 	vldr	s13, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edd3 7a06 	vldr	s15, [r3, #24]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edd3 6a02 	vldr	s13, [r3, #8]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	edd3 7a06 	vldr	s15, [r3, #24]
 800116a:	edd7 6a08 	vldr	s13, [r7, #32]
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a3a      	ldr	r2, [r7, #32]
 800117e:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm + zero;
 8001180:	ed97 7a07 	vldr	s14, [r7, #28]
 8001184:	edd7 7a06 	vldr	s15, [r7, #24]
 8001188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001194:	ed97 7a00 	vldr	s14, [r7]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dd03      	ble.n	80011bc <PID_controller+0xcc>
		u = p->u_max;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	e010      	b.n	80011de <PID_controller+0xee>
	} else if(u < p->u_min){
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 7a05 	vldr	s15, [r3, #20]
 80011c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d503      	bpl.n	80011d8 <PID_controller+0xe8>
		u = p->u_min;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	e002      	b.n	80011de <PID_controller+0xee>
	} else {
		p->Iterm = newIterm;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	61da      	str	r2, [r3, #28]
	//Entra qua dentro solo se è il PID di sterzo
	if(zero == 0){
		//printf("errore: %.2f, y: %.2f, r: %.2f, u: %.2f \r\n", e, y, r, u);
	}

	return u;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	ee07 3a90 	vmov	s15, r3
}
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	372c      	adds	r7, #44	; 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <parseCSV>:


#define MAX_VALUES 6


void parseCSV(const char *csvString, float *values) {
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	char *token;
	char *copy = strdup(csvString); // Make a copy of the string to avoid modifying the original
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f008 ffb8 	bl	800a174 <strdup>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
	int index = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]

	token = strtok(copy, ",");
 800120c:	4912      	ldr	r1, [pc, #72]	; (8001258 <parseCSV+0x64>)
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f008 ffe0 	bl	800a1d4 <strtok>
 8001214:	6178      	str	r0, [r7, #20]
	while (token != NULL && index < MAX_VALUES) {
 8001216:	e012      	b.n	800123e <parseCSV+0x4a>
		values[index++] = strtof(token, NULL); // Convert token to float and store in the array
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	613a      	str	r2, [r7, #16]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	18d4      	adds	r4, r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f007 fe98 	bl	8008f5c <strtof>
 800122c:	eef0 7a40 	vmov.f32	s15, s0
 8001230:	edc4 7a00 	vstr	s15, [r4]
		token = strtok(NULL, ",");
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <parseCSV+0x64>)
 8001236:	2000      	movs	r0, #0
 8001238:	f008 ffcc 	bl	800a1d4 <strtok>
 800123c:	6178      	str	r0, [r7, #20]
	while (token != NULL && index < MAX_VALUES) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <parseCSV+0x56>
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b05      	cmp	r3, #5
 8001248:	dde6      	ble.n	8001218 <parseCSV+0x24>
	}

	free(copy); // Free the dynamically allocated memory for the copied string
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f006 ffbe 	bl	80081cc <free>
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	0800eb18 	.word	0x0800eb18

0800125c <mainSerialRead>:
// USART6 per la ricezione dei dati del Raspberry
void mainSerialRead(uint8_t *msg, uint32_t message_size) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    uint16_t timeout = 0xFF;
 8001266:	23ff      	movs	r3, #255	; 0xff
 8001268:	827b      	strh	r3, [r7, #18]
    uint8_t app = '\0';
 800126a:	2300      	movs	r3, #0
 800126c:	72fb      	strb	r3, [r7, #11]
    int msg_len = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]

    int i = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]

    // Check if data is available to read
    if (HAL_UART_Receive(&huart6, &app, 1, timeout) == HAL_OK) {
 8001276:	8a7b      	ldrh	r3, [r7, #18]
 8001278:	f107 010b 	add.w	r1, r7, #11
 800127c:	2201      	movs	r2, #1
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <mainSerialRead+0x74>)
 8001280:	f006 fc17 	bl	8007ab2 <HAL_UART_Receive>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11e      	bne.n	80012c8 <mainSerialRead+0x6c>
        while (app != '\n' && i < message_size - 1) {
 800128a:	e013      	b.n	80012b4 <mainSerialRead+0x58>
            msg[i] = app;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	7afa      	ldrb	r2, [r7, #11]
 8001294:	701a      	strb	r2, [r3, #0]
            msg_len = i;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	60fb      	str	r3, [r7, #12]
            i++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]

            // Receive next byte
            if (HAL_UART_Receive(&huart6, &app, 1, timeout) != HAL_OK) {
 80012a0:	8a7b      	ldrh	r3, [r7, #18]
 80012a2:	f107 010b 	add.w	r1, r7, #11
 80012a6:	2201      	movs	r2, #1
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <mainSerialRead+0x74>)
 80012aa:	f006 fc02 	bl	8007ab2 <HAL_UART_Receive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <mainSerialRead+0x6a>
        while (app != '\n' && i < message_size - 1) {
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	2b0a      	cmp	r3, #10
 80012b8:	d006      	beq.n	80012c8 <mainSerialRead+0x6c>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8e3      	bhi.n	800128c <mainSerialRead+0x30>
                break; // Break loop if there's an error or no more data
            }
        }
    }
}
 80012c4:	e000      	b.n	80012c8 <mainSerialRead+0x6c>
                break; // Break loop if there's an error or no more data
 80012c6:	bf00      	nop
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000418 	.word	0x20000418

080012d4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2007      	movs	r0, #7
 80012e4:	f000 fa44 	bl	8001770 <bno055_writeData>
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4619      	mov	r1, r3
 80012fe:	203d      	movs	r0, #61	; 0x3d
 8001300:	f000 fa36 	bl	8001770 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800130a:	2013      	movs	r0, #19
 800130c:	f000 fa24 	bl	8001758 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001310:	e002      	b.n	8001318 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001312:	2007      	movs	r0, #7
 8001314:	f000 fa20 	bl	8001758 <bno055_delay>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffe3 	bl	80012f0 <bno055_setOperationMode>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}

0800132e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001332:	200c      	movs	r0, #12
 8001334:	f7ff ffdc 	bl	80012f0 <bno055_setOperationMode>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001340:	2120      	movs	r1, #32
 8001342:	203f      	movs	r0, #63	; 0x3f
 8001344:	f000 fa14 	bl	8001770 <bno055_writeData>
  bno055_delay(700);
 8001348:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800134c:	f000 fa04 	bl	8001758 <bno055_delay>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  bno055_reset();
 800135a:	f7ff ffef 	bl	800133c <bno055_reset>

  uint8_t id = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	2000      	movs	r0, #0
 800136a:	f000 faed 	bl	8001948 <bno055_readData>
  if (id != BNO055_ID) {
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2ba0      	cmp	r3, #160	; 0xa0
 8001372:	d004      	beq.n	800137e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4619      	mov	r1, r3
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <bno055_setup+0x4c>)
 800137a:	f008 fd8d 	bl	8009e98 <iprintf>
  }
  bno055_setPage(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ffa8 	bl	80012d4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001384:	2100      	movs	r1, #0
 8001386:	203f      	movs	r0, #63	; 0x3f
 8001388:	f000 f9f2 	bl	8001770 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800138c:	f7ff ffc8 	bl	8001320 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f000 f9e1 	bl	8001758 <bno055_delay>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	0800eb1c 	.word	0x0800eb1c

080013a4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80013a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a8:	b09e      	sub	sp, #120	; 0x78
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff8e 	bl	80012d4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80013b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d108      	bne.n	80013d2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80013c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c8:	2208      	movs	r2, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fabc 	bl	8001948 <bno055_readData>
 80013d0:	e007      	b.n	80013e2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80013d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013da:	2206      	movs	r2, #6
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fab3 	bl	8001948 <bno055_readData>

  double scale = 1;
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <bno055_getVector+0x270>)
 80013e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80013ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f0:	2b0e      	cmp	r3, #14
 80013f2:	d109      	bne.n	8001408 <bno055_getVector+0x64>
    scale = magScale;
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <bno055_getVector+0x274>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f88b 	bl	8000514 <__aeabi_ui2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001406:	e03e      	b.n	8001486 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800140c:	2b08      	cmp	r3, #8
 800140e:	d007      	beq.n	8001420 <bno055_getVector+0x7c>
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001414:	2b28      	cmp	r3, #40	; 0x28
 8001416:	d003      	beq.n	8001420 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	2b2e      	cmp	r3, #46	; 0x2e
 800141e:	d109      	bne.n	8001434 <bno055_getVector+0x90>
    scale = accelScale;
 8001420:	4b7e      	ldr	r3, [pc, #504]	; (800161c <bno055_getVector+0x278>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f875 	bl	8000514 <__aeabi_ui2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001432:	e028      	b.n	8001486 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001438:	2b14      	cmp	r3, #20
 800143a:	d109      	bne.n	8001450 <bno055_getVector+0xac>
    scale = angularRateScale;
 800143c:	4b78      	ldr	r3, [pc, #480]	; (8001620 <bno055_getVector+0x27c>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f867 	bl	8000514 <__aeabi_ui2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800144e:	e01a      	b.n	8001486 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001454:	2b1a      	cmp	r3, #26
 8001456:	d109      	bne.n	800146c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001458:	4b72      	ldr	r3, [pc, #456]	; (8001624 <bno055_getVector+0x280>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f859 	bl	8000514 <__aeabi_ui2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800146a:	e00c      	b.n	8001486 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800146c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001470:	2b20      	cmp	r3, #32
 8001472:	d108      	bne.n	8001486 <bno055_getVector+0xe2>
    scale = quaScale;
 8001474:	4b6c      	ldr	r3, [pc, #432]	; (8001628 <bno055_getVector+0x284>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f84b 	bl	8000514 <__aeabi_ui2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	2220      	movs	r2, #32
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f008 fe68 	bl	800a164 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001498:	2b20      	cmp	r3, #32
 800149a:	d150      	bne.n	800153e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800149c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f840 	bl	8000534 <__aeabi_i2d>
 80014b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014b8:	f7ff f9d0 	bl	800085c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f82c 	bl	8000534 <__aeabi_i2d>
 80014dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014e0:	f7ff f9bc 	bl	800085c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80014ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f818 	bl	8000534 <__aeabi_i2d>
 8001504:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001508:	f7ff f9a8 	bl	800085c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001514:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21b      	sxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f804 	bl	8000534 <__aeabi_i2d>
 800152c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001530:	f7ff f994 	bl	800085c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800153c:	e03b      	b.n	80015b6 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800153e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffef 	bl	8000534 <__aeabi_i2d>
 8001556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800155a:	f7ff f97f 	bl	800085c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001566:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21b      	sxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffdb 	bl	8000534 <__aeabi_i2d>
 800157e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001582:	f7ff f96b 	bl	800085c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800158e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffc7 	bl	8000534 <__aeabi_i2d>
 80015a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015aa:	f7ff f957 	bl	800085c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 80015b6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80015ba:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015da:	ec49 8b14 	vmov	d4, r8, r9
 80015de:	ec45 4b15 	vmov	d5, r4, r5
 80015e2:	ec41 0b16 	vmov	d6, r0, r1
 80015e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80015ea:	eeb0 0a44 	vmov.f32	s0, s8
 80015ee:	eef0 0a64 	vmov.f32	s1, s9
 80015f2:	eeb0 1a45 	vmov.f32	s2, s10
 80015f6:	eef0 1a65 	vmov.f32	s3, s11
 80015fa:	eeb0 2a46 	vmov.f32	s4, s12
 80015fe:	eef0 2a66 	vmov.f32	s5, s13
 8001602:	eeb0 3a47 	vmov.f32	s6, s14
 8001606:	eef0 3a67 	vmov.f32	s7, s15
 800160a:	3778      	adds	r7, #120	; 0x78
 800160c:	46bd      	mov	sp, r7
 800160e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001612:	bf00      	nop
 8001614:	3ff00000 	.word	0x3ff00000
 8001618:	20000006 	.word	0x20000006
 800161c:	20000000 	.word	0x20000000
 8001620:	20000002 	.word	0x20000002
 8001624:	20000004 	.word	0x20000004
 8001628:	20000008 	.word	0x20000008

0800162c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 800162c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001630:	b090      	sub	sp, #64	; 0x40
 8001632:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001634:	2014      	movs	r0, #20
 8001636:	f7ff feb5 	bl	80013a4 <bno055_getVector>
 800163a:	eeb0 4a40 	vmov.f32	s8, s0
 800163e:	eef0 4a60 	vmov.f32	s9, s1
 8001642:	eeb0 5a41 	vmov.f32	s10, s2
 8001646:	eef0 5a61 	vmov.f32	s11, s3
 800164a:	eeb0 6a42 	vmov.f32	s12, s4
 800164e:	eef0 6a62 	vmov.f32	s13, s5
 8001652:	eeb0 7a43 	vmov.f32	s14, s6
 8001656:	eef0 7a63 	vmov.f32	s15, s7
 800165a:	ed87 4b08 	vstr	d4, [r7, #32]
 800165e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001662:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001666:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800166a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800166e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001672:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001676:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800167a:	ec49 8b14 	vmov	d4, r8, r9
 800167e:	ec45 4b15 	vmov	d5, r4, r5
 8001682:	ec41 0b16 	vmov	d6, r0, r1
 8001686:	ec43 2b17 	vmov	d7, r2, r3
}
 800168a:	eeb0 0a44 	vmov.f32	s0, s8
 800168e:	eef0 0a64 	vmov.f32	s1, s9
 8001692:	eeb0 1a45 	vmov.f32	s2, s10
 8001696:	eef0 1a65 	vmov.f32	s3, s11
 800169a:	eeb0 2a46 	vmov.f32	s4, s12
 800169e:	eef0 2a66 	vmov.f32	s5, s13
 80016a2:	eeb0 3a47 	vmov.f32	s6, s14
 80016a6:	eef0 3a67 	vmov.f32	s7, s15
 80016aa:	3740      	adds	r7, #64	; 0x40
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016b2 <bno055_getVectorGravity>:
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 80016b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b6:	b090      	sub	sp, #64	; 0x40
 80016b8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 80016ba:	202e      	movs	r0, #46	; 0x2e
 80016bc:	f7ff fe72 	bl	80013a4 <bno055_getVector>
 80016c0:	eeb0 4a40 	vmov.f32	s8, s0
 80016c4:	eef0 4a60 	vmov.f32	s9, s1
 80016c8:	eeb0 5a41 	vmov.f32	s10, s2
 80016cc:	eef0 5a61 	vmov.f32	s11, s3
 80016d0:	eeb0 6a42 	vmov.f32	s12, s4
 80016d4:	eef0 6a62 	vmov.f32	s13, s5
 80016d8:	eeb0 7a43 	vmov.f32	s14, s6
 80016dc:	eef0 7a63 	vmov.f32	s15, s7
 80016e0:	ed87 4b08 	vstr	d4, [r7, #32]
 80016e4:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80016e8:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80016ec:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80016f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016f4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80016f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001700:	ec49 8b14 	vmov	d4, r8, r9
 8001704:	ec45 4b15 	vmov	d5, r4, r5
 8001708:	ec41 0b16 	vmov	d6, r0, r1
 800170c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001710:	eeb0 0a44 	vmov.f32	s0, s8
 8001714:	eef0 0a64 	vmov.f32	s1, s9
 8001718:	eeb0 1a45 	vmov.f32	s2, s10
 800171c:	eef0 1a65 	vmov.f32	s3, s11
 8001720:	eeb0 2a46 	vmov.f32	s4, s12
 8001724:	eef0 2a66 	vmov.f32	s5, s13
 8001728:	eeb0 3a47 	vmov.f32	s6, s14
 800172c:	eef0 3a67 	vmov.f32	s7, s15
 8001730:	3740      	adds	r7, #64	; 0x40
 8001732:	46bd      	mov	sp, r7
 8001734:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001738 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <bno055_assignI2C+0x1c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000214 	.word	0x20000214

08001758 <bno055_delay>:

void bno055_delay(int time) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fc86 	bl	8004074 <HAL_Delay>
#endif
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af02      	add	r7, sp, #8
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	733b      	strb	r3, [r7, #12]
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <bno055_writeData+0x184>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	230a      	movs	r3, #10
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2302      	movs	r3, #2
 8001796:	2150      	movs	r1, #80	; 0x50
 8001798:	f003 fb30 	bl	8004dfc <HAL_I2C_Master_Transmit>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a0 	beq.w	80018e8 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d103      	bne.n	80017b6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80017ae:	4852      	ldr	r0, [pc, #328]	; (80018f8 <bno055_writeData+0x188>)
 80017b0:	f008 fbd8 	bl	8009f64 <puts>
 80017b4:	e012      	b.n	80017dc <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d103      	bne.n	80017c4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80017bc:	484f      	ldr	r0, [pc, #316]	; (80018fc <bno055_writeData+0x18c>)
 80017be:	f008 fbd1 	bl	8009f64 <puts>
 80017c2:	e00b      	b.n	80017dc <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d103      	bne.n	80017d2 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80017ca:	484d      	ldr	r0, [pc, #308]	; (8001900 <bno055_writeData+0x190>)
 80017cc:	f008 fbca 	bl	8009f64 <puts>
 80017d0:	e004      	b.n	80017dc <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	4619      	mov	r1, r3
 80017d6:	484b      	ldr	r0, [pc, #300]	; (8001904 <bno055_writeData+0x194>)
 80017d8:	f008 fb5e 	bl	8009e98 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <bno055_writeData+0x184>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 ff6b 	bl	80056bc <HAL_I2C_GetError>
 80017e6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d07e      	beq.n	80018ec <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d103      	bne.n	80017fc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80017f4:	4844      	ldr	r0, [pc, #272]	; (8001908 <bno055_writeData+0x198>)
 80017f6:	f008 fbb5 	bl	8009f64 <puts>
 80017fa:	e021      	b.n	8001840 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001802:	4842      	ldr	r0, [pc, #264]	; (800190c <bno055_writeData+0x19c>)
 8001804:	f008 fbae 	bl	8009f64 <puts>
 8001808:	e01a      	b.n	8001840 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d103      	bne.n	8001818 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001810:	483f      	ldr	r0, [pc, #252]	; (8001910 <bno055_writeData+0x1a0>)
 8001812:	f008 fba7 	bl	8009f64 <puts>
 8001816:	e013      	b.n	8001840 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b08      	cmp	r3, #8
 800181c:	d103      	bne.n	8001826 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800181e:	483d      	ldr	r0, [pc, #244]	; (8001914 <bno055_writeData+0x1a4>)
 8001820:	f008 fba0 	bl	8009f64 <puts>
 8001824:	e00c      	b.n	8001840 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b10      	cmp	r3, #16
 800182a:	d103      	bne.n	8001834 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800182c:	483a      	ldr	r0, [pc, #232]	; (8001918 <bno055_writeData+0x1a8>)
 800182e:	f008 fb99 	bl	8009f64 <puts>
 8001832:	e005      	b.n	8001840 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b20      	cmp	r3, #32
 8001838:	d102      	bne.n	8001840 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800183a:	4838      	ldr	r0, [pc, #224]	; (800191c <bno055_writeData+0x1ac>)
 800183c:	f008 fb92 	bl	8009f64 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <bno055_writeData+0x184>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f003 ff2b 	bl	80056a0 <HAL_I2C_GetState>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001854:	4832      	ldr	r0, [pc, #200]	; (8001920 <bno055_writeData+0x1b0>)
 8001856:	f008 fb85 	bl	8009f64 <puts>
 800185a:	e048      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b20      	cmp	r3, #32
 8001860:	d103      	bne.n	800186a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001862:	482f      	ldr	r0, [pc, #188]	; (8001920 <bno055_writeData+0x1b0>)
 8001864:	f008 fb7e 	bl	8009f64 <puts>
 8001868:	e041      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b24      	cmp	r3, #36	; 0x24
 800186e:	d103      	bne.n	8001878 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <bno055_writeData+0x1b4>)
 8001872:	f008 fb77 	bl	8009f64 <puts>
 8001876:	e03a      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b21      	cmp	r3, #33	; 0x21
 800187c:	d103      	bne.n	8001886 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800187e:	482a      	ldr	r0, [pc, #168]	; (8001928 <bno055_writeData+0x1b8>)
 8001880:	f008 fb70 	bl	8009f64 <puts>
 8001884:	e033      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b22      	cmp	r3, #34	; 0x22
 800188a:	d103      	bne.n	8001894 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800188c:	4827      	ldr	r0, [pc, #156]	; (800192c <bno055_writeData+0x1bc>)
 800188e:	f008 fb69 	bl	8009f64 <puts>
 8001892:	e02c      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b28      	cmp	r3, #40	; 0x28
 8001898:	d103      	bne.n	80018a2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800189a:	4825      	ldr	r0, [pc, #148]	; (8001930 <bno055_writeData+0x1c0>)
 800189c:	f008 fb62 	bl	8009f64 <puts>
 80018a0:	e025      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b29      	cmp	r3, #41	; 0x29
 80018a6:	d103      	bne.n	80018b0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80018a8:	4822      	ldr	r0, [pc, #136]	; (8001934 <bno055_writeData+0x1c4>)
 80018aa:	f008 fb5b 	bl	8009f64 <puts>
 80018ae:	e01e      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b2a      	cmp	r3, #42	; 0x2a
 80018b4:	d103      	bne.n	80018be <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80018b6:	4820      	ldr	r0, [pc, #128]	; (8001938 <bno055_writeData+0x1c8>)
 80018b8:	f008 fb54 	bl	8009f64 <puts>
 80018bc:	e017      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b60      	cmp	r3, #96	; 0x60
 80018c2:	d103      	bne.n	80018cc <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <bno055_writeData+0x1cc>)
 80018c6:	f008 fb4d 	bl	8009f64 <puts>
 80018ca:	e010      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2ba0      	cmp	r3, #160	; 0xa0
 80018d0:	d103      	bne.n	80018da <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80018d2:	481b      	ldr	r0, [pc, #108]	; (8001940 <bno055_writeData+0x1d0>)
 80018d4:	f008 fb46 	bl	8009f64 <puts>
 80018d8:	e009      	b.n	80018ee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2be0      	cmp	r3, #224	; 0xe0
 80018de:	d106      	bne.n	80018ee <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80018e0:	4818      	ldr	r0, [pc, #96]	; (8001944 <bno055_writeData+0x1d4>)
 80018e2:	f008 fb3f 	bl	8009f64 <puts>
 80018e6:	e002      	b.n	80018ee <bno055_writeData+0x17e>
    return;
 80018e8:	bf00      	nop
 80018ea:	e000      	b.n	80018ee <bno055_writeData+0x17e>
    return;
 80018ec:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000214 	.word	0x20000214
 80018f8:	0800eb58 	.word	0x0800eb58
 80018fc:	0800eb7c 	.word	0x0800eb7c
 8001900:	0800eba4 	.word	0x0800eba4
 8001904:	0800ebc8 	.word	0x0800ebc8
 8001908:	0800ebe0 	.word	0x0800ebe0
 800190c:	0800ebf4 	.word	0x0800ebf4
 8001910:	0800ec08 	.word	0x0800ec08
 8001914:	0800ec1c 	.word	0x0800ec1c
 8001918:	0800ec30 	.word	0x0800ec30
 800191c:	0800ec44 	.word	0x0800ec44
 8001920:	0800ec5c 	.word	0x0800ec5c
 8001924:	0800ec74 	.word	0x0800ec74
 8001928:	0800ec88 	.word	0x0800ec88
 800192c:	0800eca0 	.word	0x0800eca0
 8001930:	0800ecb8 	.word	0x0800ecb8
 8001934:	0800ecd0 	.word	0x0800ecd0
 8001938:	0800ecf0 	.word	0x0800ecf0
 800193c:	0800ed10 	.word	0x0800ed10
 8001940:	0800ed28 	.word	0x0800ed28
 8001944:	0800ed40 	.word	0x0800ed40

08001948 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af02      	add	r7, sp, #8
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	4613      	mov	r3, r2
 8001956:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <bno055_readData+0x40>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	1dfa      	adds	r2, r7, #7
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	2150      	movs	r1, #80	; 0x50
 8001966:	f003 fa49 	bl	8004dfc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <bno055_readData+0x40>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	b29b      	uxth	r3, r3
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	9200      	str	r2, [sp, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	2150      	movs	r1, #80	; 0x50
 800197a:	f003 fb3d 	bl	8004ff8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000214 	.word	0x20000214

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f002 fafe 	bl	8003f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f9b6 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 fc5c 	bl	8002254 <MX_GPIO_Init>
  MX_I2C1_Init();
 800199c:	f000 fa70 	bl	8001e80 <MX_I2C1_Init>
  MX_TIM1_Init();
 80019a0:	f000 fa9c 	bl	8001edc <MX_TIM1_Init>
  MX_TIM10_Init();
 80019a4:	f000 fb90 	bl	80020c8 <MX_TIM10_Init>
  MX_TIM11_Init();
 80019a8:	f000 fbdc 	bl	8002164 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80019ac:	f000 fbfe 	bl	80021ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80019b0:	f000 fb36 	bl	8002020 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80019b4:	f000 fc24 	bl	8002200 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80019b8:	f000 fa10 	bl	8001ddc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019bc:	2100      	movs	r1, #0
 80019be:	48ab      	ldr	r0, [pc, #684]	; (8001c6c <main+0x2e0>)
 80019c0:	f004 ff5a 	bl	8006878 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	48aa      	ldr	r0, [pc, #680]	; (8001c70 <main+0x2e4>)
 80019c8:	f004 ff56 	bl	8006878 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80019cc:	213c      	movs	r1, #60	; 0x3c
 80019ce:	48a9      	ldr	r0, [pc, #676]	; (8001c74 <main+0x2e8>)
 80019d0:	f005 f8a8 	bl	8006b24 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 80019d4:	48a8      	ldr	r0, [pc, #672]	; (8001c78 <main+0x2ec>)
 80019d6:	f004 fe93 	bl	8006700 <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 80019da:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8001c7c <main+0x2f0>
 80019de:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8001c80 <main+0x2f4>
 80019e2:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8001c7c <main+0x2f0>
 80019e6:	48a7      	ldr	r0, [pc, #668]	; (8001c84 <main+0x2f8>)
 80019e8:	f7ff fb48 	bl	800107c <init_PID>
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0);
 80019ec:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8001c88 <main+0x2fc>
 80019f0:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8001c8c <main+0x300>
 80019f4:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8001c90 <main+0x304>
 80019f8:	48a2      	ldr	r0, [pc, #648]	; (8001c84 <main+0x2f8>)
 80019fa:	f7ff fb60 	bl	80010be <tune_PID>

	init_PID(&pid_traction_RWD, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 80019fe:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8001c7c <main+0x2f0>
 8001a02:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8001c80 <main+0x2f4>
 8001a06:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001c7c <main+0x2f0>
 8001a0a:	48a2      	ldr	r0, [pc, #648]	; (8001c94 <main+0x308>)
 8001a0c:	f7ff fb36 	bl	800107c <init_PID>
	tune_PID(&pid_traction_RWD, KP_TRACTION_RWD, KI_TRACTION_RWD, 0);
 8001a10:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8001c88 <main+0x2fc>
 8001a14:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8001c98 <main+0x30c>
 8001a18:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8001c9c <main+0x310>
 8001a1c:	489d      	ldr	r0, [pc, #628]	; (8001c94 <main+0x308>)
 8001a1e:	f7ff fb4e 	bl	80010be <tune_PID>

	init_PID(&pid_traction_DESC, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 8001a22:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8001c7c <main+0x2f0>
 8001a26:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001c80 <main+0x2f4>
 8001a2a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001c7c <main+0x2f0>
 8001a2e:	489c      	ldr	r0, [pc, #624]	; (8001ca0 <main+0x314>)
 8001a30:	f7ff fb24 	bl	800107c <init_PID>
	tune_PID(&pid_traction_DESC, KP_TRACTION_DESC, KI_TRACTION_DESC, 0);
 8001a34:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8001c88 <main+0x2fc>
 8001a38:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8001ca4 <main+0x318>
 8001a3c:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8001ca8 <main+0x31c>
 8001a40:	4897      	ldr	r0, [pc, #604]	; (8001ca0 <main+0x314>)
 8001a42:	f7ff fb3c 	bl	80010be <tune_PID>

	//PID steering per le curve
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING);
 8001a46:	ed9f 1a99 	vldr	s2, [pc, #612]	; 8001cac <main+0x320>
 8001a4a:	eddf 0a99 	vldr	s1, [pc, #612]	; 8001cb0 <main+0x324>
 8001a4e:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8001c7c <main+0x2f0>
 8001a52:	4898      	ldr	r0, [pc, #608]	; (8001cb4 <main+0x328>)
 8001a54:	f7ff fb12 	bl	800107c <init_PID>
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0);
 8001a58:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 8001c88 <main+0x2fc>
 8001a5c:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001cb8 <main+0x32c>
 8001a60:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001a64:	4893      	ldr	r0, [pc, #588]	; (8001cb4 <main+0x328>)
 8001a66:	f7ff fb2a 	bl	80010be <tune_PID>
	//PID steering per le curve
	//init_PID(&pid_steering_STR, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING);
	//tune_PID(&pid_steering_STR, KP_STEERING_STR, KI_STEERING_STR, 0);

	// IMU BNO055 config
	HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1, 5, 1000);
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	2205      	movs	r2, #5
 8001a70:	2150      	movs	r1, #80	; 0x50
 8001a72:	4892      	ldr	r0, [pc, #584]	; (8001cbc <main+0x330>)
 8001a74:	f003 fce6 	bl	8005444 <HAL_I2C_IsDeviceReady>
	bno055_assignI2C(&hi2c1);
 8001a78:	4890      	ldr	r0, [pc, #576]	; (8001cbc <main+0x330>)
 8001a7a:	f7ff fe5d 	bl	8001738 <bno055_assignI2C>
	bno055_setup();
 8001a7e:	f7ff fc69 	bl	8001354 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001a82:	f7ff fc54 	bl	800132e <bno055_setOperationModeNDOF>

	servo_motor(0);
 8001a86:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001c88 <main+0x2fc>
 8001a8a:	f001 fe85 	bl	8003798 <servo_motor>
	data.flag = 0;
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <main+0x334>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
	flag_serial_read = 1;
 8001a94:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <main+0x338>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

	printf("Initialization Completed!\r\n");
 8001a9a:	488b      	ldr	r0, [pc, #556]	; (8001cc8 <main+0x33c>)
 8001a9c:	f008 fa62 	bl	8009f64 <puts>
		//-------------------------------------------------------------


		//-------------------------------------------------------------
		//DETECT TYPE OF PRESS
		max_flag_button = 2;
 8001aa0:	4b8a      	ldr	r3, [pc, #552]	; (8001ccc <main+0x340>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]

		//GESTIONE PULSANTE
		switch(flag_button){
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <main+0x344>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d87c      	bhi.n	8001baa <main+0x21e>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <main+0x12c>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001acd 	.word	0x08001acd
 8001abc:	08001adb 	.word	0x08001adb
 8001ac0:	08001aed 	.word	0x08001aed
 8001ac4:	08001b55 	.word	0x08001b55
 8001ac8:	08001b65 	.word	0x08001b65
		//Calibrazione
		case -1:
			data.flag = -1;
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <main+0x334>)
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	601a      	str	r2, [r3, #0]
			ProceduraCalibrazione();
 8001ad4:	f001 fc1a 	bl	800330c <ProceduraCalibrazione>
			break;
 8001ad8:	e067      	b.n	8001baa <main+0x21e>
		//Idle
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2120      	movs	r1, #32
 8001ade:	487d      	ldr	r0, [pc, #500]	; (8001cd4 <main+0x348>)
 8001ae0:	f002 fffc 	bl	8004adc <HAL_GPIO_WritePin>
			data.flag= 0;
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <main+0x334>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
			break;
 8001aea:	e05e      	b.n	8001baa <main+0x21e>
		case 1:
			if(flag_discesa){
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <main+0x34c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d104      	bne.n	8001afe <main+0x172>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			} else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2120      	movs	r1, #32
 8001af8:	4876      	ldr	r0, [pc, #472]	; (8001cd4 <main+0x348>)
 8001afa:	f002 ffef 	bl	8004adc <HAL_GPIO_WritePin>
			}

			data.flag = 1;
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <main+0x334>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

			data.linear_speed_ref_m_s = 0.00; //[m/s]
 8001b04:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <main+0x334>)
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
			data.curvature_radius_ref_m = 10; // [m]
 8001b0c:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <main+0x334>)
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <main+0x350>)
 8001b10:	605a      	str	r2, [r3, #4]

			//Manovra
			data.dy = 0.35; //[m]
 8001b12:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <main+0x334>)
 8001b14:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <main+0x354>)
 8001b16:	60da      	str	r2, [r3, #12]
			data.dx = 1.00; //[m]
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <main+0x334>)
 8001b1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b1e:	611a      	str	r2, [r3, #16]

			//Rallentamento
			data.distanza_frenata = 0; //[m]
 8001b20:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <main+0x334>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
			data.old_linear_speed_ref_m_s = 0; //[m]
 8001b28:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <main+0x334>)
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]

			if(cnt_manovre == 100){
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <main+0x358>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001ce8 <main+0x35c>
 8001b3a:	eef4 7a47 	vcmp.f32	s15, s14
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d131      	bne.n	8001ba8 <main+0x21c>
				cnt_manovre = 0;
 8001b44:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <main+0x358>)
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
				flag_button = 3;
 8001b4c:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <main+0x344>)
 8001b4e:	2203      	movs	r2, #3
 8001b50:	601a      	str	r2, [r3, #0]
			}
			break;
 8001b52:	e029      	b.n	8001ba8 <main+0x21c>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2120      	movs	r1, #32
 8001b58:	485e      	ldr	r0, [pc, #376]	; (8001cd4 <main+0x348>)
 8001b5a:	f002 ffbf 	bl	8004adc <HAL_GPIO_WritePin>
			lettura_seriale();
 8001b5e:	f001 fb79 	bl	8003254 <lettura_seriale>
			//PrintState();

			break;
 8001b62:	e022      	b.n	8001baa <main+0x21e>
		case 3:
			if(flag_discesa){
 8001b64:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <main+0x34c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d104      	bne.n	8001b76 <main+0x1ea>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			} else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2120      	movs	r1, #32
 8001b70:	4858      	ldr	r0, [pc, #352]	; (8001cd4 <main+0x348>)
 8001b72:	f002 ffb3 	bl	8004adc <HAL_GPIO_WritePin>
			}

			data.flag = 1;
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <main+0x334>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

			data.linear_speed_ref_m_s = 0.20; //[m/s]
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <main+0x334>)
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <main+0x360>)
 8001b80:	609a      	str	r2, [r3, #8]
			data.curvature_radius_ref_m = 1.05; // [m]
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <main+0x334>)
 8001b84:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <main+0x364>)
 8001b86:	605a      	str	r2, [r3, #4]

			//Manovra
			data.dy = 0.35; //[m]
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <main+0x334>)
 8001b8a:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <main+0x354>)
 8001b8c:	60da      	str	r2, [r3, #12]
			data.dx = 1.00; //[m]
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <main+0x334>)
 8001b90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b94:	611a      	str	r2, [r3, #16]

			//Rallentamento
			data.distanza_frenata = 0; //[m]
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <main+0x334>)
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
			data.old_linear_speed_ref_m_s = 0; //[m]
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <main+0x334>)
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
			break;
 8001ba6:	e000      	b.n	8001baa <main+0x21e>
			break;
 8001ba8:	bf00      	nop
		//-------------------------------------------------------------

		//-------------------------------------------------------------

		//CONTROLLO
		if (data.flag > 0) {
 8001baa:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <main+0x334>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	dd4d      	ble.n	8001c4e <main+0x2c2>
			if (flag_10ms == 1) { //Car enabled from user
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <main+0x368>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f47f af72 	bne.w	8001aa0 <main+0x114>
				flag_10ms = 0;
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <main+0x368>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

				//Measure speed with encoder
				lettura_vel_encoder();
 8001bc2:	f000 fc35 	bl	8002430 <lettura_vel_encoder>

				//TRACTION control
				switch (data.flag){
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <main+0x334>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	dc02      	bgt.n	8001bd4 <main+0x248>
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	dc03      	bgt.n	8001bda <main+0x24e>
 8001bd2:	e01c      	b.n	8001c0e <main+0x282>
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d012      	beq.n	8001bfe <main+0x272>
 8001bd8:	e019      	b.n	8001c0e <main+0x282>
				case 1:
				case 2:
				case 3:
					controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <main+0x36c>)
 8001bdc:	edd3 6a05 	vldr	s13, [r3, #20]
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <main+0x334>)
 8001be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <main+0x370>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001bf0:	eef0 0a46 	vmov.f32	s1, s12
 8001bf4:	eeb0 0a66 	vmov.f32	s0, s13
 8001bf8:	f000 fd06 	bl	8002608 <controllo_trazione>
					break;
 8001bfc:	e007      	b.n	8001c0e <main+0x282>
				case 5:
					cambio_velocita(data.distanza_frenata);
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <main+0x334>)
 8001c00:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	f001 f9fe 	bl	8003008 <cambio_velocita>
					break;
 8001c0c:	bf00      	nop
				}

				//-------------------------------------------------------------

				get_yaw_rate();
 8001c0e:	f000 fc7b 	bl	8002508 <get_yaw_rate>
				get_inclination();
 8001c12:	f000 fcbd 	bl	8002590 <get_inclination>

				//STEERING control
				switch (data.flag){
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <main+0x334>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	f63f af3f 	bhi.w	8001aa0 <main+0x114>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <main+0x29c>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c49 	.word	0x08001c49
 8001c2c:	08001c49 	.word	0x08001c49
 8001c30:	08001c3d 	.word	0x08001c3d
 8001c34:	08001c43 	.word	0x08001c43
 8001c38:	08001c49 	.word	0x08001c49
				case 3:
					cambio_corsia();
 8001c3c:	f001 f8f4 	bl	8002e28 <cambio_corsia>
					break;
 8001c40:	e013      	b.n	8001c6a <main+0x2de>
				case 4:
					parcheggio();
 8001c42:	f000 fdd9 	bl	80027f8 <parcheggio>
					break;
 8001c46:	e010      	b.n	8001c6a <main+0x2de>
				case 1:
				case 2:
				case 5:
					lane_keeping();
 8001c48:	f000 fd34 	bl	80026b4 <lane_keeping>
					break;
 8001c4c:	e00d      	b.n	8001c6a <main+0x2de>
				}
			//printf("%f;%f\r\n", u_trazione, vehicleState.linear_speed_m_s);
		}
	}
	else if (data.flag == 0)
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <main+0x334>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f af24 	bne.w	8001aa0 <main+0x114>
	{
		BL_set_PWM(NEUTRAL_PWM);
 8001c58:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001d00 <main+0x374>
 8001c5c:	f7ff f9f0 	bl	8001040 <BL_set_PWM>
		servo_motor(0);
 8001c60:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001c88 <main+0x2fc>
 8001c64:	f001 fd98 	bl	8003798 <servo_motor>
 8001c68:	e71a      	b.n	8001aa0 <main+0x114>
		max_flag_button = 2;
 8001c6a:	e719      	b.n	8001aa0 <main+0x114>
 8001c6c:	200002b4 	.word	0x200002b4
 8001c70:	20000344 	.word	0x20000344
 8001c74:	200002fc 	.word	0x200002fc
 8001c78:	2000038c 	.word	0x2000038c
 8001c7c:	3c23d70a 	.word	0x3c23d70a
 8001c80:	3f7d70a4 	.word	0x3f7d70a4
 8001c84:	200004b8 	.word	0x200004b8
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	3a83126f 	.word	0x3a83126f
 8001c90:	3593a3b6 	.word	0x3593a3b6
 8001c94:	200004d8 	.word	0x200004d8
 8001c98:	3983126f 	.word	0x3983126f
 8001c9c:	339652e8 	.word	0x339652e8
 8001ca0:	200004f8 	.word	0x200004f8
 8001ca4:	3af9096c 	.word	0x3af9096c
 8001ca8:	332bcc77 	.word	0x332bcc77
 8001cac:	c2100000 	.word	0xc2100000
 8001cb0:	42100000 	.word	0x42100000
 8001cb4:	20000518 	.word	0x20000518
 8001cb8:	437a0000 	.word	0x437a0000
 8001cbc:	20000260 	.word	0x20000260
 8001cc0:	2000045c 	.word	0x2000045c
 8001cc4:	2000054c 	.word	0x2000054c
 8001cc8:	0800ed58 	.word	0x0800ed58
 8001ccc:	20000540 	.word	0x20000540
 8001cd0:	20000544 	.word	0x20000544
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	20000568 	.word	0x20000568
 8001cdc:	41200000 	.word	0x41200000
 8001ce0:	3eb33333 	.word	0x3eb33333
 8001ce4:	20000554 	.word	0x20000554
 8001ce8:	42c80000 	.word	0x42c80000
 8001cec:	3e4ccccd 	.word	0x3e4ccccd
 8001cf0:	3f866666 	.word	0x3f866666
 8001cf4:	20000548 	.word	0x20000548
 8001cf8:	20000478 	.word	0x20000478
 8001cfc:	2000000c 	.word	0x2000000c
 8001d00:	3d98b71c 	.word	0x3d98b71c

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	; 0x50
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	2230      	movs	r2, #48	; 0x30
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 fa26 	bl	800a164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <SystemClock_Config+0xd0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <SystemClock_Config+0xd0>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <SystemClock_Config+0xd0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <SystemClock_Config+0xd4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <SystemClock_Config+0xd4>)
 8001d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <SystemClock_Config+0xd4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d82:	2304      	movs	r3, #4
 8001d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d86:	2307      	movs	r3, #7
 8001d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 ffce 	bl	8005d30 <HAL_RCC_OscConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d9a:	f001 fb57 	bl	800344c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9e:	230f      	movs	r3, #15
 8001da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da2:	2302      	movs	r3, #2
 8001da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2102      	movs	r1, #2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fa30 	bl	8006220 <HAL_RCC_ClockConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dc6:	f001 fb41 	bl	800344c <Error_Handler>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3750      	adds	r7, #80	; 0x50
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000

08001ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de2:	463b      	mov	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <MX_ADC1_Init+0x9c>)
 8001df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <MX_ADC1_Init+0xa0>)
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e3e:	f002 f93d 	bl	80040bc <HAL_ADC_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e48:	f001 fb00 	bl	800344c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e4c:	230b      	movs	r3, #11
 8001e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e5e:	f002 f971 	bl	8004144 <HAL_ADC_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e68:	f001 faf0 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000218 	.word	0x20000218
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	0f000001 	.word	0x0f000001

08001e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <MX_I2C1_Init+0x54>)
 8001e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <MX_I2C1_Init+0x58>)
 8001e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_I2C1_Init+0x50>)
 8001ebe:	f002 fe59 	bl	8004b74 <HAL_I2C_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ec8:	f001 fac0 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000260 	.word	0x20000260
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	000186a0 	.word	0x000186a0

08001edc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b096      	sub	sp, #88	; 0x58
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	615a      	str	r2, [r3, #20]
 8001f0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2220      	movs	r2, #32
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f008 f925 	bl	800a164 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	; (800201c <MX_TIM1_Init+0x140>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1681-1;
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f22:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001f26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1001-1;
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b35      	ldr	r3, [pc, #212]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f48:	4833      	ldr	r0, [pc, #204]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f4a:	f004 fb89 	bl	8006660 <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f54:	f001 fa7a 	bl	800344c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f62:	4619      	mov	r1, r3
 8001f64:	482c      	ldr	r0, [pc, #176]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f66:	f005 f835 	bl	8006fd4 <HAL_TIM_ConfigClockSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f70:	f001 fa6c 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f74:	4828      	ldr	r0, [pc, #160]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f76:	f004 fc25 	bl	80067c4 <HAL_TIM_PWM_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f80:	f001 fa64 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f90:	4619      	mov	r1, r3
 8001f92:	4821      	ldr	r0, [pc, #132]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001f94:	f005 fbda 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001f9e:	f001 fa55 	bl	800344c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa2:	2360      	movs	r3, #96	; 0x60
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001fc8:	f004 ff42 	bl	8006e50 <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001fd2:	f001 fa3b 	bl	800344c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM1_Init+0x13c>)
 8001ffa:	f005 fc15 	bl	8007828 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002004:	f001 fa22 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM1_Init+0x13c>)
 800200a:	f001 fd8f 	bl	8003b2c <HAL_TIM_MspPostInit>

}
 800200e:	bf00      	nop
 8002010:	3758      	adds	r7, #88	; 0x58
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002b4 	.word	0x200002b4
 800201c:	40010000 	.word	0x40010000

08002020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f008 f898 	bl	800a164 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_TIM2_Init+0xa4>)
 800203e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_TIM2_Init+0xa4>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_TIM2_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_TIM2_Init+0xa4>)
 8002052:	f06f 0201 	mvn.w	r2, #1
 8002056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_TIM2_Init+0xa4>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <MX_TIM2_Init+0xa4>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002064:	2303      	movs	r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_TIM2_Init+0xa4>)
 8002090:	f004 fca2 	bl	80069d8 <HAL_TIM_Encoder_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800209a:	f001 f9d7 	bl	800344c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_TIM2_Init+0xa4>)
 80020ac:	f005 fb4e 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020b6:	f001 f9c9 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002fc 	.word	0x200002fc

080020c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_TIM10_Init+0x94>)
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <MX_TIM10_Init+0x98>)
 80020e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM10_Init+0x94>)
 80020e8:	f240 3247 	movw	r2, #839	; 0x347
 80020ec:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_TIM10_Init+0x94>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000-1;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <MX_TIM10_Init+0x94>)
 80020f6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80020fa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_TIM10_Init+0x94>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_TIM10_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002108:	4814      	ldr	r0, [pc, #80]	; (800215c <MX_TIM10_Init+0x94>)
 800210a:	f004 faa9 	bl	8006660 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002114:	f001 f99a 	bl	800344c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002118:	4810      	ldr	r0, [pc, #64]	; (800215c <MX_TIM10_Init+0x94>)
 800211a:	f004 fb53 	bl	80067c4 <HAL_TIM_PWM_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002124:	f001 f992 	bl	800344c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002128:	2360      	movs	r3, #96	; 0x60
 800212a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM10_Init+0x94>)
 8002140:	f004 fe86 	bl	8006e50 <HAL_TIM_PWM_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800214a:	f001 f97f 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM10_Init+0x94>)
 8002150:	f001 fcec 	bl	8003b2c <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000344 	.word	0x20000344
 8002160:	40014400 	.word	0x40014400

08002164 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_TIM11_Init+0x40>)
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <MX_TIM11_Init+0x44>)
 800216c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 120-1;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <MX_TIM11_Init+0x40>)
 8002170:	2277      	movs	r2, #119	; 0x77
 8002172:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_TIM11_Init+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7000-1;
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_TIM11_Init+0x40>)
 800217c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002180:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_TIM11_Init+0x40>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_TIM11_Init+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_TIM11_Init+0x40>)
 8002190:	f004 fa66 	bl	8006660 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800219a:	f001 f957 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000038c 	.word	0x2000038c
 80021a8:	40014800 	.word	0x40014800

080021ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART2_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f005 fb86 	bl	80078f4 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f001 f92d 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200003d4 	.word	0x200003d4
 80021fc:	40004400 	.word	0x40004400

08002200 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_USART6_UART_Init+0x50>)
 8002208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002238:	f005 fb5c 	bl	80078f4 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002242:	f001 f903 	bl	800344c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000418 	.word	0x20000418
 8002250:	40011400 	.word	0x40011400

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b42      	ldr	r3, [pc, #264]	; (8002378 <MX_GPIO_Init+0x124>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a41      	ldr	r2, [pc, #260]	; (8002378 <MX_GPIO_Init+0x124>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <MX_GPIO_Init+0x124>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <MX_GPIO_Init+0x124>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <MX_GPIO_Init+0x124>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <MX_GPIO_Init+0x124>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <MX_GPIO_Init+0x124>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a33      	ldr	r2, [pc, #204]	; (8002378 <MX_GPIO_Init+0x124>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <MX_GPIO_Init+0x124>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <MX_GPIO_Init+0x124>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <MX_GPIO_Init+0x124>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <MX_GPIO_Init+0x124>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	4827      	ldr	r0, [pc, #156]	; (800237c <MX_GPIO_Init+0x128>)
 80022e0:	f002 fbfc 	bl	8004adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	4825      	ldr	r0, [pc, #148]	; (8002380 <MX_GPIO_Init+0x12c>)
 80022ea:	f002 fbf7 	bl	8004adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	481d      	ldr	r0, [pc, #116]	; (800237c <MX_GPIO_Init+0x128>)
 8002306:	f002 fa4d 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800230a:	2301      	movs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_GPIO_Init+0x128>)
 8002322:	f002 fa3f 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002326:	2320      	movs	r3, #32
 8002328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4810      	ldr	r0, [pc, #64]	; (8002380 <MX_GPIO_Init+0x12c>)
 800233e:	f002 fa31 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002348:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4809      	ldr	r0, [pc, #36]	; (8002380 <MX_GPIO_Init+0x12c>)
 800235a:	f002 fa23 	bl	80047a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2028      	movs	r0, #40	; 0x28
 8002364:	f002 f9e7 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002368:	2028      	movs	r0, #40	; 0x28
 800236a:	f002 fa00 	bl	800476e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------
//Timer11 for temporization (10ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d134      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x7a>
		flag_10ms = 1;
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

		//Encoder
		vehicleState.counts = TIM2->CNT;
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80023a4:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 80023a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	6253      	str	r3, [r2, #36]	; 0x24

		//Variabile per la calibrazione
		cnt_10ms_button++;
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023bc:	6013      	str	r3, [r2, #0]

		//Variabile per la manovra
		if(data.flag == 3 || data.flag == 4 || flag_button == 1){
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d007      	beq.n	80023d6 <HAL_TIM_PeriodElapsedCallback+0x52>
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_PeriodElapsedCallback+0x52>
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d109      	bne.n	80023ea <HAL_TIM_PeriodElapsedCallback+0x66>
			cnt_manovre++;
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023e6:	edc3 7a00 	vstr	s15, [r3]
		}

		//Temporizzazione della calibrazione
		if(flag_button == -1){
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x7a>
			counter_cal_ESC++;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80023fc:	6013      	str	r3, [r2, #0]
		}
	}
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	2000038c 	.word	0x2000038c
 8002410:	20000548 	.word	0x20000548
 8002414:	20000478 	.word	0x20000478
 8002418:	20000578 	.word	0x20000578
 800241c:	2000045c 	.word	0x2000045c
 8002420:	20000544 	.word	0x20000544
 8002424:	20000554 	.word	0x20000554
 8002428:	2000057c 	.word	0x2000057c
 800242c:	00000000 	.word	0x00000000

08002430 <lettura_vel_encoder>:

//-------------------------------------------------------------
//MISURAZIONI
void lettura_vel_encoder(){
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	vehicleState.ref_count = TIM2->ARR / 2;
 8002434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	461a      	mov	r2, r3
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <lettura_vel_encoder+0xc8>)
 8002440:	605a      	str	r2, [r3, #4]
	vehicleState.delta_count = vehicleState.counts - vehicleState.ref_count;
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <lettura_vel_encoder+0xc8>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <lettura_vel_encoder+0xc8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <lettura_vel_encoder+0xc8>)
 800244e:	6093      	str	r3, [r2, #8]

	vehicleState.delta_angle_deg = (vehicleState.delta_count * 360) / ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO));
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <lettura_vel_encoder+0xc8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f869 	bl	8000534 <__aeabi_i2d>
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <lettura_vel_encoder+0xcc>)
 8002468:	f7fe f9f8 	bl	800085c <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fbc0 	bl	8000bf8 <__aeabi_d2f>
 8002478:	4603      	mov	r3, r0
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <lettura_vel_encoder+0xc8>)
 800247c:	60d3      	str	r3, [r2, #12]
	vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg / ENCODER_SAMPLING_TIME;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <lettura_vel_encoder+0xc8>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f868 	bl	8000558 <__aeabi_f2d>
 8002488:	a319      	add	r3, pc, #100	; (adr r3, 80024f0 <lettura_vel_encoder+0xc0>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f9e5 	bl	800085c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fbad 	bl	8000bf8 <__aeabi_d2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024a2:	6113      	str	r3, [r2, #16]
	vehicleState.motor_speed_RPM = BL_DegreeSec2RPM(vehicleState.motor_speed_deg_sec);
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	f7fe fda7 	bl	8001000 <BL_DegreeSec2RPM>
 80024b2:	eef0 7a40 	vmov.f32	s15, s0
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024b8:	edc3 7a05 	vstr	s15, [r3, #20]
	vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM * RPM_2_m_s;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024be:	ed93 7a05 	vldr	s14, [r3, #20]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <lettura_vel_encoder+0xd0>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024ce:	edc3 7a06 	vstr	s15, [r3, #24]

	//Speed reference for motor
	vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s / RPM_2_m_s;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <lettura_vel_encoder+0xd4>)
 80024d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <lettura_vel_encoder+0xd0>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <lettura_vel_encoder+0xc8>)
 80024e4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f3af 8000 	nop.w
 80024f0:	47ae147b 	.word	0x47ae147b
 80024f4:	3f847ae1 	.word	0x3f847ae1
 80024f8:	20000478 	.word	0x20000478
 80024fc:	40c00000 	.word	0x40c00000
 8002500:	2000000c 	.word	0x2000000c
 8002504:	2000045c 	.word	0x2000045c

08002508 <get_yaw_rate>:

void get_yaw_rate()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
	bno055_vector_t v = bno055_getVectorGyroscope();
 800250e:	f7ff f88d 	bl	800162c <bno055_getVectorGyroscope>
 8002512:	eeb0 4a40 	vmov.f32	s8, s0
 8002516:	eef0 4a60 	vmov.f32	s9, s1
 800251a:	eeb0 5a41 	vmov.f32	s10, s2
 800251e:	eef0 5a61 	vmov.f32	s11, s3
 8002522:	eeb0 6a42 	vmov.f32	s12, s4
 8002526:	eef0 6a62 	vmov.f32	s13, s5
 800252a:	eeb0 7a43 	vmov.f32	s14, s6
 800252e:	eef0 7a63 	vmov.f32	s15, s7
 8002532:	ed87 4b00 	vstr	d4, [r7]
 8002536:	ed87 5b02 	vstr	d5, [r7, #8]
 800253a:	ed87 6b04 	vstr	d6, [r7, #16]
 800253e:	ed87 7b06 	vstr	d7, [r7, #24]
	vehicleState.yaw_rate_deg_sec = v.z;
 8002542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002546:	4910      	ldr	r1, [pc, #64]	; (8002588 <get_yaw_rate+0x80>)
 8002548:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec * M_PI) / 180;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <get_yaw_rate+0x80>)
 800254e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002552:	a30b      	add	r3, pc, #44	; (adr r3, 8002580 <get_yaw_rate+0x78>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe f856 	bl	8000608 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <get_yaw_rate+0x84>)
 800256a:	f7fe f977 	bl	800085c <__aeabi_ddiv>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4905      	ldr	r1, [pc, #20]	; (8002588 <get_yaw_rate+0x80>)
 8002574:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	54442d18 	.word	0x54442d18
 8002584:	400921fb 	.word	0x400921fb
 8002588:	20000478 	.word	0x20000478
 800258c:	40668000 	.word	0x40668000

08002590 <get_inclination>:

void get_inclination()
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
	bno055_vector_t u = bno055_getVectorGravity();
 8002596:	f7ff f88c 	bl	80016b2 <bno055_getVectorGravity>
 800259a:	eeb0 4a40 	vmov.f32	s8, s0
 800259e:	eef0 4a60 	vmov.f32	s9, s1
 80025a2:	eeb0 5a41 	vmov.f32	s10, s2
 80025a6:	eef0 5a61 	vmov.f32	s11, s3
 80025aa:	eeb0 6a42 	vmov.f32	s12, s4
 80025ae:	eef0 6a62 	vmov.f32	s13, s5
 80025b2:	eeb0 7a43 	vmov.f32	s14, s6
 80025b6:	eef0 7a63 	vmov.f32	s15, s7
 80025ba:	ed87 4b00 	vstr	d4, [r7]
 80025be:	ed87 5b02 	vstr	d5, [r7, #8]
 80025c2:	ed87 6b04 	vstr	d6, [r7, #16]
 80025c6:	ed87 7b06 	vstr	d7, [r7, #24]
	vehicleState.x_acceleration = u.x;
 80025ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ce:	490c      	ldr	r1, [pc, #48]	; (8002600 <get_inclination+0x70>)
 80025d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	if(vehicleState.x_acceleration < -0.6){
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <get_inclination+0x70>)
 80025d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025da:	a307      	add	r3, pc, #28	; (adr r3, 80025f8 <get_inclination+0x68>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe fa84 	bl	8000aec <__aeabi_dcmplt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <get_inclination+0x60>
		//flag_discesa = 1;
	} else{
		flag_discesa = 0;
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <get_inclination+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
	}
	//printf("%d, %f\r\n", flag_discesa, vehicleState.x_acceleration);
}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	33333333 	.word	0x33333333
 80025fc:	bfe33333 	.word	0xbfe33333
 8002600:	20000478 	.word	0x20000478
 8002604:	20000568 	.word	0x20000568

08002608 <controllo_trazione>:

void controllo_trazione(float v, float v_ref){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002612:	edc7 0a00 	vstr	s1, [r7]
	//Fa la scelta tra il PID che va avanti e quello che va indietro
	if(v_ref >= 0){
 8002616:	edd7 7a00 	vldr	s15, [r7]
 800261a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	db21      	blt.n	8002668 <controllo_trazione+0x60>
		if(flag_discesa){
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <controllo_trazione+0x94>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <controllo_trazione+0x42>
			u_trazione = PID_controller(&pid_traction_DESC, v, v_ref, NEUTRAL_PWM);
 800262c:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80026a0 <controllo_trazione+0x98>
 8002630:	edd7 0a00 	vldr	s1, [r7]
 8002634:	ed97 0a01 	vldr	s0, [r7, #4]
 8002638:	481a      	ldr	r0, [pc, #104]	; (80026a4 <controllo_trazione+0x9c>)
 800263a:	f7fe fd59 	bl	80010f0 <PID_controller>
 800263e:	eef0 7a40 	vmov.f32	s15, s0
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <controllo_trazione+0xa0>)
 8002644:	edc3 7a00 	vstr	s15, [r3]
 8002648:	e01c      	b.n	8002684 <controllo_trazione+0x7c>
		} else {
			u_trazione = PID_controller(&pid_traction, v, v_ref, NEUTRAL_PWM);
 800264a:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80026a0 <controllo_trazione+0x98>
 800264e:	edd7 0a00 	vldr	s1, [r7]
 8002652:	ed97 0a01 	vldr	s0, [r7, #4]
 8002656:	4815      	ldr	r0, [pc, #84]	; (80026ac <controllo_trazione+0xa4>)
 8002658:	f7fe fd4a 	bl	80010f0 <PID_controller>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <controllo_trazione+0xa0>)
 8002662:	edc3 7a00 	vstr	s15, [r3]
 8002666:	e00d      	b.n	8002684 <controllo_trazione+0x7c>
		}
	} else{
		u_trazione = PID_controller(&pid_traction_RWD, v, v_ref, NEUTRAL_PWM);
 8002668:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80026a0 <controllo_trazione+0x98>
 800266c:	edd7 0a00 	vldr	s1, [r7]
 8002670:	ed97 0a01 	vldr	s0, [r7, #4]
 8002674:	480e      	ldr	r0, [pc, #56]	; (80026b0 <controllo_trazione+0xa8>)
 8002676:	f7fe fd3b 	bl	80010f0 <PID_controller>
 800267a:	eef0 7a40 	vmov.f32	s15, s0
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <controllo_trazione+0xa0>)
 8002680:	edc3 7a00 	vstr	s15, [r3]
	}

	BL_set_PWM(u_trazione);
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <controllo_trazione+0xa0>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eeb0 0a67 	vmov.f32	s0, s15
 800268e:	f7fe fcd7 	bl	8001040 <BL_set_PWM>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000568 	.word	0x20000568
 80026a0:	3d98b71c 	.word	0x3d98b71c
 80026a4:	200004f8 	.word	0x200004f8
 80026a8:	20000538 	.word	0x20000538
 80026ac:	200004b8 	.word	0x200004b8
 80026b0:	200004d8 	.word	0x200004d8

080026b4 <lane_keeping>:

//-------------------------------------------------------------
//LANE KEEPING
void lane_keeping()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
		servo_motor(u_sterzo);
		printf("CURVA\r\n");
	}
*/

	vehicleState.yaw_rate_ref_rad_sec = data.linear_speed_ref_m_s / data.curvature_radius_ref_m;
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <lane_keeping+0x12c>)
 80026bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <lane_keeping+0x12c>)
 80026c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026ca:	ee16 0a90 	vmov	r0, s13
 80026ce:	f7fd ff43 	bl	8000558 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4943      	ldr	r1, [pc, #268]	; (80027e4 <lane_keeping+0x130>)
 80026d8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	//vehicleState.yaw_rate_ref_rad_sec = vehicleState.linear_speed_m_s / data.curvature_radius_ref_m;

	float yaw_rate_ref_rad_sec_abs = valore_assoluto(vehicleState.yaw_rate_ref_rad_sec);
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <lane_keeping+0x130>)
 80026de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa87 	bl	8000bf8 <__aeabi_d2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	ee00 3a10 	vmov	s0, r3
 80026f0:	f000 fd84 	bl	80031fc <valore_assoluto>
 80026f4:	ed87 0a01 	vstr	s0, [r7, #4]
	float yaw_rate_rad_sec_abs = valore_assoluto(vehicleState.yaw_rate_rad_sec);
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <lane_keeping+0x130>)
 80026fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fa79 	bl	8000bf8 <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	ee00 3a10 	vmov	s0, r3
 800270c:	f000 fd76 	bl	80031fc <valore_assoluto>
 8002710:	ed87 0a00 	vstr	s0, [r7]

	u_sterzo = PID_controller(&pid_steering, yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs, 0);
 8002714:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80027e8 <lane_keeping+0x134>
 8002718:	edd7 0a01 	vldr	s1, [r7, #4]
 800271c:	ed97 0a00 	vldr	s0, [r7]
 8002720:	4832      	ldr	r0, [pc, #200]	; (80027ec <lane_keeping+0x138>)
 8002722:	f7fe fce5 	bl	80010f0 <PID_controller>
 8002726:	eef0 7a40 	vmov.f32	s15, s0
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <lane_keeping+0x13c>)
 800272c:	edc3 7a00 	vstr	s15, [r3]

	//minus because yawrate and steering are opposite
	if (data.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <lane_keeping+0x12c>)
 8002732:	edd3 7a01 	vldr	s15, [r3, #4]
 8002736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	db1a      	blt.n	8002776 <lane_keeping+0xc2>
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <lane_keeping+0x13c>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	dd12      	ble.n	8002776 <lane_keeping+0xc2>
		u_sterzo *= -1.0;
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <lane_keeping+0x13c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd feff 	bl	8000558 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa49 	bl	8000bf8 <__aeabi_d2f>
 8002766:	4603      	mov	r3, r0
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef1 7a67 	vneg.f32	s15, s15
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <lane_keeping+0x13c>)
 8002772:	edc3 7a00 	vstr	s15, [r3]
	if (data.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <lane_keeping+0x12c>)
 8002778:	edd3 7a01 	vldr	s15, [r3, #4]
 800277c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d51a      	bpl.n	80027bc <lane_keeping+0x108>
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <lane_keeping+0x13c>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d512      	bpl.n	80027bc <lane_keeping+0x108>
		u_sterzo *= -1.0;
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <lane_keeping+0x13c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fedc 	bl	8000558 <__aeabi_f2d>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe fa26 	bl	8000bf8 <__aeabi_d2f>
 80027ac:	4603      	mov	r3, r0
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef1 7a67 	vneg.f32	s15, s15
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <lane_keeping+0x13c>)
 80027b8:	edc3 7a00 	vstr	s15, [r3]

	servo_motor(u_sterzo);
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <lane_keeping+0x13c>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	f000 ffe7 	bl	8003798 <servo_motor>
	printf("%f\r\n", vehicleState.yaw_rate_rad_sec);
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <lane_keeping+0x130>)
 80027cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <lane_keeping+0x140>)
 80027d2:	f007 fb61 	bl	8009e98 <iprintf>
	//printf("%f\r\n", u_sterzo);

}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000045c 	.word	0x2000045c
 80027e4:	20000478 	.word	0x20000478
 80027e8:	00000000 	.word	0x00000000
 80027ec:	20000518 	.word	0x20000518
 80027f0:	2000053c 	.word	0x2000053c
 80027f4:	0800ed74 	.word	0x0800ed74

080027f8 <parcheggio>:

//-------------------------------------------------------------
//PARCHEGGIO
void parcheggio()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	if (data.linear_speed_ref_m_s < 0)
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <parcheggio+0x74>)
 80027fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	d51b      	bpl.n	8002844 <parcheggio+0x4c>
	{ //Entro nel parcheggio
		switch (flag_ingresso_parcheggio){
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <parcheggio+0x78>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d010      	beq.n	8002836 <parcheggio+0x3e>
 8002814:	2b02      	cmp	r3, #2
 8002816:	dc26      	bgt.n	8002866 <parcheggio+0x6e>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <parcheggio+0x2a>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <parcheggio+0x38>
		case 1:
			uscita_parcheggio();
			break;
		}
	}
}
 8002820:	e021      	b.n	8002866 <parcheggio+0x6e>
			muoviti_n_metri_dritto(1.50, 0.20);
 8002822:	eddf 0a14 	vldr	s1, [pc, #80]	; 8002874 <parcheggio+0x7c>
 8002826:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800282a:	f000 fa21 	bl	8002c70 <muoviti_n_metri_dritto>
			break;
 800282e:	e01a      	b.n	8002866 <parcheggio+0x6e>
			ingresso_parcheggio();
 8002830:	f000 f82a 	bl	8002888 <ingresso_parcheggio>
			break;
 8002834:	e017      	b.n	8002866 <parcheggio+0x6e>
			sistemazione_parcheggio(0.15, 0.20);
 8002836:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002874 <parcheggio+0x7c>
 800283a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002878 <parcheggio+0x80>
 800283e:	f000 fa63 	bl	8002d08 <sistemazione_parcheggio>
			break;
 8002842:	e010      	b.n	8002866 <parcheggio+0x6e>
		switch (flag_uscita_parcheggio){
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <parcheggio+0x84>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <parcheggio+0x5a>
 800284c:	2b01      	cmp	r3, #1
 800284e:	d007      	beq.n	8002860 <parcheggio+0x68>
}
 8002850:	e009      	b.n	8002866 <parcheggio+0x6e>
			sistemazione_parcheggio(0.15, -0.20);
 8002852:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002880 <parcheggio+0x88>
 8002856:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002878 <parcheggio+0x80>
 800285a:	f000 fa55 	bl	8002d08 <sistemazione_parcheggio>
			break;
 800285e:	e002      	b.n	8002866 <parcheggio+0x6e>
			uscita_parcheggio();
 8002860:	f000 f90a 	bl	8002a78 <uscita_parcheggio>
			break;
 8002864:	bf00      	nop
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000045c 	.word	0x2000045c
 8002870:	20000558 	.word	0x20000558
 8002874:	3e4ccccd 	.word	0x3e4ccccd
 8002878:	3e19999a 	.word	0x3e19999a
 800287c:	2000055c 	.word	0x2000055c
 8002880:	be4ccccd 	.word	0xbe4ccccd
 8002884:	00000000 	.word	0x00000000

08002888 <ingresso_parcheggio>:

void ingresso_parcheggio(){
 8002888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800288c:	af00      	add	r7, sp, #0

	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100);
 800288e:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 8002890:	ed93 7a03 	vldr	s14, [r3, #12]
 8002894:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 8002896:	edd3 6a04 	vldr	s13, [r3, #16]
 800289a:	4b6d      	ldr	r3, [pc, #436]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 800289c:	ed93 6a02 	vldr	s12, [r3, #8]
 80028a0:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <ingresso_parcheggio+0x1cc>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ed9f 5a6c 	vldr	s10, [pc, #432]	; 8002a58 <ingresso_parcheggio+0x1d0>
 80028aa:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80028ae:	eef0 1a65 	vmov.f32	s3, s11
 80028b2:	eeb0 1a46 	vmov.f32	s2, s12
 80028b6:	eef0 0a66 	vmov.f32	s1, s13
 80028ba:	eeb0 0a47 	vmov.f32	s0, s14
 80028be:	f000 fdcb 	bl	8003458 <calcolo_yaw_rate>
 80028c2:	ee10 3a10 	vmov	r3, s0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe46 	bl	8000558 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4962      	ldr	r1, [pc, #392]	; (8002a5c <ingresso_parcheggio+0x1d4>)
 80028d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <ingresso_parcheggio+0x1d4>)
 80028d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe f98a 	bl	8000bf8 <__aeabi_d2f>
 80028e4:	4604      	mov	r4, r0
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <ingresso_parcheggio+0x1d4>)
 80028e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fe f982 	bl	8000bf8 <__aeabi_d2f>
 80028f4:	4603      	mov	r3, r0
 80028f6:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8002a60 <ingresso_parcheggio+0x1d8>
 80028fa:	ee00 3a90 	vmov	s1, r3
 80028fe:	ee00 4a10 	vmov	s0, r4
 8002902:	4858      	ldr	r0, [pc, #352]	; (8002a64 <ingresso_parcheggio+0x1dc>)
 8002904:	f7fe fbf4 	bl	80010f0 <PID_controller>
 8002908:	eef0 7a40 	vmov.f32	s15, s0
 800290c:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <ingresso_parcheggio+0x1e0>)
 800290e:	edc3 7a00 	vstr	s15, [r3]
	controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 8002912:	4b52      	ldr	r3, [pc, #328]	; (8002a5c <ingresso_parcheggio+0x1d4>)
 8002914:	edd3 6a05 	vldr	s13, [r3, #20]
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 800291a:	ed93 7a02 	vldr	s14, [r3, #8]
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <ingresso_parcheggio+0x1e4>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002928:	eef0 0a46 	vmov.f32	s1, s12
 800292c:	eeb0 0a66 	vmov.f32	s0, s13
 8002930:	f7ff fe6a 	bl	8002608 <controllo_trazione>
	//printf("%f; %f \r\n", vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec);

	if(data.linear_speed_ref_m_s > 0)
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 8002936:	edd3 7a02 	vldr	s15, [r3, #8]
 800293a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	dd0d      	ble.n	8002960 <ingresso_parcheggio+0xd8>
	{
		servo_motor((int) -u_sterzo);
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <ingresso_parcheggio+0x1e0>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eef1 7a67 	vneg.f32	s15, s15
 800294e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	f000 ff1d 	bl	8003798 <servo_motor>
 800295e:	e00a      	b.n	8002976 <ingresso_parcheggio+0xee>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <ingresso_parcheggio+0x1e0>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296e:	eeb0 0a67 	vmov.f32	s0, s15
 8002972:	f000 ff11 	bl	8003798 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s))+TEMPO_SALITA_PID_TRAZIONE_RWD)
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <ingresso_parcheggio+0x1cc>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a58 <ingresso_parcheggio+0x1d0>
 8002980:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002984:	ee16 0a90 	vmov	r0, s13
 8002988:	f7fd fde6 	bl	8000558 <__aeabi_f2d>
 800298c:	4604      	mov	r4, r0
 800298e:	460d      	mov	r5, r1
 8002990:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 8002992:	ed93 7a04 	vldr	s14, [r3, #16]
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 8002998:	edd3 7a04 	vldr	s15, [r3, #16]
 800299c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 80029a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 80029a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	ee17 0a90 	vmov	r0, s15
 80029b8:	f7fd fdce 	bl	8000558 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	ec43 2b10 	vmov	d0, r2, r3
 80029c4:	f00a f996 	bl	800ccf4 <sqrt>
 80029c8:	ec51 0b10 	vmov	r0, r1, d0
 80029cc:	a31c      	add	r3, pc, #112	; (adr r3, 8002a40 <ingresso_parcheggio+0x1b8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fe19 	bl	8000608 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <ingresso_parcheggio+0x1c8>)
 80029e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029e4:	eeb0 0a67 	vmov.f32	s0, s15
 80029e8:	f000 fc08 	bl	80031fc <valore_assoluto>
 80029ec:	ee10 3a10 	vmov	r3, s0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdb1 	bl	8000558 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4640      	mov	r0, r8
 80029fc:	4649      	mov	r1, r9
 80029fe:	f7fd ff2d 	bl	800085c <__aeabi_ddiv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	a30f      	add	r3, pc, #60	; (adr r3, 8002a48 <ingresso_parcheggio+0x1c0>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fd fc44 	bl	800029c <__adddf3>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fe f87a 	bl	8000b14 <__aeabi_dcmpge>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d100      	bne.n	8002a28 <ingresso_parcheggio+0x1a0>
	{
		cnt_manovre = 0;
		flag_ingresso_parcheggio++;
	}
}
 8002a26:	e008      	b.n	8002a3a <ingresso_parcheggio+0x1b2>
		cnt_manovre = 0;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <ingresso_parcheggio+0x1cc>)
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
		flag_ingresso_parcheggio++;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <ingresso_parcheggio+0x1e8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <ingresso_parcheggio+0x1e8>)
 8002a38:	6013      	str	r3, [r2, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a40:	147ae148 	.word	0x147ae148
 8002a44:	3ff147ae 	.word	0x3ff147ae
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	3fc99999 	.word	0x3fc99999
 8002a50:	2000045c 	.word	0x2000045c
 8002a54:	20000554 	.word	0x20000554
 8002a58:	42c80000 	.word	0x42c80000
 8002a5c:	20000478 	.word	0x20000478
 8002a60:	00000000 	.word	0x00000000
 8002a64:	20000518 	.word	0x20000518
 8002a68:	2000053c 	.word	0x2000053c
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	20000558 	.word	0x20000558
 8002a74:	00000000 	.word	0x00000000

08002a78 <uscita_parcheggio>:

void uscita_parcheggio(){
 8002a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a7c:	af00      	add	r7, sp, #0

	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100);
 8002a7e:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002a80:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a84:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002a86:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002a8c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002a90:	4b6e      	ldr	r3, [pc, #440]	; (8002c4c <uscita_parcheggio+0x1d4>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ed9f 5a6e 	vldr	s10, [pc, #440]	; 8002c50 <uscita_parcheggio+0x1d8>
 8002a9a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002a9e:	eef0 1a65 	vmov.f32	s3, s11
 8002aa2:	eeb0 1a46 	vmov.f32	s2, s12
 8002aa6:	eef0 0a66 	vmov.f32	s1, s13
 8002aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8002aae:	f000 fcd3 	bl	8003458 <calcolo_yaw_rate>
 8002ab2:	ee10 3a10 	vmov	r3, s0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd4e 	bl	8000558 <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4964      	ldr	r1, [pc, #400]	; (8002c54 <uscita_parcheggio+0x1dc>)
 8002ac2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <uscita_parcheggio+0x1dc>)
 8002ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f892 	bl	8000bf8 <__aeabi_d2f>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <uscita_parcheggio+0x1dc>)
 8002ad8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f88a 	bl	8000bf8 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8002c58 <uscita_parcheggio+0x1e0>
 8002aea:	ee00 3a90 	vmov	s1, r3
 8002aee:	ee00 4a10 	vmov	s0, r4
 8002af2:	485a      	ldr	r0, [pc, #360]	; (8002c5c <uscita_parcheggio+0x1e4>)
 8002af4:	f7fe fafc 	bl	80010f0 <PID_controller>
 8002af8:	eef0 7a40 	vmov.f32	s15, s0
 8002afc:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <uscita_parcheggio+0x1e8>)
 8002afe:	edc3 7a00 	vstr	s15, [r3]
	controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <uscita_parcheggio+0x1dc>)
 8002b04:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b0e:	4b55      	ldr	r3, [pc, #340]	; (8002c64 <uscita_parcheggio+0x1ec>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002b18:	eef0 0a46 	vmov.f32	s1, s12
 8002b1c:	eeb0 0a66 	vmov.f32	s0, s13
 8002b20:	f7ff fd72 	bl	8002608 <controllo_trazione>
	//printf("%f;%f \r\n", vehicleState.yaw_rate_ref_rad_sec, vehicleState.yaw_rate_rad_sec);

	if(data.linear_speed_ref_m_s > 0)
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	dd0d      	ble.n	8002b50 <uscita_parcheggio+0xd8>
	{
		servo_motor((int) -u_sterzo);
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <uscita_parcheggio+0x1e8>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eef1 7a67 	vneg.f32	s15, s15
 8002b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b46:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4a:	f000 fe25 	bl	8003798 <servo_motor>
 8002b4e:	e00a      	b.n	8002b66 <uscita_parcheggio+0xee>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <uscita_parcheggio+0x1e8>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	f000 fe19 	bl	8003798 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s))+TEMPO_SALITA_PID_TRAZIONE)
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <uscita_parcheggio+0x1d4>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002c50 <uscita_parcheggio+0x1d8>
 8002b70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b74:	ee16 0a90 	vmov	r0, s13
 8002b78:	f7fd fcee 	bl	8000558 <__aeabi_f2d>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b82:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b88:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b92:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	ee17 0a90 	vmov	r0, s15
 8002ba8:	f7fd fcd6 	bl	8000558 <__aeabi_f2d>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	ec43 2b10 	vmov	d0, r2, r3
 8002bb4:	f00a f89e 	bl	800ccf4 <sqrt>
 8002bb8:	ec51 0b10 	vmov	r0, r1, d0
 8002bbc:	a31e      	add	r3, pc, #120	; (adr r3, 8002c38 <uscita_parcheggio+0x1c0>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fd21 	bl	8000608 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4690      	mov	r8, r2
 8002bcc:	4699      	mov	r9, r3
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <uscita_parcheggio+0x1d0>)
 8002bd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd8:	f000 fb10 	bl	80031fc <valore_assoluto>
 8002bdc:	ee10 3a10 	vmov	r3, s0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fcb9 	bl	8000558 <__aeabi_f2d>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4640      	mov	r0, r8
 8002bec:	4649      	mov	r1, r9
 8002bee:	f7fd fe35 	bl	800085c <__aeabi_ddiv>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	a311      	add	r3, pc, #68	; (adr r3, 8002c40 <uscita_parcheggio+0x1c8>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fb4c 	bl	800029c <__adddf3>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd ff82 	bl	8000b14 <__aeabi_dcmpge>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <uscita_parcheggio+0x1a0>
	{
		cnt_manovre = 0;
		flag_uscita_parcheggio = 0;
		flag_serial_read = 1;
	}
}
 8002c16:	e009      	b.n	8002c2c <uscita_parcheggio+0x1b4>
		cnt_manovre = 0;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <uscita_parcheggio+0x1d4>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
		flag_uscita_parcheggio = 0;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <uscita_parcheggio+0x1f0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
		flag_serial_read = 1;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <uscita_parcheggio+0x1f4>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c32:	bf00      	nop
 8002c34:	f3af 8000 	nop.w
 8002c38:	147ae148 	.word	0x147ae148
 8002c3c:	3ff147ae 	.word	0x3ff147ae
 8002c40:	9999999a 	.word	0x9999999a
 8002c44:	3fc99999 	.word	0x3fc99999
 8002c48:	2000045c 	.word	0x2000045c
 8002c4c:	20000554 	.word	0x20000554
 8002c50:	42c80000 	.word	0x42c80000
 8002c54:	20000478 	.word	0x20000478
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	20000518 	.word	0x20000518
 8002c60:	2000053c 	.word	0x2000053c
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	2000055c 	.word	0x2000055c
 8002c6c:	2000054c 	.word	0x2000054c

08002c70 <muoviti_n_metri_dritto>:

//-------------------------------------------------------------
//MOVIMENTI CALCOLATI DRITTO
void muoviti_n_metri_dritto(float spostamento, float v){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c7a:	edc7 0a00 	vstr	s1, [r7]
	float t = spostamento/v;
 8002c7e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c82:	ed97 7a00 	vldr	s14, [r7]
 8002c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8a:	edc7 7a03 	vstr	s15, [r7, #12]
	servo_motor(0);
 8002c8e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002cf0 <muoviti_n_metri_dritto+0x80>
 8002c92:	f000 fd81 	bl	8003798 <servo_motor>
	controllo_trazione(vehicleState.motor_speed_RPM, v/RPM_2_m_s);
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <muoviti_n_metri_dritto+0x84>)
 8002c98:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <muoviti_n_metri_dritto+0x88>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ed97 7a00 	vldr	s14, [r7]
 8002ca6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002caa:	eef0 0a46 	vmov.f32	s1, s12
 8002cae:	eeb0 0a66 	vmov.f32	s0, s13
 8002cb2:	f7ff fca9 	bl	8002608 <controllo_trazione>

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= t){
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <muoviti_n_metri_dritto+0x8c>)
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002d00 <muoviti_n_metri_dritto+0x90>
 8002cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	d900      	bls.n	8002cd4 <muoviti_n_metri_dritto+0x64>
		cnt_manovre = 0;
		flag_ingresso_parcheggio++;
	}
}
 8002cd2:	e008      	b.n	8002ce6 <muoviti_n_metri_dritto+0x76>
		cnt_manovre = 0;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <muoviti_n_metri_dritto+0x8c>)
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
		flag_ingresso_parcheggio++;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <muoviti_n_metri_dritto+0x94>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <muoviti_n_metri_dritto+0x94>)
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	20000478 	.word	0x20000478
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	20000554 	.word	0x20000554
 8002d00:	42c80000 	.word	0x42c80000
 8002d04:	20000558 	.word	0x20000558

08002d08 <sistemazione_parcheggio>:

void sistemazione_parcheggio(float spostamento, float v){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	ed2d 8b02 	vpush	{d8}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d16:	edc7 0a00 	vstr	s1, [r7]
	float t = spostamento/v;
 8002d1a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d1e:	ed97 7a00 	vldr	s14, [r7]
 8002d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d26:	edc7 7a03 	vstr	s15, [r7, #12]
	servo_motor(0);
 8002d2a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8002dfc <sistemazione_parcheggio+0xf4>
 8002d2e:	f000 fd33 	bl	8003798 <servo_motor>
	controllo_trazione(vehicleState.motor_speed_RPM, v/RPM_2_m_s);
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <sistemazione_parcheggio+0xf8>)
 8002d34:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d38:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <sistemazione_parcheggio+0xfc>)
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ed97 7a00 	vldr	s14, [r7]
 8002d42:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002d46:	eef0 0a46 	vmov.f32	s1, s12
 8002d4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002d4e:	f7ff fc5b 	bl	8002608 <controllo_trazione>
	//In base al verso di rotazione seleziono il tempo di salita del motore
	if(v > 0)
 8002d52:	edd7 7a00 	vldr	s15, [r7]
 8002d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	dd03      	ble.n	8002d68 <sistemazione_parcheggio+0x60>
	{
		tempo_salita_pid = TEMPO_SALITA_PID_TRAZIONE;
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <sistemazione_parcheggio+0x100>)
 8002d62:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <sistemazione_parcheggio+0x104>)
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e002      	b.n	8002d6e <sistemazione_parcheggio+0x66>
	}
	else
	{
		tempo_salita_pid = TEMPO_SALITA_PID_TRAZIONE_RWD;
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <sistemazione_parcheggio+0x100>)
 8002d6a:	4a28      	ldr	r2, [pc, #160]	; (8002e0c <sistemazione_parcheggio+0x104>)
 8002d6c:	601a      	str	r2, [r3, #0]
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= valore_assoluto(t+tempo_salita_pid)){
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <sistemazione_parcheggio+0x108>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e14 <sistemazione_parcheggio+0x10c>
 8002d78:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <sistemazione_parcheggio+0x100>)
 8002d7e:	ed93 7a00 	vldr	s14, [r3]
 8002d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8e:	f000 fa35 	bl	80031fc <valore_assoluto>
 8002d92:	eef0 7a40 	vmov.f32	s15, s0
 8002d96:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	da00      	bge.n	8002da2 <sistemazione_parcheggio+0x9a>
		else if(v < 0){
			cnt_manovre = 0;
			flag_uscita_parcheggio++;
		}
	}
}
 8002da0:	e025      	b.n	8002dee <sistemazione_parcheggio+0xe6>
		if (v > 0){
 8002da2:	edd7 7a00 	vldr	s15, [r7]
 8002da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	dd0d      	ble.n	8002dcc <sistemazione_parcheggio+0xc4>
			data.flag = 0;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <sistemazione_parcheggio+0x110>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
			flag_button = 0;
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <sistemazione_parcheggio+0x114>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
			cnt_manovre = 0;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <sistemazione_parcheggio+0x108>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
			flag_ingresso_parcheggio = 0;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <sistemazione_parcheggio+0x118>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	e010      	b.n	8002dee <sistemazione_parcheggio+0xe6>
		else if(v < 0){
 8002dcc:	edd7 7a00 	vldr	s15, [r7]
 8002dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d400      	bmi.n	8002ddc <sistemazione_parcheggio+0xd4>
}
 8002dda:	e008      	b.n	8002dee <sistemazione_parcheggio+0xe6>
			cnt_manovre = 0;
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <sistemazione_parcheggio+0x108>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
			flag_uscita_parcheggio++;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <sistemazione_parcheggio+0x11c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <sistemazione_parcheggio+0x11c>)
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	ecbd 8b02 	vpop	{d8}
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00000000 	.word	0x00000000
 8002e00:	20000478 	.word	0x20000478
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	20000550 	.word	0x20000550
 8002e0c:	3e4ccccd 	.word	0x3e4ccccd
 8002e10:	20000554 	.word	0x20000554
 8002e14:	42c80000 	.word	0x42c80000
 8002e18:	2000045c 	.word	0x2000045c
 8002e1c:	20000544 	.word	0x20000544
 8002e20:	20000558 	.word	0x20000558
 8002e24:	2000055c 	.word	0x2000055c

08002e28 <cambio_corsia>:

//-------------------------------------------------------------
//CAMBIO CORSIA
void cambio_corsia(){
 8002e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e2c:	ed2d 8b04 	vpush	{d8-d9}
 8002e30:	af00      	add	r7, sp, #0
	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100) + (data.linear_speed_ref_m_s/(data.curvature_radius_ref_m+valore_assoluto(data.dy)));
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e34:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e3a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e40:	ed93 6a02 	vldr	s12, [r3, #8]
 8002e44:	4b69      	ldr	r3, [pc, #420]	; (8002fec <cambio_corsia+0x1c4>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ed9f 5a69 	vldr	s10, [pc, #420]	; 8002ff0 <cambio_corsia+0x1c8>
 8002e4e:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002e52:	eef0 1a65 	vmov.f32	s3, s11
 8002e56:	eeb0 1a46 	vmov.f32	s2, s12
 8002e5a:	eef0 0a66 	vmov.f32	s1, s13
 8002e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e62:	f000 faf9 	bl	8003458 <calcolo_yaw_rate>
 8002e66:	eeb0 9a40 	vmov.f32	s18, s0
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e6c:	ed93 8a02 	vldr	s16, [r3, #8]
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e72:	edd3 8a01 	vldr	s17, [r3, #4]
 8002e76:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002e78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	f000 f9bc 	bl	80031fc <valore_assoluto>
 8002e84:	eef0 7a40 	vmov.f32	s15, s0
 8002e88:	ee38 7aa7 	vadd.f32	s14, s17, s15
 8002e8c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002e90:	ee79 7a27 	vadd.f32	s15, s18, s15
 8002e94:	ee17 0a90 	vmov	r0, s15
 8002e98:	f7fd fb5e 	bl	8000558 <__aeabi_f2d>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4954      	ldr	r1, [pc, #336]	; (8002ff4 <cambio_corsia+0x1cc>)
 8002ea2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <cambio_corsia+0x1cc>)
 8002ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fea2 	bl	8000bf8 <__aeabi_d2f>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <cambio_corsia+0x1cc>)
 8002eb8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7fd fe9a 	bl	8000bf8 <__aeabi_d2f>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8002ff8 <cambio_corsia+0x1d0>
 8002eca:	ee00 3a90 	vmov	s1, r3
 8002ece:	ee00 4a10 	vmov	s0, r4
 8002ed2:	484a      	ldr	r0, [pc, #296]	; (8002ffc <cambio_corsia+0x1d4>)
 8002ed4:	f7fe f90c 	bl	80010f0 <PID_controller>
 8002ed8:	eef0 7a40 	vmov.f32	s15, s0
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <cambio_corsia+0x1d8>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]

	if(data.linear_speed_ref_m_s > 0)
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002ee4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	dd0d      	ble.n	8002f0e <cambio_corsia+0xe6>
	{
		servo_motor((int) -u_sterzo);
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <cambio_corsia+0x1d8>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	eef1 7a67 	vneg.f32	s15, s15
 8002efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	f000 fc46 	bl	8003798 <servo_motor>
 8002f0c:	e00a      	b.n	8002f24 <cambio_corsia+0xfc>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <cambio_corsia+0x1d8>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	f000 fc3a 	bl	8003798 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s)))
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <cambio_corsia+0x1c4>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002ff0 <cambio_corsia+0x1c8>
 8002f2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f32:	ee16 0a90 	vmov	r0, s13
 8002f36:	f7fd fb0f 	bl	8000558 <__aeabi_f2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002f50:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f62:	ee17 0a90 	vmov	r0, s15
 8002f66:	f7fd faf7 	bl	8000558 <__aeabi_f2d>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	ec43 2b10 	vmov	d0, r2, r3
 8002f72:	f009 febf 	bl	800ccf4 <sqrt>
 8002f76:	ec51 0b10 	vmov	r0, r1, d0
 8002f7a:	a319      	add	r3, pc, #100	; (adr r3, 8002fe0 <cambio_corsia+0x1b8>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fb42 	bl	8000608 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4690      	mov	r8, r2
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <cambio_corsia+0x1c0>)
 8002f8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f92:	eeb0 0a67 	vmov.f32	s0, s15
 8002f96:	f000 f931 	bl	80031fc <valore_assoluto>
 8002f9a:	ee10 3a10 	vmov	r3, s0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fada 	bl	8000558 <__aeabi_f2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4640      	mov	r0, r8
 8002faa:	4649      	mov	r1, r9
 8002fac:	f7fd fc56 	bl	800085c <__aeabi_ddiv>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	f7fd fdac 	bl	8000b14 <__aeabi_dcmpge>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d100      	bne.n	8002fc4 <cambio_corsia+0x19c>
	{
		cnt_manovre = 0;
		flag_serial_read = 1;
	}
}
 8002fc2:	e006      	b.n	8002fd2 <cambio_corsia+0x1aa>
		cnt_manovre = 0;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <cambio_corsia+0x1c4>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
		flag_serial_read = 1;
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <cambio_corsia+0x1dc>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	ecbd 8b04 	vpop	{d8-d9}
 8002fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fde:	bf00      	nop
 8002fe0:	147ae148 	.word	0x147ae148
 8002fe4:	3ff147ae 	.word	0x3ff147ae
 8002fe8:	2000045c 	.word	0x2000045c
 8002fec:	20000554 	.word	0x20000554
 8002ff0:	42c80000 	.word	0x42c80000
 8002ff4:	20000478 	.word	0x20000478
 8002ff8:	00000000 	.word	0x00000000
 8002ffc:	20000518 	.word	0x20000518
 8003000:	2000053c 	.word	0x2000053c
 8003004:	2000054c 	.word	0x2000054c

08003008 <cambio_velocita>:

//-------------------------------------------------------------
//RALLENTAMENTO
// cambia il valore della velocita da un valore iniziale a uno finale in uno spazio stop_space definito
void cambio_velocita(float stop_space) {
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	ed87 0a01 	vstr	s0, [r7, #4]
	float acceleration = (data.linear_speed_ref_m_s*data.linear_speed_ref_m_s - data.old_linear_speed_ref_m_s*data.old_linear_speed_ref_m_s) / (2 * stop_space); // Accelerazione costante per fermarsi uniformemente
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <cambio_velocita+0x118>)
 8003014:	ed93 7a02 	vldr	s14, [r3, #8]
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <cambio_velocita+0x118>)
 800301a:	edd3 7a02 	vldr	s15, [r3, #8]
 800301e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003022:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <cambio_velocita+0x118>)
 8003024:	edd3 6a06 	vldr	s13, [r3, #24]
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <cambio_velocita+0x118>)
 800302a:	edd3 7a06 	vldr	s15, [r3, #24]
 800302e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003032:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003036:	edd7 7a01 	vldr	s15, [r7, #4]
 800303a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800303e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003042:	edc7 7a03 	vstr	s15, [r7, #12]

	if(flag_serial_read == 1)
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <cambio_velocita+0x11c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <cambio_velocita+0x56>
	{
		current_linear_speed_ref_m_s = data.old_linear_speed_ref_m_s;
 800304e:	4b34      	ldr	r3, [pc, #208]	; (8003120 <cambio_velocita+0x118>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	4a35      	ldr	r2, [pc, #212]	; (8003128 <cambio_velocita+0x120>)
 8003054:	6013      	str	r3, [r2, #0]
		flag_serial_read = 0;
 8003056:	4b33      	ldr	r3, [pc, #204]	; (8003124 <cambio_velocita+0x11c>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

		}

		controllo_trazione(vehicleState.motor_speed_RPM, current_linear_speed_ref_m_s/RPM_2_m_s);
	}
}
 800305c:	e058      	b.n	8003110 <cambio_velocita+0x108>
		current_linear_speed_ref_m_s += acceleration*TRACTION_SAMPLING_TIME;
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <cambio_velocita+0x120>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa78 	bl	8000558 <__aeabi_f2d>
 8003068:	4604      	mov	r4, r0
 800306a:	460d      	mov	r5, r1
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7fd fa73 	bl	8000558 <__aeabi_f2d>
 8003072:	a329      	add	r3, pc, #164	; (adr r3, 8003118 <cambio_velocita+0x110>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fac6 	bl	8000608 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd f90a 	bl	800029c <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fdb2 	bl	8000bf8 <__aeabi_d2f>
 8003094:	4603      	mov	r3, r0
 8003096:	4a24      	ldr	r2, [pc, #144]	; (8003128 <cambio_velocita+0x120>)
 8003098:	6013      	str	r3, [r2, #0]
		if(data.linear_speed_ref_m_s - data.old_linear_speed_ref_m_s < 0)
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <cambio_velocita+0x118>)
 800309c:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <cambio_velocita+0x118>)
 80030a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80030a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d50e      	bpl.n	80030d2 <cambio_velocita+0xca>
			if (current_linear_speed_ref_m_s <= data.linear_speed_ref_m_s)
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <cambio_velocita+0x118>)
 80030b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <cambio_velocita+0x120>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	db11      	blt.n	80030ee <cambio_velocita+0xe6>
				cambiamento_velocita = 0;
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <cambio_velocita+0x124>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e00d      	b.n	80030ee <cambio_velocita+0xe6>
			if(current_linear_speed_ref_m_s >= data.linear_speed_ref_m_s)
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <cambio_velocita+0x118>)
 80030d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <cambio_velocita+0x120>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	d802      	bhi.n	80030ee <cambio_velocita+0xe6>
				flag_serial_read = 1;
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <cambio_velocita+0x11c>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
		controllo_trazione(vehicleState.motor_speed_RPM, current_linear_speed_ref_m_s/RPM_2_m_s);
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <cambio_velocita+0x128>)
 80030f0:	edd3 6a05 	vldr	s13, [r3, #20]
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <cambio_velocita+0x120>)
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <cambio_velocita+0x12c>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003104:	eef0 0a46 	vmov.f32	s1, s12
 8003108:	eeb0 0a66 	vmov.f32	s0, s13
 800310c:	f7ff fa7c 	bl	8002608 <controllo_trazione>
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bdb0      	pop	{r4, r5, r7, pc}
 8003118:	47ae147b 	.word	0x47ae147b
 800311c:	3f847ae1 	.word	0x3f847ae1
 8003120:	2000045c 	.word	0x2000045c
 8003124:	2000054c 	.word	0x2000054c
 8003128:	20000560 	.word	0x20000560
 800312c:	20000564 	.word	0x20000564
 8003130:	20000478 	.word	0x20000478
 8003134:	2000000c 	.word	0x2000000c

08003138 <HAL_GPIO_EXTI_Callback>:

//-------------------------------------------------------------
//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003148:	d13a      	bne.n	80031c0 <HAL_GPIO_EXTI_Callback+0x88>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Button pressed
 800314a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800314e:	4822      	ldr	r0, [pc, #136]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003150:	f001 fcac 	bl	8004aac <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_GPIO_EXTI_Callback+0x2c>
			buttonPressStartTime = cnt_10ms_button;
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_GPIO_EXTI_Callback+0xa4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e02d      	b.n	80031c0 <HAL_GPIO_EXTI_Callback+0x88>

		} else { // Button released
			buttonPressEndTime = cnt_10ms_button;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_GPIO_EXTI_Callback+0xa4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_GPIO_EXTI_Callback+0xac>)
 800316a:	6013      	str	r3, [r2, #0]

			//Verifico quantotemp ho tenuto premuto il tasto
			pressDuration = buttonPressEndTime - buttonPressStartTime;
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_GPIO_EXTI_Callback+0xac>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003178:	6013      	str	r3, [r2, #0]
			if (pressDuration < SHORT_PRESS_THRESHOLD)
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b63      	cmp	r3, #99	; 0x63
 8003180:	d813      	bhi.n	80031aa <HAL_GPIO_EXTI_Callback+0x72>
			{
				if(flag_button >= 0 && flag_button < max_flag_button){
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <HAL_GPIO_EXTI_Callback+0x6a>
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	da05      	bge.n	80031a2 <HAL_GPIO_EXTI_Callback+0x6a>
					flag_button++;
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e00e      	b.n	80031c0 <HAL_GPIO_EXTI_Callback+0x88>
				}
				else
				{
					flag_button = 0;
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e00a      	b.n	80031c0 <HAL_GPIO_EXTI_Callback+0x88>
				}
			} else if (pressDuration >= LONG_PRESS_THRESHOLD)
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_GPIO_EXTI_Callback+0xb0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2bc7      	cmp	r3, #199	; 0xc7
 80031b0:	d906      	bls.n	80031c0 <HAL_GPIO_EXTI_Callback+0x88>
			{
				flag_button = -1;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_GPIO_EXTI_Callback+0xb4>)
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	601a      	str	r2, [r3, #0]
				counter_cal_ESC = 0;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_10){
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d102      	bne.n	80031ce <HAL_GPIO_EXTI_Callback+0x96>
		printf("letto interrupt \r\n");
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80031ca:	f006 fecb 	bl	8009f64 <puts>
	}
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40020800 	.word	0x40020800
 80031dc:	20000578 	.word	0x20000578
 80031e0:	2000056c 	.word	0x2000056c
 80031e4:	20000570 	.word	0x20000570
 80031e8:	20000574 	.word	0x20000574
 80031ec:	20000544 	.word	0x20000544
 80031f0:	20000540 	.word	0x20000540
 80031f4:	2000057c 	.word	0x2000057c
 80031f8:	0800ed7c 	.word	0x0800ed7c

080031fc <valore_assoluto>:

float valore_assoluto(float x)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0)
 8003206:	edd7 7a01 	vldr	s15, [r7, #4]
 800320a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d504      	bpl.n	800321e <valore_assoluto+0x22>
	{
		return -x;
 8003214:	edd7 7a01 	vldr	s15, [r7, #4]
 8003218:	eef1 7a67 	vneg.f32	s15, s15
 800321c:	e001      	b.n	8003222 <valore_assoluto+0x26>
	}
	else
	{
		return x;
 800321e:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <__io_putchar>:

//-------------------------------------------------------------
//STAMPE
//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8003238:	1d39      	adds	r1, r7, #4
 800323a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800323e:	2201      	movs	r2, #1
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <__io_putchar+0x20>)
 8003242:	f004 fba4 	bl	800798e <HAL_UART_Transmit>
	return ch;
 8003246:	687b      	ldr	r3, [r7, #4]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200003d4 	.word	0x200003d4

08003254 <lettura_seriale>:
void PrintState(){
	printf("%d, %f, %f, %f, %f, %f \r\n", data.flag, data.linear_speed_ref_m_s, data.curvature_radius_ref_m, data.dy, data.dx, data.distanza_frenata);

}

void lettura_seriale(){
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
	if(flag_serial_read)
 800325a:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <lettura_seriale+0xa4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d045      	beq.n	80032ee <lettura_seriale+0x9a>
	{
		//Leggo messaggio in entrata
		mainSerialRead(msg, sizeof(msg));
 8003262:	212d      	movs	r1, #45	; 0x2d
 8003264:	4825      	ldr	r0, [pc, #148]	; (80032fc <lettura_seriale+0xa8>)
 8003266:	f7fd fff9 	bl	800125c <mainSerialRead>

		//Interpreto il messaggio
		float floatArray[MAX_VALUES];
		parseCSV(msg, floatArray);
 800326a:	1d3b      	adds	r3, r7, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4823      	ldr	r0, [pc, #140]	; (80032fc <lettura_seriale+0xa8>)
 8003270:	f7fd ffc0 	bl	80011f4 <parseCSV>

		//Assegnazione dei dati trasmessi
		flag_controllo = floatArray[0];
 8003274:	edd7 7a01 	vldr	s15, [r7, #4]
 8003278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327c:	ee17 2a90 	vmov	r2, s15
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <lettura_seriale+0xac>)
 8003282:	601a      	str	r2, [r3, #0]

		if (flag_controllo >= 0 && flag_controllo <= 6)
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <lettura_seriale+0xac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db25      	blt.n	80032d8 <lettura_seriale+0x84>
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <lettura_seriale+0xac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b06      	cmp	r3, #6
 8003292:	dc21      	bgt.n	80032d8 <lettura_seriale+0x84>
		{
			data.flag = flag_controllo;
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <lettura_seriale+0xac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <lettura_seriale+0xb0>)
 800329a:	6013      	str	r3, [r2, #0]

			//Salvo la vecchia velocita per il rallentamento
			data.old_linear_speed_ref_m_s = data.linear_speed_ref_m_s; //[m/s]
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <lettura_seriale+0xb0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <lettura_seriale+0xb0>)
 80032a2:	6193      	str	r3, [r2, #24]

			data.linear_speed_ref_m_s = floatArray[1]; //[m/s]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4a17      	ldr	r2, [pc, #92]	; (8003304 <lettura_seriale+0xb0>)
 80032a8:	6093      	str	r3, [r2, #8]

			if(floatArray[2] == 0){
 80032aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	d103      	bne.n	80032c0 <lettura_seriale+0x6c>
				data.curvature_radius_ref_m = 10; // [m]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <lettura_seriale+0xb0>)
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <lettura_seriale+0xb4>)
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	e002      	b.n	80032c6 <lettura_seriale+0x72>
			} else {
				data.curvature_radius_ref_m = floatArray[2];
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <lettura_seriale+0xb0>)
 80032c4:	6053      	str	r3, [r2, #4]
			}

			//Manovra
			data.dy = floatArray[3]; //[m]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <lettura_seriale+0xb0>)
 80032ca:	60d3      	str	r3, [r2, #12]
			data.dx = floatArray[4]; //[m]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <lettura_seriale+0xb0>)
 80032d0:	6113      	str	r3, [r2, #16]

			//Rallentamento
			data.distanza_frenata = floatArray[5]; //[m]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <lettura_seriale+0xb0>)
 80032d6:	6153      	str	r3, [r2, #20]
		}
		//PrintState();

		//Ferma la lettura della seriale per non bloccare il parcheggio
		if(data.flag == 3 || data.flag == 4){
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <lettura_seriale+0xb0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d003      	beq.n	80032e8 <lettura_seriale+0x94>
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <lettura_seriale+0xb0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d102      	bne.n	80032ee <lettura_seriale+0x9a>
			flag_serial_read = 0;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <lettura_seriale+0xa4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
		}
	}
}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000054c 	.word	0x2000054c
 80032fc:	20000584 	.word	0x20000584
 8003300:	200005b4 	.word	0x200005b4
 8003304:	2000045c 	.word	0x2000045c
 8003308:	41200000 	.word	0x41200000

0800330c <ProceduraCalibrazione>:
//COMUNICAZIONE


//-------------------------------------------------------------
//CALIBRAZIONE
void ProceduraCalibrazione(){
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	if(counter_cal_ESC < 5){
 8003310:	4b44      	ldr	r3, [pc, #272]	; (8003424 <ProceduraCalibrazione+0x118>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	dc04      	bgt.n	8003322 <ProceduraCalibrazione+0x16>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8003318:	2200      	movs	r2, #0
 800331a:	2102      	movs	r1, #2
 800331c:	4842      	ldr	r0, [pc, #264]	; (8003428 <ProceduraCalibrazione+0x11c>)
 800331e:	f001 fbdd 	bl	8004adc <HAL_GPIO_WritePin>
	}
	if(counter_cal_ESC <= 300){
 8003322:	4b40      	ldr	r3, [pc, #256]	; (8003424 <ProceduraCalibrazione+0x118>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800332a:	dc13      	bgt.n	8003354 <ProceduraCalibrazione+0x48>
		if(!(counter_cal_ESC % 15)){
 800332c:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <ProceduraCalibrazione+0x118>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b3e      	ldr	r3, [pc, #248]	; (800342c <ProceduraCalibrazione+0x120>)
 8003332:	fb83 1302 	smull	r1, r3, r3, r2
 8003336:	4413      	add	r3, r2
 8003338:	10d9      	asrs	r1, r3, #3
 800333a:	17d3      	asrs	r3, r2, #31
 800333c:	1ac9      	subs	r1, r1, r3
 800333e:	460b      	mov	r3, r1
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a5b      	subs	r3, r3, r1
 8003344:	1ad1      	subs	r1, r2, r3
 8003346:	2900      	cmp	r1, #0
 8003348:	d169      	bne.n	800341e <ProceduraCalibrazione+0x112>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800334a:	2120      	movs	r1, #32
 800334c:	4838      	ldr	r0, [pc, #224]	; (8003430 <ProceduraCalibrazione+0x124>)
 800334e:	f001 fbde 	bl	8004b0e <HAL_GPIO_TogglePin>
	}
	else if (counter_cal_ESC <= 1300){
		data.flag = 0;
		flag_button = 0;
	}
}
 8003352:	e064      	b.n	800341e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 600){
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <ProceduraCalibrazione+0x118>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800335c:	dc0f      	bgt.n	800337e <ProceduraCalibrazione+0x72>
		duty = NEUTRAL_PWM;
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <ProceduraCalibrazione+0x128>)
 8003360:	4a35      	ldr	r2, [pc, #212]	; (8003438 <ProceduraCalibrazione+0x12c>)
 8003362:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 8003364:	4b33      	ldr	r3, [pc, #204]	; (8003434 <ProceduraCalibrazione+0x128>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	f7fd fe67 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003372:	2201      	movs	r2, #1
 8003374:	2120      	movs	r1, #32
 8003376:	482e      	ldr	r0, [pc, #184]	; (8003430 <ProceduraCalibrazione+0x124>)
 8003378:	f001 fbb0 	bl	8004adc <HAL_GPIO_WritePin>
}
 800337c:	e04f      	b.n	800341e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 900){
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <ProceduraCalibrazione+0x118>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003386:	dc0f      	bgt.n	80033a8 <ProceduraCalibrazione+0x9c>
		duty = MAX_PWM;
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <ProceduraCalibrazione+0x128>)
 800338a:	4a2c      	ldr	r2, [pc, #176]	; (800343c <ProceduraCalibrazione+0x130>)
 800338c:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <ProceduraCalibrazione+0x128>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	eeb0 0a67 	vmov.f32	s0, s15
 8003398:	f7fd fe52 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	2120      	movs	r1, #32
 80033a0:	4823      	ldr	r0, [pc, #140]	; (8003430 <ProceduraCalibrazione+0x124>)
 80033a2:	f001 fb9b 	bl	8004adc <HAL_GPIO_WritePin>
}
 80033a6:	e03a      	b.n	800341e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 1100){
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <ProceduraCalibrazione+0x118>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f240 424c 	movw	r2, #1100	; 0x44c
 80033b0:	4293      	cmp	r3, r2
 80033b2:	dc0f      	bgt.n	80033d4 <ProceduraCalibrazione+0xc8>
		duty = MIN_PWM;
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <ProceduraCalibrazione+0x128>)
 80033b6:	4a22      	ldr	r2, [pc, #136]	; (8003440 <ProceduraCalibrazione+0x134>)
 80033b8:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <ProceduraCalibrazione+0x128>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	eeb0 0a67 	vmov.f32	s0, s15
 80033c4:	f7fd fe3c 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80033c8:	2201      	movs	r2, #1
 80033ca:	2120      	movs	r1, #32
 80033cc:	4818      	ldr	r0, [pc, #96]	; (8003430 <ProceduraCalibrazione+0x124>)
 80033ce:	f001 fb85 	bl	8004adc <HAL_GPIO_WritePin>
}
 80033d2:	e024      	b.n	800341e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 1200){
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <ProceduraCalibrazione+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80033dc:	dc13      	bgt.n	8003406 <ProceduraCalibrazione+0xfa>
		if(!(counter_cal_ESC % 15)){
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <ProceduraCalibrazione+0x118>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <ProceduraCalibrazione+0x120>)
 80033e4:	fb83 1302 	smull	r1, r3, r3, r2
 80033e8:	4413      	add	r3, r2
 80033ea:	10d9      	asrs	r1, r3, #3
 80033ec:	17d3      	asrs	r3, r2, #31
 80033ee:	1ac9      	subs	r1, r1, r3
 80033f0:	460b      	mov	r3, r1
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a5b      	subs	r3, r3, r1
 80033f6:	1ad1      	subs	r1, r2, r3
 80033f8:	2900      	cmp	r1, #0
 80033fa:	d110      	bne.n	800341e <ProceduraCalibrazione+0x112>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80033fc:	2120      	movs	r1, #32
 80033fe:	480c      	ldr	r0, [pc, #48]	; (8003430 <ProceduraCalibrazione+0x124>)
 8003400:	f001 fb85 	bl	8004b0e <HAL_GPIO_TogglePin>
}
 8003404:	e00b      	b.n	800341e <ProceduraCalibrazione+0x112>
	else if (counter_cal_ESC <= 1300){
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <ProceduraCalibrazione+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f240 5214 	movw	r2, #1300	; 0x514
 800340e:	4293      	cmp	r3, r2
 8003410:	dc05      	bgt.n	800341e <ProceduraCalibrazione+0x112>
		data.flag = 0;
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <ProceduraCalibrazione+0x138>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
		flag_button = 0;
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <ProceduraCalibrazione+0x13c>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000057c 	.word	0x2000057c
 8003428:	40021000 	.word	0x40021000
 800342c:	88888889 	.word	0x88888889
 8003430:	40020000 	.word	0x40020000
 8003434:	20000580 	.word	0x20000580
 8003438:	3d98b71c 	.word	0x3d98b71c
 800343c:	3f7d70a4 	.word	0x3f7d70a4
 8003440:	3c23d70a 	.word	0x3c23d70a
 8003444:	2000045c 	.word	0x2000045c
 8003448:	20000544 	.word	0x20000544

0800344c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003454:	e7fe      	b.n	8003454 <Error_Handler+0x8>
	...

08003458 <calcolo_yaw_rate>:
 *  	v<0, dy<0
 *  PARCHEGGIO A DESTRA
 *  	v<0, dy>0
 */

float calcolo_yaw_rate(float dy, float dx, float v, float t){
 8003458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800345c:	b08a      	sub	sp, #40	; 0x28
 800345e:	af00      	add	r7, sp, #0
 8003460:	ed87 0a07 	vstr	s0, [r7, #28]
 8003464:	edc7 0a06 	vstr	s1, [r7, #24]
 8003468:	ed87 1a05 	vstr	s2, [r7, #20]
 800346c:	edc7 1a04 	vstr	s3, [r7, #16]
	float lambda = dx;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	627b      	str	r3, [r7, #36]	; 0x24

	if(dx < 2.00){
 8003474:	edd7 7a06 	vldr	s15, [r7, #24]
 8003478:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d546      	bpl.n	8003514 <calcolo_yaw_rate+0xbc>
		//Correzione dulla dy (funzione lineare trovata sperimentalmente)
		dy += -0.04*dx + 0.08;
 8003486:	69f8      	ldr	r0, [r7, #28]
 8003488:	f7fd f866 	bl	8000558 <__aeabi_f2d>
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	69b8      	ldr	r0, [r7, #24]
 8003492:	f7fd f861 	bl	8000558 <__aeabi_f2d>
 8003496:	a3b3      	add	r3, pc, #716	; (adr r3, 8003764 <calcolo_yaw_rate+0x30c>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f8b4 	bl	8000608 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	a3b0      	add	r3, pc, #704	; (adr r3, 800376c <calcolo_yaw_rate+0x314>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f7fc fef5 	bl	800029c <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fc feef 	bl	800029c <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f7fd fb97 	bl	8000bf8 <__aeabi_d2f>
 80034ca:	4603      	mov	r3, r0
 80034cc:	61fb      	str	r3, [r7, #28]

		//Approssimazione di lambda utilizzando il teorema di pitagora
		lambda = CORREZIONE_LAMBDA*sqrt(dx*dx + dy*dy);
 80034ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80034d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80034d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80034da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	ee17 0a90 	vmov	r0, s15
 80034e6:	f7fd f837 	bl	8000558 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f009 fbff 	bl	800ccf4 <sqrt>
 80034f6:	ec51 0b10 	vmov	r0, r1, d0
 80034fa:	a39e      	add	r3, pc, #632	; (adr r3, 8003774 <calcolo_yaw_rate+0x31c>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f882 	bl	8000608 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f7fd fb74 	bl	8000bf8 <__aeabi_d2f>
 8003510:	4603      	mov	r3, r0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
	}


	//Caso limite, per non rompere l'andamento
	if(lambda*lambda <= 4 * dy*dy){
 8003514:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003518:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800351c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003520:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003524:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003528:	edd7 7a07 	vldr	s15, [r7, #28]
 800352c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	d805      	bhi.n	8003546 <calcolo_yaw_rate+0xee>
		lambda = 2 * dy;
 800353a:	edd7 7a07 	vldr	s15, [r7, #28]
 800353e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003542:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	return (2 * dy * v * PI * cos(PI / 2 - (2 * PI * t * v) / lambda)) /
 8003546:	edd7 7a07 	vldr	s15, [r7, #28]
 800354a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800354e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fc fffd 	bl	8000558 <__aeabi_f2d>
 800355e:	a387      	add	r3, pc, #540	; (adr r3, 800377c <calcolo_yaw_rate+0x324>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f850 	bl	8000608 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4614      	mov	r4, r2
 800356e:	461d      	mov	r5, r3
 8003570:	6938      	ldr	r0, [r7, #16]
 8003572:	f7fc fff1 	bl	8000558 <__aeabi_f2d>
 8003576:	a383      	add	r3, pc, #524	; (adr r3, 8003784 <calcolo_yaw_rate+0x32c>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fd f844 	bl	8000608 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4690      	mov	r8, r2
 8003586:	4699      	mov	r9, r3
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f7fc ffe5 	bl	8000558 <__aeabi_f2d>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4640      	mov	r0, r8
 8003594:	4649      	mov	r1, r9
 8003596:	f7fd f837 	bl	8000608 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4690      	mov	r8, r2
 80035a0:	4699      	mov	r9, r3
 80035a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035a4:	f7fc ffd8 	bl	8000558 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4640      	mov	r0, r8
 80035ae:	4649      	mov	r1, r9
 80035b0:	f7fd f954 	bl	800085c <__aeabi_ddiv>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	a174      	add	r1, pc, #464	; (adr r1, 800378c <calcolo_yaw_rate+0x334>)
 80035ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035be:	f7fc fe6b 	bl	8000298 <__aeabi_dsub>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	ec43 2b17 	vmov	d7, r2, r3
 80035ca:	eeb0 0a47 	vmov.f32	s0, s14
 80035ce:	eef0 0a67 	vmov.f32	s1, s15
 80035d2:	f009 fbbd 	bl	800cd50 <cos>
 80035d6:	ec53 2b10 	vmov	r2, r3, d0
 80035da:	4620      	mov	r0, r4
 80035dc:	4629      	mov	r1, r5
 80035de:	f7fd f813 	bl	8000608 <__aeabi_dmul>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
			(lambda * lambda * sqrt(1 - pow((dy * v / lambda - (dy * v * sin(PI / 2 - (2 * t * v * PI) / lambda)) / lambda), 2) / (v * v)));
 80035ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035f2:	ee17 0a90 	vmov	r0, s15
 80035f6:	f7fc ffaf 	bl	8000558 <__aeabi_f2d>
 80035fa:	4680      	mov	r8, r0
 80035fc:	4689      	mov	r9, r1
 80035fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003602:	edd7 7a05 	vldr	s15, [r7, #20]
 8003606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800360a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800360e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003612:	ee16 0a90 	vmov	r0, s13
 8003616:	f7fc ff9f 	bl	8000558 <__aeabi_f2d>
 800361a:	4682      	mov	sl, r0
 800361c:	468b      	mov	fp, r1
 800361e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003622:	edd7 7a05 	vldr	s15, [r7, #20]
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	ee17 0a90 	vmov	r0, s15
 800362e:	f7fc ff93 	bl	8000558 <__aeabi_f2d>
 8003632:	e9c7 0100 	strd	r0, r1, [r7]
 8003636:	edd7 7a04 	vldr	s15, [r7, #16]
 800363a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800363e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	ee17 0a90 	vmov	r0, s15
 800364a:	f7fc ff85 	bl	8000558 <__aeabi_f2d>
 800364e:	a34b      	add	r3, pc, #300	; (adr r3, 800377c <calcolo_yaw_rate+0x324>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ffd8 	bl	8000608 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4614      	mov	r4, r2
 800365e:	461d      	mov	r5, r3
 8003660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003662:	f7fc ff79 	bl	8000558 <__aeabi_f2d>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f7fd f8f5 	bl	800085c <__aeabi_ddiv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	a145      	add	r1, pc, #276	; (adr r1, 800378c <calcolo_yaw_rate+0x334>)
 8003678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800367c:	f7fc fe0c 	bl	8000298 <__aeabi_dsub>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	ec43 2b17 	vmov	d7, r2, r3
 8003688:	eeb0 0a47 	vmov.f32	s0, s14
 800368c:	eef0 0a67 	vmov.f32	s1, s15
 8003690:	f009 fbb2 	bl	800cdf8 <sin>
 8003694:	ec53 2b10 	vmov	r2, r3, d0
 8003698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800369c:	f7fc ffb4 	bl	8000608 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036aa:	f7fc ff55 	bl	8000558 <__aeabi_f2d>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fd f8d1 	bl	800085c <__aeabi_ddiv>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4650      	mov	r0, sl
 80036c0:	4659      	mov	r1, fp
 80036c2:	f7fc fde9 	bl	8000298 <__aeabi_dsub>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ec43 2b17 	vmov	d7, r2, r3
 80036ce:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003758 <calcolo_yaw_rate+0x300>
 80036d2:	eeb0 0a47 	vmov.f32	s0, s14
 80036d6:	eef0 0a67 	vmov.f32	s1, s15
 80036da:	f009 fa9b 	bl	800cc14 <pow>
 80036de:	ec55 4b10 	vmov	r4, r5, d0
 80036e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036ea:	ee17 0a90 	vmov	r0, s15
 80036ee:	f7fc ff33 	bl	8000558 <__aeabi_f2d>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f7fd f8af 	bl	800085c <__aeabi_ddiv>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	4916      	ldr	r1, [pc, #88]	; (8003760 <calcolo_yaw_rate+0x308>)
 8003708:	f7fc fdc6 	bl	8000298 <__aeabi_dsub>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	ec43 2b17 	vmov	d7, r2, r3
 8003714:	eeb0 0a47 	vmov.f32	s0, s14
 8003718:	eef0 0a67 	vmov.f32	s1, s15
 800371c:	f009 faea 	bl	800ccf4 <sqrt>
 8003720:	ec53 2b10 	vmov	r2, r3, d0
 8003724:	4640      	mov	r0, r8
 8003726:	4649      	mov	r1, r9
 8003728:	f7fc ff6e 	bl	8000608 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
	return (2 * dy * v * PI * cos(PI / 2 - (2 * PI * t * v) / lambda)) /
 8003730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003734:	f7fd f892 	bl	800085c <__aeabi_ddiv>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f7fd fa5a 	bl	8000bf8 <__aeabi_d2f>
 8003744:	4603      	mov	r3, r0
 8003746:	ee07 3a90 	vmov	s15, r3
}
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	00000000 	.word	0x00000000
 800375c:	40000000 	.word	0x40000000
 8003760:	3ff00000 	.word	0x3ff00000
 8003764:	47ae147b 	.word	0x47ae147b
 8003768:	bfa47ae1 	.word	0xbfa47ae1
 800376c:	47ae147b 	.word	0x47ae147b
 8003770:	3fb47ae1 	.word	0x3fb47ae1
 8003774:	147ae148 	.word	0x147ae148
 8003778:	3ff147ae 	.word	0x3ff147ae
 800377c:	54524550 	.word	0x54524550
 8003780:	400921fb 	.word	0x400921fb
 8003784:	54524550 	.word	0x54524550
 8003788:	401921fb 	.word	0x401921fb
 800378c:	54524550 	.word	0x54524550
 8003790:	3ff921fb 	.word	0x3ff921fb
 8003794:	00000000 	.word	0x00000000

08003798 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 80037a2:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <servo_motor+0xb8>)
 80037a4:	617b      	str	r3, [r7, #20]
	float ccr;
	float conv_angolo;

	if(angolo < MIN_ANGOLO){
 80037a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037aa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003854 <servo_motor+0xbc>
 80037ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	d502      	bpl.n	80037be <servo_motor+0x26>
		angolo = MIN_ANGOLO;
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <servo_motor+0xc0>)
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e00a      	b.n	80037d4 <servo_motor+0x3c>
	}

	else if (angolo > MAX_ANGOLO){
 80037be:	edd7 7a01 	vldr	s15, [r7, #4]
 80037c2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800385c <servo_motor+0xc4>
 80037c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	dd01      	ble.n	80037d4 <servo_motor+0x3c>
		angolo = MAX_ANGOLO;
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <servo_motor+0xc8>)
 80037d2:	607b      	str	r3, [r7, #4]
	}

	conv_angolo = angolo + DRITTO;
 80037d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003864 <servo_motor+0xcc>
 80037dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037e0:	edc7 7a04 	vstr	s15, [r7, #16]

	ccr=(((0.01111*conv_angolo)+0.5)/tic);
 80037e4:	6938      	ldr	r0, [r7, #16]
 80037e6:	f7fc feb7 	bl	8000558 <__aeabi_f2d>
 80037ea:	a317      	add	r3, pc, #92	; (adr r3, 8003848 <servo_motor+0xb0>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f7fc ff0a 	bl	8000608 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <servo_motor+0xd0>)
 8003802:	f7fc fd4b 	bl	800029c <__adddf3>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4614      	mov	r4, r2
 800380c:	461d      	mov	r5, r3
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7fc fea2 	bl	8000558 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fd f81e 	bl	800085c <__aeabi_ddiv>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f9e6 	bl	8000bf8 <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=ccr;
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <servo_motor+0xd4>)
 8003832:	edd7 7a03 	vldr	s15, [r7, #12]
 8003836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383a:	ee17 2a90 	vmov	r2, s15
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	f544bb1b 	.word	0xf544bb1b
 800384c:	3f86c0d6 	.word	0x3f86c0d6
 8003850:	3ca3d70a 	.word	0x3ca3d70a
 8003854:	c2100000 	.word	0xc2100000
 8003858:	c2100000 	.word	0xc2100000
 800385c:	42100000 	.word	0x42100000
 8003860:	42100000 	.word	0x42100000
 8003864:	42400000 	.word	0x42400000
 8003868:	3fe00000 	.word	0x3fe00000
 800386c:	40010000 	.word	0x40010000

08003870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_MspInit+0x4c>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <HAL_MspInit+0x4c>)
 8003880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003884:	6453      	str	r3, [r2, #68]	; 0x44
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_MspInit+0x4c>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_MspInit+0x4c>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <HAL_MspInit+0x4c>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_MspInit+0x4c>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038ae:	2007      	movs	r0, #7
 80038b0:	f000 ff36 	bl	8004720 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_ADC_MspInit+0x7c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d127      	bne.n	8003932 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_ADC_MspInit+0x80>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <HAL_ADC_MspInit+0x80>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_ADC_MspInit+0x80>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_ADC_MspInit+0x80>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_ADC_MspInit+0x80>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_ADC_MspInit+0x80>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800391a:	2302      	movs	r3, #2
 800391c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800391e:	2303      	movs	r3, #3
 8003920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <HAL_ADC_MspInit+0x84>)
 800392e:	f000 ff39 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	; 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40012000 	.word	0x40012000
 8003940:	40023800 	.word	0x40023800
 8003944:	40020800 	.word	0x40020800

08003948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_I2C_MspInit+0x84>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d12b      	bne.n	80039c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 8003986:	23c0      	movs	r3, #192	; 0xc0
 8003988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398a:	2312      	movs	r3, #18
 800398c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003992:	2303      	movs	r3, #3
 8003994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003996:	2304      	movs	r3, #4
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399a:	f107 0314 	add.w	r3, r7, #20
 800399e:	4619      	mov	r1, r3
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <HAL_I2C_MspInit+0x8c>)
 80039a2:	f000 feff 	bl	80047a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 80039b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_I2C_MspInit+0x88>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	; 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40005400 	.word	0x40005400
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020400 	.word	0x40020400

080039d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_TIM_Base_MspInit+0xb8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d11e      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6453      	str	r3, [r2, #68]	; 0x44
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2018      	movs	r0, #24
 8003a0c:	f000 fe93 	bl	8004736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003a10:	2018      	movs	r0, #24
 8003a12:	f000 feac 	bl	800476e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	201a      	movs	r0, #26
 8003a1c:	f000 fe8b 	bl	8004736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a20:	201a      	movs	r0, #26
 8003a22:	f000 fea4 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003a26:	e02e      	b.n	8003a86 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_TIM_Base_MspInit+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
}
 8003a4e:	e01a      	b.n	8003a86 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <HAL_TIM_Base_MspInit+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d115      	bne.n	8003a86 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_TIM_Base_MspInit+0xbc>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	201a      	movs	r0, #26
 8003a7c:	f000 fe5b 	bl	8004736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a80:	201a      	movs	r0, #26
 8003a82:	f000 fe74 	bl	800476e <HAL_NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800

08003aa0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d12b      	bne.n	8003b1a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8003afa:	2303      	movs	r3, #3
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b16:	f000 fe45 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b1a:	bf00      	nop
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020000 	.word	0x40020000

08003b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_TIM_MspPostInit+0xb4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d11f      	bne.n	8003b8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8003b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	4818      	ldr	r0, [pc, #96]	; (8003be8 <HAL_TIM_MspPostInit+0xbc>)
 8003b88:	f000 fe0c 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003b8c:	e023      	b.n	8003bd6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <HAL_TIM_MspPostInit+0xc0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d11e      	bne.n	8003bd6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003ba2:	f043 0302 	orr.w	r3, r3, #2
 8003ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_TIM_MspPostInit+0xb8>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8003bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4807      	ldr	r0, [pc, #28]	; (8003bf0 <HAL_TIM_MspPostInit+0xc4>)
 8003bd2:	f000 fde7 	bl	80047a4 <HAL_GPIO_Init>
}
 8003bd6:	bf00      	nop
 8003bd8:	3728      	adds	r7, #40	; 0x28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40020400 	.word	0x40020400

08003bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a32      	ldr	r2, [pc, #200]	; (8003cdc <HAL_UART_MspInit+0xe8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d12c      	bne.n	8003c70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a30      	ldr	r2, [pc, #192]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8003c4e:	230c      	movs	r3, #12
 8003c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c52:	2302      	movs	r3, #2
 8003c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c5e:	2307      	movs	r3, #7
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	4619      	mov	r1, r3
 8003c68:	481e      	ldr	r0, [pc, #120]	; (8003ce4 <HAL_UART_MspInit+0xf0>)
 8003c6a:	f000 fd9b 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c6e:	e030      	b.n	8003cd2 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_UART_MspInit+0xf4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d12b      	bne.n	8003cd2 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c84:	f043 0320 	orr.w	r3, r3, #32
 8003c88:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_UART_MspInit+0xec>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cb2:	23c0      	movs	r3, #192	; 0xc0
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <HAL_UART_MspInit+0xf8>)
 8003cce:	f000 fd69 	bl	80047a4 <HAL_GPIO_Init>
}
 8003cd2:	bf00      	nop
 8003cd4:	3730      	adds	r7, #48	; 0x30
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	40020800 	.word	0x40020800

08003cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cf4:	e7fe      	b.n	8003cf4 <NMI_Handler+0x4>

08003cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <HardFault_Handler+0x4>

08003cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <MemManage_Handler+0x4>

08003d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <BusFault_Handler+0x4>

08003d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <UsageFault_Handler+0x4>

08003d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3c:	f000 f97a 	bl	8004034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003d4a:	f002 ff79 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200002b4 	.word	0x200002b4

08003d58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d5c:	4803      	ldr	r0, [pc, #12]	; (8003d6c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003d5e:	f002 ff6f 	bl	8006c40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003d62:	4803      	ldr	r0, [pc, #12]	; (8003d70 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003d64:	f002 ff6c 	bl	8006c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	200002b4 	.word	0x200002b4
 8003d70:	2000038c 	.word	0x2000038c

08003d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d7c:	f000 fee2 	bl	8004b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d84:	f000 fede 	bl	8004b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return 1;
 8003d90:	2301      	movs	r3, #1
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_kill>:

int _kill(int pid, int sig)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003da6:	f006 facb 	bl	800a340 <__errno>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2216      	movs	r2, #22
 8003dae:	601a      	str	r2, [r3, #0]
  return -1;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_exit>:

void _exit (int status)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ffe7 	bl	8003d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dce:	e7fe      	b.n	8003dce <_exit+0x12>

08003dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00a      	b.n	8003df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003de2:	f3af 8000 	nop.w
 8003de6:	4601      	mov	r1, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	b2ca      	uxtb	r2, r1
 8003df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dbf0      	blt.n	8003de2 <_read+0x12>
  }

  return len;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e009      	b.n	8003e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fa03 	bl	8003230 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf1      	blt.n	8003e1c <_write+0x12>
  }
  return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_close>:

int _close(int file)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_isatty>:

int _isatty(int file)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <_sbrk+0x5c>)
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <_sbrk+0x60>)
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <_sbrk+0x64>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <_sbrk+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <_sbrk+0x64>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d207      	bcs.n	8003eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003edc:	f006 fa30 	bl	800a340 <__errno>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	e009      	b.n	8003f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <_sbrk+0x64>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <_sbrk+0x64>)
 8003efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20018000 	.word	0x20018000
 8003f0c:	00000400 	.word	0x00000400
 8003f10:	200005b8 	.word	0x200005b8
 8003f14:	20000710 	.word	0x20000710

08003f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <SystemInit+0x20>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <SystemInit+0x20>)
 8003f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f42:	490e      	ldr	r1, [pc, #56]	; (8003f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f44:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f48:	e002      	b.n	8003f50 <LoopCopyDataInit>

08003f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f4e:	3304      	adds	r3, #4

08003f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f54:	d3f9      	bcc.n	8003f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f58:	4c0b      	ldr	r4, [pc, #44]	; (8003f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f5c:	e001      	b.n	8003f62 <LoopFillZerobss>

08003f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f60:	3204      	adds	r2, #4

08003f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f64:	d3fb      	bcc.n	8003f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f66:	f7ff ffd7 	bl	8003f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f006 f9ef 	bl	800a34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6e:	f7fd fd0d 	bl	800198c <main>
  bx  lr    
 8003f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003f80:	0800f460 	.word	0x0800f460
  ldr r2, =_sbss
 8003f84:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003f88:	2000070c 	.word	0x2000070c

08003f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_Init+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_Init+0x40>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_Init+0x40>)
 8003fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_Init+0x40>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f000 fbb1 	bl	8004720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f000 f808 	bl	8003fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fc4:	f7ff fc54 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00

08003fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_InitTick+0x54>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_InitTick+0x58>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fbc9 	bl	800478a <HAL_SYSTICK_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00e      	b.n	8004020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d80a      	bhi.n	800401e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004008:	2200      	movs	r2, #0
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f000 fb91 	bl	8004736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004014:	4a06      	ldr	r2, [pc, #24]	; (8004030 <HAL_InitTick+0x5c>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000010 	.word	0x20000010
 800402c:	20000018 	.word	0x20000018
 8004030:	20000014 	.word	0x20000014

08004034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_IncTick+0x20>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_IncTick+0x24>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4413      	add	r3, r2
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_IncTick+0x24>)
 8004046:	6013      	str	r3, [r2, #0]
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000018 	.word	0x20000018
 8004058:	200005bc 	.word	0x200005bc

0800405c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return uwTick;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_GetTick+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	200005bc 	.word	0x200005bc

08004074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800407c:	f7ff ffee 	bl	800405c <HAL_GetTick>
 8004080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d005      	beq.n	800409a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_Delay+0x44>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800409a:	bf00      	nop
 800409c:	f7ff ffde 	bl	800405c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d8f7      	bhi.n	800409c <HAL_Delay+0x28>
  {
  }
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000018 	.word	0x20000018

080040bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e033      	b.n	800413a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fbf0 	bl	80038c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d118      	bne.n	800412c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004102:	f023 0302 	bic.w	r3, r3, #2
 8004106:	f043 0202 	orr.w	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f93a 	bl	8004388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
 800412a:	e001      	b.n	8004130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1c>
 800415c:	2302      	movs	r3, #2
 800415e:	e105      	b.n	800436c <HAL_ADC_ConfigChannel+0x228>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b09      	cmp	r3, #9
 800416e:	d925      	bls.n	80041bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68d9      	ldr	r1, [r3, #12]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	3b1e      	subs	r3, #30
 8004186:	2207      	movs	r2, #7
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43da      	mvns	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	400a      	ands	r2, r1
 8004194:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68d9      	ldr	r1, [r3, #12]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	4618      	mov	r0, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4403      	add	r3, r0
 80041ae:	3b1e      	subs	r3, #30
 80041b0:	409a      	lsls	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	e022      	b.n	8004202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6919      	ldr	r1, [r3, #16]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	2207      	movs	r2, #7
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	400a      	ands	r2, r1
 80041de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6919      	ldr	r1, [r3, #16]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4618      	mov	r0, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4403      	add	r3, r0
 80041f8:	409a      	lsls	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d824      	bhi.n	8004254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	3b05      	subs	r3, #5
 800421c:	221f      	movs	r2, #31
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	400a      	ands	r2, r1
 800422a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	4618      	mov	r0, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3b05      	subs	r3, #5
 8004246:	fa00 f203 	lsl.w	r2, r0, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
 8004252:	e04c      	b.n	80042ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d824      	bhi.n	80042a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	3b23      	subs	r3, #35	; 0x23
 800426e:	221f      	movs	r2, #31
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43da      	mvns	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	400a      	ands	r2, r1
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	3b23      	subs	r3, #35	; 0x23
 8004298:	fa00 f203 	lsl.w	r2, r0, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
 80042a4:	e023      	b.n	80042ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	3b41      	subs	r3, #65	; 0x41
 80042b8:	221f      	movs	r2, #31
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	400a      	ands	r2, r1
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4618      	mov	r0, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	3b41      	subs	r3, #65	; 0x41
 80042e2:	fa00 f203 	lsl.w	r2, r0, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_ADC_ConfigChannel+0x234>)
 80042f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <HAL_ADC_ConfigChannel+0x238>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d109      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1cc>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b12      	cmp	r3, #18
 8004302:	d105      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <HAL_ADC_ConfigChannel+0x238>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d123      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x21e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b10      	cmp	r3, #16
 8004320:	d003      	beq.n	800432a <HAL_ADC_ConfigChannel+0x1e6>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b11      	cmp	r3, #17
 8004328:	d11b      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b10      	cmp	r3, #16
 800433c:	d111      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_ADC_ConfigChannel+0x23c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_ADC_ConfigChannel+0x240>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	0c9a      	lsrs	r2, r3, #18
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004354:	e002      	b.n	800435c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3b01      	subs	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f9      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012300 	.word	0x40012300
 800437c:	40012000 	.word	0x40012000
 8004380:	20000010 	.word	0x20000010
 8004384:	431bde83 	.word	0x431bde83

08004388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004390:	4b79      	ldr	r3, [pc, #484]	; (8004578 <ADC_Init+0x1f0>)
 8004392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	021a      	lsls	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	4a58      	ldr	r2, [pc, #352]	; (800457c <ADC_Init+0x1f4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800442e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	e00f      	b.n	8004486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0202 	bic.w	r2, r2, #2
 8004494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7e1b      	ldrb	r3, [r3, #24]
 80044a0:	005a      	lsls	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	3b01      	subs	r3, #1
 80044e0:	035a      	lsls	r2, r3, #13
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	e007      	b.n	80044fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	3b01      	subs	r3, #1
 8004518:	051a      	lsls	r2, r3, #20
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800453e:	025a      	lsls	r2, r3, #9
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	029a      	lsls	r2, r3, #10
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40012300 	.word	0x40012300
 800457c:	0f000001 	.word	0x0f000001

08004580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800459c:	4013      	ands	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045b2:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <__NVIC_SetPriorityGrouping+0x44>)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	60d3      	str	r3, [r2, #12]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__NVIC_GetPriorityGrouping+0x18>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 0307 	and.w	r3, r3, #7
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	db0b      	blt.n	800460e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	4907      	ldr	r1, [pc, #28]	; (800461c <__NVIC_EnableIRQ+0x38>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2001      	movs	r0, #1
 8004606:	fa00 f202 	lsl.w	r2, r0, r2
 800460a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e100 	.word	0xe000e100

08004620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db0a      	blt.n	800464a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	490c      	ldr	r1, [pc, #48]	; (800466c <__NVIC_SetPriority+0x4c>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	440b      	add	r3, r1
 8004644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004648:	e00a      	b.n	8004660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <__NVIC_SetPriority+0x50>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3b04      	subs	r3, #4
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	440b      	add	r3, r1
 800465e:	761a      	strb	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f1c3 0307 	rsb	r3, r3, #7
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf28      	it	cs
 8004692:	2304      	movcs	r3, #4
 8004694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3304      	adds	r3, #4
 800469a:	2b06      	cmp	r3, #6
 800469c:	d902      	bls.n	80046a4 <NVIC_EncodePriority+0x30>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3b03      	subs	r3, #3
 80046a2:	e000      	b.n	80046a6 <NVIC_EncodePriority+0x32>
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	401a      	ands	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046bc:	f04f 31ff 	mov.w	r1, #4294967295
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	43d9      	mvns	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	4313      	orrs	r3, r2
         );
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ec:	d301      	bcc.n	80046f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ee:	2301      	movs	r3, #1
 80046f0:	e00f      	b.n	8004712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <SysTick_Config+0x40>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046fa:	210f      	movs	r1, #15
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	f7ff ff8e 	bl	8004620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <SysTick_Config+0x40>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <SysTick_Config+0x40>)
 800470c:	2207      	movs	r2, #7
 800470e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	e000e010 	.word	0xe000e010

08004720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff29 	bl	8004580 <__NVIC_SetPriorityGrouping>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	4603      	mov	r3, r0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004748:	f7ff ff3e 	bl	80045c8 <__NVIC_GetPriorityGrouping>
 800474c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f7ff ff8e 	bl	8004674 <NVIC_EncodePriority>
 8004758:	4602      	mov	r2, r0
 800475a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff5d 	bl	8004620 <__NVIC_SetPriority>
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff31 	bl	80045e4 <__NVIC_EnableIRQ>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ffa2 	bl	80046dc <SysTick_Config>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e159      	b.n	8004a74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	f040 8148 	bne.w	8004a6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d005      	beq.n	80047f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d130      	bne.n	8004858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2203      	movs	r2, #3
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 0201 	and.w	r2, r3, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b03      	cmp	r3, #3
 8004862:	d017      	beq.n	8004894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d123      	bne.n	80048e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	220f      	movs	r2, #15
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	08da      	lsrs	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3208      	adds	r2, #8
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	2203      	movs	r2, #3
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a2 	beq.w	8004a6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	4b57      	ldr	r3, [pc, #348]	; (8004a8c <HAL_GPIO_Init+0x2e8>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a56      	ldr	r2, [pc, #344]	; (8004a8c <HAL_GPIO_Init+0x2e8>)
 8004934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b54      	ldr	r3, [pc, #336]	; (8004a8c <HAL_GPIO_Init+0x2e8>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004946:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_GPIO_Init+0x2ec>)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a49      	ldr	r2, [pc, #292]	; (8004a94 <HAL_GPIO_Init+0x2f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d019      	beq.n	80049a6 <HAL_GPIO_Init+0x202>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a48      	ldr	r2, [pc, #288]	; (8004a98 <HAL_GPIO_Init+0x2f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_GPIO_Init+0x1fe>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a47      	ldr	r2, [pc, #284]	; (8004a9c <HAL_GPIO_Init+0x2f8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00d      	beq.n	800499e <HAL_GPIO_Init+0x1fa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a46      	ldr	r2, [pc, #280]	; (8004aa0 <HAL_GPIO_Init+0x2fc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <HAL_GPIO_Init+0x1f6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a45      	ldr	r2, [pc, #276]	; (8004aa4 <HAL_GPIO_Init+0x300>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_GPIO_Init+0x1f2>
 8004992:	2304      	movs	r3, #4
 8004994:	e008      	b.n	80049a8 <HAL_GPIO_Init+0x204>
 8004996:	2307      	movs	r3, #7
 8004998:	e006      	b.n	80049a8 <HAL_GPIO_Init+0x204>
 800499a:	2303      	movs	r3, #3
 800499c:	e004      	b.n	80049a8 <HAL_GPIO_Init+0x204>
 800499e:	2302      	movs	r3, #2
 80049a0:	e002      	b.n	80049a8 <HAL_GPIO_Init+0x204>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_GPIO_Init+0x204>
 80049a6:	2300      	movs	r3, #0
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	f002 0203 	and.w	r2, r2, #3
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	4093      	lsls	r3, r2
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b8:	4935      	ldr	r1, [pc, #212]	; (8004a90 <HAL_GPIO_Init+0x2ec>)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3302      	adds	r3, #2
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ea:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f0:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a1a:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	f67f aea2 	bls.w	80047c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40013800 	.word	0x40013800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40013c00 	.word	0x40013c00

08004aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e001      	b.n	8004ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aec:	787b      	ldrb	r3, [r7, #1]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004af8:	e003      	b.n	8004b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004afa:	887b      	ldrh	r3, [r7, #2]
 8004afc:	041a      	lsls	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b20:	887a      	ldrh	r2, [r7, #2]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	041a      	lsls	r2, r3, #16
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	400b      	ands	r3, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b50:	695a      	ldr	r2, [r3, #20]
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d006      	beq.n	8004b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b5a:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fae8 	bl	8003138 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40013c00 	.word	0x40013c00

08004b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e12b      	b.n	8004dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe fed4 	bl	8003948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2224      	movs	r2, #36	; 0x24
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f001 fd1a 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4a81      	ldr	r2, [pc, #516]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d807      	bhi.n	8004bf8 <HAL_I2C_Init+0x84>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a80      	ldr	r2, [pc, #512]	; (8004dec <HAL_I2C_Init+0x278>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e006      	b.n	8004c06 <HAL_I2C_Init+0x92>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	; (8004df0 <HAL_I2C_Init+0x27c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bf94      	ite	ls
 8004c00:	2301      	movls	r3, #1
 8004c02:	2300      	movhi	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0e7      	b.n	8004dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a78      	ldr	r2, [pc, #480]	; (8004df4 <HAL_I2C_Init+0x280>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0c9b      	lsrs	r3, r3, #18
 8004c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a6a      	ldr	r2, [pc, #424]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d802      	bhi.n	8004c48 <HAL_I2C_Init+0xd4>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3301      	adds	r3, #1
 8004c46:	e009      	b.n	8004c5c <HAL_I2C_Init+0xe8>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	4a69      	ldr	r2, [pc, #420]	; (8004df8 <HAL_I2C_Init+0x284>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	495c      	ldr	r1, [pc, #368]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d819      	bhi.n	8004cb0 <HAL_I2C_Init+0x13c>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1e59      	subs	r1, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c90:	400b      	ands	r3, r1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_I2C_Init+0x138>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1e59      	subs	r1, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004caa:	e051      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004cac:	2304      	movs	r3, #4
 8004cae:	e04f      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d111      	bne.n	8004cdc <HAL_I2C_Init+0x168>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e012      	b.n	8004d02 <HAL_I2C_Init+0x18e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1e58      	subs	r0, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	0099      	lsls	r1, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Init+0x196>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e022      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <HAL_I2C_Init+0x1bc>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e58      	subs	r0, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	440b      	add	r3, r1
 8004d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	e00f      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	0099      	lsls	r1, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	6809      	ldr	r1, [r1, #0]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6911      	ldr	r1, [r2, #16]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	000186a0 	.word	0x000186a0
 8004dec:	001e847f 	.word	0x001e847f
 8004df0:	003d08ff 	.word	0x003d08ff
 8004df4:	431bde83 	.word	0x431bde83
 8004df8:	10624dd3 	.word	0x10624dd3

08004dfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	461a      	mov	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	817b      	strh	r3, [r7, #10]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff f924 	bl	800405c <HAL_GetTick>
 8004e14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	f040 80e0 	bne.w	8004fe4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2319      	movs	r3, #25
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4970      	ldr	r1, [pc, #448]	; (8004ff0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fda0 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0d3      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2C_Master_Transmit+0x50>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e0cc      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d007      	beq.n	8004e72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	; 0x21
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	893a      	ldrh	r2, [r7, #8]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	; (8004ff4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eb4:	8979      	ldrh	r1, [r7, #10]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fc0a 	bl	80056d4 <I2C_MasterRequestWrite>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e08d      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ee0:	e066      	b.n	8004fb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fe1a 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e06b      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d11b      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x188>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	6a39      	ldr	r1, [r7, #32]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fe0a 	bl	8005ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d107      	bne.n	8004fac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e01a      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d194      	bne.n	8004ee2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	00100002 	.word	0x00100002
 8004ff4:	ffff0000 	.word	0xffff0000

08004ff8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	; 0x30
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	817b      	strh	r3, [r7, #10]
 8005008:	4613      	mov	r3, r2
 800500a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff f826 	bl	800405c <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 820b 	bne.w	8005436 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2319      	movs	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	497c      	ldr	r1, [pc, #496]	; (800521c <HAL_I2C_Master_Receive+0x224>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fca2 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	e1fe      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_I2C_Master_Receive+0x50>
 8005044:	2302      	movs	r3, #2
 8005046:	e1f7      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d007      	beq.n	800506e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2222      	movs	r2, #34	; 0x22
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2210      	movs	r2, #16
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	893a      	ldrh	r2, [r7, #8]
 800509e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a5c      	ldr	r2, [pc, #368]	; (8005220 <HAL_I2C_Master_Receive+0x228>)
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050b0:	8979      	ldrh	r1, [r7, #10]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fb8e 	bl	80057d8 <I2C_MasterRequestRead>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e1b8      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d113      	bne.n	80050f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ce:	2300      	movs	r3, #0
 80050d0:	623b      	str	r3, [r7, #32]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e18c      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11b      	bne.n	8005136 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e16c      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b02      	cmp	r3, #2
 800513c:	d11b      	bne.n	8005176 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	e14c      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800519c:	e138      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	f200 80f1 	bhi.w	800538a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d123      	bne.n	80051f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fd35 	bl	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e139      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f6:	e10b      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d14e      	bne.n	800529e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2200      	movs	r2, #0
 8005208:	4906      	ldr	r1, [pc, #24]	; (8005224 <HAL_I2C_Master_Receive+0x22c>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fbb2 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e10e      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
 800521a:	bf00      	nop
 800521c:	00100002 	.word	0x00100002
 8005220:	ffff0000 	.word	0xffff0000
 8005224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800529c:	e0b8      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	4966      	ldr	r1, [pc, #408]	; (8005440 <HAL_I2C_Master_Receive+0x448>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fb63 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0bf      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2200      	movs	r2, #0
 8005302:	494f      	ldr	r1, [pc, #316]	; (8005440 <HAL_I2C_Master_Receive+0x448>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fb35 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e091      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005388:	e042      	b.n	8005410 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fc48 	bl	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e04c      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d118      	bne.n	8005410 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f aec2 	bne.w	800519e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00010004 	.word	0x00010004

08005444 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	460b      	mov	r3, r1
 8005452:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005454:	f7fe fe02 	bl	800405c <HAL_GetTick>
 8005458:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b20      	cmp	r3, #32
 8005468:	f040 8111 	bne.w	800568e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2319      	movs	r3, #25
 8005472:	2201      	movs	r2, #1
 8005474:	4988      	ldr	r1, [pc, #544]	; (8005698 <HAL_I2C_IsDeviceReady+0x254>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa7c 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	e104      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_I2C_IsDeviceReady+0x50>
 8005490:	2302      	movs	r3, #2
 8005492:	e0fd      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d007      	beq.n	80054ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2224      	movs	r2, #36	; 0x24
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a70      	ldr	r2, [pc, #448]	; (800569c <HAL_I2C_IsDeviceReady+0x258>)
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fa3a 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d103      	bne.n	800551e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e0b6      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005530:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005532:	f7fe fd93 	bl	800405c <HAL_GetTick>
 8005536:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005566:	e025      	b.n	80055b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005568:	f7fe fd78 	bl	800405c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <HAL_I2C_IsDeviceReady+0x13a>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22a0      	movs	r2, #160	; 0xa0
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b02      	cmp	r3, #2
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2ba0      	cmp	r3, #160	; 0xa0
 80055be:	d005      	beq.n	80055cc <HAL_I2C_IsDeviceReady+0x188>
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <HAL_I2C_IsDeviceReady+0x188>
 80055c6:	7dbb      	ldrb	r3, [r7, #22]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0cd      	beq.n	8005568 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d129      	bne.n	8005636 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2319      	movs	r3, #25
 800560e:	2201      	movs	r2, #1
 8005610:	4921      	ldr	r1, [pc, #132]	; (8005698 <HAL_I2C_IsDeviceReady+0x254>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f9ae 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e036      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e02c      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800564e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2319      	movs	r3, #25
 8005656:	2201      	movs	r2, #1
 8005658:	490f      	ldr	r1, [pc, #60]	; (8005698 <HAL_I2C_IsDeviceReady+0x254>)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f98a 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e012      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	3301      	adds	r3, #1
 800566e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	f4ff af32 	bcc.w	80054de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800568e:	2302      	movs	r3, #2
  }
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	00100002 	.word	0x00100002
 800569c:	ffff0000 	.word	0xffff0000

080056a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	460b      	mov	r3, r1
 80056e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d006      	beq.n	80056fe <I2C_MasterRequestWrite+0x2a>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d003      	beq.n	80056fe <I2C_MasterRequestWrite+0x2a>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056fc:	d108      	bne.n	8005710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e00b      	b.n	8005728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b12      	cmp	r3, #18
 8005716:	d107      	bne.n	8005728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f91d 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00d      	beq.n	800575c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	d103      	bne.n	8005758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e035      	b.n	80057c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005764:	d108      	bne.n	8005778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	e01b      	b.n	80057b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	11db      	asrs	r3, r3, #7
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 0306 	and.w	r3, r3, #6
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f063 030f 	orn	r3, r3, #15
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	490e      	ldr	r1, [pc, #56]	; (80057d0 <I2C_MasterRequestWrite+0xfc>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f943 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e010      	b.n	80057c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	4907      	ldr	r1, [pc, #28]	; (80057d4 <I2C_MasterRequestWrite+0x100>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f933 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	00010008 	.word	0x00010008
 80057d4:	00010002 	.word	0x00010002

080057d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	460b      	mov	r3, r1
 80057e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d006      	beq.n	8005812 <I2C_MasterRequestRead+0x3a>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d003      	beq.n	8005812 <I2C_MasterRequestRead+0x3a>
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005810:	d108      	bne.n	8005824 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e00b      	b.n	800583c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	2b11      	cmp	r3, #17
 800582a:	d107      	bne.n	800583c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800583a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f893 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005862:	d103      	bne.n	800586c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e079      	b.n	8005964 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005878:	d108      	bne.n	800588c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800587a:	897b      	ldrh	r3, [r7, #10]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]
 800588a:	e05f      	b.n	800594c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800588c:	897b      	ldrh	r3, [r7, #10]
 800588e:	11db      	asrs	r3, r3, #7
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 0306 	and.w	r3, r3, #6
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f063 030f 	orn	r3, r3, #15
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4930      	ldr	r1, [pc, #192]	; (800596c <I2C_MasterRequestRead+0x194>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8b9 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e054      	b.n	8005964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ba:	897b      	ldrh	r3, [r7, #10]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4929      	ldr	r1, [pc, #164]	; (8005970 <I2C_MasterRequestRead+0x198>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8a9 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e044      	b.n	8005964 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f831 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d103      	bne.n	8005930 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e017      	b.n	8005964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005934:	897b      	ldrh	r3, [r7, #10]
 8005936:	11db      	asrs	r3, r3, #7
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f063 030e 	orn	r3, r3, #14
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4907      	ldr	r1, [pc, #28]	; (8005970 <I2C_MasterRequestRead+0x198>)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f865 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	00010008 	.word	0x00010008
 8005970:	00010002 	.word	0x00010002

08005974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005984:	e025      	b.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d021      	beq.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fe fb65 	bl	800405c <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d116      	bne.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e023      	b.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10d      	bne.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	43da      	mvns	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	e00c      	b.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	43da      	mvns	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d0b6      	beq.n	8005986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a30:	e051      	b.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a40:	d123      	bne.n	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e046      	b.n	8005b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d021      	beq.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fe fae3 	bl	800405c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e020      	b.n	8005b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d10c      	bne.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	43da      	mvns	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e00b      	b.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	43da      	mvns	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d18d      	bne.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b2c:	e02d      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f8ce 	bl	8005cd0 <I2C_IsAcknowledgeFailed>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e02d      	b.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d021      	beq.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fe fa89 	bl	800405c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d116      	bne.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d1ca      	bne.n	8005b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bae:	e02d      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f88d 	bl	8005cd0 <I2C_IsAcknowledgeFailed>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e02d      	b.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d021      	beq.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc8:	f7fe fa48 	bl	800405c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d116      	bne.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0220 	orr.w	r2, r3, #32
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e007      	b.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d1ca      	bne.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c30:	e042      	b.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d119      	bne.n	8005c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e029      	b.n	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c74:	f7fe f9f2 	bl	800405c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d116      	bne.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e007      	b.n	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d1b5      	bne.n	8005c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce6:	d11b      	bne.n	8005d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e267      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d075      	beq.n	8005e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d4e:	4b88      	ldr	r3, [pc, #544]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00c      	beq.n	8005d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b85      	ldr	r3, [pc, #532]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d112      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d66:	4b82      	ldr	r3, [pc, #520]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b7e      	ldr	r3, [pc, #504]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d05b      	beq.n	8005e38 <HAL_RCC_OscConfig+0x108>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d157      	bne.n	8005e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e242      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d106      	bne.n	8005da4 <HAL_RCC_OscConfig+0x74>
 8005d96:	4b76      	ldr	r3, [pc, #472]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a75      	ldr	r2, [pc, #468]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e01d      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x98>
 8005dae:	4b70      	ldr	r3, [pc, #448]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6f      	ldr	r2, [pc, #444]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b6d      	ldr	r3, [pc, #436]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6c      	ldr	r2, [pc, #432]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005dc8:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a68      	ldr	r2, [pc, #416]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b66      	ldr	r3, [pc, #408]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a65      	ldr	r2, [pc, #404]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fe f938 	bl	800405c <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fe f934 	bl	800405c <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e207      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b5b      	ldr	r3, [pc, #364]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0xc0>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7fe f924 	bl	800405c <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e18:	f7fe f920 	bl	800405c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	; 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1f3      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0xe8>
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d063      	beq.n	8005f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e46:	4b4a      	ldr	r3, [pc, #296]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e52:	4b47      	ldr	r3, [pc, #284]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d11c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b44      	ldr	r3, [pc, #272]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d116      	bne.n	8005e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6a:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_RCC_OscConfig+0x152>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e1c7      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e82:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4937      	ldr	r1, [pc, #220]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e96:	e03a      	b.n	8005f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea0:	4b34      	ldr	r3, [pc, #208]	; (8005f74 <HAL_RCC_OscConfig+0x244>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7fe f8d9 	bl	800405c <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eae:	f7fe f8d5 	bl	800405c <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e1a8      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4925      	ldr	r1, [pc, #148]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]
 8005ee0:	e015      	b.n	8005f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_RCC_OscConfig+0x244>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fe f8b8 	bl	800405c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef0:	f7fe f8b4 	bl	800405c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e187      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d036      	beq.n	8005f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <HAL_RCC_OscConfig+0x248>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fe f898 	bl	800405c <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f30:	f7fe f894 	bl	800405c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e167      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x200>
 8005f4e:	e01b      	b.n	8005f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f50:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCC_OscConfig+0x248>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f56:	f7fe f881 	bl	800405c <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f5c:	e00e      	b.n	8005f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fe f87d 	bl	800405c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d907      	bls.n	8005f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e150      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	42470000 	.word	0x42470000
 8005f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f7c:	4b88      	ldr	r3, [pc, #544]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ea      	bne.n	8005f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8097 	beq.w	80060c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f96:	2300      	movs	r3, #0
 8005f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9a:	4b81      	ldr	r3, [pc, #516]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb6:	4b7a      	ldr	r3, [pc, #488]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc6:	4b77      	ldr	r3, [pc, #476]	; (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d118      	bne.n	8006004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fd2:	4b74      	ldr	r3, [pc, #464]	; (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a73      	ldr	r2, [pc, #460]	; (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fde:	f7fe f83d 	bl	800405c <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe6:	f7fe f839 	bl	800405c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e10c      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d106      	bne.n	800601a <HAL_RCC_OscConfig+0x2ea>
 800600c:	4b64      	ldr	r3, [pc, #400]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	4a63      	ldr	r2, [pc, #396]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	; 0x70
 8006018:	e01c      	b.n	8006054 <HAL_RCC_OscConfig+0x324>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b05      	cmp	r3, #5
 8006020:	d10c      	bne.n	800603c <HAL_RCC_OscConfig+0x30c>
 8006022:	4b5f      	ldr	r3, [pc, #380]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	4a5e      	ldr	r2, [pc, #376]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006028:	f043 0304 	orr.w	r3, r3, #4
 800602c:	6713      	str	r3, [r2, #112]	; 0x70
 800602e:	4b5c      	ldr	r3, [pc, #368]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a5b      	ldr	r2, [pc, #364]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	e00b      	b.n	8006054 <HAL_RCC_OscConfig+0x324>
 800603c:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a57      	ldr	r2, [pc, #348]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	4b55      	ldr	r3, [pc, #340]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a54      	ldr	r2, [pc, #336]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800604e:	f023 0304 	bic.w	r3, r3, #4
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605c:	f7fd fffe 	bl	800405c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006064:	f7fd fffa 	bl	800405c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e0cb      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607a:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ee      	beq.n	8006064 <HAL_RCC_OscConfig+0x334>
 8006086:	e014      	b.n	80060b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006088:	f7fd ffe8 	bl	800405c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fd ffe4 	bl	800405c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0b5      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ee      	bne.n	8006090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d105      	bne.n	80060c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b8:	4b39      	ldr	r3, [pc, #228]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	4a38      	ldr	r2, [pc, #224]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80a1 	beq.w	8006210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ce:	4b34      	ldr	r3, [pc, #208]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 030c 	and.w	r3, r3, #12
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d05c      	beq.n	8006194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d141      	bne.n	8006166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <HAL_RCC_OscConfig+0x478>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e8:	f7fd ffb8 	bl	800405c <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fd ffb4 	bl	800405c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e087      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	019b      	lsls	r3, r3, #6
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	3b01      	subs	r3, #1
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	491b      	ldr	r1, [pc, #108]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_RCC_OscConfig+0x478>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613e:	f7fd ff8d 	bl	800405c <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006146:	f7fd ff89 	bl	800405c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e05c      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x416>
 8006164:	e054      	b.n	8006210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <HAL_RCC_OscConfig+0x478>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616c:	f7fd ff76 	bl	800405c <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006174:	f7fd ff72 	bl	800405c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e045      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x444>
 8006192:	e03d      	b.n	8006210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d107      	bne.n	80061ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e038      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
 80061a0:	40023800 	.word	0x40023800
 80061a4:	40007000 	.word	0x40007000
 80061a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCC_OscConfig+0x4ec>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d028      	beq.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d121      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d11a      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d111      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	3b01      	subs	r3, #1
 80061f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800

08006220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0cc      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006234:	4b68      	ldr	r3, [pc, #416]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d90c      	bls.n	800625c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b65      	ldr	r3, [pc, #404]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b63      	ldr	r3, [pc, #396]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d001      	beq.n	800625c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0b8      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d020      	beq.n	80062aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006274:	4b59      	ldr	r3, [pc, #356]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4a58      	ldr	r2, [pc, #352]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800627e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800628c:	4b53      	ldr	r3, [pc, #332]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a52      	ldr	r2, [pc, #328]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006298:	4b50      	ldr	r3, [pc, #320]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	494d      	ldr	r1, [pc, #308]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d044      	beq.n	8006340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	4b47      	ldr	r3, [pc, #284]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d119      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e07f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d003      	beq.n	80062de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062de:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e06f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ee:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e067      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b37      	ldr	r3, [pc, #220]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4934      	ldr	r1, [pc, #208]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	4313      	orrs	r3, r2
 800630e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006310:	f7fd fea4 	bl	800405c <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fd fea0 	bl	800405c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e04f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006340:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d20c      	bcs.n	8006368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006356:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d001      	beq.n	8006368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e032      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006374:	4b19      	ldr	r3, [pc, #100]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4916      	ldr	r1, [pc, #88]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	490e      	ldr	r1, [pc, #56]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063a6:	f000 f821 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	490a      	ldr	r1, [pc, #40]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 80063b8:	5ccb      	ldrb	r3, [r1, r3]
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_RCC_ClockConfig+0x1c8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fe04 	bl	8003fd4 <HAL_InitTick>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023c00 	.word	0x40023c00
 80063dc:	40023800 	.word	0x40023800
 80063e0:	0800edac 	.word	0x0800edac
 80063e4:	20000010 	.word	0x20000010
 80063e8:	20000014 	.word	0x20000014

080063ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f0:	b094      	sub	sp, #80	; 0x50
 80063f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	647b      	str	r3, [r7, #68]	; 0x44
 80063f8:	2300      	movs	r3, #0
 80063fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063fc:	2300      	movs	r3, #0
 80063fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006404:	4b79      	ldr	r3, [pc, #484]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b08      	cmp	r3, #8
 800640e:	d00d      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x40>
 8006410:	2b08      	cmp	r3, #8
 8006412:	f200 80e1 	bhi.w	80065d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x34>
 800641a:	2b04      	cmp	r3, #4
 800641c:	d003      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0x3a>
 800641e:	e0db      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006420:	4b73      	ldr	r3, [pc, #460]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006424:	e0db      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006426:	4b73      	ldr	r3, [pc, #460]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800642a:	e0d8      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800642c:	4b6f      	ldr	r3, [pc, #444]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006436:	4b6d      	ldr	r3, [pc, #436]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d063      	beq.n	800650a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006442:	4b6a      	ldr	r3, [pc, #424]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	2200      	movs	r2, #0
 800644a:	63bb      	str	r3, [r7, #56]	; 0x38
 800644c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
 8006456:	2300      	movs	r3, #0
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
 800645a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800645e:	4622      	mov	r2, r4
 8006460:	462b      	mov	r3, r5
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f04f 0100 	mov.w	r1, #0
 800646a:	0159      	lsls	r1, r3, #5
 800646c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006470:	0150      	lsls	r0, r2, #5
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4621      	mov	r1, r4
 8006478:	1a51      	subs	r1, r2, r1
 800647a:	6139      	str	r1, [r7, #16]
 800647c:	4629      	mov	r1, r5
 800647e:	eb63 0301 	sbc.w	r3, r3, r1
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006490:	4659      	mov	r1, fp
 8006492:	018b      	lsls	r3, r1, #6
 8006494:	4651      	mov	r1, sl
 8006496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800649a:	4651      	mov	r1, sl
 800649c:	018a      	lsls	r2, r1, #6
 800649e:	4651      	mov	r1, sl
 80064a0:	ebb2 0801 	subs.w	r8, r2, r1
 80064a4:	4659      	mov	r1, fp
 80064a6:	eb63 0901 	sbc.w	r9, r3, r1
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064be:	4690      	mov	r8, r2
 80064c0:	4699      	mov	r9, r3
 80064c2:	4623      	mov	r3, r4
 80064c4:	eb18 0303 	adds.w	r3, r8, r3
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	462b      	mov	r3, r5
 80064cc:	eb49 0303 	adc.w	r3, r9, r3
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064de:	4629      	mov	r1, r5
 80064e0:	024b      	lsls	r3, r1, #9
 80064e2:	4621      	mov	r1, r4
 80064e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064e8:	4621      	mov	r1, r4
 80064ea:	024a      	lsls	r2, r1, #9
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f2:	2200      	movs	r2, #0
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064fc:	f7fa fbcc 	bl	8000c98 <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4613      	mov	r3, r2
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006508:	e058      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650a:	4b38      	ldr	r3, [pc, #224]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	099b      	lsrs	r3, r3, #6
 8006510:	2200      	movs	r2, #0
 8006512:	4618      	mov	r0, r3
 8006514:	4611      	mov	r1, r2
 8006516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	2300      	movs	r3, #0
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
 8006520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
 8006528:	f04f 0000 	mov.w	r0, #0
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	0159      	lsls	r1, r3, #5
 8006532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006536:	0150      	lsls	r0, r2, #5
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4641      	mov	r1, r8
 800653e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006542:	4649      	mov	r1, r9
 8006544:	eb63 0b01 	sbc.w	fp, r3, r1
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800655c:	ebb2 040a 	subs.w	r4, r2, sl
 8006560:	eb63 050b 	sbc.w	r5, r3, fp
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	00eb      	lsls	r3, r5, #3
 800656e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006572:	00e2      	lsls	r2, r4, #3
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	4643      	mov	r3, r8
 800657a:	18e3      	adds	r3, r4, r3
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	464b      	mov	r3, r9
 8006580:	eb45 0303 	adc.w	r3, r5, r3
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006592:	4629      	mov	r1, r5
 8006594:	028b      	lsls	r3, r1, #10
 8006596:	4621      	mov	r1, r4
 8006598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800659c:	4621      	mov	r1, r4
 800659e:	028a      	lsls	r2, r1, #10
 80065a0:	4610      	mov	r0, r2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a6:	2200      	movs	r2, #0
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	61fa      	str	r2, [r7, #28]
 80065ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b0:	f7fa fb72 	bl	8000c98 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4613      	mov	r3, r2
 80065ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <HAL_RCC_GetSysClockFreq+0x200>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	3301      	adds	r3, #1
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065d6:	e002      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3750      	adds	r7, #80	; 0x50
 80065e4:	46bd      	mov	sp, r7
 80065e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ea:	bf00      	nop
 80065ec:	40023800 	.word	0x40023800
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	007a1200 	.word	0x007a1200

080065f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <HAL_RCC_GetHCLKFreq+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000010 	.word	0x20000010

08006610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006614:	f7ff fff0 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0a9b      	lsrs	r3, r3, #10
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	0800edbc 	.word	0x0800edbc

08006638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800663c:	f7ff ffdc 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0b5b      	lsrs	r3, r3, #13
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4903      	ldr	r1, [pc, #12]	; (800665c <HAL_RCC_GetPCLK2Freq+0x24>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40023800 	.word	0x40023800
 800665c:	0800edbc 	.word	0x0800edbc

08006660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e041      	b.n	80066f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fd f9a6 	bl	80039d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f000 fd88 	bl	80071b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d001      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e044      	b.n	80067a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d018      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x6c>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006742:	d013      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x6c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1a      	ldr	r2, [pc, #104]	; (80067b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00e      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x6c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d009      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x6c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a17      	ldr	r2, [pc, #92]	; (80067bc <HAL_TIM_Base_Start_IT+0xbc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <HAL_TIM_Base_Start_IT+0x6c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a16      	ldr	r2, [pc, #88]	; (80067c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d111      	bne.n	8006790 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b06      	cmp	r3, #6
 800677c:	d010      	beq.n	80067a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678e:	e007      	b.n	80067a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40000800 	.word	0x40000800
 80067bc:	40000c00 	.word	0x40000c00
 80067c0:	40014000 	.word	0x40014000

080067c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e041      	b.n	800685a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f839 	bl	8006862 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f000 fcd6 	bl	80071b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d109      	bne.n	800689c <HAL_TIM_PWM_Start+0x24>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e022      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d109      	bne.n	80068b6 <HAL_TIM_PWM_Start+0x3e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	e015      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d109      	bne.n	80068d0 <HAL_TIM_PWM_Start+0x58>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	e008      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e068      	b.n	80069bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_PWM_Start+0x82>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f8:	e013      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d104      	bne.n	800690a <HAL_TIM_PWM_Start+0x92>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006908:	e00b      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d104      	bne.n	800691a <HAL_TIM_PWM_Start+0xa2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006918:	e003      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2201      	movs	r2, #1
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fee8 	bl	8007700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a23      	ldr	r2, [pc, #140]	; (80069c4 <HAL_TIM_PWM_Start+0x14c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d107      	bne.n	800694a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <HAL_TIM_PWM_Start+0x14c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d018      	beq.n	8006986 <HAL_TIM_PWM_Start+0x10e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d013      	beq.n	8006986 <HAL_TIM_PWM_Start+0x10e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_TIM_PWM_Start+0x150>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00e      	beq.n	8006986 <HAL_TIM_PWM_Start+0x10e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_TIM_PWM_Start+0x154>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_TIM_PWM_Start+0x10e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_TIM_PWM_Start+0x158>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_TIM_PWM_Start+0x10e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <HAL_TIM_PWM_Start+0x15c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d111      	bne.n	80069aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b06      	cmp	r3, #6
 8006996:	d010      	beq.n	80069ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	e007      	b.n	80069ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40014000 	.word	0x40014000

080069d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e097      	b.n	8006b1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fd f84d 	bl	8003aa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fbc1 	bl	80071b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a78:	f023 030c 	bic.w	r3, r3, #12
 8006a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4313      	orrs	r3, r2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	031b      	lsls	r3, r3, #12
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	4313      	orrs	r3, r2
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d102      	bne.n	8006b60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b5a:	7b7b      	ldrb	r3, [r7, #13]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d001      	beq.n	8006b64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e069      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b74:	e031      	b.n	8006bda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d110      	bne.n	8006b9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d102      	bne.n	8006b88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b82:	7b3b      	ldrb	r3, [r7, #12]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e055      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b9c:	e01d      	b.n	8006bda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d108      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d102      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb0:	7b3b      	ldrb	r3, [r7, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e03e      	b.n	8006c38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0xc4>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d008      	beq.n	8006bf8 <HAL_TIM_Encoder_Start+0xd4>
 8006be6:	e00f      	b.n	8006c08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fd85 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006bf6:	e016      	b.n	8006c26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2104      	movs	r1, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fd7d 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006c06:	e00e      	b.n	8006c26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fd75 	bl	8007700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fd6e 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006c24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0201 	orr.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0202 	mvn.w	r2, #2
 8006c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa77 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa69 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa7a 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0204 	mvn.w	r2, #4
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa4d 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa3f 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa50 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0208 	mvn.w	r2, #8
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2204      	movs	r2, #4
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa23 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa15 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa26 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0210 	mvn.w	r2, #16
 8006d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9f9 	bl	8007176 <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f9eb 	bl	8007162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9fc 	bl	800718a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0201 	mvn.w	r2, #1
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fb fae0 	bl	8002384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	2b80      	cmp	r3, #128	; 0x80
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd78 	bl	80078e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d10e      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d107      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9c1 	bl	800719e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d10e      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d107      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fd42 	bl	80078cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e0ae      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	f200 809f 	bhi.w	8006fbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006fbd 	.word	0x08006fbd
 8006e8c:	08006fbd 	.word	0x08006fbd
 8006e90:	08006fbd 	.word	0x08006fbd
 8006e94:	08006ef9 	.word	0x08006ef9
 8006e98:	08006fbd 	.word	0x08006fbd
 8006e9c:	08006fbd 	.word	0x08006fbd
 8006ea0:	08006fbd 	.word	0x08006fbd
 8006ea4:	08006f3b 	.word	0x08006f3b
 8006ea8:	08006fbd 	.word	0x08006fbd
 8006eac:	08006fbd 	.word	0x08006fbd
 8006eb0:	08006fbd 	.word	0x08006fbd
 8006eb4:	08006f7b 	.word	0x08006f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f9f8 	bl	80072b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	619a      	str	r2, [r3, #24]
      break;
 8006ef6:	e064      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fa3e 	bl	8007380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6999      	ldr	r1, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	619a      	str	r2, [r3, #24]
      break;
 8006f38:	e043      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fa89 	bl	8007458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0204 	bic.w	r2, r2, #4
 8006f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69d9      	ldr	r1, [r3, #28]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	61da      	str	r2, [r3, #28]
      break;
 8006f78:	e023      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fad3 	bl	800752c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69d9      	ldr	r1, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	021a      	lsls	r2, r3, #8
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	61da      	str	r2, [r3, #28]
      break;
 8006fba:	e002      	b.n	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0b4      	b.n	800715a <HAL_TIM_ConfigClockSource+0x186>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800700e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007028:	d03e      	beq.n	80070a8 <HAL_TIM_ConfigClockSource+0xd4>
 800702a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702e:	f200 8087 	bhi.w	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	f000 8086 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x172>
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703e:	d87f      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b70      	cmp	r3, #112	; 0x70
 8007042:	d01a      	beq.n	800707a <HAL_TIM_ConfigClockSource+0xa6>
 8007044:	2b70      	cmp	r3, #112	; 0x70
 8007046:	d87b      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b60      	cmp	r3, #96	; 0x60
 800704a:	d050      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x11a>
 800704c:	2b60      	cmp	r3, #96	; 0x60
 800704e:	d877      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b50      	cmp	r3, #80	; 0x50
 8007052:	d03c      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0xfa>
 8007054:	2b50      	cmp	r3, #80	; 0x50
 8007056:	d873      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d058      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x13a>
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d86f      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b30      	cmp	r3, #48	; 0x30
 8007062:	d064      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d86b      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b20      	cmp	r3, #32
 800706a:	d060      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 800706c:	2b20      	cmp	r3, #32
 800706e:	d867      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d05c      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007074:	2b10      	cmp	r3, #16
 8007076:	d05a      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x15a>
 8007078:	e062      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6899      	ldr	r1, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f000 fb19 	bl	80076c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800709c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	609a      	str	r2, [r3, #8]
      break;
 80070a6:	e04f      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	6899      	ldr	r1, [r3, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f000 fb02 	bl	80076c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ca:	609a      	str	r2, [r3, #8]
      break;
 80070cc:	e03c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 fa76 	bl	80075cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2150      	movs	r1, #80	; 0x50
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 facf 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 80070ec:	e02c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fa95 	bl	800762a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2160      	movs	r1, #96	; 0x60
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fabf 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 800710c:	e01c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fa56 	bl	80075cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	4618      	mov	r0, r3
 8007128:	f000 faaf 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 800712c:	e00c      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f000 faa6 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 800713e:	e003      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	e000      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a34      	ldr	r2, [pc, #208]	; (8007298 <TIM_Base_SetConfig+0xe4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00f      	beq.n	80071ec <TIM_Base_SetConfig+0x38>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d2:	d00b      	beq.n	80071ec <TIM_Base_SetConfig+0x38>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a31      	ldr	r2, [pc, #196]	; (800729c <TIM_Base_SetConfig+0xe8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d007      	beq.n	80071ec <TIM_Base_SetConfig+0x38>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <TIM_Base_SetConfig+0xec>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_Base_SetConfig+0x38>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <TIM_Base_SetConfig+0xf0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d108      	bne.n	80071fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a25      	ldr	r2, [pc, #148]	; (8007298 <TIM_Base_SetConfig+0xe4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01b      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720c:	d017      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <TIM_Base_SetConfig+0xe8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a21      	ldr	r2, [pc, #132]	; (80072a0 <TIM_Base_SetConfig+0xec>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00f      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <TIM_Base_SetConfig+0xf0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00b      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1f      	ldr	r2, [pc, #124]	; (80072a8 <TIM_Base_SetConfig+0xf4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d007      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <TIM_Base_SetConfig+0xf8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d003      	beq.n	800723e <TIM_Base_SetConfig+0x8a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <TIM_Base_SetConfig+0xfc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d108      	bne.n	8007250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <TIM_Base_SetConfig+0xe4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d103      	bne.n	8007284 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	615a      	str	r2, [r3, #20]
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40010000 	.word	0x40010000
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800

080072b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 0302 	bic.w	r3, r3, #2
 80072fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1c      	ldr	r2, [pc, #112]	; (800737c <TIM_OC1_SetConfig+0xc8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d10c      	bne.n	800732a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f023 0308 	bic.w	r3, r3, #8
 8007316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 0304 	bic.w	r3, r3, #4
 8007328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <TIM_OC1_SetConfig+0xc8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d111      	bne.n	8007356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	621a      	str	r2, [r3, #32]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40010000 	.word	0x40010000

08007380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0210 	bic.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0320 	bic.w	r3, r3, #32
 80073ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <TIM_OC2_SetConfig+0xd4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10d      	bne.n	80073fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <TIM_OC2_SetConfig+0xd4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d113      	bne.n	800742c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800740a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40010000 	.word	0x40010000

08007458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <TIM_OC3_SetConfig+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10d      	bne.n	80074d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a14      	ldr	r2, [pc, #80]	; (8007528 <TIM_OC3_SetConfig+0xd0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d113      	bne.n	8007502 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40010000 	.word	0x40010000

0800752c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	031b      	lsls	r3, r3, #12
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <TIM_OC4_SetConfig+0x9c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d109      	bne.n	80075a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40010000 	.word	0x40010000

080075cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0201 	bic.w	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f023 030a 	bic.w	r3, r3, #10
 8007608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f023 0210 	bic.w	r2, r3, #16
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	031b      	lsls	r3, r3, #12
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f043 0307 	orr.w	r3, r3, #7
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	021a      	lsls	r2, r3, #8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2201      	movs	r2, #1
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	43db      	mvns	r3, r3
 8007722:	401a      	ands	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a1a      	ldr	r2, [r3, #32]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	431a      	orrs	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e050      	b.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d018      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d013      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00e      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a16      	ldr	r2, [pc, #88]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d009      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a15      	ldr	r2, [pc, #84]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a13      	ldr	r2, [pc, #76]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d10c      	bne.n	80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40010000 	.word	0x40010000
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40014000 	.word	0x40014000

08007828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007840:	2302      	movs	r3, #2
 8007842:	e03d      	b.n	80078c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e03f      	b.n	8007986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fc f96a 	bl	8003bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2224      	movs	r2, #36	; 0x24
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9cb 	bl	8007cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800794c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800796c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b08a      	sub	sp, #40	; 0x28
 8007992:	af02      	add	r7, sp, #8
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d17c      	bne.n	8007aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_UART_Transmit+0x2c>
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e075      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Transmit+0x3e>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e06e      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	; 0x21
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e2:	f7fc fb3b 	bl	800405c <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fc:	d108      	bne.n	8007a10 <HAL_UART_Transmit+0x82>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e003      	b.n	8007a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a20:	e02a      	b.n	8007a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f8e2 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e036      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	3302      	adds	r3, #2
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e007      	b.n	8007a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1cf      	bne.n	8007a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2140      	movs	r1, #64	; 0x40
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f8b2 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e006      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b08a      	sub	sp, #40	; 0x28
 8007ab6:	af02      	add	r7, sp, #8
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	f040 808c 	bne.w	8007bec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_UART_Receive+0x2e>
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e084      	b.n	8007bee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_UART_Receive+0x40>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e07d      	b.n	8007bee <HAL_UART_Receive+0x13c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2222      	movs	r2, #34	; 0x22
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b0e:	f7fc faa5 	bl	800405c <HAL_GetTick>
 8007b12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b28:	d108      	bne.n	8007b3c <HAL_UART_Receive+0x8a>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	e003      	b.n	8007b44 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007b4c:	e043      	b.n	8007bd6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2120      	movs	r1, #32
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f84c 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e042      	b.n	8007bee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10c      	bne.n	8007b88 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	3302      	adds	r3, #2
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	e01f      	b.n	8007bc8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b90:	d007      	beq.n	8007ba2 <HAL_UART_Receive+0xf0>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <HAL_UART_Receive+0xfe>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e008      	b.n	8007bc2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1b6      	bne.n	8007b4e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b090      	sub	sp, #64	; 0x40
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c06:	e050      	b.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d04c      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c16:	f7fc fa21 	bl	800405c <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d241      	bcs.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c46:	637a      	str	r2, [r7, #52]	; 0x34
 8007c48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e5      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3314      	adds	r3, #20
 8007c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3314      	adds	r3, #20
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	623a      	str	r2, [r7, #32]
 8007c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	69f9      	ldr	r1, [r7, #28]
 8007c80:	6a3a      	ldr	r2, [r7, #32]
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e00f      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d09f      	beq.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3740      	adds	r7, #64	; 0x40
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cd8:	b0c0      	sub	sp, #256	; 0x100
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	ea40 0301 	orr.w	r3, r0, r1
 8007cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d2c:	f021 010c 	bic.w	r1, r1, #12
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4e:	6999      	ldr	r1, [r3, #24]
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	ea40 0301 	orr.w	r3, r0, r1
 8007d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b8f      	ldr	r3, [pc, #572]	; (8007fa0 <UART_SetConfig+0x2cc>)
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d005      	beq.n	8007d74 <UART_SetConfig+0xa0>
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b8d      	ldr	r3, [pc, #564]	; (8007fa4 <UART_SetConfig+0x2d0>)
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d104      	bne.n	8007d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d74:	f7fe fc60 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 8007d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d7c:	e003      	b.n	8007d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d7e:	f7fe fc47 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8007d82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d90:	f040 810c 	bne.w	8007fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007da6:	4622      	mov	r2, r4
 8007da8:	462b      	mov	r3, r5
 8007daa:	1891      	adds	r1, r2, r2
 8007dac:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dae:	415b      	adcs	r3, r3
 8007db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007db6:	4621      	mov	r1, r4
 8007db8:	eb12 0801 	adds.w	r8, r2, r1
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	eb43 0901 	adc.w	r9, r3, r1
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dd6:	4690      	mov	r8, r2
 8007dd8:	4699      	mov	r9, r3
 8007dda:	4623      	mov	r3, r4
 8007ddc:	eb18 0303 	adds.w	r3, r8, r3
 8007de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007de4:	462b      	mov	r3, r5
 8007de6:	eb49 0303 	adc.w	r3, r9, r3
 8007dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e02:	460b      	mov	r3, r1
 8007e04:	18db      	adds	r3, r3, r3
 8007e06:	653b      	str	r3, [r7, #80]	; 0x50
 8007e08:	4613      	mov	r3, r2
 8007e0a:	eb42 0303 	adc.w	r3, r2, r3
 8007e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e18:	f7f8 ff3e 	bl	8000c98 <__aeabi_uldivmod>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4b61      	ldr	r3, [pc, #388]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007e22:	fba3 2302 	umull	r2, r3, r3, r2
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	011c      	lsls	r4, r3, #4
 8007e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	1891      	adds	r1, r2, r2
 8007e42:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e44:	415b      	adcs	r3, r3
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e52:	4649      	mov	r1, r9
 8007e54:	eb43 0b01 	adc.w	fp, r3, r1
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e6c:	4692      	mov	sl, r2
 8007e6e:	469b      	mov	fp, r3
 8007e70:	4643      	mov	r3, r8
 8007e72:	eb1a 0303 	adds.w	r3, sl, r3
 8007e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	18db      	adds	r3, r3, r3
 8007e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	eb42 0303 	adc.w	r3, r2, r3
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007eae:	f7f8 fef3 	bl	8000c98 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007eba:	fba3 2301 	umull	r2, r3, r3, r1
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2264      	movs	r2, #100	; 0x64
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	1acb      	subs	r3, r1, r3
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007edc:	441c      	add	r4, r3
 8007ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	1891      	adds	r1, r2, r2
 8007ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ef8:	415b      	adcs	r3, r3
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f00:	4641      	mov	r1, r8
 8007f02:	1851      	adds	r1, r2, r1
 8007f04:	6339      	str	r1, [r7, #48]	; 0x30
 8007f06:	4649      	mov	r1, r9
 8007f08:	414b      	adcs	r3, r1
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f18:	4659      	mov	r1, fp
 8007f1a:	00cb      	lsls	r3, r1, #3
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f22:	4651      	mov	r1, sl
 8007f24:	00ca      	lsls	r2, r1, #3
 8007f26:	4610      	mov	r0, r2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	189b      	adds	r3, r3, r2
 8007f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f34:	464b      	mov	r3, r9
 8007f36:	460a      	mov	r2, r1
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f54:	460b      	mov	r3, r1
 8007f56:	18db      	adds	r3, r3, r3
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f6a:	f7f8 fe95 	bl	8000c98 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007f74:	fba3 1302 	umull	r1, r3, r3, r2
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	2164      	movs	r1, #100	; 0x64
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	3332      	adds	r3, #50	; 0x32
 8007f86:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	f003 0207 	and.w	r2, r3, #7
 8007f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4422      	add	r2, r4
 8007f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f9c:	e106      	b.n	80081ac <UART_SetConfig+0x4d8>
 8007f9e:	bf00      	nop
 8007fa0:	40011000 	.word	0x40011000
 8007fa4:	40011400 	.word	0x40011400
 8007fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	1891      	adds	r1, r2, r2
 8007fc4:	6239      	str	r1, [r7, #32]
 8007fc6:	415b      	adcs	r3, r3
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fce:	4641      	mov	r1, r8
 8007fd0:	1854      	adds	r4, r2, r1
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	eb43 0501 	adc.w	r5, r3, r1
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	00eb      	lsls	r3, r5, #3
 8007fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fe6:	00e2      	lsls	r2, r4, #3
 8007fe8:	4614      	mov	r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	4643      	mov	r3, r8
 8007fee:	18e3      	adds	r3, r4, r3
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	eb45 0303 	adc.w	r3, r5, r3
 8007ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800800a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800801a:	4629      	mov	r1, r5
 800801c:	008b      	lsls	r3, r1, #2
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008024:	4621      	mov	r1, r4
 8008026:	008a      	lsls	r2, r1, #2
 8008028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800802c:	f7f8 fe34 	bl	8000c98 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4b60      	ldr	r3, [pc, #384]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008036:	fba3 2302 	umull	r2, r3, r3, r2
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	011c      	lsls	r4, r3, #4
 800803e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008042:	2200      	movs	r2, #0
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800804c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008050:	4642      	mov	r2, r8
 8008052:	464b      	mov	r3, r9
 8008054:	1891      	adds	r1, r2, r2
 8008056:	61b9      	str	r1, [r7, #24]
 8008058:	415b      	adcs	r3, r3
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008060:	4641      	mov	r1, r8
 8008062:	1851      	adds	r1, r2, r1
 8008064:	6139      	str	r1, [r7, #16]
 8008066:	4649      	mov	r1, r9
 8008068:	414b      	adcs	r3, r1
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008078:	4659      	mov	r1, fp
 800807a:	00cb      	lsls	r3, r1, #3
 800807c:	4651      	mov	r1, sl
 800807e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008082:	4651      	mov	r1, sl
 8008084:	00ca      	lsls	r2, r1, #3
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	4603      	mov	r3, r0
 800808c:	4642      	mov	r2, r8
 800808e:	189b      	adds	r3, r3, r2
 8008090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008094:	464b      	mov	r3, r9
 8008096:	460a      	mov	r2, r1
 8008098:	eb42 0303 	adc.w	r3, r2, r3
 800809c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080b8:	4649      	mov	r1, r9
 80080ba:	008b      	lsls	r3, r1, #2
 80080bc:	4641      	mov	r1, r8
 80080be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c2:	4641      	mov	r1, r8
 80080c4:	008a      	lsls	r2, r1, #2
 80080c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080ca:	f7f8 fde5 	bl	8000c98 <__aeabi_uldivmod>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <UART_SetConfig+0x4e4>)
 80080d6:	fba3 2301 	umull	r2, r3, r3, r1
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	2264      	movs	r2, #100	; 0x64
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	1acb      	subs	r3, r1, r3
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	3332      	adds	r3, #50	; 0x32
 80080e8:	4a33      	ldr	r2, [pc, #204]	; (80081b8 <UART_SetConfig+0x4e4>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080f4:	441c      	add	r4, r3
 80080f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080fa:	2200      	movs	r2, #0
 80080fc:	673b      	str	r3, [r7, #112]	; 0x70
 80080fe:	677a      	str	r2, [r7, #116]	; 0x74
 8008100:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	1891      	adds	r1, r2, r2
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	415b      	adcs	r3, r3
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008114:	4641      	mov	r1, r8
 8008116:	1851      	adds	r1, r2, r1
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	4649      	mov	r1, r9
 800811c:	414b      	adcs	r3, r1
 800811e:	607b      	str	r3, [r7, #4]
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800812c:	4659      	mov	r1, fp
 800812e:	00cb      	lsls	r3, r1, #3
 8008130:	4651      	mov	r1, sl
 8008132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008136:	4651      	mov	r1, sl
 8008138:	00ca      	lsls	r2, r1, #3
 800813a:	4610      	mov	r0, r2
 800813c:	4619      	mov	r1, r3
 800813e:	4603      	mov	r3, r0
 8008140:	4642      	mov	r2, r8
 8008142:	189b      	adds	r3, r3, r2
 8008144:	66bb      	str	r3, [r7, #104]	; 0x68
 8008146:	464b      	mov	r3, r9
 8008148:	460a      	mov	r2, r1
 800814a:	eb42 0303 	adc.w	r3, r2, r3
 800814e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	663b      	str	r3, [r7, #96]	; 0x60
 800815a:	667a      	str	r2, [r7, #100]	; 0x64
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008168:	4649      	mov	r1, r9
 800816a:	008b      	lsls	r3, r1, #2
 800816c:	4641      	mov	r1, r8
 800816e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008172:	4641      	mov	r1, r8
 8008174:	008a      	lsls	r2, r1, #2
 8008176:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800817a:	f7f8 fd8d 	bl	8000c98 <__aeabi_uldivmod>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008184:	fba3 1302 	umull	r1, r3, r3, r2
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	2164      	movs	r1, #100	; 0x64
 800818c:	fb01 f303 	mul.w	r3, r1, r3
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	3332      	adds	r3, #50	; 0x32
 8008196:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008198:	fba2 2303 	umull	r2, r3, r2, r3
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	f003 020f 	and.w	r2, r3, #15
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4422      	add	r2, r4
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081b2:	46bd      	mov	sp, r7
 80081b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b8:	51eb851f 	.word	0x51eb851f

080081bc <malloc>:
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <malloc+0xc>)
 80081be:	4601      	mov	r1, r0
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f000 b82b 	b.w	800821c <_malloc_r>
 80081c6:	bf00      	nop
 80081c8:	200001e0 	.word	0x200001e0

080081cc <free>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <free+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f002 bf97 	b.w	800b104 <_free_r>
 80081d6:	bf00      	nop
 80081d8:	200001e0 	.word	0x200001e0

080081dc <sbrk_aligned>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4e0e      	ldr	r6, [pc, #56]	; (8008218 <sbrk_aligned+0x3c>)
 80081e0:	460c      	mov	r4, r1
 80081e2:	6831      	ldr	r1, [r6, #0]
 80081e4:	4605      	mov	r5, r0
 80081e6:	b911      	cbnz	r1, 80081ee <sbrk_aligned+0x12>
 80081e8:	f002 f888 	bl	800a2fc <_sbrk_r>
 80081ec:	6030      	str	r0, [r6, #0]
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f002 f883 	bl	800a2fc <_sbrk_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	d00a      	beq.n	8008210 <sbrk_aligned+0x34>
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d007      	beq.n	8008214 <sbrk_aligned+0x38>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4628      	mov	r0, r5
 8008208:	f002 f878 	bl	800a2fc <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d101      	bne.n	8008214 <sbrk_aligned+0x38>
 8008210:	f04f 34ff 	mov.w	r4, #4294967295
 8008214:	4620      	mov	r0, r4
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	200005c4 	.word	0x200005c4

0800821c <_malloc_r>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	1ccd      	adds	r5, r1, #3
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	2d00      	cmp	r5, #0
 8008230:	4607      	mov	r7, r0
 8008232:	db01      	blt.n	8008238 <_malloc_r+0x1c>
 8008234:	42a9      	cmp	r1, r5
 8008236:	d905      	bls.n	8008244 <_malloc_r+0x28>
 8008238:	230c      	movs	r3, #12
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	2600      	movs	r6, #0
 800823e:	4630      	mov	r0, r6
 8008240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008244:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008318 <_malloc_r+0xfc>
 8008248:	f000 f868 	bl	800831c <__malloc_lock>
 800824c:	f8d8 3000 	ldr.w	r3, [r8]
 8008250:	461c      	mov	r4, r3
 8008252:	bb5c      	cbnz	r4, 80082ac <_malloc_r+0x90>
 8008254:	4629      	mov	r1, r5
 8008256:	4638      	mov	r0, r7
 8008258:	f7ff ffc0 	bl	80081dc <sbrk_aligned>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	4604      	mov	r4, r0
 8008260:	d155      	bne.n	800830e <_malloc_r+0xf2>
 8008262:	f8d8 4000 	ldr.w	r4, [r8]
 8008266:	4626      	mov	r6, r4
 8008268:	2e00      	cmp	r6, #0
 800826a:	d145      	bne.n	80082f8 <_malloc_r+0xdc>
 800826c:	2c00      	cmp	r4, #0
 800826e:	d048      	beq.n	8008302 <_malloc_r+0xe6>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	4631      	mov	r1, r6
 8008274:	4638      	mov	r0, r7
 8008276:	eb04 0903 	add.w	r9, r4, r3
 800827a:	f002 f83f 	bl	800a2fc <_sbrk_r>
 800827e:	4581      	cmp	r9, r0
 8008280:	d13f      	bne.n	8008302 <_malloc_r+0xe6>
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	1a6d      	subs	r5, r5, r1
 8008286:	4629      	mov	r1, r5
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ffa7 	bl	80081dc <sbrk_aligned>
 800828e:	3001      	adds	r0, #1
 8008290:	d037      	beq.n	8008302 <_malloc_r+0xe6>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	442b      	add	r3, r5
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	f8d8 3000 	ldr.w	r3, [r8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d038      	beq.n	8008312 <_malloc_r+0xf6>
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	42a2      	cmp	r2, r4
 80082a4:	d12b      	bne.n	80082fe <_malloc_r+0xe2>
 80082a6:	2200      	movs	r2, #0
 80082a8:	605a      	str	r2, [r3, #4]
 80082aa:	e00f      	b.n	80082cc <_malloc_r+0xb0>
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	1b52      	subs	r2, r2, r5
 80082b0:	d41f      	bmi.n	80082f2 <_malloc_r+0xd6>
 80082b2:	2a0b      	cmp	r2, #11
 80082b4:	d917      	bls.n	80082e6 <_malloc_r+0xca>
 80082b6:	1961      	adds	r1, r4, r5
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	6025      	str	r5, [r4, #0]
 80082bc:	bf18      	it	ne
 80082be:	6059      	strne	r1, [r3, #4]
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	bf08      	it	eq
 80082c4:	f8c8 1000 	streq.w	r1, [r8]
 80082c8:	5162      	str	r2, [r4, r5]
 80082ca:	604b      	str	r3, [r1, #4]
 80082cc:	4638      	mov	r0, r7
 80082ce:	f104 060b 	add.w	r6, r4, #11
 80082d2:	f000 f829 	bl	8008328 <__malloc_unlock>
 80082d6:	f026 0607 	bic.w	r6, r6, #7
 80082da:	1d23      	adds	r3, r4, #4
 80082dc:	1af2      	subs	r2, r6, r3
 80082de:	d0ae      	beq.n	800823e <_malloc_r+0x22>
 80082e0:	1b9b      	subs	r3, r3, r6
 80082e2:	50a3      	str	r3, [r4, r2]
 80082e4:	e7ab      	b.n	800823e <_malloc_r+0x22>
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	6862      	ldr	r2, [r4, #4]
 80082ea:	d1dd      	bne.n	80082a8 <_malloc_r+0x8c>
 80082ec:	f8c8 2000 	str.w	r2, [r8]
 80082f0:	e7ec      	b.n	80082cc <_malloc_r+0xb0>
 80082f2:	4623      	mov	r3, r4
 80082f4:	6864      	ldr	r4, [r4, #4]
 80082f6:	e7ac      	b.n	8008252 <_malloc_r+0x36>
 80082f8:	4634      	mov	r4, r6
 80082fa:	6876      	ldr	r6, [r6, #4]
 80082fc:	e7b4      	b.n	8008268 <_malloc_r+0x4c>
 80082fe:	4613      	mov	r3, r2
 8008300:	e7cc      	b.n	800829c <_malloc_r+0x80>
 8008302:	230c      	movs	r3, #12
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	4638      	mov	r0, r7
 8008308:	f000 f80e 	bl	8008328 <__malloc_unlock>
 800830c:	e797      	b.n	800823e <_malloc_r+0x22>
 800830e:	6025      	str	r5, [r4, #0]
 8008310:	e7dc      	b.n	80082cc <_malloc_r+0xb0>
 8008312:	605b      	str	r3, [r3, #4]
 8008314:	deff      	udf	#255	; 0xff
 8008316:	bf00      	nop
 8008318:	200005c0 	.word	0x200005c0

0800831c <__malloc_lock>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__malloc_lock+0x8>)
 800831e:	f002 b83a 	b.w	800a396 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000708 	.word	0x20000708

08008328 <__malloc_unlock>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__malloc_unlock+0x8>)
 800832a:	f002 b835 	b.w	800a398 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000708 	.word	0x20000708

08008334 <sulp>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	ec45 4b10 	vmov	d0, r4, r5
 800833e:	4616      	mov	r6, r2
 8008340:	f003 fe02 	bl	800bf48 <__ulp>
 8008344:	ec51 0b10 	vmov	r0, r1, d0
 8008348:	b17e      	cbz	r6, 800836a <sulp+0x36>
 800834a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800834e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd09      	ble.n	800836a <sulp+0x36>
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800835c:	2400      	movs	r4, #0
 800835e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008362:	4622      	mov	r2, r4
 8008364:	462b      	mov	r3, r5
 8008366:	f7f8 f94f 	bl	8000608 <__aeabi_dmul>
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	0000      	movs	r0, r0
	...

08008370 <_strtod_l>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ed2d 8b02 	vpush	{d8}
 8008378:	b09b      	sub	sp, #108	; 0x6c
 800837a:	4604      	mov	r4, r0
 800837c:	9213      	str	r2, [sp, #76]	; 0x4c
 800837e:	2200      	movs	r2, #0
 8008380:	9216      	str	r2, [sp, #88]	; 0x58
 8008382:	460d      	mov	r5, r1
 8008384:	f04f 0800 	mov.w	r8, #0
 8008388:	f04f 0900 	mov.w	r9, #0
 800838c:	460a      	mov	r2, r1
 800838e:	9215      	str	r2, [sp, #84]	; 0x54
 8008390:	7811      	ldrb	r1, [r2, #0]
 8008392:	292b      	cmp	r1, #43	; 0x2b
 8008394:	d04c      	beq.n	8008430 <_strtod_l+0xc0>
 8008396:	d83a      	bhi.n	800840e <_strtod_l+0x9e>
 8008398:	290d      	cmp	r1, #13
 800839a:	d834      	bhi.n	8008406 <_strtod_l+0x96>
 800839c:	2908      	cmp	r1, #8
 800839e:	d834      	bhi.n	800840a <_strtod_l+0x9a>
 80083a0:	2900      	cmp	r1, #0
 80083a2:	d03d      	beq.n	8008420 <_strtod_l+0xb0>
 80083a4:	2200      	movs	r2, #0
 80083a6:	920a      	str	r2, [sp, #40]	; 0x28
 80083a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80083aa:	7832      	ldrb	r2, [r6, #0]
 80083ac:	2a30      	cmp	r2, #48	; 0x30
 80083ae:	f040 80b4 	bne.w	800851a <_strtod_l+0x1aa>
 80083b2:	7872      	ldrb	r2, [r6, #1]
 80083b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80083b8:	2a58      	cmp	r2, #88	; 0x58
 80083ba:	d170      	bne.n	800849e <_strtod_l+0x12e>
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	ab16      	add	r3, sp, #88	; 0x58
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	4a8e      	ldr	r2, [pc, #568]	; (8008600 <_strtod_l+0x290>)
 80083c8:	ab17      	add	r3, sp, #92	; 0x5c
 80083ca:	a915      	add	r1, sp, #84	; 0x54
 80083cc:	4620      	mov	r0, r4
 80083ce:	f002 ff4d 	bl	800b26c <__gethex>
 80083d2:	f010 070f 	ands.w	r7, r0, #15
 80083d6:	4605      	mov	r5, r0
 80083d8:	d005      	beq.n	80083e6 <_strtod_l+0x76>
 80083da:	2f06      	cmp	r7, #6
 80083dc:	d12a      	bne.n	8008434 <_strtod_l+0xc4>
 80083de:	3601      	adds	r6, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	9615      	str	r6, [sp, #84]	; 0x54
 80083e4:	930a      	str	r3, [sp, #40]	; 0x28
 80083e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 857f 	bne.w	8008eec <_strtod_l+0xb7c>
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	b1db      	cbz	r3, 800842a <_strtod_l+0xba>
 80083f2:	4642      	mov	r2, r8
 80083f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083f8:	ec43 2b10 	vmov	d0, r2, r3
 80083fc:	b01b      	add	sp, #108	; 0x6c
 80083fe:	ecbd 8b02 	vpop	{d8}
 8008402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008406:	2920      	cmp	r1, #32
 8008408:	d1cc      	bne.n	80083a4 <_strtod_l+0x34>
 800840a:	3201      	adds	r2, #1
 800840c:	e7bf      	b.n	800838e <_strtod_l+0x1e>
 800840e:	292d      	cmp	r1, #45	; 0x2d
 8008410:	d1c8      	bne.n	80083a4 <_strtod_l+0x34>
 8008412:	2101      	movs	r1, #1
 8008414:	910a      	str	r1, [sp, #40]	; 0x28
 8008416:	1c51      	adds	r1, r2, #1
 8008418:	9115      	str	r1, [sp, #84]	; 0x54
 800841a:	7852      	ldrb	r2, [r2, #1]
 800841c:	2a00      	cmp	r2, #0
 800841e:	d1c3      	bne.n	80083a8 <_strtod_l+0x38>
 8008420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008422:	9515      	str	r5, [sp, #84]	; 0x54
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 855f 	bne.w	8008ee8 <_strtod_l+0xb78>
 800842a:	4642      	mov	r2, r8
 800842c:	464b      	mov	r3, r9
 800842e:	e7e3      	b.n	80083f8 <_strtod_l+0x88>
 8008430:	2100      	movs	r1, #0
 8008432:	e7ef      	b.n	8008414 <_strtod_l+0xa4>
 8008434:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008436:	b13a      	cbz	r2, 8008448 <_strtod_l+0xd8>
 8008438:	2135      	movs	r1, #53	; 0x35
 800843a:	a818      	add	r0, sp, #96	; 0x60
 800843c:	f003 fe81 	bl	800c142 <__copybits>
 8008440:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008442:	4620      	mov	r0, r4
 8008444:	f003 fa54 	bl	800b8f0 <_Bfree>
 8008448:	3f01      	subs	r7, #1
 800844a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800844c:	2f04      	cmp	r7, #4
 800844e:	d806      	bhi.n	800845e <_strtod_l+0xee>
 8008450:	e8df f007 	tbb	[pc, r7]
 8008454:	201d0314 	.word	0x201d0314
 8008458:	14          	.byte	0x14
 8008459:	00          	.byte	0x00
 800845a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800845e:	05e9      	lsls	r1, r5, #23
 8008460:	bf48      	it	mi
 8008462:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800846a:	0d1b      	lsrs	r3, r3, #20
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1b9      	bne.n	80083e6 <_strtod_l+0x76>
 8008472:	f001 ff65 	bl	800a340 <__errno>
 8008476:	2322      	movs	r3, #34	; 0x22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	e7b4      	b.n	80083e6 <_strtod_l+0x76>
 800847c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008480:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008488:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800848c:	e7e7      	b.n	800845e <_strtod_l+0xee>
 800848e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008608 <_strtod_l+0x298>
 8008492:	e7e4      	b.n	800845e <_strtod_l+0xee>
 8008494:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008498:	f04f 38ff 	mov.w	r8, #4294967295
 800849c:	e7df      	b.n	800845e <_strtod_l+0xee>
 800849e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	9215      	str	r2, [sp, #84]	; 0x54
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b30      	cmp	r3, #48	; 0x30
 80084a8:	d0f9      	beq.n	800849e <_strtod_l+0x12e>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d09b      	beq.n	80083e6 <_strtod_l+0x76>
 80084ae:	2301      	movs	r3, #1
 80084b0:	f04f 0a00 	mov.w	sl, #0
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084be:	46d3      	mov	fp, sl
 80084c0:	220a      	movs	r2, #10
 80084c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80084c4:	7806      	ldrb	r6, [r0, #0]
 80084c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80084ca:	b2d9      	uxtb	r1, r3
 80084cc:	2909      	cmp	r1, #9
 80084ce:	d926      	bls.n	800851e <_strtod_l+0x1ae>
 80084d0:	494c      	ldr	r1, [pc, #304]	; (8008604 <_strtod_l+0x294>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	f001 fe6b 	bl	800a1ae <strncmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d030      	beq.n	800853e <_strtod_l+0x1ce>
 80084dc:	2000      	movs	r0, #0
 80084de:	4632      	mov	r2, r6
 80084e0:	9005      	str	r0, [sp, #20]
 80084e2:	465e      	mov	r6, fp
 80084e4:	4603      	mov	r3, r0
 80084e6:	2a65      	cmp	r2, #101	; 0x65
 80084e8:	d001      	beq.n	80084ee <_strtod_l+0x17e>
 80084ea:	2a45      	cmp	r2, #69	; 0x45
 80084ec:	d113      	bne.n	8008516 <_strtod_l+0x1a6>
 80084ee:	b91e      	cbnz	r6, 80084f8 <_strtod_l+0x188>
 80084f0:	9a04      	ldr	r2, [sp, #16]
 80084f2:	4302      	orrs	r2, r0
 80084f4:	d094      	beq.n	8008420 <_strtod_l+0xb0>
 80084f6:	2600      	movs	r6, #0
 80084f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80084fa:	1c6a      	adds	r2, r5, #1
 80084fc:	9215      	str	r2, [sp, #84]	; 0x54
 80084fe:	786a      	ldrb	r2, [r5, #1]
 8008500:	2a2b      	cmp	r2, #43	; 0x2b
 8008502:	d074      	beq.n	80085ee <_strtod_l+0x27e>
 8008504:	2a2d      	cmp	r2, #45	; 0x2d
 8008506:	d078      	beq.n	80085fa <_strtod_l+0x28a>
 8008508:	f04f 0c00 	mov.w	ip, #0
 800850c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008510:	2909      	cmp	r1, #9
 8008512:	d97f      	bls.n	8008614 <_strtod_l+0x2a4>
 8008514:	9515      	str	r5, [sp, #84]	; 0x54
 8008516:	2700      	movs	r7, #0
 8008518:	e09e      	b.n	8008658 <_strtod_l+0x2e8>
 800851a:	2300      	movs	r3, #0
 800851c:	e7c8      	b.n	80084b0 <_strtod_l+0x140>
 800851e:	f1bb 0f08 	cmp.w	fp, #8
 8008522:	bfd8      	it	le
 8008524:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008526:	f100 0001 	add.w	r0, r0, #1
 800852a:	bfda      	itte	le
 800852c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008530:	9309      	strle	r3, [sp, #36]	; 0x24
 8008532:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008536:	f10b 0b01 	add.w	fp, fp, #1
 800853a:	9015      	str	r0, [sp, #84]	; 0x54
 800853c:	e7c1      	b.n	80084c2 <_strtod_l+0x152>
 800853e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	9215      	str	r2, [sp, #84]	; 0x54
 8008544:	785a      	ldrb	r2, [r3, #1]
 8008546:	f1bb 0f00 	cmp.w	fp, #0
 800854a:	d037      	beq.n	80085bc <_strtod_l+0x24c>
 800854c:	9005      	str	r0, [sp, #20]
 800854e:	465e      	mov	r6, fp
 8008550:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008554:	2b09      	cmp	r3, #9
 8008556:	d912      	bls.n	800857e <_strtod_l+0x20e>
 8008558:	2301      	movs	r3, #1
 800855a:	e7c4      	b.n	80084e6 <_strtod_l+0x176>
 800855c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	9215      	str	r2, [sp, #84]	; 0x54
 8008562:	785a      	ldrb	r2, [r3, #1]
 8008564:	3001      	adds	r0, #1
 8008566:	2a30      	cmp	r2, #48	; 0x30
 8008568:	d0f8      	beq.n	800855c <_strtod_l+0x1ec>
 800856a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800856e:	2b08      	cmp	r3, #8
 8008570:	f200 84c1 	bhi.w	8008ef6 <_strtod_l+0xb86>
 8008574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008576:	9005      	str	r0, [sp, #20]
 8008578:	2000      	movs	r0, #0
 800857a:	930b      	str	r3, [sp, #44]	; 0x2c
 800857c:	4606      	mov	r6, r0
 800857e:	3a30      	subs	r2, #48	; 0x30
 8008580:	f100 0301 	add.w	r3, r0, #1
 8008584:	d014      	beq.n	80085b0 <_strtod_l+0x240>
 8008586:	9905      	ldr	r1, [sp, #20]
 8008588:	4419      	add	r1, r3
 800858a:	9105      	str	r1, [sp, #20]
 800858c:	4633      	mov	r3, r6
 800858e:	eb00 0c06 	add.w	ip, r0, r6
 8008592:	210a      	movs	r1, #10
 8008594:	4563      	cmp	r3, ip
 8008596:	d113      	bne.n	80085c0 <_strtod_l+0x250>
 8008598:	1833      	adds	r3, r6, r0
 800859a:	2b08      	cmp	r3, #8
 800859c:	f106 0601 	add.w	r6, r6, #1
 80085a0:	4406      	add	r6, r0
 80085a2:	dc1a      	bgt.n	80085da <_strtod_l+0x26a>
 80085a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a6:	230a      	movs	r3, #10
 80085a8:	fb03 2301 	mla	r3, r3, r1, r2
 80085ac:	9309      	str	r3, [sp, #36]	; 0x24
 80085ae:	2300      	movs	r3, #0
 80085b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085b2:	1c51      	adds	r1, r2, #1
 80085b4:	9115      	str	r1, [sp, #84]	; 0x54
 80085b6:	7852      	ldrb	r2, [r2, #1]
 80085b8:	4618      	mov	r0, r3
 80085ba:	e7c9      	b.n	8008550 <_strtod_l+0x1e0>
 80085bc:	4658      	mov	r0, fp
 80085be:	e7d2      	b.n	8008566 <_strtod_l+0x1f6>
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	f103 0301 	add.w	r3, r3, #1
 80085c6:	dc03      	bgt.n	80085d0 <_strtod_l+0x260>
 80085c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085ca:	434f      	muls	r7, r1
 80085cc:	9709      	str	r7, [sp, #36]	; 0x24
 80085ce:	e7e1      	b.n	8008594 <_strtod_l+0x224>
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	bfd8      	it	le
 80085d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80085d8:	e7dc      	b.n	8008594 <_strtod_l+0x224>
 80085da:	2e10      	cmp	r6, #16
 80085dc:	bfdc      	itt	le
 80085de:	230a      	movle	r3, #10
 80085e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80085e4:	e7e3      	b.n	80085ae <_strtod_l+0x23e>
 80085e6:	2300      	movs	r3, #0
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	2301      	movs	r3, #1
 80085ec:	e780      	b.n	80084f0 <_strtod_l+0x180>
 80085ee:	f04f 0c00 	mov.w	ip, #0
 80085f2:	1caa      	adds	r2, r5, #2
 80085f4:	9215      	str	r2, [sp, #84]	; 0x54
 80085f6:	78aa      	ldrb	r2, [r5, #2]
 80085f8:	e788      	b.n	800850c <_strtod_l+0x19c>
 80085fa:	f04f 0c01 	mov.w	ip, #1
 80085fe:	e7f8      	b.n	80085f2 <_strtod_l+0x282>
 8008600:	0800edc8 	.word	0x0800edc8
 8008604:	0800edc4 	.word	0x0800edc4
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800860e:	1c51      	adds	r1, r2, #1
 8008610:	9115      	str	r1, [sp, #84]	; 0x54
 8008612:	7852      	ldrb	r2, [r2, #1]
 8008614:	2a30      	cmp	r2, #48	; 0x30
 8008616:	d0f9      	beq.n	800860c <_strtod_l+0x29c>
 8008618:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800861c:	2908      	cmp	r1, #8
 800861e:	f63f af7a 	bhi.w	8008516 <_strtod_l+0x1a6>
 8008622:	3a30      	subs	r2, #48	; 0x30
 8008624:	9208      	str	r2, [sp, #32]
 8008626:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008628:	920c      	str	r2, [sp, #48]	; 0x30
 800862a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800862c:	1c57      	adds	r7, r2, #1
 800862e:	9715      	str	r7, [sp, #84]	; 0x54
 8008630:	7852      	ldrb	r2, [r2, #1]
 8008632:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008636:	f1be 0f09 	cmp.w	lr, #9
 800863a:	d938      	bls.n	80086ae <_strtod_l+0x33e>
 800863c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800863e:	1a7f      	subs	r7, r7, r1
 8008640:	2f08      	cmp	r7, #8
 8008642:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008646:	dc03      	bgt.n	8008650 <_strtod_l+0x2e0>
 8008648:	9908      	ldr	r1, [sp, #32]
 800864a:	428f      	cmp	r7, r1
 800864c:	bfa8      	it	ge
 800864e:	460f      	movge	r7, r1
 8008650:	f1bc 0f00 	cmp.w	ip, #0
 8008654:	d000      	beq.n	8008658 <_strtod_l+0x2e8>
 8008656:	427f      	negs	r7, r7
 8008658:	2e00      	cmp	r6, #0
 800865a:	d14f      	bne.n	80086fc <_strtod_l+0x38c>
 800865c:	9904      	ldr	r1, [sp, #16]
 800865e:	4301      	orrs	r1, r0
 8008660:	f47f aec1 	bne.w	80083e6 <_strtod_l+0x76>
 8008664:	2b00      	cmp	r3, #0
 8008666:	f47f aedb 	bne.w	8008420 <_strtod_l+0xb0>
 800866a:	2a69      	cmp	r2, #105	; 0x69
 800866c:	d029      	beq.n	80086c2 <_strtod_l+0x352>
 800866e:	dc26      	bgt.n	80086be <_strtod_l+0x34e>
 8008670:	2a49      	cmp	r2, #73	; 0x49
 8008672:	d026      	beq.n	80086c2 <_strtod_l+0x352>
 8008674:	2a4e      	cmp	r2, #78	; 0x4e
 8008676:	f47f aed3 	bne.w	8008420 <_strtod_l+0xb0>
 800867a:	499b      	ldr	r1, [pc, #620]	; (80088e8 <_strtod_l+0x578>)
 800867c:	a815      	add	r0, sp, #84	; 0x54
 800867e:	f003 f835 	bl	800b6ec <__match>
 8008682:	2800      	cmp	r0, #0
 8008684:	f43f aecc 	beq.w	8008420 <_strtod_l+0xb0>
 8008688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b28      	cmp	r3, #40	; 0x28
 800868e:	d12f      	bne.n	80086f0 <_strtod_l+0x380>
 8008690:	4996      	ldr	r1, [pc, #600]	; (80088ec <_strtod_l+0x57c>)
 8008692:	aa18      	add	r2, sp, #96	; 0x60
 8008694:	a815      	add	r0, sp, #84	; 0x54
 8008696:	f003 f83d 	bl	800b714 <__hexnan>
 800869a:	2805      	cmp	r0, #5
 800869c:	d128      	bne.n	80086f0 <_strtod_l+0x380>
 800869e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80086a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80086ac:	e69b      	b.n	80083e6 <_strtod_l+0x76>
 80086ae:	9f08      	ldr	r7, [sp, #32]
 80086b0:	210a      	movs	r1, #10
 80086b2:	fb01 2107 	mla	r1, r1, r7, r2
 80086b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80086ba:	9208      	str	r2, [sp, #32]
 80086bc:	e7b5      	b.n	800862a <_strtod_l+0x2ba>
 80086be:	2a6e      	cmp	r2, #110	; 0x6e
 80086c0:	e7d9      	b.n	8008676 <_strtod_l+0x306>
 80086c2:	498b      	ldr	r1, [pc, #556]	; (80088f0 <_strtod_l+0x580>)
 80086c4:	a815      	add	r0, sp, #84	; 0x54
 80086c6:	f003 f811 	bl	800b6ec <__match>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f43f aea8 	beq.w	8008420 <_strtod_l+0xb0>
 80086d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d2:	4988      	ldr	r1, [pc, #544]	; (80088f4 <_strtod_l+0x584>)
 80086d4:	3b01      	subs	r3, #1
 80086d6:	a815      	add	r0, sp, #84	; 0x54
 80086d8:	9315      	str	r3, [sp, #84]	; 0x54
 80086da:	f003 f807 	bl	800b6ec <__match>
 80086de:	b910      	cbnz	r0, 80086e6 <_strtod_l+0x376>
 80086e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e2:	3301      	adds	r3, #1
 80086e4:	9315      	str	r3, [sp, #84]	; 0x54
 80086e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008904 <_strtod_l+0x594>
 80086ea:	f04f 0800 	mov.w	r8, #0
 80086ee:	e67a      	b.n	80083e6 <_strtod_l+0x76>
 80086f0:	4881      	ldr	r0, [pc, #516]	; (80088f8 <_strtod_l+0x588>)
 80086f2:	f001 fe61 	bl	800a3b8 <nan>
 80086f6:	ec59 8b10 	vmov	r8, r9, d0
 80086fa:	e674      	b.n	80083e6 <_strtod_l+0x76>
 80086fc:	9b05      	ldr	r3, [sp, #20]
 80086fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008700:	1afb      	subs	r3, r7, r3
 8008702:	f1bb 0f00 	cmp.w	fp, #0
 8008706:	bf08      	it	eq
 8008708:	46b3      	moveq	fp, r6
 800870a:	2e10      	cmp	r6, #16
 800870c:	9308      	str	r3, [sp, #32]
 800870e:	4635      	mov	r5, r6
 8008710:	bfa8      	it	ge
 8008712:	2510      	movge	r5, #16
 8008714:	f7f7 fefe 	bl	8000514 <__aeabi_ui2d>
 8008718:	2e09      	cmp	r6, #9
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	dd13      	ble.n	8008748 <_strtod_l+0x3d8>
 8008720:	4b76      	ldr	r3, [pc, #472]	; (80088fc <_strtod_l+0x58c>)
 8008722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008726:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800872a:	f7f7 ff6d 	bl	8000608 <__aeabi_dmul>
 800872e:	4680      	mov	r8, r0
 8008730:	4650      	mov	r0, sl
 8008732:	4689      	mov	r9, r1
 8008734:	f7f7 feee 	bl	8000514 <__aeabi_ui2d>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4640      	mov	r0, r8
 800873e:	4649      	mov	r1, r9
 8008740:	f7f7 fdac 	bl	800029c <__adddf3>
 8008744:	4680      	mov	r8, r0
 8008746:	4689      	mov	r9, r1
 8008748:	2e0f      	cmp	r6, #15
 800874a:	dc38      	bgt.n	80087be <_strtod_l+0x44e>
 800874c:	9b08      	ldr	r3, [sp, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f43f ae49 	beq.w	80083e6 <_strtod_l+0x76>
 8008754:	dd24      	ble.n	80087a0 <_strtod_l+0x430>
 8008756:	2b16      	cmp	r3, #22
 8008758:	dc0b      	bgt.n	8008772 <_strtod_l+0x402>
 800875a:	4968      	ldr	r1, [pc, #416]	; (80088fc <_strtod_l+0x58c>)
 800875c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	f7f7 ff4e 	bl	8000608 <__aeabi_dmul>
 800876c:	4680      	mov	r8, r0
 800876e:	4689      	mov	r9, r1
 8008770:	e639      	b.n	80083e6 <_strtod_l+0x76>
 8008772:	9a08      	ldr	r2, [sp, #32]
 8008774:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008778:	4293      	cmp	r3, r2
 800877a:	db20      	blt.n	80087be <_strtod_l+0x44e>
 800877c:	4c5f      	ldr	r4, [pc, #380]	; (80088fc <_strtod_l+0x58c>)
 800877e:	f1c6 060f 	rsb	r6, r6, #15
 8008782:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008786:	4642      	mov	r2, r8
 8008788:	464b      	mov	r3, r9
 800878a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	1b9e      	subs	r6, r3, r6
 8008796:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800879a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800879e:	e7e3      	b.n	8008768 <_strtod_l+0x3f8>
 80087a0:	9b08      	ldr	r3, [sp, #32]
 80087a2:	3316      	adds	r3, #22
 80087a4:	db0b      	blt.n	80087be <_strtod_l+0x44e>
 80087a6:	9b05      	ldr	r3, [sp, #20]
 80087a8:	1bdf      	subs	r7, r3, r7
 80087aa:	4b54      	ldr	r3, [pc, #336]	; (80088fc <_strtod_l+0x58c>)
 80087ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80087b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b4:	4640      	mov	r0, r8
 80087b6:	4649      	mov	r1, r9
 80087b8:	f7f8 f850 	bl	800085c <__aeabi_ddiv>
 80087bc:	e7d6      	b.n	800876c <_strtod_l+0x3fc>
 80087be:	9b08      	ldr	r3, [sp, #32]
 80087c0:	1b75      	subs	r5, r6, r5
 80087c2:	441d      	add	r5, r3
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	dd70      	ble.n	80088aa <_strtod_l+0x53a>
 80087c8:	f015 030f 	ands.w	r3, r5, #15
 80087cc:	d00a      	beq.n	80087e4 <_strtod_l+0x474>
 80087ce:	494b      	ldr	r1, [pc, #300]	; (80088fc <_strtod_l+0x58c>)
 80087d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087d4:	4642      	mov	r2, r8
 80087d6:	464b      	mov	r3, r9
 80087d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	4680      	mov	r8, r0
 80087e2:	4689      	mov	r9, r1
 80087e4:	f035 050f 	bics.w	r5, r5, #15
 80087e8:	d04d      	beq.n	8008886 <_strtod_l+0x516>
 80087ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80087ee:	dd22      	ble.n	8008836 <_strtod_l+0x4c6>
 80087f0:	2500      	movs	r5, #0
 80087f2:	46ab      	mov	fp, r5
 80087f4:	9509      	str	r5, [sp, #36]	; 0x24
 80087f6:	9505      	str	r5, [sp, #20]
 80087f8:	2322      	movs	r3, #34	; 0x22
 80087fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008904 <_strtod_l+0x594>
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	f04f 0800 	mov.w	r8, #0
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	f43f aded 	beq.w	80083e6 <_strtod_l+0x76>
 800880c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800880e:	4620      	mov	r0, r4
 8008810:	f003 f86e 	bl	800b8f0 <_Bfree>
 8008814:	9905      	ldr	r1, [sp, #20]
 8008816:	4620      	mov	r0, r4
 8008818:	f003 f86a 	bl	800b8f0 <_Bfree>
 800881c:	4659      	mov	r1, fp
 800881e:	4620      	mov	r0, r4
 8008820:	f003 f866 	bl	800b8f0 <_Bfree>
 8008824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008826:	4620      	mov	r0, r4
 8008828:	f003 f862 	bl	800b8f0 <_Bfree>
 800882c:	4629      	mov	r1, r5
 800882e:	4620      	mov	r0, r4
 8008830:	f003 f85e 	bl	800b8f0 <_Bfree>
 8008834:	e5d7      	b.n	80083e6 <_strtod_l+0x76>
 8008836:	4b32      	ldr	r3, [pc, #200]	; (8008900 <_strtod_l+0x590>)
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	2300      	movs	r3, #0
 800883c:	112d      	asrs	r5, r5, #4
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	469a      	mov	sl, r3
 8008844:	2d01      	cmp	r5, #1
 8008846:	dc21      	bgt.n	800888c <_strtod_l+0x51c>
 8008848:	b10b      	cbz	r3, 800884e <_strtod_l+0x4de>
 800884a:	4680      	mov	r8, r0
 800884c:	4689      	mov	r9, r1
 800884e:	492c      	ldr	r1, [pc, #176]	; (8008900 <_strtod_l+0x590>)
 8008850:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008854:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008860:	f7f7 fed2 	bl	8000608 <__aeabi_dmul>
 8008864:	4b27      	ldr	r3, [pc, #156]	; (8008904 <_strtod_l+0x594>)
 8008866:	460a      	mov	r2, r1
 8008868:	400b      	ands	r3, r1
 800886a:	4927      	ldr	r1, [pc, #156]	; (8008908 <_strtod_l+0x598>)
 800886c:	428b      	cmp	r3, r1
 800886e:	4680      	mov	r8, r0
 8008870:	d8be      	bhi.n	80087f0 <_strtod_l+0x480>
 8008872:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008876:	428b      	cmp	r3, r1
 8008878:	bf86      	itte	hi
 800887a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800890c <_strtod_l+0x59c>
 800887e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008882:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008886:	2300      	movs	r3, #0
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	e07b      	b.n	8008984 <_strtod_l+0x614>
 800888c:	07ea      	lsls	r2, r5, #31
 800888e:	d505      	bpl.n	800889c <_strtod_l+0x52c>
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f7 feb7 	bl	8000608 <__aeabi_dmul>
 800889a:	2301      	movs	r3, #1
 800889c:	9a04      	ldr	r2, [sp, #16]
 800889e:	3208      	adds	r2, #8
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	106d      	asrs	r5, r5, #1
 80088a6:	9204      	str	r2, [sp, #16]
 80088a8:	e7cc      	b.n	8008844 <_strtod_l+0x4d4>
 80088aa:	d0ec      	beq.n	8008886 <_strtod_l+0x516>
 80088ac:	426d      	negs	r5, r5
 80088ae:	f015 020f 	ands.w	r2, r5, #15
 80088b2:	d00a      	beq.n	80088ca <_strtod_l+0x55a>
 80088b4:	4b11      	ldr	r3, [pc, #68]	; (80088fc <_strtod_l+0x58c>)
 80088b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 ffcb 	bl	800085c <__aeabi_ddiv>
 80088c6:	4680      	mov	r8, r0
 80088c8:	4689      	mov	r9, r1
 80088ca:	112d      	asrs	r5, r5, #4
 80088cc:	d0db      	beq.n	8008886 <_strtod_l+0x516>
 80088ce:	2d1f      	cmp	r5, #31
 80088d0:	dd1e      	ble.n	8008910 <_strtod_l+0x5a0>
 80088d2:	2500      	movs	r5, #0
 80088d4:	46ab      	mov	fp, r5
 80088d6:	9509      	str	r5, [sp, #36]	; 0x24
 80088d8:	9505      	str	r5, [sp, #20]
 80088da:	2322      	movs	r3, #34	; 0x22
 80088dc:	f04f 0800 	mov.w	r8, #0
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	e78d      	b.n	8008804 <_strtod_l+0x494>
 80088e8:	0800ee25 	.word	0x0800ee25
 80088ec:	0800eddc 	.word	0x0800eddc
 80088f0:	0800ee1d 	.word	0x0800ee1d
 80088f4:	0800ef09 	.word	0x0800ef09
 80088f8:	0800ef05 	.word	0x0800ef05
 80088fc:	0800f060 	.word	0x0800f060
 8008900:	0800f038 	.word	0x0800f038
 8008904:	7ff00000 	.word	0x7ff00000
 8008908:	7ca00000 	.word	0x7ca00000
 800890c:	7fefffff 	.word	0x7fefffff
 8008910:	f015 0310 	ands.w	r3, r5, #16
 8008914:	bf18      	it	ne
 8008916:	236a      	movne	r3, #106	; 0x6a
 8008918:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008cbc <_strtod_l+0x94c>
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	2300      	movs	r3, #0
 8008924:	07ea      	lsls	r2, r5, #31
 8008926:	d504      	bpl.n	8008932 <_strtod_l+0x5c2>
 8008928:	e9da 2300 	ldrd	r2, r3, [sl]
 800892c:	f7f7 fe6c 	bl	8000608 <__aeabi_dmul>
 8008930:	2301      	movs	r3, #1
 8008932:	106d      	asrs	r5, r5, #1
 8008934:	f10a 0a08 	add.w	sl, sl, #8
 8008938:	d1f4      	bne.n	8008924 <_strtod_l+0x5b4>
 800893a:	b10b      	cbz	r3, 8008940 <_strtod_l+0x5d0>
 800893c:	4680      	mov	r8, r0
 800893e:	4689      	mov	r9, r1
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	b1bb      	cbz	r3, 8008974 <_strtod_l+0x604>
 8008944:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008948:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800894c:	2b00      	cmp	r3, #0
 800894e:	4649      	mov	r1, r9
 8008950:	dd10      	ble.n	8008974 <_strtod_l+0x604>
 8008952:	2b1f      	cmp	r3, #31
 8008954:	f340 811e 	ble.w	8008b94 <_strtod_l+0x824>
 8008958:	2b34      	cmp	r3, #52	; 0x34
 800895a:	bfde      	ittt	le
 800895c:	f04f 33ff 	movle.w	r3, #4294967295
 8008960:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008964:	4093      	lslle	r3, r2
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	bfcc      	ite	gt
 800896c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008970:	ea03 0901 	andle.w	r9, r3, r1
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008980:	2800      	cmp	r0, #0
 8008982:	d1a6      	bne.n	80088d2 <_strtod_l+0x562>
 8008984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800898a:	4633      	mov	r3, r6
 800898c:	465a      	mov	r2, fp
 800898e:	4620      	mov	r0, r4
 8008990:	f003 f816 	bl	800b9c0 <__s2b>
 8008994:	9009      	str	r0, [sp, #36]	; 0x24
 8008996:	2800      	cmp	r0, #0
 8008998:	f43f af2a 	beq.w	80087f0 <_strtod_l+0x480>
 800899c:	9a08      	ldr	r2, [sp, #32]
 800899e:	9b05      	ldr	r3, [sp, #20]
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	eba3 0307 	sub.w	r3, r3, r7
 80089a6:	bfa8      	it	ge
 80089a8:	2300      	movge	r3, #0
 80089aa:	930c      	str	r3, [sp, #48]	; 0x30
 80089ac:	2500      	movs	r5, #0
 80089ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089b2:	9312      	str	r3, [sp, #72]	; 0x48
 80089b4:	46ab      	mov	fp, r5
 80089b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b8:	4620      	mov	r0, r4
 80089ba:	6859      	ldr	r1, [r3, #4]
 80089bc:	f002 ff58 	bl	800b870 <_Balloc>
 80089c0:	9005      	str	r0, [sp, #20]
 80089c2:	2800      	cmp	r0, #0
 80089c4:	f43f af18 	beq.w	80087f8 <_strtod_l+0x488>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	3202      	adds	r2, #2
 80089ce:	f103 010c 	add.w	r1, r3, #12
 80089d2:	0092      	lsls	r2, r2, #2
 80089d4:	300c      	adds	r0, #12
 80089d6:	f001 fce0 	bl	800a39a <memcpy>
 80089da:	ec49 8b10 	vmov	d0, r8, r9
 80089de:	aa18      	add	r2, sp, #96	; 0x60
 80089e0:	a917      	add	r1, sp, #92	; 0x5c
 80089e2:	4620      	mov	r0, r4
 80089e4:	f003 fb20 	bl	800c028 <__d2b>
 80089e8:	ec49 8b18 	vmov	d8, r8, r9
 80089ec:	9016      	str	r0, [sp, #88]	; 0x58
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f af02 	beq.w	80087f8 <_strtod_l+0x488>
 80089f4:	2101      	movs	r1, #1
 80089f6:	4620      	mov	r0, r4
 80089f8:	f003 f87a 	bl	800baf0 <__i2b>
 80089fc:	4683      	mov	fp, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f aefa 	beq.w	80087f8 <_strtod_l+0x488>
 8008a04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	bfab      	itete	ge
 8008a0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008a0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008a10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008a16:	bfac      	ite	ge
 8008a18:	eb06 0a03 	addge.w	sl, r6, r3
 8008a1c:	1b9f      	sublt	r7, r3, r6
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	1af6      	subs	r6, r6, r3
 8008a22:	4416      	add	r6, r2
 8008a24:	4ba0      	ldr	r3, [pc, #640]	; (8008ca8 <_strtod_l+0x938>)
 8008a26:	3e01      	subs	r6, #1
 8008a28:	429e      	cmp	r6, r3
 8008a2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a2e:	f280 80c4 	bge.w	8008bba <_strtod_l+0x84a>
 8008a32:	1b9b      	subs	r3, r3, r6
 8008a34:	2b1f      	cmp	r3, #31
 8008a36:	eba2 0203 	sub.w	r2, r2, r3
 8008a3a:	f04f 0101 	mov.w	r1, #1
 8008a3e:	f300 80b0 	bgt.w	8008ba2 <_strtod_l+0x832>
 8008a42:	fa01 f303 	lsl.w	r3, r1, r3
 8008a46:	930e      	str	r3, [sp, #56]	; 0x38
 8008a48:	2300      	movs	r3, #0
 8008a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a4c:	eb0a 0602 	add.w	r6, sl, r2
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	45b2      	cmp	sl, r6
 8008a54:	4417      	add	r7, r2
 8008a56:	441f      	add	r7, r3
 8008a58:	4653      	mov	r3, sl
 8008a5a:	bfa8      	it	ge
 8008a5c:	4633      	movge	r3, r6
 8008a5e:	42bb      	cmp	r3, r7
 8008a60:	bfa8      	it	ge
 8008a62:	463b      	movge	r3, r7
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bfc2      	ittt	gt
 8008a68:	1af6      	subgt	r6, r6, r3
 8008a6a:	1aff      	subgt	r7, r7, r3
 8008a6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dd17      	ble.n	8008aa6 <_strtod_l+0x736>
 8008a76:	4659      	mov	r1, fp
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f003 f8f8 	bl	800bc70 <__pow5mult>
 8008a80:	4683      	mov	fp, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f43f aeb8 	beq.w	80087f8 <_strtod_l+0x488>
 8008a88:	4601      	mov	r1, r0
 8008a8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f003 f845 	bl	800bb1c <__multiply>
 8008a92:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f aeaf 	beq.w	80087f8 <_strtod_l+0x488>
 8008a9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f002 ff27 	bl	800b8f0 <_Bfree>
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	9316      	str	r3, [sp, #88]	; 0x58
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	f300 808c 	bgt.w	8008bc4 <_strtod_l+0x854>
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd08      	ble.n	8008ac4 <_strtod_l+0x754>
 8008ab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ab4:	9905      	ldr	r1, [sp, #20]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f003 f8da 	bl	800bc70 <__pow5mult>
 8008abc:	9005      	str	r0, [sp, #20]
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae9a 	beq.w	80087f8 <_strtod_l+0x488>
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	dd08      	ble.n	8008ada <_strtod_l+0x76a>
 8008ac8:	9905      	ldr	r1, [sp, #20]
 8008aca:	463a      	mov	r2, r7
 8008acc:	4620      	mov	r0, r4
 8008ace:	f003 f929 	bl	800bd24 <__lshift>
 8008ad2:	9005      	str	r0, [sp, #20]
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f43f ae8f 	beq.w	80087f8 <_strtod_l+0x488>
 8008ada:	f1ba 0f00 	cmp.w	sl, #0
 8008ade:	dd08      	ble.n	8008af2 <_strtod_l+0x782>
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f003 f91d 	bl	800bd24 <__lshift>
 8008aea:	4683      	mov	fp, r0
 8008aec:	2800      	cmp	r0, #0
 8008aee:	f43f ae83 	beq.w	80087f8 <_strtod_l+0x488>
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008af6:	4620      	mov	r0, r4
 8008af8:	f003 f99c 	bl	800be34 <__mdiff>
 8008afc:	4605      	mov	r5, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f ae7a 	beq.w	80087f8 <_strtod_l+0x488>
 8008b04:	68c3      	ldr	r3, [r0, #12]
 8008b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60c3      	str	r3, [r0, #12]
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	f003 f975 	bl	800bdfc <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da60      	bge.n	8008bd8 <_strtod_l+0x868>
 8008b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b18:	ea53 0308 	orrs.w	r3, r3, r8
 8008b1c:	f040 8084 	bne.w	8008c28 <_strtod_l+0x8b8>
 8008b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d17f      	bne.n	8008c28 <_strtod_l+0x8b8>
 8008b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b2c:	0d1b      	lsrs	r3, r3, #20
 8008b2e:	051b      	lsls	r3, r3, #20
 8008b30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b34:	d978      	bls.n	8008c28 <_strtod_l+0x8b8>
 8008b36:	696b      	ldr	r3, [r5, #20]
 8008b38:	b913      	cbnz	r3, 8008b40 <_strtod_l+0x7d0>
 8008b3a:	692b      	ldr	r3, [r5, #16]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	dd73      	ble.n	8008c28 <_strtod_l+0x8b8>
 8008b40:	4629      	mov	r1, r5
 8008b42:	2201      	movs	r2, #1
 8008b44:	4620      	mov	r0, r4
 8008b46:	f003 f8ed 	bl	800bd24 <__lshift>
 8008b4a:	4659      	mov	r1, fp
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	f003 f955 	bl	800bdfc <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	dd68      	ble.n	8008c28 <_strtod_l+0x8b8>
 8008b56:	9904      	ldr	r1, [sp, #16]
 8008b58:	4a54      	ldr	r2, [pc, #336]	; (8008cac <_strtod_l+0x93c>)
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	f000 8084 	beq.w	8008c6a <_strtod_l+0x8fa>
 8008b62:	ea02 0109 	and.w	r1, r2, r9
 8008b66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b6a:	dc7e      	bgt.n	8008c6a <_strtod_l+0x8fa>
 8008b6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b70:	f77f aeb3 	ble.w	80088da <_strtod_l+0x56a>
 8008b74:	4b4e      	ldr	r3, [pc, #312]	; (8008cb0 <_strtod_l+0x940>)
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f7f7 fd44 	bl	8000608 <__aeabi_dmul>
 8008b80:	4b4a      	ldr	r3, [pc, #296]	; (8008cac <_strtod_l+0x93c>)
 8008b82:	400b      	ands	r3, r1
 8008b84:	4680      	mov	r8, r0
 8008b86:	4689      	mov	r9, r1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f47f ae3f 	bne.w	800880c <_strtod_l+0x49c>
 8008b8e:	2322      	movs	r3, #34	; 0x22
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	e63b      	b.n	800880c <_strtod_l+0x49c>
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	ea03 0808 	and.w	r8, r3, r8
 8008ba0:	e6e8      	b.n	8008974 <_strtod_l+0x604>
 8008ba2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008ba6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008baa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008bae:	36e2      	adds	r6, #226	; 0xe2
 8008bb0:	fa01 f306 	lsl.w	r3, r1, r6
 8008bb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008bb8:	e748      	b.n	8008a4c <_strtod_l+0x6dc>
 8008bba:	2100      	movs	r1, #0
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008bc2:	e743      	b.n	8008a4c <_strtod_l+0x6dc>
 8008bc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f003 f8ab 	bl	800bd24 <__lshift>
 8008bce:	9016      	str	r0, [sp, #88]	; 0x58
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f47f af6b 	bne.w	8008aac <_strtod_l+0x73c>
 8008bd6:	e60f      	b.n	80087f8 <_strtod_l+0x488>
 8008bd8:	46ca      	mov	sl, r9
 8008bda:	d171      	bne.n	8008cc0 <_strtod_l+0x950>
 8008bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be2:	b352      	cbz	r2, 8008c3a <_strtod_l+0x8ca>
 8008be4:	4a33      	ldr	r2, [pc, #204]	; (8008cb4 <_strtod_l+0x944>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d12a      	bne.n	8008c40 <_strtod_l+0x8d0>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	4641      	mov	r1, r8
 8008bee:	b1fb      	cbz	r3, 8008c30 <_strtod_l+0x8c0>
 8008bf0:	4b2e      	ldr	r3, [pc, #184]	; (8008cac <_strtod_l+0x93c>)
 8008bf2:	ea09 0303 	and.w	r3, r9, r3
 8008bf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	d81a      	bhi.n	8008c36 <_strtod_l+0x8c6>
 8008c00:	0d1b      	lsrs	r3, r3, #20
 8008c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	d118      	bne.n	8008c40 <_strtod_l+0x8d0>
 8008c0e:	4b2a      	ldr	r3, [pc, #168]	; (8008cb8 <_strtod_l+0x948>)
 8008c10:	459a      	cmp	sl, r3
 8008c12:	d102      	bne.n	8008c1a <_strtod_l+0x8aa>
 8008c14:	3101      	adds	r1, #1
 8008c16:	f43f adef 	beq.w	80087f8 <_strtod_l+0x488>
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <_strtod_l+0x93c>)
 8008c1c:	ea0a 0303 	and.w	r3, sl, r3
 8008c20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c24:	f04f 0800 	mov.w	r8, #0
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1a2      	bne.n	8008b74 <_strtod_l+0x804>
 8008c2e:	e5ed      	b.n	800880c <_strtod_l+0x49c>
 8008c30:	f04f 33ff 	mov.w	r3, #4294967295
 8008c34:	e7e9      	b.n	8008c0a <_strtod_l+0x89a>
 8008c36:	4613      	mov	r3, r2
 8008c38:	e7e7      	b.n	8008c0a <_strtod_l+0x89a>
 8008c3a:	ea53 0308 	orrs.w	r3, r3, r8
 8008c3e:	d08a      	beq.n	8008b56 <_strtod_l+0x7e6>
 8008c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c42:	b1e3      	cbz	r3, 8008c7e <_strtod_l+0x90e>
 8008c44:	ea13 0f0a 	tst.w	r3, sl
 8008c48:	d0ee      	beq.n	8008c28 <_strtod_l+0x8b8>
 8008c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4c:	9a04      	ldr	r2, [sp, #16]
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	b1c3      	cbz	r3, 8008c86 <_strtod_l+0x916>
 8008c54:	f7ff fb6e 	bl	8008334 <sulp>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	ec51 0b18 	vmov	r0, r1, d8
 8008c60:	f7f7 fb1c 	bl	800029c <__adddf3>
 8008c64:	4680      	mov	r8, r0
 8008c66:	4689      	mov	r9, r1
 8008c68:	e7de      	b.n	8008c28 <_strtod_l+0x8b8>
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c78:	f04f 38ff 	mov.w	r8, #4294967295
 8008c7c:	e7d4      	b.n	8008c28 <_strtod_l+0x8b8>
 8008c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c80:	ea13 0f08 	tst.w	r3, r8
 8008c84:	e7e0      	b.n	8008c48 <_strtod_l+0x8d8>
 8008c86:	f7ff fb55 	bl	8008334 <sulp>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	ec51 0b18 	vmov	r0, r1, d8
 8008c92:	f7f7 fb01 	bl	8000298 <__aeabi_dsub>
 8008c96:	2200      	movs	r2, #0
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	4689      	mov	r9, r1
 8008c9e:	f7f7 ff1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d0c0      	beq.n	8008c28 <_strtod_l+0x8b8>
 8008ca6:	e618      	b.n	80088da <_strtod_l+0x56a>
 8008ca8:	fffffc02 	.word	0xfffffc02
 8008cac:	7ff00000 	.word	0x7ff00000
 8008cb0:	39500000 	.word	0x39500000
 8008cb4:	000fffff 	.word	0x000fffff
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	0800edf0 	.word	0x0800edf0
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f003 fa0a 	bl	800c0dc <__ratio>
 8008cc8:	ec57 6b10 	vmov	r6, r7, d0
 8008ccc:	ee10 0a10 	vmov	r0, s0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	f7f7 ff12 	bl	8000b00 <__aeabi_dcmple>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d071      	beq.n	8008dc4 <_strtod_l+0xa54>
 8008ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d17c      	bne.n	8008de0 <_strtod_l+0xa70>
 8008ce6:	f1b8 0f00 	cmp.w	r8, #0
 8008cea:	d15a      	bne.n	8008da2 <_strtod_l+0xa32>
 8008cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d15d      	bne.n	8008db0 <_strtod_l+0xa40>
 8008cf4:	4b90      	ldr	r3, [pc, #576]	; (8008f38 <_strtod_l+0xbc8>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fef6 	bl	8000aec <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d15c      	bne.n	8008dbe <_strtod_l+0xa4e>
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	4b8c      	ldr	r3, [pc, #560]	; (8008f3c <_strtod_l+0xbcc>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	4606      	mov	r6, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d18:	9606      	str	r6, [sp, #24]
 8008d1a:	9307      	str	r3, [sp, #28]
 8008d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d24:	4b86      	ldr	r3, [pc, #536]	; (8008f40 <_strtod_l+0xbd0>)
 8008d26:	ea0a 0303 	and.w	r3, sl, r3
 8008d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d2e:	4b85      	ldr	r3, [pc, #532]	; (8008f44 <_strtod_l+0xbd4>)
 8008d30:	429a      	cmp	r2, r3
 8008d32:	f040 8090 	bne.w	8008e56 <_strtod_l+0xae6>
 8008d36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008d3a:	ec49 8b10 	vmov	d0, r8, r9
 8008d3e:	f003 f903 	bl	800bf48 <__ulp>
 8008d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d46:	ec51 0b10 	vmov	r0, r1, d0
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	4642      	mov	r2, r8
 8008d50:	464b      	mov	r3, r9
 8008d52:	f7f7 faa3 	bl	800029c <__adddf3>
 8008d56:	460b      	mov	r3, r1
 8008d58:	4979      	ldr	r1, [pc, #484]	; (8008f40 <_strtod_l+0xbd0>)
 8008d5a:	4a7b      	ldr	r2, [pc, #492]	; (8008f48 <_strtod_l+0xbd8>)
 8008d5c:	4019      	ands	r1, r3
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	4680      	mov	r8, r0
 8008d62:	d944      	bls.n	8008dee <_strtod_l+0xa7e>
 8008d64:	ee18 2a90 	vmov	r2, s17
 8008d68:	4b78      	ldr	r3, [pc, #480]	; (8008f4c <_strtod_l+0xbdc>)
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d104      	bne.n	8008d78 <_strtod_l+0xa08>
 8008d6e:	ee18 3a10 	vmov	r3, s16
 8008d72:	3301      	adds	r3, #1
 8008d74:	f43f ad40 	beq.w	80087f8 <_strtod_l+0x488>
 8008d78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008f4c <_strtod_l+0xbdc>
 8008d7c:	f04f 38ff 	mov.w	r8, #4294967295
 8008d80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d82:	4620      	mov	r0, r4
 8008d84:	f002 fdb4 	bl	800b8f0 <_Bfree>
 8008d88:	9905      	ldr	r1, [sp, #20]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f002 fdb0 	bl	800b8f0 <_Bfree>
 8008d90:	4659      	mov	r1, fp
 8008d92:	4620      	mov	r0, r4
 8008d94:	f002 fdac 	bl	800b8f0 <_Bfree>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f002 fda8 	bl	800b8f0 <_Bfree>
 8008da0:	e609      	b.n	80089b6 <_strtod_l+0x646>
 8008da2:	f1b8 0f01 	cmp.w	r8, #1
 8008da6:	d103      	bne.n	8008db0 <_strtod_l+0xa40>
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	f43f ad95 	beq.w	80088da <_strtod_l+0x56a>
 8008db0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008f08 <_strtod_l+0xb98>
 8008db4:	4f60      	ldr	r7, [pc, #384]	; (8008f38 <_strtod_l+0xbc8>)
 8008db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dba:	2600      	movs	r6, #0
 8008dbc:	e7ae      	b.n	8008d1c <_strtod_l+0x9ac>
 8008dbe:	4f5f      	ldr	r7, [pc, #380]	; (8008f3c <_strtod_l+0xbcc>)
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	e7a7      	b.n	8008d14 <_strtod_l+0x9a4>
 8008dc4:	4b5d      	ldr	r3, [pc, #372]	; (8008f3c <_strtod_l+0xbcc>)
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fc1c 	bl	8000608 <__aeabi_dmul>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d09c      	beq.n	8008d14 <_strtod_l+0x9a4>
 8008dda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008dde:	e79d      	b.n	8008d1c <_strtod_l+0x9ac>
 8008de0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008f10 <_strtod_l+0xba0>
 8008de4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008de8:	ec57 6b17 	vmov	r6, r7, d7
 8008dec:	e796      	b.n	8008d1c <_strtod_l+0x9ac>
 8008dee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	46ca      	mov	sl, r9
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1c2      	bne.n	8008d80 <_strtod_l+0xa10>
 8008dfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e00:	0d1b      	lsrs	r3, r3, #20
 8008e02:	051b      	lsls	r3, r3, #20
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d1bb      	bne.n	8008d80 <_strtod_l+0xa10>
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f7f7 ff5c 	bl	8000cc8 <__aeabi_d2lz>
 8008e10:	f7f7 fbcc 	bl	80005ac <__aeabi_l2d>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fa3c 	bl	8000298 <__aeabi_dsub>
 8008e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e26:	ea43 0308 	orr.w	r3, r3, r8
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	d054      	beq.n	8008edc <_strtod_l+0xb6c>
 8008e32:	a339      	add	r3, pc, #228	; (adr r3, 8008f18 <_strtod_l+0xba8>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f7f7 fe58 	bl	8000aec <__aeabi_dcmplt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f47f ace5 	bne.w	800880c <_strtod_l+0x49c>
 8008e42:	a337      	add	r3, pc, #220	; (adr r3, 8008f20 <_strtod_l+0xbb0>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d095      	beq.n	8008d80 <_strtod_l+0xa10>
 8008e54:	e4da      	b.n	800880c <_strtod_l+0x49c>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	b333      	cbz	r3, 8008ea8 <_strtod_l+0xb38>
 8008e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e60:	d822      	bhi.n	8008ea8 <_strtod_l+0xb38>
 8008e62:	a331      	add	r3, pc, #196	; (adr r3, 8008f28 <_strtod_l+0xbb8>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	4630      	mov	r0, r6
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f7f7 fe48 	bl	8000b00 <__aeabi_dcmple>
 8008e70:	b1a0      	cbz	r0, 8008e9c <_strtod_l+0xb2c>
 8008e72:	4639      	mov	r1, r7
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7f7 fe9f 	bl	8000bb8 <__aeabi_d2uiz>
 8008e7a:	2801      	cmp	r0, #1
 8008e7c:	bf38      	it	cc
 8008e7e:	2001      	movcc	r0, #1
 8008e80:	f7f7 fb48 	bl	8000514 <__aeabi_ui2d>
 8008e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	bb23      	cbnz	r3, 8008ed6 <_strtod_l+0xb66>
 8008e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e90:	9010      	str	r0, [sp, #64]	; 0x40
 8008e92:	9311      	str	r3, [sp, #68]	; 0x44
 8008e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ea0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008eac:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb0:	eef0 0a68 	vmov.f32	s1, s17
 8008eb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008eb8:	f003 f846 	bl	800bf48 <__ulp>
 8008ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ec0:	ec53 2b10 	vmov	r2, r3, d0
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	ec53 2b18 	vmov	r2, r3, d8
 8008ecc:	f7f7 f9e6 	bl	800029c <__adddf3>
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	e78d      	b.n	8008df2 <_strtod_l+0xa82>
 8008ed6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008eda:	e7db      	b.n	8008e94 <_strtod_l+0xb24>
 8008edc:	a314      	add	r3, pc, #80	; (adr r3, 8008f30 <_strtod_l+0xbc0>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 fe03 	bl	8000aec <__aeabi_dcmplt>
 8008ee6:	e7b3      	b.n	8008e50 <_strtod_l+0xae0>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	930a      	str	r3, [sp, #40]	; 0x28
 8008eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	f7ff ba7c 	b.w	80083ee <_strtod_l+0x7e>
 8008ef6:	2a65      	cmp	r2, #101	; 0x65
 8008ef8:	f43f ab75 	beq.w	80085e6 <_strtod_l+0x276>
 8008efc:	2a45      	cmp	r2, #69	; 0x45
 8008efe:	f43f ab72 	beq.w	80085e6 <_strtod_l+0x276>
 8008f02:	2301      	movs	r3, #1
 8008f04:	f7ff bbaa 	b.w	800865c <_strtod_l+0x2ec>
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	bff00000 	.word	0xbff00000
 8008f10:	00000000 	.word	0x00000000
 8008f14:	3ff00000 	.word	0x3ff00000
 8008f18:	94a03595 	.word	0x94a03595
 8008f1c:	3fdfffff 	.word	0x3fdfffff
 8008f20:	35afe535 	.word	0x35afe535
 8008f24:	3fe00000 	.word	0x3fe00000
 8008f28:	ffc00000 	.word	0xffc00000
 8008f2c:	41dfffff 	.word	0x41dfffff
 8008f30:	94a03595 	.word	0x94a03595
 8008f34:	3fcfffff 	.word	0x3fcfffff
 8008f38:	3ff00000 	.word	0x3ff00000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	7fe00000 	.word	0x7fe00000
 8008f48:	7c9fffff 	.word	0x7c9fffff
 8008f4c:	7fefffff 	.word	0x7fefffff

08008f50 <_strtod_r>:
 8008f50:	4b01      	ldr	r3, [pc, #4]	; (8008f58 <_strtod_r+0x8>)
 8008f52:	f7ff ba0d 	b.w	8008370 <_strtod_l>
 8008f56:	bf00      	nop
 8008f58:	20000028 	.word	0x20000028

08008f5c <strtof>:
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009024 <strtof+0xc8>
 8008f64:	4b2a      	ldr	r3, [pc, #168]	; (8009010 <strtof+0xb4>)
 8008f66:	460a      	mov	r2, r1
 8008f68:	ed2d 8b02 	vpush	{d8}
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	f8d8 0000 	ldr.w	r0, [r8]
 8008f72:	f7ff f9fd 	bl	8008370 <_strtod_l>
 8008f76:	ec55 4b10 	vmov	r4, r5, d0
 8008f7a:	ee10 2a10 	vmov	r2, s0
 8008f7e:	ee10 0a10 	vmov	r0, s0
 8008f82:	462b      	mov	r3, r5
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 fdd9 	bl	8000b3c <__aeabi_dcmpun>
 8008f8a:	b190      	cbz	r0, 8008fb2 <strtof+0x56>
 8008f8c:	2d00      	cmp	r5, #0
 8008f8e:	4821      	ldr	r0, [pc, #132]	; (8009014 <strtof+0xb8>)
 8008f90:	da09      	bge.n	8008fa6 <strtof+0x4a>
 8008f92:	f001 fa19 	bl	800a3c8 <nanf>
 8008f96:	eeb1 8a40 	vneg.f32	s16, s0
 8008f9a:	eeb0 0a48 	vmov.f32	s0, s16
 8008f9e:	ecbd 8b02 	vpop	{d8}
 8008fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa6:	ecbd 8b02 	vpop	{d8}
 8008faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fae:	f001 ba0b 	b.w	800a3c8 <nanf>
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	f7f7 fe1f 	bl	8000bf8 <__aeabi_d2f>
 8008fba:	ee08 0a10 	vmov	s16, r0
 8008fbe:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009018 <strtof+0xbc>
 8008fc2:	eeb0 7ac8 	vabs.f32	s14, s16
 8008fc6:	eeb4 7a67 	vcmp.f32	s14, s15
 8008fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fce:	dd11      	ble.n	8008ff4 <strtof+0x98>
 8008fd0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <strtof+0xc0>)
 8008fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 fdad 	bl	8000b3c <__aeabi_dcmpun>
 8008fe2:	b980      	cbnz	r0, 8009006 <strtof+0xaa>
 8008fe4:	4b0d      	ldr	r3, [pc, #52]	; (800901c <strtof+0xc0>)
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	4620      	mov	r0, r4
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fd87 	bl	8000b00 <__aeabi_dcmple>
 8008ff2:	b940      	cbnz	r0, 8009006 <strtof+0xaa>
 8008ff4:	ee18 3a10 	vmov	r3, s16
 8008ff8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008ffc:	d1cd      	bne.n	8008f9a <strtof+0x3e>
 8008ffe:	4b08      	ldr	r3, [pc, #32]	; (8009020 <strtof+0xc4>)
 8009000:	402b      	ands	r3, r5
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c9      	beq.n	8008f9a <strtof+0x3e>
 8009006:	f8d8 3000 	ldr.w	r3, [r8]
 800900a:	2222      	movs	r2, #34	; 0x22
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e7c4      	b.n	8008f9a <strtof+0x3e>
 8009010:	20000028 	.word	0x20000028
 8009014:	0800ef05 	.word	0x0800ef05
 8009018:	7f7fffff 	.word	0x7f7fffff
 800901c:	7fefffff 	.word	0x7fefffff
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	200001e0 	.word	0x200001e0

08009028 <__cvt>:
 8009028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	ec55 4b10 	vmov	r4, r5, d0
 8009030:	2d00      	cmp	r5, #0
 8009032:	460e      	mov	r6, r1
 8009034:	4619      	mov	r1, r3
 8009036:	462b      	mov	r3, r5
 8009038:	bfbb      	ittet	lt
 800903a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800903e:	461d      	movlt	r5, r3
 8009040:	2300      	movge	r3, #0
 8009042:	232d      	movlt	r3, #45	; 0x2d
 8009044:	700b      	strb	r3, [r1, #0]
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800904c:	4691      	mov	r9, r2
 800904e:	f023 0820 	bic.w	r8, r3, #32
 8009052:	bfbc      	itt	lt
 8009054:	4622      	movlt	r2, r4
 8009056:	4614      	movlt	r4, r2
 8009058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905c:	d005      	beq.n	800906a <__cvt+0x42>
 800905e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009062:	d100      	bne.n	8009066 <__cvt+0x3e>
 8009064:	3601      	adds	r6, #1
 8009066:	2102      	movs	r1, #2
 8009068:	e000      	b.n	800906c <__cvt+0x44>
 800906a:	2103      	movs	r1, #3
 800906c:	ab03      	add	r3, sp, #12
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	ab02      	add	r3, sp, #8
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	ec45 4b10 	vmov	d0, r4, r5
 8009078:	4653      	mov	r3, sl
 800907a:	4632      	mov	r2, r6
 800907c:	f001 fa50 	bl	800a520 <_dtoa_r>
 8009080:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009084:	4607      	mov	r7, r0
 8009086:	d102      	bne.n	800908e <__cvt+0x66>
 8009088:	f019 0f01 	tst.w	r9, #1
 800908c:	d022      	beq.n	80090d4 <__cvt+0xac>
 800908e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009092:	eb07 0906 	add.w	r9, r7, r6
 8009096:	d110      	bne.n	80090ba <__cvt+0x92>
 8009098:	783b      	ldrb	r3, [r7, #0]
 800909a:	2b30      	cmp	r3, #48	; 0x30
 800909c:	d10a      	bne.n	80090b4 <__cvt+0x8c>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 80090aa:	b918      	cbnz	r0, 80090b4 <__cvt+0x8c>
 80090ac:	f1c6 0601 	rsb	r6, r6, #1
 80090b0:	f8ca 6000 	str.w	r6, [sl]
 80090b4:	f8da 3000 	ldr.w	r3, [sl]
 80090b8:	4499      	add	r9, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	2300      	movs	r3, #0
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 80090c6:	b108      	cbz	r0, 80090cc <__cvt+0xa4>
 80090c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090cc:	2230      	movs	r2, #48	; 0x30
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	454b      	cmp	r3, r9
 80090d2:	d307      	bcc.n	80090e4 <__cvt+0xbc>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	1bdb      	subs	r3, r3, r7
 80090da:	4638      	mov	r0, r7
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	b004      	add	sp, #16
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	1c59      	adds	r1, r3, #1
 80090e6:	9103      	str	r1, [sp, #12]
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e7f0      	b.n	80090ce <__cvt+0xa6>

080090ec <__exponent>:
 80090ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ee:	4603      	mov	r3, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	bfb8      	it	lt
 80090f4:	4249      	neglt	r1, r1
 80090f6:	f803 2b02 	strb.w	r2, [r3], #2
 80090fa:	bfb4      	ite	lt
 80090fc:	222d      	movlt	r2, #45	; 0x2d
 80090fe:	222b      	movge	r2, #43	; 0x2b
 8009100:	2909      	cmp	r1, #9
 8009102:	7042      	strb	r2, [r0, #1]
 8009104:	dd2a      	ble.n	800915c <__exponent+0x70>
 8009106:	f10d 0207 	add.w	r2, sp, #7
 800910a:	4617      	mov	r7, r2
 800910c:	260a      	movs	r6, #10
 800910e:	4694      	mov	ip, r2
 8009110:	fb91 f5f6 	sdiv	r5, r1, r6
 8009114:	fb06 1415 	mls	r4, r6, r5, r1
 8009118:	3430      	adds	r4, #48	; 0x30
 800911a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800911e:	460c      	mov	r4, r1
 8009120:	2c63      	cmp	r4, #99	; 0x63
 8009122:	f102 32ff 	add.w	r2, r2, #4294967295
 8009126:	4629      	mov	r1, r5
 8009128:	dcf1      	bgt.n	800910e <__exponent+0x22>
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	f1ac 0402 	sub.w	r4, ip, #2
 8009130:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009134:	1c41      	adds	r1, r0, #1
 8009136:	4622      	mov	r2, r4
 8009138:	42ba      	cmp	r2, r7
 800913a:	d30a      	bcc.n	8009152 <__exponent+0x66>
 800913c:	f10d 0209 	add.w	r2, sp, #9
 8009140:	eba2 020c 	sub.w	r2, r2, ip
 8009144:	42bc      	cmp	r4, r7
 8009146:	bf88      	it	hi
 8009148:	2200      	movhi	r2, #0
 800914a:	4413      	add	r3, r2
 800914c:	1a18      	subs	r0, r3, r0
 800914e:	b003      	add	sp, #12
 8009150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009152:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009156:	f801 5f01 	strb.w	r5, [r1, #1]!
 800915a:	e7ed      	b.n	8009138 <__exponent+0x4c>
 800915c:	2330      	movs	r3, #48	; 0x30
 800915e:	3130      	adds	r1, #48	; 0x30
 8009160:	7083      	strb	r3, [r0, #2]
 8009162:	70c1      	strb	r1, [r0, #3]
 8009164:	1d03      	adds	r3, r0, #4
 8009166:	e7f1      	b.n	800914c <__exponent+0x60>

08009168 <_printf_float>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ed2d 8b02 	vpush	{d8}
 8009170:	b08d      	sub	sp, #52	; 0x34
 8009172:	460c      	mov	r4, r1
 8009174:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009178:	4616      	mov	r6, r2
 800917a:	461f      	mov	r7, r3
 800917c:	4605      	mov	r5, r0
 800917e:	f001 f885 	bl	800a28c <_localeconv_r>
 8009182:	f8d0 a000 	ldr.w	sl, [r0]
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f87a 	bl	8000280 <strlen>
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	; 0x28
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f8d8 3000 	ldr.w	r3, [r8]
 8009198:	f894 b018 	ldrb.w	fp, [r4, #24]
 800919c:	3307      	adds	r3, #7
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	f8c8 2000 	str.w	r2, [r8]
 80091aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80091b8:	ee08 0a10 	vmov	s16, r0
 80091bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80091c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c4:	4b9e      	ldr	r3, [pc, #632]	; (8009440 <_printf_float+0x2d8>)
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ca:	f7f7 fcb7 	bl	8000b3c <__aeabi_dcmpun>
 80091ce:	bb88      	cbnz	r0, 8009234 <_printf_float+0xcc>
 80091d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d4:	4b9a      	ldr	r3, [pc, #616]	; (8009440 <_printf_float+0x2d8>)
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	f7f7 fc91 	bl	8000b00 <__aeabi_dcmple>
 80091de:	bb48      	cbnz	r0, 8009234 <_printf_float+0xcc>
 80091e0:	2200      	movs	r2, #0
 80091e2:	2300      	movs	r3, #0
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7f7 fc80 	bl	8000aec <__aeabi_dcmplt>
 80091ec:	b110      	cbz	r0, 80091f4 <_printf_float+0x8c>
 80091ee:	232d      	movs	r3, #45	; 0x2d
 80091f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f4:	4a93      	ldr	r2, [pc, #588]	; (8009444 <_printf_float+0x2dc>)
 80091f6:	4b94      	ldr	r3, [pc, #592]	; (8009448 <_printf_float+0x2e0>)
 80091f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091fc:	bf94      	ite	ls
 80091fe:	4690      	movls	r8, r2
 8009200:	4698      	movhi	r8, r3
 8009202:	2303      	movs	r3, #3
 8009204:	6123      	str	r3, [r4, #16]
 8009206:	9b05      	ldr	r3, [sp, #20]
 8009208:	f023 0304 	bic.w	r3, r3, #4
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	f04f 0900 	mov.w	r9, #0
 8009212:	9700      	str	r7, [sp, #0]
 8009214:	4633      	mov	r3, r6
 8009216:	aa0b      	add	r2, sp, #44	; 0x2c
 8009218:	4621      	mov	r1, r4
 800921a:	4628      	mov	r0, r5
 800921c:	f000 f9da 	bl	80095d4 <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	f040 8090 	bne.w	8009346 <_printf_float+0x1de>
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	b00d      	add	sp, #52	; 0x34
 800922c:	ecbd 8b02 	vpop	{d8}
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	4640      	mov	r0, r8
 800923a:	4649      	mov	r1, r9
 800923c:	f7f7 fc7e 	bl	8000b3c <__aeabi_dcmpun>
 8009240:	b140      	cbz	r0, 8009254 <_printf_float+0xec>
 8009242:	464b      	mov	r3, r9
 8009244:	2b00      	cmp	r3, #0
 8009246:	bfbc      	itt	lt
 8009248:	232d      	movlt	r3, #45	; 0x2d
 800924a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800924e:	4a7f      	ldr	r2, [pc, #508]	; (800944c <_printf_float+0x2e4>)
 8009250:	4b7f      	ldr	r3, [pc, #508]	; (8009450 <_printf_float+0x2e8>)
 8009252:	e7d1      	b.n	80091f8 <_printf_float+0x90>
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800925a:	9206      	str	r2, [sp, #24]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	d13f      	bne.n	80092e0 <_printf_float+0x178>
 8009260:	2306      	movs	r3, #6
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	9b05      	ldr	r3, [sp, #20]
 8009266:	6861      	ldr	r1, [r4, #4]
 8009268:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800926c:	2300      	movs	r3, #0
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	ab0a      	add	r3, sp, #40	; 0x28
 8009272:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009276:	ab09      	add	r3, sp, #36	; 0x24
 8009278:	ec49 8b10 	vmov	d0, r8, r9
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff fecf 	bl	8009028 <__cvt>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800928e:	2b47      	cmp	r3, #71	; 0x47
 8009290:	4680      	mov	r8, r0
 8009292:	d108      	bne.n	80092a6 <_printf_float+0x13e>
 8009294:	1cc8      	adds	r0, r1, #3
 8009296:	db02      	blt.n	800929e <_printf_float+0x136>
 8009298:	6863      	ldr	r3, [r4, #4]
 800929a:	4299      	cmp	r1, r3
 800929c:	dd41      	ble.n	8009322 <_printf_float+0x1ba>
 800929e:	f1ab 0302 	sub.w	r3, fp, #2
 80092a2:	fa5f fb83 	uxtb.w	fp, r3
 80092a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092aa:	d820      	bhi.n	80092ee <_printf_float+0x186>
 80092ac:	3901      	subs	r1, #1
 80092ae:	465a      	mov	r2, fp
 80092b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092b4:	9109      	str	r1, [sp, #36]	; 0x24
 80092b6:	f7ff ff19 	bl	80090ec <__exponent>
 80092ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092bc:	1813      	adds	r3, r2, r0
 80092be:	2a01      	cmp	r2, #1
 80092c0:	4681      	mov	r9, r0
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	dc02      	bgt.n	80092cc <_printf_float+0x164>
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	07d2      	lsls	r2, r2, #31
 80092ca:	d501      	bpl.n	80092d0 <_printf_float+0x168>
 80092cc:	3301      	adds	r3, #1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d09c      	beq.n	8009212 <_printf_float+0xaa>
 80092d8:	232d      	movs	r3, #45	; 0x2d
 80092da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092de:	e798      	b.n	8009212 <_printf_float+0xaa>
 80092e0:	9a06      	ldr	r2, [sp, #24]
 80092e2:	2a47      	cmp	r2, #71	; 0x47
 80092e4:	d1be      	bne.n	8009264 <_printf_float+0xfc>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1bc      	bne.n	8009264 <_printf_float+0xfc>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e7b9      	b.n	8009262 <_printf_float+0xfa>
 80092ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092f2:	d118      	bne.n	8009326 <_printf_float+0x1be>
 80092f4:	2900      	cmp	r1, #0
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	dd0b      	ble.n	8009312 <_printf_float+0x1aa>
 80092fa:	6121      	str	r1, [r4, #16]
 80092fc:	b913      	cbnz	r3, 8009304 <_printf_float+0x19c>
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	07d0      	lsls	r0, r2, #31
 8009302:	d502      	bpl.n	800930a <_printf_float+0x1a2>
 8009304:	3301      	adds	r3, #1
 8009306:	440b      	add	r3, r1
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	65a1      	str	r1, [r4, #88]	; 0x58
 800930c:	f04f 0900 	mov.w	r9, #0
 8009310:	e7de      	b.n	80092d0 <_printf_float+0x168>
 8009312:	b913      	cbnz	r3, 800931a <_printf_float+0x1b2>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	07d2      	lsls	r2, r2, #31
 8009318:	d501      	bpl.n	800931e <_printf_float+0x1b6>
 800931a:	3302      	adds	r3, #2
 800931c:	e7f4      	b.n	8009308 <_printf_float+0x1a0>
 800931e:	2301      	movs	r3, #1
 8009320:	e7f2      	b.n	8009308 <_printf_float+0x1a0>
 8009322:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009328:	4299      	cmp	r1, r3
 800932a:	db05      	blt.n	8009338 <_printf_float+0x1d0>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	6121      	str	r1, [r4, #16]
 8009330:	07d8      	lsls	r0, r3, #31
 8009332:	d5ea      	bpl.n	800930a <_printf_float+0x1a2>
 8009334:	1c4b      	adds	r3, r1, #1
 8009336:	e7e7      	b.n	8009308 <_printf_float+0x1a0>
 8009338:	2900      	cmp	r1, #0
 800933a:	bfd4      	ite	le
 800933c:	f1c1 0202 	rsble	r2, r1, #2
 8009340:	2201      	movgt	r2, #1
 8009342:	4413      	add	r3, r2
 8009344:	e7e0      	b.n	8009308 <_printf_float+0x1a0>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	055a      	lsls	r2, r3, #21
 800934a:	d407      	bmi.n	800935c <_printf_float+0x1f4>
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	4642      	mov	r2, r8
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	d12c      	bne.n	80093b4 <_printf_float+0x24c>
 800935a:	e764      	b.n	8009226 <_printf_float+0xbe>
 800935c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009360:	f240 80e0 	bls.w	8009524 <_printf_float+0x3bc>
 8009364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	f7f7 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009370:	2800      	cmp	r0, #0
 8009372:	d034      	beq.n	80093de <_printf_float+0x276>
 8009374:	4a37      	ldr	r2, [pc, #220]	; (8009454 <_printf_float+0x2ec>)
 8009376:	2301      	movs	r3, #1
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af51 	beq.w	8009226 <_printf_float+0xbe>
 8009384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009388:	429a      	cmp	r2, r3
 800938a:	db02      	blt.n	8009392 <_printf_float+0x22a>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07d8      	lsls	r0, r3, #31
 8009390:	d510      	bpl.n	80093b4 <_printf_float+0x24c>
 8009392:	ee18 3a10 	vmov	r3, s16
 8009396:	4652      	mov	r2, sl
 8009398:	4631      	mov	r1, r6
 800939a:	4628      	mov	r0, r5
 800939c:	47b8      	blx	r7
 800939e:	3001      	adds	r0, #1
 80093a0:	f43f af41 	beq.w	8009226 <_printf_float+0xbe>
 80093a4:	f04f 0800 	mov.w	r8, #0
 80093a8:	f104 091a 	add.w	r9, r4, #26
 80093ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4543      	cmp	r3, r8
 80093b2:	dc09      	bgt.n	80093c8 <_printf_float+0x260>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	079b      	lsls	r3, r3, #30
 80093b8:	f100 8107 	bmi.w	80095ca <_printf_float+0x462>
 80093bc:	68e0      	ldr	r0, [r4, #12]
 80093be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c0:	4298      	cmp	r0, r3
 80093c2:	bfb8      	it	lt
 80093c4:	4618      	movlt	r0, r3
 80093c6:	e730      	b.n	800922a <_printf_float+0xc2>
 80093c8:	2301      	movs	r3, #1
 80093ca:	464a      	mov	r2, r9
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f af27 	beq.w	8009226 <_printf_float+0xbe>
 80093d8:	f108 0801 	add.w	r8, r8, #1
 80093dc:	e7e6      	b.n	80093ac <_printf_float+0x244>
 80093de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dc39      	bgt.n	8009458 <_printf_float+0x2f0>
 80093e4:	4a1b      	ldr	r2, [pc, #108]	; (8009454 <_printf_float+0x2ec>)
 80093e6:	2301      	movs	r3, #1
 80093e8:	4631      	mov	r1, r6
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	f43f af19 	beq.w	8009226 <_printf_float+0xbe>
 80093f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093f8:	4313      	orrs	r3, r2
 80093fa:	d102      	bne.n	8009402 <_printf_float+0x29a>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d5d8      	bpl.n	80093b4 <_printf_float+0x24c>
 8009402:	ee18 3a10 	vmov	r3, s16
 8009406:	4652      	mov	r2, sl
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	f43f af09 	beq.w	8009226 <_printf_float+0xbe>
 8009414:	f04f 0900 	mov.w	r9, #0
 8009418:	f104 0a1a 	add.w	sl, r4, #26
 800941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941e:	425b      	negs	r3, r3
 8009420:	454b      	cmp	r3, r9
 8009422:	dc01      	bgt.n	8009428 <_printf_float+0x2c0>
 8009424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009426:	e792      	b.n	800934e <_printf_float+0x1e6>
 8009428:	2301      	movs	r3, #1
 800942a:	4652      	mov	r2, sl
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	47b8      	blx	r7
 8009432:	3001      	adds	r0, #1
 8009434:	f43f aef7 	beq.w	8009226 <_printf_float+0xbe>
 8009438:	f109 0901 	add.w	r9, r9, #1
 800943c:	e7ee      	b.n	800941c <_printf_float+0x2b4>
 800943e:	bf00      	nop
 8009440:	7fefffff 	.word	0x7fefffff
 8009444:	0800ee18 	.word	0x0800ee18
 8009448:	0800ee1c 	.word	0x0800ee1c
 800944c:	0800ee20 	.word	0x0800ee20
 8009450:	0800ee24 	.word	0x0800ee24
 8009454:	0800ee28 	.word	0x0800ee28
 8009458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800945c:	429a      	cmp	r2, r3
 800945e:	bfa8      	it	ge
 8009460:	461a      	movge	r2, r3
 8009462:	2a00      	cmp	r2, #0
 8009464:	4691      	mov	r9, r2
 8009466:	dc37      	bgt.n	80094d8 <_printf_float+0x370>
 8009468:	f04f 0b00 	mov.w	fp, #0
 800946c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009470:	f104 021a 	add.w	r2, r4, #26
 8009474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009476:	9305      	str	r3, [sp, #20]
 8009478:	eba3 0309 	sub.w	r3, r3, r9
 800947c:	455b      	cmp	r3, fp
 800947e:	dc33      	bgt.n	80094e8 <_printf_float+0x380>
 8009480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009484:	429a      	cmp	r2, r3
 8009486:	db3b      	blt.n	8009500 <_printf_float+0x398>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	07da      	lsls	r2, r3, #31
 800948c:	d438      	bmi.n	8009500 <_printf_float+0x398>
 800948e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009492:	eba2 0903 	sub.w	r9, r2, r3
 8009496:	9b05      	ldr	r3, [sp, #20]
 8009498:	1ad2      	subs	r2, r2, r3
 800949a:	4591      	cmp	r9, r2
 800949c:	bfa8      	it	ge
 800949e:	4691      	movge	r9, r2
 80094a0:	f1b9 0f00 	cmp.w	r9, #0
 80094a4:	dc35      	bgt.n	8009512 <_printf_float+0x3aa>
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094ae:	f104 0a1a 	add.w	sl, r4, #26
 80094b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	eba3 0309 	sub.w	r3, r3, r9
 80094bc:	4543      	cmp	r3, r8
 80094be:	f77f af79 	ble.w	80093b4 <_printf_float+0x24c>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4652      	mov	r2, sl
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f aeaa 	beq.w	8009226 <_printf_float+0xbe>
 80094d2:	f108 0801 	add.w	r8, r8, #1
 80094d6:	e7ec      	b.n	80094b2 <_printf_float+0x34a>
 80094d8:	4613      	mov	r3, r2
 80094da:	4631      	mov	r1, r6
 80094dc:	4642      	mov	r2, r8
 80094de:	4628      	mov	r0, r5
 80094e0:	47b8      	blx	r7
 80094e2:	3001      	adds	r0, #1
 80094e4:	d1c0      	bne.n	8009468 <_printf_float+0x300>
 80094e6:	e69e      	b.n	8009226 <_printf_float+0xbe>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	9205      	str	r2, [sp, #20]
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f ae97 	beq.w	8009226 <_printf_float+0xbe>
 80094f8:	9a05      	ldr	r2, [sp, #20]
 80094fa:	f10b 0b01 	add.w	fp, fp, #1
 80094fe:	e7b9      	b.n	8009474 <_printf_float+0x30c>
 8009500:	ee18 3a10 	vmov	r3, s16
 8009504:	4652      	mov	r2, sl
 8009506:	4631      	mov	r1, r6
 8009508:	4628      	mov	r0, r5
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	d1be      	bne.n	800948e <_printf_float+0x326>
 8009510:	e689      	b.n	8009226 <_printf_float+0xbe>
 8009512:	9a05      	ldr	r2, [sp, #20]
 8009514:	464b      	mov	r3, r9
 8009516:	4442      	add	r2, r8
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	d1c1      	bne.n	80094a6 <_printf_float+0x33e>
 8009522:	e680      	b.n	8009226 <_printf_float+0xbe>
 8009524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009526:	2a01      	cmp	r2, #1
 8009528:	dc01      	bgt.n	800952e <_printf_float+0x3c6>
 800952a:	07db      	lsls	r3, r3, #31
 800952c:	d53a      	bpl.n	80095a4 <_printf_float+0x43c>
 800952e:	2301      	movs	r3, #1
 8009530:	4642      	mov	r2, r8
 8009532:	4631      	mov	r1, r6
 8009534:	4628      	mov	r0, r5
 8009536:	47b8      	blx	r7
 8009538:	3001      	adds	r0, #1
 800953a:	f43f ae74 	beq.w	8009226 <_printf_float+0xbe>
 800953e:	ee18 3a10 	vmov	r3, s16
 8009542:	4652      	mov	r2, sl
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f ae6b 	beq.w	8009226 <_printf_float+0xbe>
 8009550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800955c:	f7f7 fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009560:	b9d8      	cbnz	r0, 800959a <_printf_float+0x432>
 8009562:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009566:	f108 0201 	add.w	r2, r8, #1
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d10e      	bne.n	8009592 <_printf_float+0x42a>
 8009574:	e657      	b.n	8009226 <_printf_float+0xbe>
 8009576:	2301      	movs	r3, #1
 8009578:	4652      	mov	r2, sl
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae50 	beq.w	8009226 <_printf_float+0xbe>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	3b01      	subs	r3, #1
 800958e:	4543      	cmp	r3, r8
 8009590:	dcf1      	bgt.n	8009576 <_printf_float+0x40e>
 8009592:	464b      	mov	r3, r9
 8009594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009598:	e6da      	b.n	8009350 <_printf_float+0x1e8>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0a1a 	add.w	sl, r4, #26
 80095a2:	e7f2      	b.n	800958a <_printf_float+0x422>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4642      	mov	r2, r8
 80095a8:	e7df      	b.n	800956a <_printf_float+0x402>
 80095aa:	2301      	movs	r3, #1
 80095ac:	464a      	mov	r2, r9
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f ae36 	beq.w	8009226 <_printf_float+0xbe>
 80095ba:	f108 0801 	add.w	r8, r8, #1
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095c2:	1a5b      	subs	r3, r3, r1
 80095c4:	4543      	cmp	r3, r8
 80095c6:	dcf0      	bgt.n	80095aa <_printf_float+0x442>
 80095c8:	e6f8      	b.n	80093bc <_printf_float+0x254>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	f104 0919 	add.w	r9, r4, #25
 80095d2:	e7f4      	b.n	80095be <_printf_float+0x456>

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f0:	4607      	mov	r7, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc26      	bgt.n	800966a <_printf_common+0x96>
 800961c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009620:	1e13      	subs	r3, r2, #0
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42b      	bmi.n	8009684 <_printf_common+0xb0>
 800962c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d01e      	beq.n	8009678 <_printf_common+0xa4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	6922      	ldr	r2, [r4, #16]
 800963e:	f003 0306 	and.w	r3, r3, #6
 8009642:	2b04      	cmp	r3, #4
 8009644:	bf02      	ittt	eq
 8009646:	68e5      	ldreq	r5, [r4, #12]
 8009648:	6833      	ldreq	r3, [r6, #0]
 800964a:	1aed      	subeq	r5, r5, r3
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	bf0c      	ite	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	2500      	movne	r5, #0
 8009656:	4293      	cmp	r3, r2
 8009658:	bfc4      	itt	gt
 800965a:	1a9b      	subgt	r3, r3, r2
 800965c:	18ed      	addgt	r5, r5, r3
 800965e:	2600      	movs	r6, #0
 8009660:	341a      	adds	r4, #26
 8009662:	42b5      	cmp	r5, r6
 8009664:	d11a      	bne.n	800969c <_printf_common+0xc8>
 8009666:	2000      	movs	r0, #0
 8009668:	e008      	b.n	800967c <_printf_common+0xa8>
 800966a:	2301      	movs	r3, #1
 800966c:	4652      	mov	r2, sl
 800966e:	4649      	mov	r1, r9
 8009670:	4638      	mov	r0, r7
 8009672:	47c0      	blx	r8
 8009674:	3001      	adds	r0, #1
 8009676:	d103      	bne.n	8009680 <_printf_common+0xac>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	3501      	adds	r5, #1
 8009682:	e7c6      	b.n	8009612 <_printf_common+0x3e>
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	2030      	movs	r0, #48	; 0x30
 800968a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968e:	4422      	add	r2, r4
 8009690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009698:	3302      	adds	r3, #2
 800969a:	e7c7      	b.n	800962c <_printf_common+0x58>
 800969c:	2301      	movs	r3, #1
 800969e:	4622      	mov	r2, r4
 80096a0:	4649      	mov	r1, r9
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c0      	blx	r8
 80096a6:	3001      	adds	r0, #1
 80096a8:	d0e6      	beq.n	8009678 <_printf_common+0xa4>
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7d9      	b.n	8009662 <_printf_common+0x8e>
	...

080096b0 <_printf_i>:
 80096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	7e0f      	ldrb	r7, [r1, #24]
 80096b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096b8:	2f78      	cmp	r7, #120	; 0x78
 80096ba:	4691      	mov	r9, r2
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	469a      	mov	sl, r3
 80096c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096c6:	d807      	bhi.n	80096d8 <_printf_i+0x28>
 80096c8:	2f62      	cmp	r7, #98	; 0x62
 80096ca:	d80a      	bhi.n	80096e2 <_printf_i+0x32>
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	f000 80d4 	beq.w	800987a <_printf_i+0x1ca>
 80096d2:	2f58      	cmp	r7, #88	; 0x58
 80096d4:	f000 80c0 	beq.w	8009858 <_printf_i+0x1a8>
 80096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e0:	e03a      	b.n	8009758 <_printf_i+0xa8>
 80096e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096e6:	2b15      	cmp	r3, #21
 80096e8:	d8f6      	bhi.n	80096d8 <_printf_i+0x28>
 80096ea:	a101      	add	r1, pc, #4	; (adr r1, 80096f0 <_printf_i+0x40>)
 80096ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f0:	08009749 	.word	0x08009749
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	080096d9 	.word	0x080096d9
 80096fc:	080096d9 	.word	0x080096d9
 8009700:	080096d9 	.word	0x080096d9
 8009704:	080096d9 	.word	0x080096d9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096d9 	.word	0x080096d9
 8009710:	080096d9 	.word	0x080096d9
 8009714:	080096d9 	.word	0x080096d9
 8009718:	080096d9 	.word	0x080096d9
 800971c:	08009861 	.word	0x08009861
 8009720:	08009789 	.word	0x08009789
 8009724:	0800981b 	.word	0x0800981b
 8009728:	080096d9 	.word	0x080096d9
 800972c:	080096d9 	.word	0x080096d9
 8009730:	08009883 	.word	0x08009883
 8009734:	080096d9 	.word	0x080096d9
 8009738:	08009789 	.word	0x08009789
 800973c:	080096d9 	.word	0x080096d9
 8009740:	080096d9 	.word	0x080096d9
 8009744:	08009823 	.word	0x08009823
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	602a      	str	r2, [r5, #0]
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e09f      	b.n	800989c <_printf_i+0x1ec>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	0607      	lsls	r7, r0, #24
 8009762:	f103 0104 	add.w	r1, r3, #4
 8009766:	6029      	str	r1, [r5, #0]
 8009768:	d501      	bpl.n	800976e <_printf_i+0xbe>
 800976a:	681e      	ldr	r6, [r3, #0]
 800976c:	e003      	b.n	8009776 <_printf_i+0xc6>
 800976e:	0646      	lsls	r6, r0, #25
 8009770:	d5fb      	bpl.n	800976a <_printf_i+0xba>
 8009772:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009776:	2e00      	cmp	r6, #0
 8009778:	da03      	bge.n	8009782 <_printf_i+0xd2>
 800977a:	232d      	movs	r3, #45	; 0x2d
 800977c:	4276      	negs	r6, r6
 800977e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009782:	485a      	ldr	r0, [pc, #360]	; (80098ec <_printf_i+0x23c>)
 8009784:	230a      	movs	r3, #10
 8009786:	e012      	b.n	80097ae <_printf_i+0xfe>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	6820      	ldr	r0, [r4, #0]
 800978c:	1d19      	adds	r1, r3, #4
 800978e:	6029      	str	r1, [r5, #0]
 8009790:	0605      	lsls	r5, r0, #24
 8009792:	d501      	bpl.n	8009798 <_printf_i+0xe8>
 8009794:	681e      	ldr	r6, [r3, #0]
 8009796:	e002      	b.n	800979e <_printf_i+0xee>
 8009798:	0641      	lsls	r1, r0, #25
 800979a:	d5fb      	bpl.n	8009794 <_printf_i+0xe4>
 800979c:	881e      	ldrh	r6, [r3, #0]
 800979e:	4853      	ldr	r0, [pc, #332]	; (80098ec <_printf_i+0x23c>)
 80097a0:	2f6f      	cmp	r7, #111	; 0x6f
 80097a2:	bf0c      	ite	eq
 80097a4:	2308      	moveq	r3, #8
 80097a6:	230a      	movne	r3, #10
 80097a8:	2100      	movs	r1, #0
 80097aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097ae:	6865      	ldr	r5, [r4, #4]
 80097b0:	60a5      	str	r5, [r4, #8]
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	bfa2      	ittt	ge
 80097b6:	6821      	ldrge	r1, [r4, #0]
 80097b8:	f021 0104 	bicge.w	r1, r1, #4
 80097bc:	6021      	strge	r1, [r4, #0]
 80097be:	b90e      	cbnz	r6, 80097c4 <_printf_i+0x114>
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	d04b      	beq.n	800985c <_printf_i+0x1ac>
 80097c4:	4615      	mov	r5, r2
 80097c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80097ca:	fb03 6711 	mls	r7, r3, r1, r6
 80097ce:	5dc7      	ldrb	r7, [r0, r7]
 80097d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d4:	4637      	mov	r7, r6
 80097d6:	42bb      	cmp	r3, r7
 80097d8:	460e      	mov	r6, r1
 80097da:	d9f4      	bls.n	80097c6 <_printf_i+0x116>
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d10b      	bne.n	80097f8 <_printf_i+0x148>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	07de      	lsls	r6, r3, #31
 80097e4:	d508      	bpl.n	80097f8 <_printf_i+0x148>
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	6861      	ldr	r1, [r4, #4]
 80097ea:	4299      	cmp	r1, r3
 80097ec:	bfde      	ittt	le
 80097ee:	2330      	movle	r3, #48	; 0x30
 80097f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097f8:	1b52      	subs	r2, r2, r5
 80097fa:	6122      	str	r2, [r4, #16]
 80097fc:	f8cd a000 	str.w	sl, [sp]
 8009800:	464b      	mov	r3, r9
 8009802:	aa03      	add	r2, sp, #12
 8009804:	4621      	mov	r1, r4
 8009806:	4640      	mov	r0, r8
 8009808:	f7ff fee4 	bl	80095d4 <_printf_common>
 800980c:	3001      	adds	r0, #1
 800980e:	d14a      	bne.n	80098a6 <_printf_i+0x1f6>
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	b004      	add	sp, #16
 8009816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	f043 0320 	orr.w	r3, r3, #32
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	4833      	ldr	r0, [pc, #204]	; (80098f0 <_printf_i+0x240>)
 8009824:	2778      	movs	r7, #120	; 0x78
 8009826:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	6829      	ldr	r1, [r5, #0]
 800982e:	061f      	lsls	r7, r3, #24
 8009830:	f851 6b04 	ldr.w	r6, [r1], #4
 8009834:	d402      	bmi.n	800983c <_printf_i+0x18c>
 8009836:	065f      	lsls	r7, r3, #25
 8009838:	bf48      	it	mi
 800983a:	b2b6      	uxthmi	r6, r6
 800983c:	07df      	lsls	r7, r3, #31
 800983e:	bf48      	it	mi
 8009840:	f043 0320 	orrmi.w	r3, r3, #32
 8009844:	6029      	str	r1, [r5, #0]
 8009846:	bf48      	it	mi
 8009848:	6023      	strmi	r3, [r4, #0]
 800984a:	b91e      	cbnz	r6, 8009854 <_printf_i+0x1a4>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	f023 0320 	bic.w	r3, r3, #32
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	2310      	movs	r3, #16
 8009856:	e7a7      	b.n	80097a8 <_printf_i+0xf8>
 8009858:	4824      	ldr	r0, [pc, #144]	; (80098ec <_printf_i+0x23c>)
 800985a:	e7e4      	b.n	8009826 <_printf_i+0x176>
 800985c:	4615      	mov	r5, r2
 800985e:	e7bd      	b.n	80097dc <_printf_i+0x12c>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	6826      	ldr	r6, [r4, #0]
 8009864:	6961      	ldr	r1, [r4, #20]
 8009866:	1d18      	adds	r0, r3, #4
 8009868:	6028      	str	r0, [r5, #0]
 800986a:	0635      	lsls	r5, r6, #24
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	d501      	bpl.n	8009874 <_printf_i+0x1c4>
 8009870:	6019      	str	r1, [r3, #0]
 8009872:	e002      	b.n	800987a <_printf_i+0x1ca>
 8009874:	0670      	lsls	r0, r6, #25
 8009876:	d5fb      	bpl.n	8009870 <_printf_i+0x1c0>
 8009878:	8019      	strh	r1, [r3, #0]
 800987a:	2300      	movs	r3, #0
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	4615      	mov	r5, r2
 8009880:	e7bc      	b.n	80097fc <_printf_i+0x14c>
 8009882:	682b      	ldr	r3, [r5, #0]
 8009884:	1d1a      	adds	r2, r3, #4
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	681d      	ldr	r5, [r3, #0]
 800988a:	6862      	ldr	r2, [r4, #4]
 800988c:	2100      	movs	r1, #0
 800988e:	4628      	mov	r0, r5
 8009890:	f7f6 fca6 	bl	80001e0 <memchr>
 8009894:	b108      	cbz	r0, 800989a <_printf_i+0x1ea>
 8009896:	1b40      	subs	r0, r0, r5
 8009898:	6060      	str	r0, [r4, #4]
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	2300      	movs	r3, #0
 80098a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a4:	e7aa      	b.n	80097fc <_printf_i+0x14c>
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4649      	mov	r1, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	47d0      	blx	sl
 80098b0:	3001      	adds	r0, #1
 80098b2:	d0ad      	beq.n	8009810 <_printf_i+0x160>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	079b      	lsls	r3, r3, #30
 80098b8:	d413      	bmi.n	80098e2 <_printf_i+0x232>
 80098ba:	68e0      	ldr	r0, [r4, #12]
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	4298      	cmp	r0, r3
 80098c0:	bfb8      	it	lt
 80098c2:	4618      	movlt	r0, r3
 80098c4:	e7a6      	b.n	8009814 <_printf_i+0x164>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4632      	mov	r2, r6
 80098ca:	4649      	mov	r1, r9
 80098cc:	4640      	mov	r0, r8
 80098ce:	47d0      	blx	sl
 80098d0:	3001      	adds	r0, #1
 80098d2:	d09d      	beq.n	8009810 <_printf_i+0x160>
 80098d4:	3501      	adds	r5, #1
 80098d6:	68e3      	ldr	r3, [r4, #12]
 80098d8:	9903      	ldr	r1, [sp, #12]
 80098da:	1a5b      	subs	r3, r3, r1
 80098dc:	42ab      	cmp	r3, r5
 80098de:	dcf2      	bgt.n	80098c6 <_printf_i+0x216>
 80098e0:	e7eb      	b.n	80098ba <_printf_i+0x20a>
 80098e2:	2500      	movs	r5, #0
 80098e4:	f104 0619 	add.w	r6, r4, #25
 80098e8:	e7f5      	b.n	80098d6 <_printf_i+0x226>
 80098ea:	bf00      	nop
 80098ec:	0800ee2a 	.word	0x0800ee2a
 80098f0:	0800ee3b 	.word	0x0800ee3b

080098f4 <_scanf_float>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	b087      	sub	sp, #28
 80098fa:	4617      	mov	r7, r2
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	688b      	ldr	r3, [r1, #8]
 8009900:	1e5a      	subs	r2, r3, #1
 8009902:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009906:	bf83      	ittte	hi
 8009908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800990c:	195b      	addhi	r3, r3, r5
 800990e:	9302      	strhi	r3, [sp, #8]
 8009910:	2300      	movls	r3, #0
 8009912:	bf86      	itte	hi
 8009914:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009918:	608b      	strhi	r3, [r1, #8]
 800991a:	9302      	strls	r3, [sp, #8]
 800991c:	680b      	ldr	r3, [r1, #0]
 800991e:	468b      	mov	fp, r1
 8009920:	2500      	movs	r5, #0
 8009922:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009926:	f84b 3b1c 	str.w	r3, [fp], #28
 800992a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800992e:	4680      	mov	r8, r0
 8009930:	460c      	mov	r4, r1
 8009932:	465e      	mov	r6, fp
 8009934:	46aa      	mov	sl, r5
 8009936:	46a9      	mov	r9, r5
 8009938:	9501      	str	r5, [sp, #4]
 800993a:	68a2      	ldr	r2, [r4, #8]
 800993c:	b152      	cbz	r2, 8009954 <_scanf_float+0x60>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b4e      	cmp	r3, #78	; 0x4e
 8009944:	d864      	bhi.n	8009a10 <_scanf_float+0x11c>
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d83c      	bhi.n	80099c4 <_scanf_float+0xd0>
 800994a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800994e:	b2c8      	uxtb	r0, r1
 8009950:	280e      	cmp	r0, #14
 8009952:	d93a      	bls.n	80099ca <_scanf_float+0xd6>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	d003      	beq.n	8009962 <_scanf_float+0x6e>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009966:	f1ba 0f01 	cmp.w	sl, #1
 800996a:	f200 8113 	bhi.w	8009b94 <_scanf_float+0x2a0>
 800996e:	455e      	cmp	r6, fp
 8009970:	f200 8105 	bhi.w	8009b7e <_scanf_float+0x28a>
 8009974:	2501      	movs	r5, #1
 8009976:	4628      	mov	r0, r5
 8009978:	b007      	add	sp, #28
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009982:	2a0d      	cmp	r2, #13
 8009984:	d8e6      	bhi.n	8009954 <_scanf_float+0x60>
 8009986:	a101      	add	r1, pc, #4	; (adr r1, 800998c <_scanf_float+0x98>)
 8009988:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800998c:	08009acb 	.word	0x08009acb
 8009990:	08009955 	.word	0x08009955
 8009994:	08009955 	.word	0x08009955
 8009998:	08009955 	.word	0x08009955
 800999c:	08009b2b 	.word	0x08009b2b
 80099a0:	08009b03 	.word	0x08009b03
 80099a4:	08009955 	.word	0x08009955
 80099a8:	08009955 	.word	0x08009955
 80099ac:	08009ad9 	.word	0x08009ad9
 80099b0:	08009955 	.word	0x08009955
 80099b4:	08009955 	.word	0x08009955
 80099b8:	08009955 	.word	0x08009955
 80099bc:	08009955 	.word	0x08009955
 80099c0:	08009a91 	.word	0x08009a91
 80099c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80099c8:	e7db      	b.n	8009982 <_scanf_float+0x8e>
 80099ca:	290e      	cmp	r1, #14
 80099cc:	d8c2      	bhi.n	8009954 <_scanf_float+0x60>
 80099ce:	a001      	add	r0, pc, #4	; (adr r0, 80099d4 <_scanf_float+0xe0>)
 80099d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099d4:	08009a83 	.word	0x08009a83
 80099d8:	08009955 	.word	0x08009955
 80099dc:	08009a83 	.word	0x08009a83
 80099e0:	08009b17 	.word	0x08009b17
 80099e4:	08009955 	.word	0x08009955
 80099e8:	08009a31 	.word	0x08009a31
 80099ec:	08009a6d 	.word	0x08009a6d
 80099f0:	08009a6d 	.word	0x08009a6d
 80099f4:	08009a6d 	.word	0x08009a6d
 80099f8:	08009a6d 	.word	0x08009a6d
 80099fc:	08009a6d 	.word	0x08009a6d
 8009a00:	08009a6d 	.word	0x08009a6d
 8009a04:	08009a6d 	.word	0x08009a6d
 8009a08:	08009a6d 	.word	0x08009a6d
 8009a0c:	08009a6d 	.word	0x08009a6d
 8009a10:	2b6e      	cmp	r3, #110	; 0x6e
 8009a12:	d809      	bhi.n	8009a28 <_scanf_float+0x134>
 8009a14:	2b60      	cmp	r3, #96	; 0x60
 8009a16:	d8b2      	bhi.n	800997e <_scanf_float+0x8a>
 8009a18:	2b54      	cmp	r3, #84	; 0x54
 8009a1a:	d077      	beq.n	8009b0c <_scanf_float+0x218>
 8009a1c:	2b59      	cmp	r3, #89	; 0x59
 8009a1e:	d199      	bne.n	8009954 <_scanf_float+0x60>
 8009a20:	2d07      	cmp	r5, #7
 8009a22:	d197      	bne.n	8009954 <_scanf_float+0x60>
 8009a24:	2508      	movs	r5, #8
 8009a26:	e029      	b.n	8009a7c <_scanf_float+0x188>
 8009a28:	2b74      	cmp	r3, #116	; 0x74
 8009a2a:	d06f      	beq.n	8009b0c <_scanf_float+0x218>
 8009a2c:	2b79      	cmp	r3, #121	; 0x79
 8009a2e:	e7f6      	b.n	8009a1e <_scanf_float+0x12a>
 8009a30:	6821      	ldr	r1, [r4, #0]
 8009a32:	05c8      	lsls	r0, r1, #23
 8009a34:	d51a      	bpl.n	8009a6c <_scanf_float+0x178>
 8009a36:	9b02      	ldr	r3, [sp, #8]
 8009a38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a3c:	6021      	str	r1, [r4, #0]
 8009a3e:	f109 0901 	add.w	r9, r9, #1
 8009a42:	b11b      	cbz	r3, 8009a4c <_scanf_float+0x158>
 8009a44:	3b01      	subs	r3, #1
 8009a46:	3201      	adds	r2, #1
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	60a2      	str	r2, [r4, #8]
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	3301      	adds	r3, #1
 8009a56:	6123      	str	r3, [r4, #16]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	607b      	str	r3, [r7, #4]
 8009a60:	f340 8084 	ble.w	8009b6c <_scanf_float+0x278>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	603b      	str	r3, [r7, #0]
 8009a6a:	e766      	b.n	800993a <_scanf_float+0x46>
 8009a6c:	eb1a 0f05 	cmn.w	sl, r5
 8009a70:	f47f af70 	bne.w	8009954 <_scanf_float+0x60>
 8009a74:	6822      	ldr	r2, [r4, #0]
 8009a76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009a80:	e7e4      	b.n	8009a4c <_scanf_float+0x158>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	0610      	lsls	r0, r2, #24
 8009a86:	f57f af65 	bpl.w	8009954 <_scanf_float+0x60>
 8009a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a8e:	e7f4      	b.n	8009a7a <_scanf_float+0x186>
 8009a90:	f1ba 0f00 	cmp.w	sl, #0
 8009a94:	d10e      	bne.n	8009ab4 <_scanf_float+0x1c0>
 8009a96:	f1b9 0f00 	cmp.w	r9, #0
 8009a9a:	d10e      	bne.n	8009aba <_scanf_float+0x1c6>
 8009a9c:	6822      	ldr	r2, [r4, #0]
 8009a9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009aa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009aa6:	d108      	bne.n	8009aba <_scanf_float+0x1c6>
 8009aa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	f04f 0a01 	mov.w	sl, #1
 8009ab2:	e7e3      	b.n	8009a7c <_scanf_float+0x188>
 8009ab4:	f1ba 0f02 	cmp.w	sl, #2
 8009ab8:	d055      	beq.n	8009b66 <_scanf_float+0x272>
 8009aba:	2d01      	cmp	r5, #1
 8009abc:	d002      	beq.n	8009ac4 <_scanf_float+0x1d0>
 8009abe:	2d04      	cmp	r5, #4
 8009ac0:	f47f af48 	bne.w	8009954 <_scanf_float+0x60>
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	b2ed      	uxtb	r5, r5
 8009ac8:	e7d8      	b.n	8009a7c <_scanf_float+0x188>
 8009aca:	f1ba 0f01 	cmp.w	sl, #1
 8009ace:	f47f af41 	bne.w	8009954 <_scanf_float+0x60>
 8009ad2:	f04f 0a02 	mov.w	sl, #2
 8009ad6:	e7d1      	b.n	8009a7c <_scanf_float+0x188>
 8009ad8:	b97d      	cbnz	r5, 8009afa <_scanf_float+0x206>
 8009ada:	f1b9 0f00 	cmp.w	r9, #0
 8009ade:	f47f af3c 	bne.w	800995a <_scanf_float+0x66>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ae8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009aec:	f47f af39 	bne.w	8009962 <_scanf_float+0x6e>
 8009af0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	2501      	movs	r5, #1
 8009af8:	e7c0      	b.n	8009a7c <_scanf_float+0x188>
 8009afa:	2d03      	cmp	r5, #3
 8009afc:	d0e2      	beq.n	8009ac4 <_scanf_float+0x1d0>
 8009afe:	2d05      	cmp	r5, #5
 8009b00:	e7de      	b.n	8009ac0 <_scanf_float+0x1cc>
 8009b02:	2d02      	cmp	r5, #2
 8009b04:	f47f af26 	bne.w	8009954 <_scanf_float+0x60>
 8009b08:	2503      	movs	r5, #3
 8009b0a:	e7b7      	b.n	8009a7c <_scanf_float+0x188>
 8009b0c:	2d06      	cmp	r5, #6
 8009b0e:	f47f af21 	bne.w	8009954 <_scanf_float+0x60>
 8009b12:	2507      	movs	r5, #7
 8009b14:	e7b2      	b.n	8009a7c <_scanf_float+0x188>
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	0591      	lsls	r1, r2, #22
 8009b1a:	f57f af1b 	bpl.w	8009954 <_scanf_float+0x60>
 8009b1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009b22:	6022      	str	r2, [r4, #0]
 8009b24:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b28:	e7a8      	b.n	8009a7c <_scanf_float+0x188>
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009b30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009b34:	d006      	beq.n	8009b44 <_scanf_float+0x250>
 8009b36:	0550      	lsls	r0, r2, #21
 8009b38:	f57f af0c 	bpl.w	8009954 <_scanf_float+0x60>
 8009b3c:	f1b9 0f00 	cmp.w	r9, #0
 8009b40:	f43f af0f 	beq.w	8009962 <_scanf_float+0x6e>
 8009b44:	0591      	lsls	r1, r2, #22
 8009b46:	bf58      	it	pl
 8009b48:	9901      	ldrpl	r1, [sp, #4]
 8009b4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b4e:	bf58      	it	pl
 8009b50:	eba9 0101 	subpl.w	r1, r9, r1
 8009b54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009b58:	bf58      	it	pl
 8009b5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b5e:	6022      	str	r2, [r4, #0]
 8009b60:	f04f 0900 	mov.w	r9, #0
 8009b64:	e78a      	b.n	8009a7c <_scanf_float+0x188>
 8009b66:	f04f 0a03 	mov.w	sl, #3
 8009b6a:	e787      	b.n	8009a7c <_scanf_float+0x188>
 8009b6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b70:	4639      	mov	r1, r7
 8009b72:	4640      	mov	r0, r8
 8009b74:	4798      	blx	r3
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f aedf 	beq.w	800993a <_scanf_float+0x46>
 8009b7c:	e6ea      	b.n	8009954 <_scanf_float+0x60>
 8009b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b86:	463a      	mov	r2, r7
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4798      	blx	r3
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	e6ec      	b.n	800996e <_scanf_float+0x7a>
 8009b94:	1e6b      	subs	r3, r5, #1
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	d825      	bhi.n	8009be6 <_scanf_float+0x2f2>
 8009b9a:	2d02      	cmp	r5, #2
 8009b9c:	d836      	bhi.n	8009c0c <_scanf_float+0x318>
 8009b9e:	455e      	cmp	r6, fp
 8009ba0:	f67f aee8 	bls.w	8009974 <_scanf_float+0x80>
 8009ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ba8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bac:	463a      	mov	r2, r7
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4798      	blx	r3
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	e7f1      	b.n	8009b9e <_scanf_float+0x2aa>
 8009bba:	9802      	ldr	r0, [sp, #8]
 8009bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009bc4:	9002      	str	r0, [sp, #8]
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4798      	blx	r3
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	6123      	str	r3, [r4, #16]
 8009bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bd6:	fa5f fa8a 	uxtb.w	sl, sl
 8009bda:	f1ba 0f02 	cmp.w	sl, #2
 8009bde:	d1ec      	bne.n	8009bba <_scanf_float+0x2c6>
 8009be0:	3d03      	subs	r5, #3
 8009be2:	b2ed      	uxtb	r5, r5
 8009be4:	1b76      	subs	r6, r6, r5
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	05da      	lsls	r2, r3, #23
 8009bea:	d52f      	bpl.n	8009c4c <_scanf_float+0x358>
 8009bec:	055b      	lsls	r3, r3, #21
 8009bee:	d510      	bpl.n	8009c12 <_scanf_float+0x31e>
 8009bf0:	455e      	cmp	r6, fp
 8009bf2:	f67f aebf 	bls.w	8009974 <_scanf_float+0x80>
 8009bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4640      	mov	r0, r8
 8009c02:	4798      	blx	r3
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	6123      	str	r3, [r4, #16]
 8009c0a:	e7f1      	b.n	8009bf0 <_scanf_float+0x2fc>
 8009c0c:	46aa      	mov	sl, r5
 8009c0e:	9602      	str	r6, [sp, #8]
 8009c10:	e7df      	b.n	8009bd2 <_scanf_float+0x2de>
 8009c12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	2965      	cmp	r1, #101	; 0x65
 8009c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	d00c      	beq.n	8009c40 <_scanf_float+0x34c>
 8009c26:	2945      	cmp	r1, #69	; 0x45
 8009c28:	d00a      	beq.n	8009c40 <_scanf_float+0x34c>
 8009c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c2e:	463a      	mov	r2, r7
 8009c30:	4640      	mov	r0, r8
 8009c32:	4798      	blx	r3
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	1eb5      	subs	r5, r6, #2
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c44:	463a      	mov	r2, r7
 8009c46:	4640      	mov	r0, r8
 8009c48:	4798      	blx	r3
 8009c4a:	462e      	mov	r6, r5
 8009c4c:	6825      	ldr	r5, [r4, #0]
 8009c4e:	f015 0510 	ands.w	r5, r5, #16
 8009c52:	d158      	bne.n	8009d06 <_scanf_float+0x412>
 8009c54:	7035      	strb	r5, [r6, #0]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c60:	d11c      	bne.n	8009c9c <_scanf_float+0x3a8>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	454b      	cmp	r3, r9
 8009c66:	eba3 0209 	sub.w	r2, r3, r9
 8009c6a:	d124      	bne.n	8009cb6 <_scanf_float+0x3c2>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4659      	mov	r1, fp
 8009c70:	4640      	mov	r0, r8
 8009c72:	f7ff f96d 	bl	8008f50 <_strtod_r>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	6821      	ldr	r1, [r4, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f011 0f02 	tst.w	r1, #2
 8009c80:	ec57 6b10 	vmov	r6, r7, d0
 8009c84:	f103 0204 	add.w	r2, r3, #4
 8009c88:	d020      	beq.n	8009ccc <_scanf_float+0x3d8>
 8009c8a:	9903      	ldr	r1, [sp, #12]
 8009c8c:	600a      	str	r2, [r1, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	e9c3 6700 	strd	r6, r7, [r3]
 8009c94:	68e3      	ldr	r3, [r4, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60e3      	str	r3, [r4, #12]
 8009c9a:	e66c      	b.n	8009976 <_scanf_float+0x82>
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0e4      	beq.n	8009c6c <_scanf_float+0x378>
 8009ca2:	9905      	ldr	r1, [sp, #20]
 8009ca4:	230a      	movs	r3, #10
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	3101      	adds	r1, #1
 8009caa:	4640      	mov	r0, r8
 8009cac:	f002 fb10 	bl	800c2d0 <_strtol_r>
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	9e05      	ldr	r6, [sp, #20]
 8009cb4:	1ac2      	subs	r2, r0, r3
 8009cb6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	bf28      	it	cs
 8009cbe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009cc2:	4912      	ldr	r1, [pc, #72]	; (8009d0c <_scanf_float+0x418>)
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 f955 	bl	8009f74 <siprintf>
 8009cca:	e7cf      	b.n	8009c6c <_scanf_float+0x378>
 8009ccc:	f011 0f04 	tst.w	r1, #4
 8009cd0:	9903      	ldr	r1, [sp, #12]
 8009cd2:	600a      	str	r2, [r1, #0]
 8009cd4:	d1db      	bne.n	8009c8e <_scanf_float+0x39a>
 8009cd6:	f8d3 8000 	ldr.w	r8, [r3]
 8009cda:	ee10 2a10 	vmov	r2, s0
 8009cde:	ee10 0a10 	vmov	r0, s0
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 ff29 	bl	8000b3c <__aeabi_dcmpun>
 8009cea:	b128      	cbz	r0, 8009cf8 <_scanf_float+0x404>
 8009cec:	4808      	ldr	r0, [pc, #32]	; (8009d10 <_scanf_float+0x41c>)
 8009cee:	f000 fb6b 	bl	800a3c8 <nanf>
 8009cf2:	ed88 0a00 	vstr	s0, [r8]
 8009cf6:	e7cd      	b.n	8009c94 <_scanf_float+0x3a0>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 ff7c 	bl	8000bf8 <__aeabi_d2f>
 8009d00:	f8c8 0000 	str.w	r0, [r8]
 8009d04:	e7c6      	b.n	8009c94 <_scanf_float+0x3a0>
 8009d06:	2500      	movs	r5, #0
 8009d08:	e635      	b.n	8009976 <_scanf_float+0x82>
 8009d0a:	bf00      	nop
 8009d0c:	0800ee4c 	.word	0x0800ee4c
 8009d10:	0800ef05 	.word	0x0800ef05

08009d14 <std>:
 8009d14:	2300      	movs	r3, #0
 8009d16:	b510      	push	{r4, lr}
 8009d18:	4604      	mov	r4, r0
 8009d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d22:	6083      	str	r3, [r0, #8]
 8009d24:	8181      	strh	r1, [r0, #12]
 8009d26:	6643      	str	r3, [r0, #100]	; 0x64
 8009d28:	81c2      	strh	r2, [r0, #14]
 8009d2a:	6183      	str	r3, [r0, #24]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	2208      	movs	r2, #8
 8009d30:	305c      	adds	r0, #92	; 0x5c
 8009d32:	f000 fa17 	bl	800a164 <memset>
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <std+0x58>)
 8009d38:	6263      	str	r3, [r4, #36]	; 0x24
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <std+0x5c>)
 8009d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <std+0x60>)
 8009d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d42:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <std+0x64>)
 8009d44:	6323      	str	r3, [r4, #48]	; 0x30
 8009d46:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <std+0x68>)
 8009d48:	6224      	str	r4, [r4, #32]
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d006      	beq.n	8009d5c <std+0x48>
 8009d4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d52:	4294      	cmp	r4, r2
 8009d54:	d002      	beq.n	8009d5c <std+0x48>
 8009d56:	33d0      	adds	r3, #208	; 0xd0
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d105      	bne.n	8009d68 <std+0x54>
 8009d5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d64:	f000 bb16 	b.w	800a394 <__retarget_lock_init_recursive>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08009fb5 	.word	0x08009fb5
 8009d70:	08009fd7 	.word	0x08009fd7
 8009d74:	0800a00f 	.word	0x0800a00f
 8009d78:	0800a033 	.word	0x0800a033
 8009d7c:	200005c8 	.word	0x200005c8

08009d80 <stdio_exit_handler>:
 8009d80:	4a02      	ldr	r2, [pc, #8]	; (8009d8c <stdio_exit_handler+0xc>)
 8009d82:	4903      	ldr	r1, [pc, #12]	; (8009d90 <stdio_exit_handler+0x10>)
 8009d84:	4803      	ldr	r0, [pc, #12]	; (8009d94 <stdio_exit_handler+0x14>)
 8009d86:	f000 b869 	b.w	8009e5c <_fwalk_sglue>
 8009d8a:	bf00      	nop
 8009d8c:	2000001c 	.word	0x2000001c
 8009d90:	0800c935 	.word	0x0800c935
 8009d94:	20000194 	.word	0x20000194

08009d98 <cleanup_stdio>:
 8009d98:	6841      	ldr	r1, [r0, #4]
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <cleanup_stdio+0x34>)
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	4604      	mov	r4, r0
 8009da2:	d001      	beq.n	8009da8 <cleanup_stdio+0x10>
 8009da4:	f002 fdc6 	bl	800c934 <_fflush_r>
 8009da8:	68a1      	ldr	r1, [r4, #8]
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <cleanup_stdio+0x38>)
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <cleanup_stdio+0x1e>
 8009db0:	4620      	mov	r0, r4
 8009db2:	f002 fdbf 	bl	800c934 <_fflush_r>
 8009db6:	68e1      	ldr	r1, [r4, #12]
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <cleanup_stdio+0x3c>)
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d004      	beq.n	8009dc8 <cleanup_stdio+0x30>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc4:	f002 bdb6 	b.w	800c934 <_fflush_r>
 8009dc8:	bd10      	pop	{r4, pc}
 8009dca:	bf00      	nop
 8009dcc:	200005c8 	.word	0x200005c8
 8009dd0:	20000630 	.word	0x20000630
 8009dd4:	20000698 	.word	0x20000698

08009dd8 <global_stdio_init.part.0>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <global_stdio_init.part.0+0x30>)
 8009ddc:	4c0b      	ldr	r4, [pc, #44]	; (8009e0c <global_stdio_init.part.0+0x34>)
 8009dde:	4a0c      	ldr	r2, [pc, #48]	; (8009e10 <global_stdio_init.part.0+0x38>)
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	4620      	mov	r0, r4
 8009de4:	2200      	movs	r2, #0
 8009de6:	2104      	movs	r1, #4
 8009de8:	f7ff ff94 	bl	8009d14 <std>
 8009dec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009df0:	2201      	movs	r2, #1
 8009df2:	2109      	movs	r1, #9
 8009df4:	f7ff ff8e 	bl	8009d14 <std>
 8009df8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e02:	2112      	movs	r1, #18
 8009e04:	f7ff bf86 	b.w	8009d14 <std>
 8009e08:	20000700 	.word	0x20000700
 8009e0c:	200005c8 	.word	0x200005c8
 8009e10:	08009d81 	.word	0x08009d81

08009e14 <__sfp_lock_acquire>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__sfp_lock_acquire+0x8>)
 8009e16:	f000 babe 	b.w	800a396 <__retarget_lock_acquire_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20000709 	.word	0x20000709

08009e20 <__sfp_lock_release>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__sfp_lock_release+0x8>)
 8009e22:	f000 bab9 	b.w	800a398 <__retarget_lock_release_recursive>
 8009e26:	bf00      	nop
 8009e28:	20000709 	.word	0x20000709

08009e2c <__sinit>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	f7ff fff0 	bl	8009e14 <__sfp_lock_acquire>
 8009e34:	6a23      	ldr	r3, [r4, #32]
 8009e36:	b11b      	cbz	r3, 8009e40 <__sinit+0x14>
 8009e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e3c:	f7ff bff0 	b.w	8009e20 <__sfp_lock_release>
 8009e40:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <__sinit+0x28>)
 8009e42:	6223      	str	r3, [r4, #32]
 8009e44:	4b04      	ldr	r3, [pc, #16]	; (8009e58 <__sinit+0x2c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f5      	bne.n	8009e38 <__sinit+0xc>
 8009e4c:	f7ff ffc4 	bl	8009dd8 <global_stdio_init.part.0>
 8009e50:	e7f2      	b.n	8009e38 <__sinit+0xc>
 8009e52:	bf00      	nop
 8009e54:	08009d99 	.word	0x08009d99
 8009e58:	20000700 	.word	0x20000700

08009e5c <_fwalk_sglue>:
 8009e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e60:	4607      	mov	r7, r0
 8009e62:	4688      	mov	r8, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	2600      	movs	r6, #0
 8009e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e70:	d505      	bpl.n	8009e7e <_fwalk_sglue+0x22>
 8009e72:	6824      	ldr	r4, [r4, #0]
 8009e74:	2c00      	cmp	r4, #0
 8009e76:	d1f7      	bne.n	8009e68 <_fwalk_sglue+0xc>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d907      	bls.n	8009e94 <_fwalk_sglue+0x38>
 8009e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	d003      	beq.n	8009e94 <_fwalk_sglue+0x38>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	47c0      	blx	r8
 8009e92:	4306      	orrs	r6, r0
 8009e94:	3568      	adds	r5, #104	; 0x68
 8009e96:	e7e9      	b.n	8009e6c <_fwalk_sglue+0x10>

08009e98 <iprintf>:
 8009e98:	b40f      	push	{r0, r1, r2, r3}
 8009e9a:	b507      	push	{r0, r1, r2, lr}
 8009e9c:	4906      	ldr	r1, [pc, #24]	; (8009eb8 <iprintf+0x20>)
 8009e9e:	ab04      	add	r3, sp, #16
 8009ea0:	6808      	ldr	r0, [r1, #0]
 8009ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea6:	6881      	ldr	r1, [r0, #8]
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	f002 fba3 	bl	800c5f4 <_vfiprintf_r>
 8009eae:	b003      	add	sp, #12
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b004      	add	sp, #16
 8009eb6:	4770      	bx	lr
 8009eb8:	200001e0 	.word	0x200001e0

08009ebc <_puts_r>:
 8009ebc:	6a03      	ldr	r3, [r0, #32]
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	6884      	ldr	r4, [r0, #8]
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	460e      	mov	r6, r1
 8009ec6:	b90b      	cbnz	r3, 8009ecc <_puts_r+0x10>
 8009ec8:	f7ff ffb0 	bl	8009e2c <__sinit>
 8009ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d405      	bmi.n	8009ede <_puts_r+0x22>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	0598      	lsls	r0, r3, #22
 8009ed6:	d402      	bmi.n	8009ede <_puts_r+0x22>
 8009ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eda:	f000 fa5c 	bl	800a396 <__retarget_lock_acquire_recursive>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	0719      	lsls	r1, r3, #28
 8009ee2:	d513      	bpl.n	8009f0c <_puts_r+0x50>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	b18b      	cbz	r3, 8009f0c <_puts_r+0x50>
 8009ee8:	3e01      	subs	r6, #1
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	60a3      	str	r3, [r4, #8]
 8009ef4:	b9e9      	cbnz	r1, 8009f32 <_puts_r+0x76>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	da2e      	bge.n	8009f58 <_puts_r+0x9c>
 8009efa:	4622      	mov	r2, r4
 8009efc:	210a      	movs	r1, #10
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f89b 	bl	800a03a <__swbuf_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d007      	beq.n	8009f18 <_puts_r+0x5c>
 8009f08:	250a      	movs	r5, #10
 8009f0a:	e007      	b.n	8009f1c <_puts_r+0x60>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f8d0 	bl	800a0b4 <__swsetup_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d0e7      	beq.n	8009ee8 <_puts_r+0x2c>
 8009f18:	f04f 35ff 	mov.w	r5, #4294967295
 8009f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f1e:	07da      	lsls	r2, r3, #31
 8009f20:	d405      	bmi.n	8009f2e <_puts_r+0x72>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	059b      	lsls	r3, r3, #22
 8009f26:	d402      	bmi.n	8009f2e <_puts_r+0x72>
 8009f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2a:	f000 fa35 	bl	800a398 <__retarget_lock_release_recursive>
 8009f2e:	4628      	mov	r0, r5
 8009f30:	bd70      	pop	{r4, r5, r6, pc}
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	da04      	bge.n	8009f40 <_puts_r+0x84>
 8009f36:	69a2      	ldr	r2, [r4, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	dc06      	bgt.n	8009f4a <_puts_r+0x8e>
 8009f3c:	290a      	cmp	r1, #10
 8009f3e:	d004      	beq.n	8009f4a <_puts_r+0x8e>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	7019      	strb	r1, [r3, #0]
 8009f48:	e7cf      	b.n	8009eea <_puts_r+0x2e>
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 f874 	bl	800a03a <__swbuf_r>
 8009f52:	3001      	adds	r0, #1
 8009f54:	d1c9      	bne.n	8009eea <_puts_r+0x2e>
 8009f56:	e7df      	b.n	8009f18 <_puts_r+0x5c>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	250a      	movs	r5, #10
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	6022      	str	r2, [r4, #0]
 8009f60:	701d      	strb	r5, [r3, #0]
 8009f62:	e7db      	b.n	8009f1c <_puts_r+0x60>

08009f64 <puts>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <puts+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f7ff bfa7 	b.w	8009ebc <_puts_r>
 8009f6e:	bf00      	nop
 8009f70:	200001e0 	.word	0x200001e0

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b500      	push	{lr}
 8009f78:	b09c      	sub	sp, #112	; 0x70
 8009f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	9006      	str	r0, [sp, #24]
 8009f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f84:	4809      	ldr	r0, [pc, #36]	; (8009fac <siprintf+0x38>)
 8009f86:	9107      	str	r1, [sp, #28]
 8009f88:	9104      	str	r1, [sp, #16]
 8009f8a:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <siprintf+0x3c>)
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	a902      	add	r1, sp, #8
 8009f98:	f002 fa04 	bl	800c3a4 <_svfiprintf_r>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	b01c      	add	sp, #112	; 0x70
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	200001e0 	.word	0x200001e0
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <__sread>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	f000 f98c 	bl	800a2d8 <_read_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc8:	181b      	addge	r3, r3, r0
 8009fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fce:	bfac      	ite	ge
 8009fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fd2:	81a3      	strhlt	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__swrite>:
 8009fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	461f      	mov	r7, r3
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	05db      	lsls	r3, r3, #23
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	d505      	bpl.n	8009ff4 <__swrite+0x1e>
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	2302      	movs	r3, #2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f000 f960 	bl	800a2b4 <_lseek_r>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	f000 b987 	b.w	800a31c <_write_r>

0800a00e <__sseek>:
 800a00e:	b510      	push	{r4, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 f94d 	bl	800a2b4 <_lseek_r>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	bf15      	itete	ne
 800a020:	6560      	strne	r0, [r4, #84]	; 0x54
 800a022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a02a:	81a3      	strheq	r3, [r4, #12]
 800a02c:	bf18      	it	ne
 800a02e:	81a3      	strhne	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__sclose>:
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 b92d 	b.w	800a294 <_close_r>

0800a03a <__swbuf_r>:
 800a03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03c:	460e      	mov	r6, r1
 800a03e:	4614      	mov	r4, r2
 800a040:	4605      	mov	r5, r0
 800a042:	b118      	cbz	r0, 800a04c <__swbuf_r+0x12>
 800a044:	6a03      	ldr	r3, [r0, #32]
 800a046:	b90b      	cbnz	r3, 800a04c <__swbuf_r+0x12>
 800a048:	f7ff fef0 	bl	8009e2c <__sinit>
 800a04c:	69a3      	ldr	r3, [r4, #24]
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	071a      	lsls	r2, r3, #28
 800a054:	d525      	bpl.n	800a0a2 <__swbuf_r+0x68>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	b31b      	cbz	r3, 800a0a2 <__swbuf_r+0x68>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	6922      	ldr	r2, [r4, #16]
 800a05e:	1a98      	subs	r0, r3, r2
 800a060:	6963      	ldr	r3, [r4, #20]
 800a062:	b2f6      	uxtb	r6, r6
 800a064:	4283      	cmp	r3, r0
 800a066:	4637      	mov	r7, r6
 800a068:	dc04      	bgt.n	800a074 <__swbuf_r+0x3a>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f002 fc61 	bl	800c934 <_fflush_r>
 800a072:	b9e0      	cbnz	r0, 800a0ae <__swbuf_r+0x74>
 800a074:	68a3      	ldr	r3, [r4, #8]
 800a076:	3b01      	subs	r3, #1
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	701e      	strb	r6, [r3, #0]
 800a082:	6962      	ldr	r2, [r4, #20]
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	429a      	cmp	r2, r3
 800a088:	d004      	beq.n	800a094 <__swbuf_r+0x5a>
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	07db      	lsls	r3, r3, #31
 800a08e:	d506      	bpl.n	800a09e <__swbuf_r+0x64>
 800a090:	2e0a      	cmp	r6, #10
 800a092:	d104      	bne.n	800a09e <__swbuf_r+0x64>
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	f002 fc4c 	bl	800c934 <_fflush_r>
 800a09c:	b938      	cbnz	r0, 800a0ae <__swbuf_r+0x74>
 800a09e:	4638      	mov	r0, r7
 800a0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 f805 	bl	800a0b4 <__swsetup_r>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0d5      	beq.n	800a05a <__swbuf_r+0x20>
 800a0ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b2:	e7f4      	b.n	800a09e <__swbuf_r+0x64>

0800a0b4 <__swsetup_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <__swsetup_r+0xac>)
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	460c      	mov	r4, r1
 800a0be:	b118      	cbz	r0, 800a0c8 <__swsetup_r+0x14>
 800a0c0:	6a03      	ldr	r3, [r0, #32]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <__swsetup_r+0x14>
 800a0c4:	f7ff feb2 	bl	8009e2c <__sinit>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ce:	0718      	lsls	r0, r3, #28
 800a0d0:	d422      	bmi.n	800a118 <__swsetup_r+0x64>
 800a0d2:	06d9      	lsls	r1, r3, #27
 800a0d4:	d407      	bmi.n	800a0e6 <__swsetup_r+0x32>
 800a0d6:	2309      	movs	r3, #9
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	e034      	b.n	800a150 <__swsetup_r+0x9c>
 800a0e6:	0758      	lsls	r0, r3, #29
 800a0e8:	d512      	bpl.n	800a110 <__swsetup_r+0x5c>
 800a0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ec:	b141      	cbz	r1, 800a100 <__swsetup_r+0x4c>
 800a0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	d002      	beq.n	800a0fc <__swsetup_r+0x48>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f001 f804 	bl	800b104 <_free_r>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	2300      	movs	r3, #0
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f043 0308 	orr.w	r3, r3, #8
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	b94b      	cbnz	r3, 800a130 <__swsetup_r+0x7c>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a126:	d003      	beq.n	800a130 <__swsetup_r+0x7c>
 800a128:	4621      	mov	r1, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	f002 fc62 	bl	800c9f4 <__smakebuf_r>
 800a130:	89a0      	ldrh	r0, [r4, #12]
 800a132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a136:	f010 0301 	ands.w	r3, r0, #1
 800a13a:	d00a      	beq.n	800a152 <__swsetup_r+0x9e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	60a3      	str	r3, [r4, #8]
 800a140:	6963      	ldr	r3, [r4, #20]
 800a142:	425b      	negs	r3, r3
 800a144:	61a3      	str	r3, [r4, #24]
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	b943      	cbnz	r3, 800a15c <__swsetup_r+0xa8>
 800a14a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a14e:	d1c4      	bne.n	800a0da <__swsetup_r+0x26>
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	0781      	lsls	r1, r0, #30
 800a154:	bf58      	it	pl
 800a156:	6963      	ldrpl	r3, [r4, #20]
 800a158:	60a3      	str	r3, [r4, #8]
 800a15a:	e7f4      	b.n	800a146 <__swsetup_r+0x92>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e7f7      	b.n	800a150 <__swsetup_r+0x9c>
 800a160:	200001e0 	.word	0x200001e0

0800a164 <memset>:
 800a164:	4402      	add	r2, r0
 800a166:	4603      	mov	r3, r0
 800a168:	4293      	cmp	r3, r2
 800a16a:	d100      	bne.n	800a16e <memset+0xa>
 800a16c:	4770      	bx	lr
 800a16e:	f803 1b01 	strb.w	r1, [r3], #1
 800a172:	e7f9      	b.n	800a168 <memset+0x4>

0800a174 <strdup>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <strdup+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f000 b803 	b.w	800a184 <_strdup_r>
 800a17e:	bf00      	nop
 800a180:	200001e0 	.word	0x200001e0

0800a184 <_strdup_r>:
 800a184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	460d      	mov	r5, r1
 800a18c:	f7f6 f878 	bl	8000280 <strlen>
 800a190:	1c42      	adds	r2, r0, #1
 800a192:	4611      	mov	r1, r2
 800a194:	4620      	mov	r0, r4
 800a196:	9201      	str	r2, [sp, #4]
 800a198:	f7fe f840 	bl	800821c <_malloc_r>
 800a19c:	4604      	mov	r4, r0
 800a19e:	b118      	cbz	r0, 800a1a8 <_strdup_r+0x24>
 800a1a0:	9a01      	ldr	r2, [sp, #4]
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f000 f8f9 	bl	800a39a <memcpy>
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	b003      	add	sp, #12
 800a1ac:	bd30      	pop	{r4, r5, pc}

0800a1ae <strncmp>:
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	b16a      	cbz	r2, 800a1ce <strncmp+0x20>
 800a1b2:	3901      	subs	r1, #1
 800a1b4:	1884      	adds	r4, r0, r2
 800a1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d103      	bne.n	800a1ca <strncmp+0x1c>
 800a1c2:	42a0      	cmp	r0, r4
 800a1c4:	d001      	beq.n	800a1ca <strncmp+0x1c>
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	d1f5      	bne.n	800a1b6 <strncmp+0x8>
 800a1ca:	1ad0      	subs	r0, r2, r3
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	e7fc      	b.n	800a1cc <strncmp+0x1e>
	...

0800a1d4 <strtok>:
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <strtok+0x5c>)
 800a1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d8:	681e      	ldr	r6, [r3, #0]
 800a1da:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a1dc:	4605      	mov	r5, r0
 800a1de:	b9fc      	cbnz	r4, 800a220 <strtok+0x4c>
 800a1e0:	2050      	movs	r0, #80	; 0x50
 800a1e2:	9101      	str	r1, [sp, #4]
 800a1e4:	f7fd ffea 	bl	80081bc <malloc>
 800a1e8:	9901      	ldr	r1, [sp, #4]
 800a1ea:	6470      	str	r0, [r6, #68]	; 0x44
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	b920      	cbnz	r0, 800a1fa <strtok+0x26>
 800a1f0:	4b10      	ldr	r3, [pc, #64]	; (800a234 <strtok+0x60>)
 800a1f2:	4811      	ldr	r0, [pc, #68]	; (800a238 <strtok+0x64>)
 800a1f4:	215b      	movs	r1, #91	; 0x5b
 800a1f6:	f000 f8ed 	bl	800a3d4 <__assert_func>
 800a1fa:	e9c0 4400 	strd	r4, r4, [r0]
 800a1fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a202:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a206:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a20a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a20e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a212:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a216:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a21a:	6184      	str	r4, [r0, #24]
 800a21c:	7704      	strb	r4, [r0, #28]
 800a21e:	6244      	str	r4, [r0, #36]	; 0x24
 800a220:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a222:	2301      	movs	r3, #1
 800a224:	4628      	mov	r0, r5
 800a226:	b002      	add	sp, #8
 800a228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a22c:	f000 b806 	b.w	800a23c <__strtok_r>
 800a230:	200001e0 	.word	0x200001e0
 800a234:	0800ee51 	.word	0x0800ee51
 800a238:	0800ee68 	.word	0x0800ee68

0800a23c <__strtok_r>:
 800a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a23e:	b908      	cbnz	r0, 800a244 <__strtok_r+0x8>
 800a240:	6810      	ldr	r0, [r2, #0]
 800a242:	b188      	cbz	r0, 800a268 <__strtok_r+0x2c>
 800a244:	4604      	mov	r4, r0
 800a246:	4620      	mov	r0, r4
 800a248:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a24c:	460f      	mov	r7, r1
 800a24e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a252:	b91e      	cbnz	r6, 800a25c <__strtok_r+0x20>
 800a254:	b965      	cbnz	r5, 800a270 <__strtok_r+0x34>
 800a256:	6015      	str	r5, [r2, #0]
 800a258:	4628      	mov	r0, r5
 800a25a:	e005      	b.n	800a268 <__strtok_r+0x2c>
 800a25c:	42b5      	cmp	r5, r6
 800a25e:	d1f6      	bne.n	800a24e <__strtok_r+0x12>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1f0      	bne.n	800a246 <__strtok_r+0xa>
 800a264:	6014      	str	r4, [r2, #0]
 800a266:	7003      	strb	r3, [r0, #0]
 800a268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26a:	461c      	mov	r4, r3
 800a26c:	e00c      	b.n	800a288 <__strtok_r+0x4c>
 800a26e:	b915      	cbnz	r5, 800a276 <__strtok_r+0x3a>
 800a270:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a274:	460e      	mov	r6, r1
 800a276:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	d1f7      	bne.n	800a26e <__strtok_r+0x32>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f3      	beq.n	800a26a <__strtok_r+0x2e>
 800a282:	2300      	movs	r3, #0
 800a284:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a288:	6014      	str	r4, [r2, #0]
 800a28a:	e7ed      	b.n	800a268 <__strtok_r+0x2c>

0800a28c <_localeconv_r>:
 800a28c:	4800      	ldr	r0, [pc, #0]	; (800a290 <_localeconv_r+0x4>)
 800a28e:	4770      	bx	lr
 800a290:	20000118 	.word	0x20000118

0800a294 <_close_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	; (800a2b0 <_close_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f9 fdcf 	bl	8003e42 <_close>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_close_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_close_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20000704 	.word	0x20000704

0800a2b4 <_lseek_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	; (800a2d4 <_lseek_r+0x20>)
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	602a      	str	r2, [r5, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7f9 fde4 	bl	8003e90 <_lseek>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_lseek_r+0x1e>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_lseek_r+0x1e>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	20000704 	.word	0x20000704

0800a2d8 <_read_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_read_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f9 fd72 	bl	8003dd0 <_read>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_read_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_read_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	20000704 	.word	0x20000704

0800a2fc <_sbrk_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_sbrk_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f9 fdd0 	bl	8003eac <_sbrk>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_sbrk_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_sbrk_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	20000704 	.word	0x20000704

0800a31c <_write_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_write_r+0x20>)
 800a320:	4604      	mov	r4, r0
 800a322:	4608      	mov	r0, r1
 800a324:	4611      	mov	r1, r2
 800a326:	2200      	movs	r2, #0
 800a328:	602a      	str	r2, [r5, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f7f9 fd6d 	bl	8003e0a <_write>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_write_r+0x1e>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_write_r+0x1e>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20000704 	.word	0x20000704

0800a340 <__errno>:
 800a340:	4b01      	ldr	r3, [pc, #4]	; (800a348 <__errno+0x8>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	200001e0 	.word	0x200001e0

0800a34c <__libc_init_array>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4d0d      	ldr	r5, [pc, #52]	; (800a384 <__libc_init_array+0x38>)
 800a350:	4c0d      	ldr	r4, [pc, #52]	; (800a388 <__libc_init_array+0x3c>)
 800a352:	1b64      	subs	r4, r4, r5
 800a354:	10a4      	asrs	r4, r4, #2
 800a356:	2600      	movs	r6, #0
 800a358:	42a6      	cmp	r6, r4
 800a35a:	d109      	bne.n	800a370 <__libc_init_array+0x24>
 800a35c:	4d0b      	ldr	r5, [pc, #44]	; (800a38c <__libc_init_array+0x40>)
 800a35e:	4c0c      	ldr	r4, [pc, #48]	; (800a390 <__libc_init_array+0x44>)
 800a360:	f004 fbce 	bl	800eb00 <_init>
 800a364:	1b64      	subs	r4, r4, r5
 800a366:	10a4      	asrs	r4, r4, #2
 800a368:	2600      	movs	r6, #0
 800a36a:	42a6      	cmp	r6, r4
 800a36c:	d105      	bne.n	800a37a <__libc_init_array+0x2e>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	f855 3b04 	ldr.w	r3, [r5], #4
 800a374:	4798      	blx	r3
 800a376:	3601      	adds	r6, #1
 800a378:	e7ee      	b.n	800a358 <__libc_init_array+0xc>
 800a37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37e:	4798      	blx	r3
 800a380:	3601      	adds	r6, #1
 800a382:	e7f2      	b.n	800a36a <__libc_init_array+0x1e>
 800a384:	0800f458 	.word	0x0800f458
 800a388:	0800f458 	.word	0x0800f458
 800a38c:	0800f458 	.word	0x0800f458
 800a390:	0800f45c 	.word	0x0800f45c

0800a394 <__retarget_lock_init_recursive>:
 800a394:	4770      	bx	lr

0800a396 <__retarget_lock_acquire_recursive>:
 800a396:	4770      	bx	lr

0800a398 <__retarget_lock_release_recursive>:
 800a398:	4770      	bx	lr

0800a39a <memcpy>:
 800a39a:	440a      	add	r2, r1
 800a39c:	4291      	cmp	r1, r2
 800a39e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3a2:	d100      	bne.n	800a3a6 <memcpy+0xc>
 800a3a4:	4770      	bx	lr
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3b0:	4291      	cmp	r1, r2
 800a3b2:	d1f9      	bne.n	800a3a8 <memcpy+0xe>
 800a3b4:	bd10      	pop	{r4, pc}
	...

0800a3b8 <nan>:
 800a3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3c0 <nan+0x8>
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	00000000 	.word	0x00000000
 800a3c4:	7ff80000 	.word	0x7ff80000

0800a3c8 <nanf>:
 800a3c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a3d0 <nanf+0x8>
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	7fc00000 	.word	0x7fc00000

0800a3d4 <__assert_func>:
 800a3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3d6:	4614      	mov	r4, r2
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <__assert_func+0x2c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4605      	mov	r5, r0
 800a3e0:	68d8      	ldr	r0, [r3, #12]
 800a3e2:	b14c      	cbz	r4, 800a3f8 <__assert_func+0x24>
 800a3e4:	4b07      	ldr	r3, [pc, #28]	; (800a404 <__assert_func+0x30>)
 800a3e6:	9100      	str	r1, [sp, #0]
 800a3e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3ec:	4906      	ldr	r1, [pc, #24]	; (800a408 <__assert_func+0x34>)
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	f002 fac8 	bl	800c984 <fiprintf>
 800a3f4:	f002 fb76 	bl	800cae4 <abort>
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <__assert_func+0x38>)
 800a3fa:	461c      	mov	r4, r3
 800a3fc:	e7f3      	b.n	800a3e6 <__assert_func+0x12>
 800a3fe:	bf00      	nop
 800a400:	200001e0 	.word	0x200001e0
 800a404:	0800eeca 	.word	0x0800eeca
 800a408:	0800eed7 	.word	0x0800eed7
 800a40c:	0800ef05 	.word	0x0800ef05

0800a410 <quorem>:
 800a410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	6903      	ldr	r3, [r0, #16]
 800a416:	690c      	ldr	r4, [r1, #16]
 800a418:	42a3      	cmp	r3, r4
 800a41a:	4607      	mov	r7, r0
 800a41c:	db7e      	blt.n	800a51c <quorem+0x10c>
 800a41e:	3c01      	subs	r4, #1
 800a420:	f101 0814 	add.w	r8, r1, #20
 800a424:	f100 0514 	add.w	r5, r0, #20
 800a428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a436:	3301      	adds	r3, #1
 800a438:	429a      	cmp	r2, r3
 800a43a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a43e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a442:	fbb2 f6f3 	udiv	r6, r2, r3
 800a446:	d331      	bcc.n	800a4ac <quorem+0x9c>
 800a448:	f04f 0e00 	mov.w	lr, #0
 800a44c:	4640      	mov	r0, r8
 800a44e:	46ac      	mov	ip, r5
 800a450:	46f2      	mov	sl, lr
 800a452:	f850 2b04 	ldr.w	r2, [r0], #4
 800a456:	b293      	uxth	r3, r2
 800a458:	fb06 e303 	mla	r3, r6, r3, lr
 800a45c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a460:	0c1a      	lsrs	r2, r3, #16
 800a462:	b29b      	uxth	r3, r3
 800a464:	ebaa 0303 	sub.w	r3, sl, r3
 800a468:	f8dc a000 	ldr.w	sl, [ip]
 800a46c:	fa13 f38a 	uxtah	r3, r3, sl
 800a470:	fb06 220e 	mla	r2, r6, lr, r2
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a47c:	b292      	uxth	r2, r2
 800a47e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a482:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a486:	f8bd 3000 	ldrh.w	r3, [sp]
 800a48a:	4581      	cmp	r9, r0
 800a48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a490:	f84c 3b04 	str.w	r3, [ip], #4
 800a494:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a498:	d2db      	bcs.n	800a452 <quorem+0x42>
 800a49a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a49e:	b92b      	cbnz	r3, 800a4ac <quorem+0x9c>
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	3b04      	subs	r3, #4
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	d32c      	bcc.n	800a504 <quorem+0xf4>
 800a4aa:	613c      	str	r4, [r7, #16]
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f001 fca5 	bl	800bdfc <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	db22      	blt.n	800a4fc <quorem+0xec>
 800a4b6:	3601      	adds	r6, #1
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4c0:	f8d1 c000 	ldr.w	ip, [r1]
 800a4c4:	b293      	uxth	r3, r2
 800a4c6:	1ac3      	subs	r3, r0, r3
 800a4c8:	0c12      	lsrs	r2, r2, #16
 800a4ca:	fa13 f38c 	uxtah	r3, r3, ip
 800a4ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a4d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4dc:	45c1      	cmp	r9, r8
 800a4de:	f841 3b04 	str.w	r3, [r1], #4
 800a4e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4e6:	d2e9      	bcs.n	800a4bc <quorem+0xac>
 800a4e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4f0:	b922      	cbnz	r2, 800a4fc <quorem+0xec>
 800a4f2:	3b04      	subs	r3, #4
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	d30a      	bcc.n	800a510 <quorem+0x100>
 800a4fa:	613c      	str	r4, [r7, #16]
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	b003      	add	sp, #12
 800a500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	3b04      	subs	r3, #4
 800a508:	2a00      	cmp	r2, #0
 800a50a:	d1ce      	bne.n	800a4aa <quorem+0x9a>
 800a50c:	3c01      	subs	r4, #1
 800a50e:	e7c9      	b.n	800a4a4 <quorem+0x94>
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	3b04      	subs	r3, #4
 800a514:	2a00      	cmp	r2, #0
 800a516:	d1f0      	bne.n	800a4fa <quorem+0xea>
 800a518:	3c01      	subs	r4, #1
 800a51a:	e7eb      	b.n	800a4f4 <quorem+0xe4>
 800a51c:	2000      	movs	r0, #0
 800a51e:	e7ee      	b.n	800a4fe <quorem+0xee>

0800a520 <_dtoa_r>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	ed2d 8b04 	vpush	{d8-d9}
 800a528:	69c5      	ldr	r5, [r0, #28]
 800a52a:	b093      	sub	sp, #76	; 0x4c
 800a52c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a530:	ec57 6b10 	vmov	r6, r7, d0
 800a534:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a538:	9107      	str	r1, [sp, #28]
 800a53a:	4604      	mov	r4, r0
 800a53c:	920a      	str	r2, [sp, #40]	; 0x28
 800a53e:	930d      	str	r3, [sp, #52]	; 0x34
 800a540:	b975      	cbnz	r5, 800a560 <_dtoa_r+0x40>
 800a542:	2010      	movs	r0, #16
 800a544:	f7fd fe3a 	bl	80081bc <malloc>
 800a548:	4602      	mov	r2, r0
 800a54a:	61e0      	str	r0, [r4, #28]
 800a54c:	b920      	cbnz	r0, 800a558 <_dtoa_r+0x38>
 800a54e:	4bae      	ldr	r3, [pc, #696]	; (800a808 <_dtoa_r+0x2e8>)
 800a550:	21ef      	movs	r1, #239	; 0xef
 800a552:	48ae      	ldr	r0, [pc, #696]	; (800a80c <_dtoa_r+0x2ec>)
 800a554:	f7ff ff3e 	bl	800a3d4 <__assert_func>
 800a558:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a55c:	6005      	str	r5, [r0, #0]
 800a55e:	60c5      	str	r5, [r0, #12]
 800a560:	69e3      	ldr	r3, [r4, #28]
 800a562:	6819      	ldr	r1, [r3, #0]
 800a564:	b151      	cbz	r1, 800a57c <_dtoa_r+0x5c>
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	604a      	str	r2, [r1, #4]
 800a56a:	2301      	movs	r3, #1
 800a56c:	4093      	lsls	r3, r2
 800a56e:	608b      	str	r3, [r1, #8]
 800a570:	4620      	mov	r0, r4
 800a572:	f001 f9bd 	bl	800b8f0 <_Bfree>
 800a576:	69e3      	ldr	r3, [r4, #28]
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	1e3b      	subs	r3, r7, #0
 800a57e:	bfbb      	ittet	lt
 800a580:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a584:	9303      	strlt	r3, [sp, #12]
 800a586:	2300      	movge	r3, #0
 800a588:	2201      	movlt	r2, #1
 800a58a:	bfac      	ite	ge
 800a58c:	f8c8 3000 	strge.w	r3, [r8]
 800a590:	f8c8 2000 	strlt.w	r2, [r8]
 800a594:	4b9e      	ldr	r3, [pc, #632]	; (800a810 <_dtoa_r+0x2f0>)
 800a596:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a59a:	ea33 0308 	bics.w	r3, r3, r8
 800a59e:	d11b      	bne.n	800a5d8 <_dtoa_r+0xb8>
 800a5a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a5ac:	4333      	orrs	r3, r6
 800a5ae:	f000 8593 	beq.w	800b0d8 <_dtoa_r+0xbb8>
 800a5b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b4:	b963      	cbnz	r3, 800a5d0 <_dtoa_r+0xb0>
 800a5b6:	4b97      	ldr	r3, [pc, #604]	; (800a814 <_dtoa_r+0x2f4>)
 800a5b8:	e027      	b.n	800a60a <_dtoa_r+0xea>
 800a5ba:	4b97      	ldr	r3, [pc, #604]	; (800a818 <_dtoa_r+0x2f8>)
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	9800      	ldr	r0, [sp, #0]
 800a5c6:	b013      	add	sp, #76	; 0x4c
 800a5c8:	ecbd 8b04 	vpop	{d8-d9}
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	4b90      	ldr	r3, [pc, #576]	; (800a814 <_dtoa_r+0x2f4>)
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	3303      	adds	r3, #3
 800a5d6:	e7f3      	b.n	800a5c0 <_dtoa_r+0xa0>
 800a5d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	ec51 0b17 	vmov	r0, r1, d7
 800a5e2:	eeb0 8a47 	vmov.f32	s16, s14
 800a5e6:	eef0 8a67 	vmov.f32	s17, s15
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f7f6 fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5f0:	4681      	mov	r9, r0
 800a5f2:	b160      	cbz	r0, 800a60e <_dtoa_r+0xee>
 800a5f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8568 	beq.w	800b0d2 <_dtoa_r+0xbb2>
 800a602:	4b86      	ldr	r3, [pc, #536]	; (800a81c <_dtoa_r+0x2fc>)
 800a604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	3b01      	subs	r3, #1
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	e7da      	b.n	800a5c4 <_dtoa_r+0xa4>
 800a60e:	aa10      	add	r2, sp, #64	; 0x40
 800a610:	a911      	add	r1, sp, #68	; 0x44
 800a612:	4620      	mov	r0, r4
 800a614:	eeb0 0a48 	vmov.f32	s0, s16
 800a618:	eef0 0a68 	vmov.f32	s1, s17
 800a61c:	f001 fd04 	bl	800c028 <__d2b>
 800a620:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a624:	4682      	mov	sl, r0
 800a626:	2d00      	cmp	r5, #0
 800a628:	d07f      	beq.n	800a72a <_dtoa_r+0x20a>
 800a62a:	ee18 3a90 	vmov	r3, s17
 800a62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a632:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a636:	ec51 0b18 	vmov	r0, r1, d8
 800a63a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a63e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a642:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a646:	4619      	mov	r1, r3
 800a648:	2200      	movs	r2, #0
 800a64a:	4b75      	ldr	r3, [pc, #468]	; (800a820 <_dtoa_r+0x300>)
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	a367      	add	r3, pc, #412	; (adr r3, 800a7f0 <_dtoa_r+0x2d0>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f7f5 ffd7 	bl	8000608 <__aeabi_dmul>
 800a65a:	a367      	add	r3, pc, #412	; (adr r3, 800a7f8 <_dtoa_r+0x2d8>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f7f5 fe1c 	bl	800029c <__adddf3>
 800a664:	4606      	mov	r6, r0
 800a666:	4628      	mov	r0, r5
 800a668:	460f      	mov	r7, r1
 800a66a:	f7f5 ff63 	bl	8000534 <__aeabi_i2d>
 800a66e:	a364      	add	r3, pc, #400	; (adr r3, 800a800 <_dtoa_r+0x2e0>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f7f5 ffc8 	bl	8000608 <__aeabi_dmul>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4630      	mov	r0, r6
 800a67e:	4639      	mov	r1, r7
 800a680:	f7f5 fe0c 	bl	800029c <__adddf3>
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	f7f6 fa6e 	bl	8000b68 <__aeabi_d2iz>
 800a68c:	2200      	movs	r2, #0
 800a68e:	4683      	mov	fp, r0
 800a690:	2300      	movs	r3, #0
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f6 fa29 	bl	8000aec <__aeabi_dcmplt>
 800a69a:	b148      	cbz	r0, 800a6b0 <_dtoa_r+0x190>
 800a69c:	4658      	mov	r0, fp
 800a69e:	f7f5 ff49 	bl	8000534 <__aeabi_i2d>
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	f7f6 fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6aa:	b908      	cbnz	r0, 800a6b0 <_dtoa_r+0x190>
 800a6ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6b0:	f1bb 0f16 	cmp.w	fp, #22
 800a6b4:	d857      	bhi.n	800a766 <_dtoa_r+0x246>
 800a6b6:	4b5b      	ldr	r3, [pc, #364]	; (800a824 <_dtoa_r+0x304>)
 800a6b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	ec51 0b18 	vmov	r0, r1, d8
 800a6c4:	f7f6 fa12 	bl	8000aec <__aeabi_dcmplt>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d04e      	beq.n	800a76a <_dtoa_r+0x24a>
 800a6cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6d6:	1b5b      	subs	r3, r3, r5
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	bf45      	ittet	mi
 800a6dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6e0:	9305      	strmi	r3, [sp, #20]
 800a6e2:	2300      	movpl	r3, #0
 800a6e4:	2300      	movmi	r3, #0
 800a6e6:	9206      	str	r2, [sp, #24]
 800a6e8:	bf54      	ite	pl
 800a6ea:	9305      	strpl	r3, [sp, #20]
 800a6ec:	9306      	strmi	r3, [sp, #24]
 800a6ee:	f1bb 0f00 	cmp.w	fp, #0
 800a6f2:	db3c      	blt.n	800a76e <_dtoa_r+0x24e>
 800a6f4:	9b06      	ldr	r3, [sp, #24]
 800a6f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a6fa:	445b      	add	r3, fp
 800a6fc:	9306      	str	r3, [sp, #24]
 800a6fe:	2300      	movs	r3, #0
 800a700:	9308      	str	r3, [sp, #32]
 800a702:	9b07      	ldr	r3, [sp, #28]
 800a704:	2b09      	cmp	r3, #9
 800a706:	d868      	bhi.n	800a7da <_dtoa_r+0x2ba>
 800a708:	2b05      	cmp	r3, #5
 800a70a:	bfc4      	itt	gt
 800a70c:	3b04      	subgt	r3, #4
 800a70e:	9307      	strgt	r3, [sp, #28]
 800a710:	9b07      	ldr	r3, [sp, #28]
 800a712:	f1a3 0302 	sub.w	r3, r3, #2
 800a716:	bfcc      	ite	gt
 800a718:	2500      	movgt	r5, #0
 800a71a:	2501      	movle	r5, #1
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	f200 8085 	bhi.w	800a82c <_dtoa_r+0x30c>
 800a722:	e8df f003 	tbb	[pc, r3]
 800a726:	3b2e      	.short	0x3b2e
 800a728:	5839      	.short	0x5839
 800a72a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a72e:	441d      	add	r5, r3
 800a730:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a734:	2b20      	cmp	r3, #32
 800a736:	bfc1      	itttt	gt
 800a738:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a73c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a740:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a744:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a748:	bfd6      	itet	le
 800a74a:	f1c3 0320 	rsble	r3, r3, #32
 800a74e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a752:	fa06 f003 	lslle.w	r0, r6, r3
 800a756:	f7f5 fedd 	bl	8000514 <__aeabi_ui2d>
 800a75a:	2201      	movs	r2, #1
 800a75c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a760:	3d01      	subs	r5, #1
 800a762:	920e      	str	r2, [sp, #56]	; 0x38
 800a764:	e76f      	b.n	800a646 <_dtoa_r+0x126>
 800a766:	2301      	movs	r3, #1
 800a768:	e7b3      	b.n	800a6d2 <_dtoa_r+0x1b2>
 800a76a:	900c      	str	r0, [sp, #48]	; 0x30
 800a76c:	e7b2      	b.n	800a6d4 <_dtoa_r+0x1b4>
 800a76e:	9b05      	ldr	r3, [sp, #20]
 800a770:	eba3 030b 	sub.w	r3, r3, fp
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	f1cb 0300 	rsb	r3, fp, #0
 800a77a:	9308      	str	r3, [sp, #32]
 800a77c:	2300      	movs	r3, #0
 800a77e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a780:	e7bf      	b.n	800a702 <_dtoa_r+0x1e2>
 800a782:	2300      	movs	r3, #0
 800a784:	9309      	str	r3, [sp, #36]	; 0x24
 800a786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dc52      	bgt.n	800a832 <_dtoa_r+0x312>
 800a78c:	2301      	movs	r3, #1
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	461a      	mov	r2, r3
 800a794:	920a      	str	r2, [sp, #40]	; 0x28
 800a796:	e00b      	b.n	800a7b0 <_dtoa_r+0x290>
 800a798:	2301      	movs	r3, #1
 800a79a:	e7f3      	b.n	800a784 <_dtoa_r+0x264>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a2:	445b      	add	r3, fp
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	bfb8      	it	lt
 800a7ae:	2301      	movlt	r3, #1
 800a7b0:	69e0      	ldr	r0, [r4, #28]
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	f102 0614 	add.w	r6, r2, #20
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	d93d      	bls.n	800a83a <_dtoa_r+0x31a>
 800a7be:	6041      	str	r1, [r0, #4]
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f001 f855 	bl	800b870 <_Balloc>
 800a7c6:	9000      	str	r0, [sp, #0]
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d139      	bne.n	800a840 <_dtoa_r+0x320>
 800a7cc:	4b16      	ldr	r3, [pc, #88]	; (800a828 <_dtoa_r+0x308>)
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	f240 11af 	movw	r1, #431	; 0x1af
 800a7d4:	e6bd      	b.n	800a552 <_dtoa_r+0x32>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e7e1      	b.n	800a79e <_dtoa_r+0x27e>
 800a7da:	2501      	movs	r5, #1
 800a7dc:	2300      	movs	r3, #0
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	9509      	str	r5, [sp, #36]	; 0x24
 800a7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2312      	movs	r3, #18
 800a7ee:	e7d1      	b.n	800a794 <_dtoa_r+0x274>
 800a7f0:	636f4361 	.word	0x636f4361
 800a7f4:	3fd287a7 	.word	0x3fd287a7
 800a7f8:	8b60c8b3 	.word	0x8b60c8b3
 800a7fc:	3fc68a28 	.word	0x3fc68a28
 800a800:	509f79fb 	.word	0x509f79fb
 800a804:	3fd34413 	.word	0x3fd34413
 800a808:	0800ee51 	.word	0x0800ee51
 800a80c:	0800ef13 	.word	0x0800ef13
 800a810:	7ff00000 	.word	0x7ff00000
 800a814:	0800ef0f 	.word	0x0800ef0f
 800a818:	0800ef06 	.word	0x0800ef06
 800a81c:	0800ee29 	.word	0x0800ee29
 800a820:	3ff80000 	.word	0x3ff80000
 800a824:	0800f060 	.word	0x0800f060
 800a828:	0800ef6b 	.word	0x0800ef6b
 800a82c:	2301      	movs	r3, #1
 800a82e:	9309      	str	r3, [sp, #36]	; 0x24
 800a830:	e7d7      	b.n	800a7e2 <_dtoa_r+0x2c2>
 800a832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	9304      	str	r3, [sp, #16]
 800a838:	e7ba      	b.n	800a7b0 <_dtoa_r+0x290>
 800a83a:	3101      	adds	r1, #1
 800a83c:	0052      	lsls	r2, r2, #1
 800a83e:	e7ba      	b.n	800a7b6 <_dtoa_r+0x296>
 800a840:	69e3      	ldr	r3, [r4, #28]
 800a842:	9a00      	ldr	r2, [sp, #0]
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	2b0e      	cmp	r3, #14
 800a84a:	f200 80a8 	bhi.w	800a99e <_dtoa_r+0x47e>
 800a84e:	2d00      	cmp	r5, #0
 800a850:	f000 80a5 	beq.w	800a99e <_dtoa_r+0x47e>
 800a854:	f1bb 0f00 	cmp.w	fp, #0
 800a858:	dd38      	ble.n	800a8cc <_dtoa_r+0x3ac>
 800a85a:	4bc0      	ldr	r3, [pc, #768]	; (800ab5c <_dtoa_r+0x63c>)
 800a85c:	f00b 020f 	and.w	r2, fp, #15
 800a860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a864:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a868:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a86c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a870:	d019      	beq.n	800a8a6 <_dtoa_r+0x386>
 800a872:	4bbb      	ldr	r3, [pc, #748]	; (800ab60 <_dtoa_r+0x640>)
 800a874:	ec51 0b18 	vmov	r0, r1, d8
 800a878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a87c:	f7f5 ffee 	bl	800085c <__aeabi_ddiv>
 800a880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a884:	f008 080f 	and.w	r8, r8, #15
 800a888:	2503      	movs	r5, #3
 800a88a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ab60 <_dtoa_r+0x640>
 800a88e:	f1b8 0f00 	cmp.w	r8, #0
 800a892:	d10a      	bne.n	800a8aa <_dtoa_r+0x38a>
 800a894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	f7f5 ffde 	bl	800085c <__aeabi_ddiv>
 800a8a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a4:	e02b      	b.n	800a8fe <_dtoa_r+0x3de>
 800a8a6:	2502      	movs	r5, #2
 800a8a8:	e7ef      	b.n	800a88a <_dtoa_r+0x36a>
 800a8aa:	f018 0f01 	tst.w	r8, #1
 800a8ae:	d008      	beq.n	800a8c2 <_dtoa_r+0x3a2>
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a8b8:	f7f5 fea6 	bl	8000608 <__aeabi_dmul>
 800a8bc:	3501      	adds	r5, #1
 800a8be:	4606      	mov	r6, r0
 800a8c0:	460f      	mov	r7, r1
 800a8c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a8c6:	f109 0908 	add.w	r9, r9, #8
 800a8ca:	e7e0      	b.n	800a88e <_dtoa_r+0x36e>
 800a8cc:	f000 809f 	beq.w	800aa0e <_dtoa_r+0x4ee>
 800a8d0:	f1cb 0600 	rsb	r6, fp, #0
 800a8d4:	4ba1      	ldr	r3, [pc, #644]	; (800ab5c <_dtoa_r+0x63c>)
 800a8d6:	4fa2      	ldr	r7, [pc, #648]	; (800ab60 <_dtoa_r+0x640>)
 800a8d8:	f006 020f 	and.w	r2, r6, #15
 800a8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	ec51 0b18 	vmov	r0, r1, d8
 800a8e8:	f7f5 fe8e 	bl	8000608 <__aeabi_dmul>
 800a8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f0:	1136      	asrs	r6, r6, #4
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2502      	movs	r5, #2
 800a8f6:	2e00      	cmp	r6, #0
 800a8f8:	d17e      	bne.n	800a9f8 <_dtoa_r+0x4d8>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1d0      	bne.n	800a8a0 <_dtoa_r+0x380>
 800a8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a900:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8084 	beq.w	800aa12 <_dtoa_r+0x4f2>
 800a90a:	4b96      	ldr	r3, [pc, #600]	; (800ab64 <_dtoa_r+0x644>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f7f6 f8eb 	bl	8000aec <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d07b      	beq.n	800aa12 <_dtoa_r+0x4f2>
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d078      	beq.n	800aa12 <_dtoa_r+0x4f2>
 800a920:	9b01      	ldr	r3, [sp, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd39      	ble.n	800a99a <_dtoa_r+0x47a>
 800a926:	4b90      	ldr	r3, [pc, #576]	; (800ab68 <_dtoa_r+0x648>)
 800a928:	2200      	movs	r2, #0
 800a92a:	4640      	mov	r0, r8
 800a92c:	4649      	mov	r1, r9
 800a92e:	f7f5 fe6b 	bl	8000608 <__aeabi_dmul>
 800a932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a936:	9e01      	ldr	r6, [sp, #4]
 800a938:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a93c:	3501      	adds	r5, #1
 800a93e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a942:	4628      	mov	r0, r5
 800a944:	f7f5 fdf6 	bl	8000534 <__aeabi_i2d>
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	f7f5 fe5c 	bl	8000608 <__aeabi_dmul>
 800a950:	4b86      	ldr	r3, [pc, #536]	; (800ab6c <_dtoa_r+0x64c>)
 800a952:	2200      	movs	r2, #0
 800a954:	f7f5 fca2 	bl	800029c <__adddf3>
 800a958:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	2e00      	cmp	r6, #0
 800a964:	d158      	bne.n	800aa18 <_dtoa_r+0x4f8>
 800a966:	4b82      	ldr	r3, [pc, #520]	; (800ab70 <_dtoa_r+0x650>)
 800a968:	2200      	movs	r2, #0
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	f7f5 fc93 	bl	8000298 <__aeabi_dsub>
 800a972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	f7f6 f8d5 	bl	8000b28 <__aeabi_dcmpgt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f040 8296 	bne.w	800aeb0 <_dtoa_r+0x990>
 800a984:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a988:	4640      	mov	r0, r8
 800a98a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f6 f8ac 	bl	8000aec <__aeabi_dcmplt>
 800a994:	2800      	cmp	r0, #0
 800a996:	f040 8289 	bne.w	800aeac <_dtoa_r+0x98c>
 800a99a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a99e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f2c0 814e 	blt.w	800ac42 <_dtoa_r+0x722>
 800a9a6:	f1bb 0f0e 	cmp.w	fp, #14
 800a9aa:	f300 814a 	bgt.w	800ac42 <_dtoa_r+0x722>
 800a9ae:	4b6b      	ldr	r3, [pc, #428]	; (800ab5c <_dtoa_r+0x63c>)
 800a9b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f280 80dc 	bge.w	800ab78 <_dtoa_r+0x658>
 800a9c0:	9b04      	ldr	r3, [sp, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f300 80d8 	bgt.w	800ab78 <_dtoa_r+0x658>
 800a9c8:	f040 826f 	bne.w	800aeaa <_dtoa_r+0x98a>
 800a9cc:	4b68      	ldr	r3, [pc, #416]	; (800ab70 <_dtoa_r+0x650>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9dc:	f7f6 f89a 	bl	8000b14 <__aeabi_dcmpge>
 800a9e0:	9e04      	ldr	r6, [sp, #16]
 800a9e2:	4637      	mov	r7, r6
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	f040 8245 	bne.w	800ae74 <_dtoa_r+0x954>
 800a9ea:	9d00      	ldr	r5, [sp, #0]
 800a9ec:	2331      	movs	r3, #49	; 0x31
 800a9ee:	f805 3b01 	strb.w	r3, [r5], #1
 800a9f2:	f10b 0b01 	add.w	fp, fp, #1
 800a9f6:	e241      	b.n	800ae7c <_dtoa_r+0x95c>
 800a9f8:	07f2      	lsls	r2, r6, #31
 800a9fa:	d505      	bpl.n	800aa08 <_dtoa_r+0x4e8>
 800a9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa00:	f7f5 fe02 	bl	8000608 <__aeabi_dmul>
 800aa04:	3501      	adds	r5, #1
 800aa06:	2301      	movs	r3, #1
 800aa08:	1076      	asrs	r6, r6, #1
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	e773      	b.n	800a8f6 <_dtoa_r+0x3d6>
 800aa0e:	2502      	movs	r5, #2
 800aa10:	e775      	b.n	800a8fe <_dtoa_r+0x3de>
 800aa12:	9e04      	ldr	r6, [sp, #16]
 800aa14:	465f      	mov	r7, fp
 800aa16:	e792      	b.n	800a93e <_dtoa_r+0x41e>
 800aa18:	9900      	ldr	r1, [sp, #0]
 800aa1a:	4b50      	ldr	r3, [pc, #320]	; (800ab5c <_dtoa_r+0x63c>)
 800aa1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa20:	4431      	add	r1, r6
 800aa22:	9102      	str	r1, [sp, #8]
 800aa24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa26:	eeb0 9a47 	vmov.f32	s18, s14
 800aa2a:	eef0 9a67 	vmov.f32	s19, s15
 800aa2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa36:	2900      	cmp	r1, #0
 800aa38:	d044      	beq.n	800aac4 <_dtoa_r+0x5a4>
 800aa3a:	494e      	ldr	r1, [pc, #312]	; (800ab74 <_dtoa_r+0x654>)
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	f7f5 ff0d 	bl	800085c <__aeabi_ddiv>
 800aa42:	ec53 2b19 	vmov	r2, r3, d9
 800aa46:	f7f5 fc27 	bl	8000298 <__aeabi_dsub>
 800aa4a:	9d00      	ldr	r5, [sp, #0]
 800aa4c:	ec41 0b19 	vmov	d9, r0, r1
 800aa50:	4649      	mov	r1, r9
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7f6 f888 	bl	8000b68 <__aeabi_d2iz>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	f7f5 fd6b 	bl	8000534 <__aeabi_i2d>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4640      	mov	r0, r8
 800aa64:	4649      	mov	r1, r9
 800aa66:	f7f5 fc17 	bl	8000298 <__aeabi_dsub>
 800aa6a:	3630      	adds	r6, #48	; 0x30
 800aa6c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa70:	ec53 2b19 	vmov	r2, r3, d9
 800aa74:	4680      	mov	r8, r0
 800aa76:	4689      	mov	r9, r1
 800aa78:	f7f6 f838 	bl	8000aec <__aeabi_dcmplt>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d164      	bne.n	800ab4a <_dtoa_r+0x62a>
 800aa80:	4642      	mov	r2, r8
 800aa82:	464b      	mov	r3, r9
 800aa84:	4937      	ldr	r1, [pc, #220]	; (800ab64 <_dtoa_r+0x644>)
 800aa86:	2000      	movs	r0, #0
 800aa88:	f7f5 fc06 	bl	8000298 <__aeabi_dsub>
 800aa8c:	ec53 2b19 	vmov	r2, r3, d9
 800aa90:	f7f6 f82c 	bl	8000aec <__aeabi_dcmplt>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f040 80b6 	bne.w	800ac06 <_dtoa_r+0x6e6>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	429d      	cmp	r5, r3
 800aa9e:	f43f af7c 	beq.w	800a99a <_dtoa_r+0x47a>
 800aaa2:	4b31      	ldr	r3, [pc, #196]	; (800ab68 <_dtoa_r+0x648>)
 800aaa4:	ec51 0b19 	vmov	r0, r1, d9
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f7f5 fdad 	bl	8000608 <__aeabi_dmul>
 800aaae:	4b2e      	ldr	r3, [pc, #184]	; (800ab68 <_dtoa_r+0x648>)
 800aab0:	ec41 0b19 	vmov	d9, r0, r1
 800aab4:	2200      	movs	r2, #0
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f5 fda5 	bl	8000608 <__aeabi_dmul>
 800aabe:	4680      	mov	r8, r0
 800aac0:	4689      	mov	r9, r1
 800aac2:	e7c5      	b.n	800aa50 <_dtoa_r+0x530>
 800aac4:	ec51 0b17 	vmov	r0, r1, d7
 800aac8:	f7f5 fd9e 	bl	8000608 <__aeabi_dmul>
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	9d00      	ldr	r5, [sp, #0]
 800aad0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aad2:	ec41 0b19 	vmov	d9, r0, r1
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	f7f6 f845 	bl	8000b68 <__aeabi_d2iz>
 800aade:	4606      	mov	r6, r0
 800aae0:	f7f5 fd28 	bl	8000534 <__aeabi_i2d>
 800aae4:	3630      	adds	r6, #48	; 0x30
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f5 fbd3 	bl	8000298 <__aeabi_dsub>
 800aaf2:	f805 6b01 	strb.w	r6, [r5], #1
 800aaf6:	9b02      	ldr	r3, [sp, #8]
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	4680      	mov	r8, r0
 800aafc:	4689      	mov	r9, r1
 800aafe:	f04f 0200 	mov.w	r2, #0
 800ab02:	d124      	bne.n	800ab4e <_dtoa_r+0x62e>
 800ab04:	4b1b      	ldr	r3, [pc, #108]	; (800ab74 <_dtoa_r+0x654>)
 800ab06:	ec51 0b19 	vmov	r0, r1, d9
 800ab0a:	f7f5 fbc7 	bl	800029c <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4640      	mov	r0, r8
 800ab14:	4649      	mov	r1, r9
 800ab16:	f7f6 f807 	bl	8000b28 <__aeabi_dcmpgt>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d173      	bne.n	800ac06 <_dtoa_r+0x6e6>
 800ab1e:	ec53 2b19 	vmov	r2, r3, d9
 800ab22:	4914      	ldr	r1, [pc, #80]	; (800ab74 <_dtoa_r+0x654>)
 800ab24:	2000      	movs	r0, #0
 800ab26:	f7f5 fbb7 	bl	8000298 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 ffdb 	bl	8000aec <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f af2f 	beq.w	800a99a <_dtoa_r+0x47a>
 800ab3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab3e:	1e6b      	subs	r3, r5, #1
 800ab40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab46:	2b30      	cmp	r3, #48	; 0x30
 800ab48:	d0f8      	beq.n	800ab3c <_dtoa_r+0x61c>
 800ab4a:	46bb      	mov	fp, r7
 800ab4c:	e04a      	b.n	800abe4 <_dtoa_r+0x6c4>
 800ab4e:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <_dtoa_r+0x648>)
 800ab50:	f7f5 fd5a 	bl	8000608 <__aeabi_dmul>
 800ab54:	4680      	mov	r8, r0
 800ab56:	4689      	mov	r9, r1
 800ab58:	e7bd      	b.n	800aad6 <_dtoa_r+0x5b6>
 800ab5a:	bf00      	nop
 800ab5c:	0800f060 	.word	0x0800f060
 800ab60:	0800f038 	.word	0x0800f038
 800ab64:	3ff00000 	.word	0x3ff00000
 800ab68:	40240000 	.word	0x40240000
 800ab6c:	401c0000 	.word	0x401c0000
 800ab70:	40140000 	.word	0x40140000
 800ab74:	3fe00000 	.word	0x3fe00000
 800ab78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab7c:	9d00      	ldr	r5, [sp, #0]
 800ab7e:	4642      	mov	r2, r8
 800ab80:	464b      	mov	r3, r9
 800ab82:	4630      	mov	r0, r6
 800ab84:	4639      	mov	r1, r7
 800ab86:	f7f5 fe69 	bl	800085c <__aeabi_ddiv>
 800ab8a:	f7f5 ffed 	bl	8000b68 <__aeabi_d2iz>
 800ab8e:	9001      	str	r0, [sp, #4]
 800ab90:	f7f5 fcd0 	bl	8000534 <__aeabi_i2d>
 800ab94:	4642      	mov	r2, r8
 800ab96:	464b      	mov	r3, r9
 800ab98:	f7f5 fd36 	bl	8000608 <__aeabi_dmul>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4630      	mov	r0, r6
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 fb78 	bl	8000298 <__aeabi_dsub>
 800aba8:	9e01      	ldr	r6, [sp, #4]
 800abaa:	9f04      	ldr	r7, [sp, #16]
 800abac:	3630      	adds	r6, #48	; 0x30
 800abae:	f805 6b01 	strb.w	r6, [r5], #1
 800abb2:	9e00      	ldr	r6, [sp, #0]
 800abb4:	1bae      	subs	r6, r5, r6
 800abb6:	42b7      	cmp	r7, r6
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	d134      	bne.n	800ac28 <_dtoa_r+0x708>
 800abbe:	f7f5 fb6d 	bl	800029c <__adddf3>
 800abc2:	4642      	mov	r2, r8
 800abc4:	464b      	mov	r3, r9
 800abc6:	4606      	mov	r6, r0
 800abc8:	460f      	mov	r7, r1
 800abca:	f7f5 ffad 	bl	8000b28 <__aeabi_dcmpgt>
 800abce:	b9c8      	cbnz	r0, 800ac04 <_dtoa_r+0x6e4>
 800abd0:	4642      	mov	r2, r8
 800abd2:	464b      	mov	r3, r9
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f5 ff7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800abdc:	b110      	cbz	r0, 800abe4 <_dtoa_r+0x6c4>
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	07db      	lsls	r3, r3, #31
 800abe2:	d40f      	bmi.n	800ac04 <_dtoa_r+0x6e4>
 800abe4:	4651      	mov	r1, sl
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fe82 	bl	800b8f0 <_Bfree>
 800abec:	2300      	movs	r3, #0
 800abee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abf0:	702b      	strb	r3, [r5, #0]
 800abf2:	f10b 0301 	add.w	r3, fp, #1
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f43f ace2 	beq.w	800a5c4 <_dtoa_r+0xa4>
 800ac00:	601d      	str	r5, [r3, #0]
 800ac02:	e4df      	b.n	800a5c4 <_dtoa_r+0xa4>
 800ac04:	465f      	mov	r7, fp
 800ac06:	462b      	mov	r3, r5
 800ac08:	461d      	mov	r5, r3
 800ac0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac0e:	2a39      	cmp	r2, #57	; 0x39
 800ac10:	d106      	bne.n	800ac20 <_dtoa_r+0x700>
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d1f7      	bne.n	800ac08 <_dtoa_r+0x6e8>
 800ac18:	9900      	ldr	r1, [sp, #0]
 800ac1a:	2230      	movs	r2, #48	; 0x30
 800ac1c:	3701      	adds	r7, #1
 800ac1e:	700a      	strb	r2, [r1, #0]
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	3201      	adds	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e790      	b.n	800ab4a <_dtoa_r+0x62a>
 800ac28:	4ba3      	ldr	r3, [pc, #652]	; (800aeb8 <_dtoa_r+0x998>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	2200      	movs	r2, #0
 800ac32:	2300      	movs	r3, #0
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	f7f5 ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d09e      	beq.n	800ab7e <_dtoa_r+0x65e>
 800ac40:	e7d0      	b.n	800abe4 <_dtoa_r+0x6c4>
 800ac42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	f000 80ca 	beq.w	800adde <_dtoa_r+0x8be>
 800ac4a:	9a07      	ldr	r2, [sp, #28]
 800ac4c:	2a01      	cmp	r2, #1
 800ac4e:	f300 80ad 	bgt.w	800adac <_dtoa_r+0x88c>
 800ac52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	f000 80a5 	beq.w	800ada4 <_dtoa_r+0x884>
 800ac5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac5e:	9e08      	ldr	r6, [sp, #32]
 800ac60:	9d05      	ldr	r5, [sp, #20]
 800ac62:	9a05      	ldr	r2, [sp, #20]
 800ac64:	441a      	add	r2, r3
 800ac66:	9205      	str	r2, [sp, #20]
 800ac68:	9a06      	ldr	r2, [sp, #24]
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	441a      	add	r2, r3
 800ac6e:	4620      	mov	r0, r4
 800ac70:	9206      	str	r2, [sp, #24]
 800ac72:	f000 ff3d 	bl	800baf0 <__i2b>
 800ac76:	4607      	mov	r7, r0
 800ac78:	b165      	cbz	r5, 800ac94 <_dtoa_r+0x774>
 800ac7a:	9b06      	ldr	r3, [sp, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	dd09      	ble.n	800ac94 <_dtoa_r+0x774>
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	9a05      	ldr	r2, [sp, #20]
 800ac84:	bfa8      	it	ge
 800ac86:	462b      	movge	r3, r5
 800ac88:	1ad2      	subs	r2, r2, r3
 800ac8a:	9205      	str	r2, [sp, #20]
 800ac8c:	9a06      	ldr	r2, [sp, #24]
 800ac8e:	1aed      	subs	r5, r5, r3
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	9306      	str	r3, [sp, #24]
 800ac94:	9b08      	ldr	r3, [sp, #32]
 800ac96:	b1f3      	cbz	r3, 800acd6 <_dtoa_r+0x7b6>
 800ac98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 80a3 	beq.w	800ade6 <_dtoa_r+0x8c6>
 800aca0:	2e00      	cmp	r6, #0
 800aca2:	dd10      	ble.n	800acc6 <_dtoa_r+0x7a6>
 800aca4:	4639      	mov	r1, r7
 800aca6:	4632      	mov	r2, r6
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 ffe1 	bl	800bc70 <__pow5mult>
 800acae:	4652      	mov	r2, sl
 800acb0:	4601      	mov	r1, r0
 800acb2:	4607      	mov	r7, r0
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 ff31 	bl	800bb1c <__multiply>
 800acba:	4651      	mov	r1, sl
 800acbc:	4680      	mov	r8, r0
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 fe16 	bl	800b8f0 <_Bfree>
 800acc4:	46c2      	mov	sl, r8
 800acc6:	9b08      	ldr	r3, [sp, #32]
 800acc8:	1b9a      	subs	r2, r3, r6
 800acca:	d004      	beq.n	800acd6 <_dtoa_r+0x7b6>
 800accc:	4651      	mov	r1, sl
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 ffce 	bl	800bc70 <__pow5mult>
 800acd4:	4682      	mov	sl, r0
 800acd6:	2101      	movs	r1, #1
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 ff09 	bl	800baf0 <__i2b>
 800acde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	4606      	mov	r6, r0
 800ace4:	f340 8081 	ble.w	800adea <_dtoa_r+0x8ca>
 800ace8:	461a      	mov	r2, r3
 800acea:	4601      	mov	r1, r0
 800acec:	4620      	mov	r0, r4
 800acee:	f000 ffbf 	bl	800bc70 <__pow5mult>
 800acf2:	9b07      	ldr	r3, [sp, #28]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	4606      	mov	r6, r0
 800acf8:	dd7a      	ble.n	800adf0 <_dtoa_r+0x8d0>
 800acfa:	f04f 0800 	mov.w	r8, #0
 800acfe:	6933      	ldr	r3, [r6, #16]
 800ad00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad04:	6918      	ldr	r0, [r3, #16]
 800ad06:	f000 fea5 	bl	800ba54 <__hi0bits>
 800ad0a:	f1c0 0020 	rsb	r0, r0, #32
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	4418      	add	r0, r3
 800ad12:	f010 001f 	ands.w	r0, r0, #31
 800ad16:	f000 8094 	beq.w	800ae42 <_dtoa_r+0x922>
 800ad1a:	f1c0 0320 	rsb	r3, r0, #32
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	f340 8085 	ble.w	800ae2e <_dtoa_r+0x90e>
 800ad24:	9b05      	ldr	r3, [sp, #20]
 800ad26:	f1c0 001c 	rsb	r0, r0, #28
 800ad2a:	4403      	add	r3, r0
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	4403      	add	r3, r0
 800ad32:	4405      	add	r5, r0
 800ad34:	9306      	str	r3, [sp, #24]
 800ad36:	9b05      	ldr	r3, [sp, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dd05      	ble.n	800ad48 <_dtoa_r+0x828>
 800ad3c:	4651      	mov	r1, sl
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 ffef 	bl	800bd24 <__lshift>
 800ad46:	4682      	mov	sl, r0
 800ad48:	9b06      	ldr	r3, [sp, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x83a>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	461a      	mov	r2, r3
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 ffe6 	bl	800bd24 <__lshift>
 800ad58:	4606      	mov	r6, r0
 800ad5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d072      	beq.n	800ae46 <_dtoa_r+0x926>
 800ad60:	4631      	mov	r1, r6
 800ad62:	4650      	mov	r0, sl
 800ad64:	f001 f84a 	bl	800bdfc <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	da6c      	bge.n	800ae46 <_dtoa_r+0x926>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4651      	mov	r1, sl
 800ad70:	220a      	movs	r2, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 fdde 	bl	800b934 <__multadd>
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad7e:	4682      	mov	sl, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 81b0 	beq.w	800b0e6 <_dtoa_r+0xbc6>
 800ad86:	2300      	movs	r3, #0
 800ad88:	4639      	mov	r1, r7
 800ad8a:	220a      	movs	r2, #10
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 fdd1 	bl	800b934 <__multadd>
 800ad92:	9b01      	ldr	r3, [sp, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	4607      	mov	r7, r0
 800ad98:	f300 8096 	bgt.w	800aec8 <_dtoa_r+0x9a8>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	dc59      	bgt.n	800ae56 <_dtoa_r+0x936>
 800ada2:	e091      	b.n	800aec8 <_dtoa_r+0x9a8>
 800ada4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ada6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adaa:	e758      	b.n	800ac5e <_dtoa_r+0x73e>
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	1e5e      	subs	r6, r3, #1
 800adb0:	9b08      	ldr	r3, [sp, #32]
 800adb2:	42b3      	cmp	r3, r6
 800adb4:	bfbf      	itttt	lt
 800adb6:	9b08      	ldrlt	r3, [sp, #32]
 800adb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800adba:	9608      	strlt	r6, [sp, #32]
 800adbc:	1af3      	sublt	r3, r6, r3
 800adbe:	bfb4      	ite	lt
 800adc0:	18d2      	addlt	r2, r2, r3
 800adc2:	1b9e      	subge	r6, r3, r6
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	bfbc      	itt	lt
 800adc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800adca:	2600      	movlt	r6, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	bfb7      	itett	lt
 800add0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800add4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800add8:	1a9d      	sublt	r5, r3, r2
 800adda:	2300      	movlt	r3, #0
 800addc:	e741      	b.n	800ac62 <_dtoa_r+0x742>
 800adde:	9e08      	ldr	r6, [sp, #32]
 800ade0:	9d05      	ldr	r5, [sp, #20]
 800ade2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ade4:	e748      	b.n	800ac78 <_dtoa_r+0x758>
 800ade6:	9a08      	ldr	r2, [sp, #32]
 800ade8:	e770      	b.n	800accc <_dtoa_r+0x7ac>
 800adea:	9b07      	ldr	r3, [sp, #28]
 800adec:	2b01      	cmp	r3, #1
 800adee:	dc19      	bgt.n	800ae24 <_dtoa_r+0x904>
 800adf0:	9b02      	ldr	r3, [sp, #8]
 800adf2:	b9bb      	cbnz	r3, 800ae24 <_dtoa_r+0x904>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adfa:	b99b      	cbnz	r3, 800ae24 <_dtoa_r+0x904>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae02:	0d1b      	lsrs	r3, r3, #20
 800ae04:	051b      	lsls	r3, r3, #20
 800ae06:	b183      	cbz	r3, 800ae2a <_dtoa_r+0x90a>
 800ae08:	9b05      	ldr	r3, [sp, #20]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	9305      	str	r3, [sp, #20]
 800ae0e:	9b06      	ldr	r3, [sp, #24]
 800ae10:	3301      	adds	r3, #1
 800ae12:	9306      	str	r3, [sp, #24]
 800ae14:	f04f 0801 	mov.w	r8, #1
 800ae18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f47f af6f 	bne.w	800acfe <_dtoa_r+0x7de>
 800ae20:	2001      	movs	r0, #1
 800ae22:	e774      	b.n	800ad0e <_dtoa_r+0x7ee>
 800ae24:	f04f 0800 	mov.w	r8, #0
 800ae28:	e7f6      	b.n	800ae18 <_dtoa_r+0x8f8>
 800ae2a:	4698      	mov	r8, r3
 800ae2c:	e7f4      	b.n	800ae18 <_dtoa_r+0x8f8>
 800ae2e:	d082      	beq.n	800ad36 <_dtoa_r+0x816>
 800ae30:	9a05      	ldr	r2, [sp, #20]
 800ae32:	331c      	adds	r3, #28
 800ae34:	441a      	add	r2, r3
 800ae36:	9205      	str	r2, [sp, #20]
 800ae38:	9a06      	ldr	r2, [sp, #24]
 800ae3a:	441a      	add	r2, r3
 800ae3c:	441d      	add	r5, r3
 800ae3e:	9206      	str	r2, [sp, #24]
 800ae40:	e779      	b.n	800ad36 <_dtoa_r+0x816>
 800ae42:	4603      	mov	r3, r0
 800ae44:	e7f4      	b.n	800ae30 <_dtoa_r+0x910>
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dc37      	bgt.n	800aebc <_dtoa_r+0x99c>
 800ae4c:	9b07      	ldr	r3, [sp, #28]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	dd34      	ble.n	800aebc <_dtoa_r+0x99c>
 800ae52:	9b04      	ldr	r3, [sp, #16]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	b963      	cbnz	r3, 800ae74 <_dtoa_r+0x954>
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	2205      	movs	r2, #5
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fd68 	bl	800b934 <__multadd>
 800ae64:	4601      	mov	r1, r0
 800ae66:	4606      	mov	r6, r0
 800ae68:	4650      	mov	r0, sl
 800ae6a:	f000 ffc7 	bl	800bdfc <__mcmp>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f73f adbb 	bgt.w	800a9ea <_dtoa_r+0x4ca>
 800ae74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae76:	9d00      	ldr	r5, [sp, #0]
 800ae78:	ea6f 0b03 	mvn.w	fp, r3
 800ae7c:	f04f 0800 	mov.w	r8, #0
 800ae80:	4631      	mov	r1, r6
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fd34 	bl	800b8f0 <_Bfree>
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	f43f aeab 	beq.w	800abe4 <_dtoa_r+0x6c4>
 800ae8e:	f1b8 0f00 	cmp.w	r8, #0
 800ae92:	d005      	beq.n	800aea0 <_dtoa_r+0x980>
 800ae94:	45b8      	cmp	r8, r7
 800ae96:	d003      	beq.n	800aea0 <_dtoa_r+0x980>
 800ae98:	4641      	mov	r1, r8
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fd28 	bl	800b8f0 <_Bfree>
 800aea0:	4639      	mov	r1, r7
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fd24 	bl	800b8f0 <_Bfree>
 800aea8:	e69c      	b.n	800abe4 <_dtoa_r+0x6c4>
 800aeaa:	2600      	movs	r6, #0
 800aeac:	4637      	mov	r7, r6
 800aeae:	e7e1      	b.n	800ae74 <_dtoa_r+0x954>
 800aeb0:	46bb      	mov	fp, r7
 800aeb2:	4637      	mov	r7, r6
 800aeb4:	e599      	b.n	800a9ea <_dtoa_r+0x4ca>
 800aeb6:	bf00      	nop
 800aeb8:	40240000 	.word	0x40240000
 800aebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 80c8 	beq.w	800b054 <_dtoa_r+0xb34>
 800aec4:	9b04      	ldr	r3, [sp, #16]
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	dd05      	ble.n	800aed8 <_dtoa_r+0x9b8>
 800aecc:	4639      	mov	r1, r7
 800aece:	462a      	mov	r2, r5
 800aed0:	4620      	mov	r0, r4
 800aed2:	f000 ff27 	bl	800bd24 <__lshift>
 800aed6:	4607      	mov	r7, r0
 800aed8:	f1b8 0f00 	cmp.w	r8, #0
 800aedc:	d05b      	beq.n	800af96 <_dtoa_r+0xa76>
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fcc5 	bl	800b870 <_Balloc>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b928      	cbnz	r0, 800aef6 <_dtoa_r+0x9d6>
 800aeea:	4b83      	ldr	r3, [pc, #524]	; (800b0f8 <_dtoa_r+0xbd8>)
 800aeec:	4602      	mov	r2, r0
 800aeee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aef2:	f7ff bb2e 	b.w	800a552 <_dtoa_r+0x32>
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	3202      	adds	r2, #2
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	f107 010c 	add.w	r1, r7, #12
 800af00:	300c      	adds	r0, #12
 800af02:	f7ff fa4a 	bl	800a39a <memcpy>
 800af06:	2201      	movs	r2, #1
 800af08:	4629      	mov	r1, r5
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 ff0a 	bl	800bd24 <__lshift>
 800af10:	9b00      	ldr	r3, [sp, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1a:	4413      	add	r3, r2
 800af1c:	9308      	str	r3, [sp, #32]
 800af1e:	9b02      	ldr	r3, [sp, #8]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	46b8      	mov	r8, r7
 800af26:	9306      	str	r3, [sp, #24]
 800af28:	4607      	mov	r7, r0
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	4631      	mov	r1, r6
 800af2e:	3b01      	subs	r3, #1
 800af30:	4650      	mov	r0, sl
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	f7ff fa6c 	bl	800a410 <quorem>
 800af38:	4641      	mov	r1, r8
 800af3a:	9002      	str	r0, [sp, #8]
 800af3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af40:	4650      	mov	r0, sl
 800af42:	f000 ff5b 	bl	800bdfc <__mcmp>
 800af46:	463a      	mov	r2, r7
 800af48:	9005      	str	r0, [sp, #20]
 800af4a:	4631      	mov	r1, r6
 800af4c:	4620      	mov	r0, r4
 800af4e:	f000 ff71 	bl	800be34 <__mdiff>
 800af52:	68c2      	ldr	r2, [r0, #12]
 800af54:	4605      	mov	r5, r0
 800af56:	bb02      	cbnz	r2, 800af9a <_dtoa_r+0xa7a>
 800af58:	4601      	mov	r1, r0
 800af5a:	4650      	mov	r0, sl
 800af5c:	f000 ff4e 	bl	800bdfc <__mcmp>
 800af60:	4602      	mov	r2, r0
 800af62:	4629      	mov	r1, r5
 800af64:	4620      	mov	r0, r4
 800af66:	9209      	str	r2, [sp, #36]	; 0x24
 800af68:	f000 fcc2 	bl	800b8f0 <_Bfree>
 800af6c:	9b07      	ldr	r3, [sp, #28]
 800af6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af70:	9d04      	ldr	r5, [sp, #16]
 800af72:	ea43 0102 	orr.w	r1, r3, r2
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	4319      	orrs	r1, r3
 800af7a:	d110      	bne.n	800af9e <_dtoa_r+0xa7e>
 800af7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af80:	d029      	beq.n	800afd6 <_dtoa_r+0xab6>
 800af82:	9b05      	ldr	r3, [sp, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd02      	ble.n	800af8e <_dtoa_r+0xa6e>
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	f883 9000 	strb.w	r9, [r3]
 800af94:	e774      	b.n	800ae80 <_dtoa_r+0x960>
 800af96:	4638      	mov	r0, r7
 800af98:	e7ba      	b.n	800af10 <_dtoa_r+0x9f0>
 800af9a:	2201      	movs	r2, #1
 800af9c:	e7e1      	b.n	800af62 <_dtoa_r+0xa42>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	db04      	blt.n	800afae <_dtoa_r+0xa8e>
 800afa4:	9907      	ldr	r1, [sp, #28]
 800afa6:	430b      	orrs	r3, r1
 800afa8:	9906      	ldr	r1, [sp, #24]
 800afaa:	430b      	orrs	r3, r1
 800afac:	d120      	bne.n	800aff0 <_dtoa_r+0xad0>
 800afae:	2a00      	cmp	r2, #0
 800afb0:	dded      	ble.n	800af8e <_dtoa_r+0xa6e>
 800afb2:	4651      	mov	r1, sl
 800afb4:	2201      	movs	r2, #1
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 feb4 	bl	800bd24 <__lshift>
 800afbc:	4631      	mov	r1, r6
 800afbe:	4682      	mov	sl, r0
 800afc0:	f000 ff1c 	bl	800bdfc <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	dc03      	bgt.n	800afd0 <_dtoa_r+0xab0>
 800afc8:	d1e1      	bne.n	800af8e <_dtoa_r+0xa6e>
 800afca:	f019 0f01 	tst.w	r9, #1
 800afce:	d0de      	beq.n	800af8e <_dtoa_r+0xa6e>
 800afd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afd4:	d1d8      	bne.n	800af88 <_dtoa_r+0xa68>
 800afd6:	9a01      	ldr	r2, [sp, #4]
 800afd8:	2339      	movs	r3, #57	; 0x39
 800afda:	7013      	strb	r3, [r2, #0]
 800afdc:	462b      	mov	r3, r5
 800afde:	461d      	mov	r5, r3
 800afe0:	3b01      	subs	r3, #1
 800afe2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afe6:	2a39      	cmp	r2, #57	; 0x39
 800afe8:	d06c      	beq.n	800b0c4 <_dtoa_r+0xba4>
 800afea:	3201      	adds	r2, #1
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	e747      	b.n	800ae80 <_dtoa_r+0x960>
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	dd07      	ble.n	800b004 <_dtoa_r+0xae4>
 800aff4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aff8:	d0ed      	beq.n	800afd6 <_dtoa_r+0xab6>
 800affa:	9a01      	ldr	r2, [sp, #4]
 800affc:	f109 0301 	add.w	r3, r9, #1
 800b000:	7013      	strb	r3, [r2, #0]
 800b002:	e73d      	b.n	800ae80 <_dtoa_r+0x960>
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	9a08      	ldr	r2, [sp, #32]
 800b008:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d043      	beq.n	800b098 <_dtoa_r+0xb78>
 800b010:	4651      	mov	r1, sl
 800b012:	2300      	movs	r3, #0
 800b014:	220a      	movs	r2, #10
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fc8c 	bl	800b934 <__multadd>
 800b01c:	45b8      	cmp	r8, r7
 800b01e:	4682      	mov	sl, r0
 800b020:	f04f 0300 	mov.w	r3, #0
 800b024:	f04f 020a 	mov.w	r2, #10
 800b028:	4641      	mov	r1, r8
 800b02a:	4620      	mov	r0, r4
 800b02c:	d107      	bne.n	800b03e <_dtoa_r+0xb1e>
 800b02e:	f000 fc81 	bl	800b934 <__multadd>
 800b032:	4680      	mov	r8, r0
 800b034:	4607      	mov	r7, r0
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	3301      	adds	r3, #1
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	e775      	b.n	800af2a <_dtoa_r+0xa0a>
 800b03e:	f000 fc79 	bl	800b934 <__multadd>
 800b042:	4639      	mov	r1, r7
 800b044:	4680      	mov	r8, r0
 800b046:	2300      	movs	r3, #0
 800b048:	220a      	movs	r2, #10
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 fc72 	bl	800b934 <__multadd>
 800b050:	4607      	mov	r7, r0
 800b052:	e7f0      	b.n	800b036 <_dtoa_r+0xb16>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	9d00      	ldr	r5, [sp, #0]
 800b05a:	4631      	mov	r1, r6
 800b05c:	4650      	mov	r0, sl
 800b05e:	f7ff f9d7 	bl	800a410 <quorem>
 800b062:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	f805 9b01 	strb.w	r9, [r5], #1
 800b06c:	1aea      	subs	r2, r5, r3
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	4293      	cmp	r3, r2
 800b072:	dd07      	ble.n	800b084 <_dtoa_r+0xb64>
 800b074:	4651      	mov	r1, sl
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fc5a 	bl	800b934 <__multadd>
 800b080:	4682      	mov	sl, r0
 800b082:	e7ea      	b.n	800b05a <_dtoa_r+0xb3a>
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bfc8      	it	gt
 800b08a:	461d      	movgt	r5, r3
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	bfd8      	it	le
 800b090:	2501      	movle	r5, #1
 800b092:	441d      	add	r5, r3
 800b094:	f04f 0800 	mov.w	r8, #0
 800b098:	4651      	mov	r1, sl
 800b09a:	2201      	movs	r2, #1
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fe41 	bl	800bd24 <__lshift>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	f000 fea9 	bl	800bdfc <__mcmp>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	dc96      	bgt.n	800afdc <_dtoa_r+0xabc>
 800b0ae:	d102      	bne.n	800b0b6 <_dtoa_r+0xb96>
 800b0b0:	f019 0f01 	tst.w	r9, #1
 800b0b4:	d192      	bne.n	800afdc <_dtoa_r+0xabc>
 800b0b6:	462b      	mov	r3, r5
 800b0b8:	461d      	mov	r5, r3
 800b0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0be:	2a30      	cmp	r2, #48	; 0x30
 800b0c0:	d0fa      	beq.n	800b0b8 <_dtoa_r+0xb98>
 800b0c2:	e6dd      	b.n	800ae80 <_dtoa_r+0x960>
 800b0c4:	9a00      	ldr	r2, [sp, #0]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d189      	bne.n	800afde <_dtoa_r+0xabe>
 800b0ca:	f10b 0b01 	add.w	fp, fp, #1
 800b0ce:	2331      	movs	r3, #49	; 0x31
 800b0d0:	e796      	b.n	800b000 <_dtoa_r+0xae0>
 800b0d2:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <_dtoa_r+0xbdc>)
 800b0d4:	f7ff ba99 	b.w	800a60a <_dtoa_r+0xea>
 800b0d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f47f aa6d 	bne.w	800a5ba <_dtoa_r+0x9a>
 800b0e0:	4b07      	ldr	r3, [pc, #28]	; (800b100 <_dtoa_r+0xbe0>)
 800b0e2:	f7ff ba92 	b.w	800a60a <_dtoa_r+0xea>
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dcb5      	bgt.n	800b058 <_dtoa_r+0xb38>
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	f73f aeb1 	bgt.w	800ae56 <_dtoa_r+0x936>
 800b0f4:	e7b0      	b.n	800b058 <_dtoa_r+0xb38>
 800b0f6:	bf00      	nop
 800b0f8:	0800ef6b 	.word	0x0800ef6b
 800b0fc:	0800ee28 	.word	0x0800ee28
 800b100:	0800ef06 	.word	0x0800ef06

0800b104 <_free_r>:
 800b104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b106:	2900      	cmp	r1, #0
 800b108:	d044      	beq.n	800b194 <_free_r+0x90>
 800b10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b10e:	9001      	str	r0, [sp, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f1a1 0404 	sub.w	r4, r1, #4
 800b116:	bfb8      	it	lt
 800b118:	18e4      	addlt	r4, r4, r3
 800b11a:	f7fd f8ff 	bl	800831c <__malloc_lock>
 800b11e:	4a1e      	ldr	r2, [pc, #120]	; (800b198 <_free_r+0x94>)
 800b120:	9801      	ldr	r0, [sp, #4]
 800b122:	6813      	ldr	r3, [r2, #0]
 800b124:	b933      	cbnz	r3, 800b134 <_free_r+0x30>
 800b126:	6063      	str	r3, [r4, #4]
 800b128:	6014      	str	r4, [r2, #0]
 800b12a:	b003      	add	sp, #12
 800b12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b130:	f7fd b8fa 	b.w	8008328 <__malloc_unlock>
 800b134:	42a3      	cmp	r3, r4
 800b136:	d908      	bls.n	800b14a <_free_r+0x46>
 800b138:	6825      	ldr	r5, [r4, #0]
 800b13a:	1961      	adds	r1, r4, r5
 800b13c:	428b      	cmp	r3, r1
 800b13e:	bf01      	itttt	eq
 800b140:	6819      	ldreq	r1, [r3, #0]
 800b142:	685b      	ldreq	r3, [r3, #4]
 800b144:	1949      	addeq	r1, r1, r5
 800b146:	6021      	streq	r1, [r4, #0]
 800b148:	e7ed      	b.n	800b126 <_free_r+0x22>
 800b14a:	461a      	mov	r2, r3
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b10b      	cbz	r3, 800b154 <_free_r+0x50>
 800b150:	42a3      	cmp	r3, r4
 800b152:	d9fa      	bls.n	800b14a <_free_r+0x46>
 800b154:	6811      	ldr	r1, [r2, #0]
 800b156:	1855      	adds	r5, r2, r1
 800b158:	42a5      	cmp	r5, r4
 800b15a:	d10b      	bne.n	800b174 <_free_r+0x70>
 800b15c:	6824      	ldr	r4, [r4, #0]
 800b15e:	4421      	add	r1, r4
 800b160:	1854      	adds	r4, r2, r1
 800b162:	42a3      	cmp	r3, r4
 800b164:	6011      	str	r1, [r2, #0]
 800b166:	d1e0      	bne.n	800b12a <_free_r+0x26>
 800b168:	681c      	ldr	r4, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	6053      	str	r3, [r2, #4]
 800b16e:	440c      	add	r4, r1
 800b170:	6014      	str	r4, [r2, #0]
 800b172:	e7da      	b.n	800b12a <_free_r+0x26>
 800b174:	d902      	bls.n	800b17c <_free_r+0x78>
 800b176:	230c      	movs	r3, #12
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	e7d6      	b.n	800b12a <_free_r+0x26>
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	1961      	adds	r1, r4, r5
 800b180:	428b      	cmp	r3, r1
 800b182:	bf04      	itt	eq
 800b184:	6819      	ldreq	r1, [r3, #0]
 800b186:	685b      	ldreq	r3, [r3, #4]
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	bf04      	itt	eq
 800b18c:	1949      	addeq	r1, r1, r5
 800b18e:	6021      	streq	r1, [r4, #0]
 800b190:	6054      	str	r4, [r2, #4]
 800b192:	e7ca      	b.n	800b12a <_free_r+0x26>
 800b194:	b003      	add	sp, #12
 800b196:	bd30      	pop	{r4, r5, pc}
 800b198:	200005c0 	.word	0x200005c0

0800b19c <rshift>:
 800b19c:	6903      	ldr	r3, [r0, #16]
 800b19e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1aa:	f100 0414 	add.w	r4, r0, #20
 800b1ae:	dd45      	ble.n	800b23c <rshift+0xa0>
 800b1b0:	f011 011f 	ands.w	r1, r1, #31
 800b1b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1bc:	d10c      	bne.n	800b1d8 <rshift+0x3c>
 800b1be:	f100 0710 	add.w	r7, r0, #16
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	42b1      	cmp	r1, r6
 800b1c6:	d334      	bcc.n	800b232 <rshift+0x96>
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	1eea      	subs	r2, r5, #3
 800b1ce:	4296      	cmp	r6, r2
 800b1d0:	bf38      	it	cc
 800b1d2:	2300      	movcc	r3, #0
 800b1d4:	4423      	add	r3, r4
 800b1d6:	e015      	b.n	800b204 <rshift+0x68>
 800b1d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1dc:	f1c1 0820 	rsb	r8, r1, #32
 800b1e0:	40cf      	lsrs	r7, r1
 800b1e2:	f105 0e04 	add.w	lr, r5, #4
 800b1e6:	46a1      	mov	r9, r4
 800b1e8:	4576      	cmp	r6, lr
 800b1ea:	46f4      	mov	ip, lr
 800b1ec:	d815      	bhi.n	800b21a <rshift+0x7e>
 800b1ee:	1a9a      	subs	r2, r3, r2
 800b1f0:	0092      	lsls	r2, r2, #2
 800b1f2:	3a04      	subs	r2, #4
 800b1f4:	3501      	adds	r5, #1
 800b1f6:	42ae      	cmp	r6, r5
 800b1f8:	bf38      	it	cc
 800b1fa:	2200      	movcc	r2, #0
 800b1fc:	18a3      	adds	r3, r4, r2
 800b1fe:	50a7      	str	r7, [r4, r2]
 800b200:	b107      	cbz	r7, 800b204 <rshift+0x68>
 800b202:	3304      	adds	r3, #4
 800b204:	1b1a      	subs	r2, r3, r4
 800b206:	42a3      	cmp	r3, r4
 800b208:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b20c:	bf08      	it	eq
 800b20e:	2300      	moveq	r3, #0
 800b210:	6102      	str	r2, [r0, #16]
 800b212:	bf08      	it	eq
 800b214:	6143      	streq	r3, [r0, #20]
 800b216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b21a:	f8dc c000 	ldr.w	ip, [ip]
 800b21e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b222:	ea4c 0707 	orr.w	r7, ip, r7
 800b226:	f849 7b04 	str.w	r7, [r9], #4
 800b22a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b22e:	40cf      	lsrs	r7, r1
 800b230:	e7da      	b.n	800b1e8 <rshift+0x4c>
 800b232:	f851 cb04 	ldr.w	ip, [r1], #4
 800b236:	f847 cf04 	str.w	ip, [r7, #4]!
 800b23a:	e7c3      	b.n	800b1c4 <rshift+0x28>
 800b23c:	4623      	mov	r3, r4
 800b23e:	e7e1      	b.n	800b204 <rshift+0x68>

0800b240 <__hexdig_fun>:
 800b240:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b244:	2b09      	cmp	r3, #9
 800b246:	d802      	bhi.n	800b24e <__hexdig_fun+0xe>
 800b248:	3820      	subs	r0, #32
 800b24a:	b2c0      	uxtb	r0, r0
 800b24c:	4770      	bx	lr
 800b24e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b252:	2b05      	cmp	r3, #5
 800b254:	d801      	bhi.n	800b25a <__hexdig_fun+0x1a>
 800b256:	3847      	subs	r0, #71	; 0x47
 800b258:	e7f7      	b.n	800b24a <__hexdig_fun+0xa>
 800b25a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b25e:	2b05      	cmp	r3, #5
 800b260:	d801      	bhi.n	800b266 <__hexdig_fun+0x26>
 800b262:	3827      	subs	r0, #39	; 0x27
 800b264:	e7f1      	b.n	800b24a <__hexdig_fun+0xa>
 800b266:	2000      	movs	r0, #0
 800b268:	4770      	bx	lr
	...

0800b26c <__gethex>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4617      	mov	r7, r2
 800b272:	680a      	ldr	r2, [r1, #0]
 800b274:	b085      	sub	sp, #20
 800b276:	f102 0b02 	add.w	fp, r2, #2
 800b27a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b27e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b282:	4681      	mov	r9, r0
 800b284:	468a      	mov	sl, r1
 800b286:	9302      	str	r3, [sp, #8]
 800b288:	32fe      	adds	r2, #254	; 0xfe
 800b28a:	eb02 030b 	add.w	r3, r2, fp
 800b28e:	46d8      	mov	r8, fp
 800b290:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	2830      	cmp	r0, #48	; 0x30
 800b298:	d0f7      	beq.n	800b28a <__gethex+0x1e>
 800b29a:	f7ff ffd1 	bl	800b240 <__hexdig_fun>
 800b29e:	4604      	mov	r4, r0
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d138      	bne.n	800b316 <__gethex+0xaa>
 800b2a4:	49a7      	ldr	r1, [pc, #668]	; (800b544 <__gethex+0x2d8>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	f7fe ff80 	bl	800a1ae <strncmp>
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d169      	bne.n	800b388 <__gethex+0x11c>
 800b2b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b2b8:	465d      	mov	r5, fp
 800b2ba:	f7ff ffc1 	bl	800b240 <__hexdig_fun>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d064      	beq.n	800b38c <__gethex+0x120>
 800b2c2:	465a      	mov	r2, fp
 800b2c4:	7810      	ldrb	r0, [r2, #0]
 800b2c6:	2830      	cmp	r0, #48	; 0x30
 800b2c8:	4690      	mov	r8, r2
 800b2ca:	f102 0201 	add.w	r2, r2, #1
 800b2ce:	d0f9      	beq.n	800b2c4 <__gethex+0x58>
 800b2d0:	f7ff ffb6 	bl	800b240 <__hexdig_fun>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	fab0 f480 	clz	r4, r0
 800b2da:	0964      	lsrs	r4, r4, #5
 800b2dc:	465e      	mov	r6, fp
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	4615      	mov	r5, r2
 800b2e4:	3201      	adds	r2, #1
 800b2e6:	7828      	ldrb	r0, [r5, #0]
 800b2e8:	f7ff ffaa 	bl	800b240 <__hexdig_fun>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1f8      	bne.n	800b2e2 <__gethex+0x76>
 800b2f0:	4994      	ldr	r1, [pc, #592]	; (800b544 <__gethex+0x2d8>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f7fe ff5a 	bl	800a1ae <strncmp>
 800b2fa:	b978      	cbnz	r0, 800b31c <__gethex+0xb0>
 800b2fc:	b946      	cbnz	r6, 800b310 <__gethex+0xa4>
 800b2fe:	1c6e      	adds	r6, r5, #1
 800b300:	4632      	mov	r2, r6
 800b302:	4615      	mov	r5, r2
 800b304:	3201      	adds	r2, #1
 800b306:	7828      	ldrb	r0, [r5, #0]
 800b308:	f7ff ff9a 	bl	800b240 <__hexdig_fun>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1f8      	bne.n	800b302 <__gethex+0x96>
 800b310:	1b73      	subs	r3, r6, r5
 800b312:	009e      	lsls	r6, r3, #2
 800b314:	e004      	b.n	800b320 <__gethex+0xb4>
 800b316:	2400      	movs	r4, #0
 800b318:	4626      	mov	r6, r4
 800b31a:	e7e1      	b.n	800b2e0 <__gethex+0x74>
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	d1f7      	bne.n	800b310 <__gethex+0xa4>
 800b320:	782b      	ldrb	r3, [r5, #0]
 800b322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b326:	2b50      	cmp	r3, #80	; 0x50
 800b328:	d13d      	bne.n	800b3a6 <__gethex+0x13a>
 800b32a:	786b      	ldrb	r3, [r5, #1]
 800b32c:	2b2b      	cmp	r3, #43	; 0x2b
 800b32e:	d02f      	beq.n	800b390 <__gethex+0x124>
 800b330:	2b2d      	cmp	r3, #45	; 0x2d
 800b332:	d031      	beq.n	800b398 <__gethex+0x12c>
 800b334:	1c69      	adds	r1, r5, #1
 800b336:	f04f 0b00 	mov.w	fp, #0
 800b33a:	7808      	ldrb	r0, [r1, #0]
 800b33c:	f7ff ff80 	bl	800b240 <__hexdig_fun>
 800b340:	1e42      	subs	r2, r0, #1
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	2a18      	cmp	r2, #24
 800b346:	d82e      	bhi.n	800b3a6 <__gethex+0x13a>
 800b348:	f1a0 0210 	sub.w	r2, r0, #16
 800b34c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b350:	f7ff ff76 	bl	800b240 <__hexdig_fun>
 800b354:	f100 3cff 	add.w	ip, r0, #4294967295
 800b358:	fa5f fc8c 	uxtb.w	ip, ip
 800b35c:	f1bc 0f18 	cmp.w	ip, #24
 800b360:	d91d      	bls.n	800b39e <__gethex+0x132>
 800b362:	f1bb 0f00 	cmp.w	fp, #0
 800b366:	d000      	beq.n	800b36a <__gethex+0xfe>
 800b368:	4252      	negs	r2, r2
 800b36a:	4416      	add	r6, r2
 800b36c:	f8ca 1000 	str.w	r1, [sl]
 800b370:	b1dc      	cbz	r4, 800b3aa <__gethex+0x13e>
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	bf14      	ite	ne
 800b378:	f04f 0800 	movne.w	r8, #0
 800b37c:	f04f 0806 	moveq.w	r8, #6
 800b380:	4640      	mov	r0, r8
 800b382:	b005      	add	sp, #20
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	4645      	mov	r5, r8
 800b38a:	4626      	mov	r6, r4
 800b38c:	2401      	movs	r4, #1
 800b38e:	e7c7      	b.n	800b320 <__gethex+0xb4>
 800b390:	f04f 0b00 	mov.w	fp, #0
 800b394:	1ca9      	adds	r1, r5, #2
 800b396:	e7d0      	b.n	800b33a <__gethex+0xce>
 800b398:	f04f 0b01 	mov.w	fp, #1
 800b39c:	e7fa      	b.n	800b394 <__gethex+0x128>
 800b39e:	230a      	movs	r3, #10
 800b3a0:	fb03 0002 	mla	r0, r3, r2, r0
 800b3a4:	e7d0      	b.n	800b348 <__gethex+0xdc>
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	e7e0      	b.n	800b36c <__gethex+0x100>
 800b3aa:	eba5 0308 	sub.w	r3, r5, r8
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	2b07      	cmp	r3, #7
 800b3b4:	dc0a      	bgt.n	800b3cc <__gethex+0x160>
 800b3b6:	4648      	mov	r0, r9
 800b3b8:	f000 fa5a 	bl	800b870 <_Balloc>
 800b3bc:	4604      	mov	r4, r0
 800b3be:	b940      	cbnz	r0, 800b3d2 <__gethex+0x166>
 800b3c0:	4b61      	ldr	r3, [pc, #388]	; (800b548 <__gethex+0x2dc>)
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	21e4      	movs	r1, #228	; 0xe4
 800b3c6:	4861      	ldr	r0, [pc, #388]	; (800b54c <__gethex+0x2e0>)
 800b3c8:	f7ff f804 	bl	800a3d4 <__assert_func>
 800b3cc:	3101      	adds	r1, #1
 800b3ce:	105b      	asrs	r3, r3, #1
 800b3d0:	e7ef      	b.n	800b3b2 <__gethex+0x146>
 800b3d2:	f100 0a14 	add.w	sl, r0, #20
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	495a      	ldr	r1, [pc, #360]	; (800b544 <__gethex+0x2d8>)
 800b3da:	f8cd a004 	str.w	sl, [sp, #4]
 800b3de:	469b      	mov	fp, r3
 800b3e0:	45a8      	cmp	r8, r5
 800b3e2:	d342      	bcc.n	800b46a <__gethex+0x1fe>
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	f840 bb04 	str.w	fp, [r0], #4
 800b3ea:	eba0 000a 	sub.w	r0, r0, sl
 800b3ee:	1080      	asrs	r0, r0, #2
 800b3f0:	6120      	str	r0, [r4, #16]
 800b3f2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	f000 fb2c 	bl	800ba54 <__hi0bits>
 800b3fc:	683d      	ldr	r5, [r7, #0]
 800b3fe:	eba8 0000 	sub.w	r0, r8, r0
 800b402:	42a8      	cmp	r0, r5
 800b404:	dd59      	ble.n	800b4ba <__gethex+0x24e>
 800b406:	eba0 0805 	sub.w	r8, r0, r5
 800b40a:	4641      	mov	r1, r8
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 febb 	bl	800c188 <__any_on>
 800b412:	4683      	mov	fp, r0
 800b414:	b1b8      	cbz	r0, 800b446 <__gethex+0x1da>
 800b416:	f108 33ff 	add.w	r3, r8, #4294967295
 800b41a:	1159      	asrs	r1, r3, #5
 800b41c:	f003 021f 	and.w	r2, r3, #31
 800b420:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b424:	f04f 0b01 	mov.w	fp, #1
 800b428:	fa0b f202 	lsl.w	r2, fp, r2
 800b42c:	420a      	tst	r2, r1
 800b42e:	d00a      	beq.n	800b446 <__gethex+0x1da>
 800b430:	455b      	cmp	r3, fp
 800b432:	dd06      	ble.n	800b442 <__gethex+0x1d6>
 800b434:	f1a8 0102 	sub.w	r1, r8, #2
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fea5 	bl	800c188 <__any_on>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d138      	bne.n	800b4b4 <__gethex+0x248>
 800b442:	f04f 0b02 	mov.w	fp, #2
 800b446:	4641      	mov	r1, r8
 800b448:	4620      	mov	r0, r4
 800b44a:	f7ff fea7 	bl	800b19c <rshift>
 800b44e:	4446      	add	r6, r8
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	42b3      	cmp	r3, r6
 800b454:	da41      	bge.n	800b4da <__gethex+0x26e>
 800b456:	4621      	mov	r1, r4
 800b458:	4648      	mov	r0, r9
 800b45a:	f000 fa49 	bl	800b8f0 <_Bfree>
 800b45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b460:	2300      	movs	r3, #0
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b468:	e78a      	b.n	800b380 <__gethex+0x114>
 800b46a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b46e:	2a2e      	cmp	r2, #46	; 0x2e
 800b470:	d014      	beq.n	800b49c <__gethex+0x230>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d106      	bne.n	800b484 <__gethex+0x218>
 800b476:	9b01      	ldr	r3, [sp, #4]
 800b478:	f843 bb04 	str.w	fp, [r3], #4
 800b47c:	f04f 0b00 	mov.w	fp, #0
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	465b      	mov	r3, fp
 800b484:	7828      	ldrb	r0, [r5, #0]
 800b486:	9303      	str	r3, [sp, #12]
 800b488:	f7ff feda 	bl	800b240 <__hexdig_fun>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	f000 000f 	and.w	r0, r0, #15
 800b492:	4098      	lsls	r0, r3
 800b494:	ea4b 0b00 	orr.w	fp, fp, r0
 800b498:	3304      	adds	r3, #4
 800b49a:	e7a1      	b.n	800b3e0 <__gethex+0x174>
 800b49c:	45a8      	cmp	r8, r5
 800b49e:	d8e8      	bhi.n	800b472 <__gethex+0x206>
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	9303      	str	r3, [sp, #12]
 800b4a6:	f7fe fe82 	bl	800a1ae <strncmp>
 800b4aa:	4926      	ldr	r1, [pc, #152]	; (800b544 <__gethex+0x2d8>)
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1df      	bne.n	800b472 <__gethex+0x206>
 800b4b2:	e795      	b.n	800b3e0 <__gethex+0x174>
 800b4b4:	f04f 0b03 	mov.w	fp, #3
 800b4b8:	e7c5      	b.n	800b446 <__gethex+0x1da>
 800b4ba:	da0b      	bge.n	800b4d4 <__gethex+0x268>
 800b4bc:	eba5 0800 	sub.w	r8, r5, r0
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4642      	mov	r2, r8
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f000 fc2d 	bl	800bd24 <__lshift>
 800b4ca:	eba6 0608 	sub.w	r6, r6, r8
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	f100 0a14 	add.w	sl, r0, #20
 800b4d4:	f04f 0b00 	mov.w	fp, #0
 800b4d8:	e7ba      	b.n	800b450 <__gethex+0x1e4>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	42b3      	cmp	r3, r6
 800b4de:	dd73      	ble.n	800b5c8 <__gethex+0x35c>
 800b4e0:	1b9e      	subs	r6, r3, r6
 800b4e2:	42b5      	cmp	r5, r6
 800b4e4:	dc34      	bgt.n	800b550 <__gethex+0x2e4>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d023      	beq.n	800b534 <__gethex+0x2c8>
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d025      	beq.n	800b53c <__gethex+0x2d0>
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d115      	bne.n	800b520 <__gethex+0x2b4>
 800b4f4:	42b5      	cmp	r5, r6
 800b4f6:	d113      	bne.n	800b520 <__gethex+0x2b4>
 800b4f8:	2d01      	cmp	r5, #1
 800b4fa:	d10b      	bne.n	800b514 <__gethex+0x2a8>
 800b4fc:	9a02      	ldr	r2, [sp, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	2301      	movs	r3, #1
 800b504:	6123      	str	r3, [r4, #16]
 800b506:	f8ca 3000 	str.w	r3, [sl]
 800b50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b50c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b510:	601c      	str	r4, [r3, #0]
 800b512:	e735      	b.n	800b380 <__gethex+0x114>
 800b514:	1e69      	subs	r1, r5, #1
 800b516:	4620      	mov	r0, r4
 800b518:	f000 fe36 	bl	800c188 <__any_on>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d1ed      	bne.n	800b4fc <__gethex+0x290>
 800b520:	4621      	mov	r1, r4
 800b522:	4648      	mov	r0, r9
 800b524:	f000 f9e4 	bl	800b8f0 <_Bfree>
 800b528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b52a:	2300      	movs	r3, #0
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b532:	e725      	b.n	800b380 <__gethex+0x114>
 800b534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f2      	bne.n	800b520 <__gethex+0x2b4>
 800b53a:	e7df      	b.n	800b4fc <__gethex+0x290>
 800b53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1dc      	bne.n	800b4fc <__gethex+0x290>
 800b542:	e7ed      	b.n	800b520 <__gethex+0x2b4>
 800b544:	0800edc4 	.word	0x0800edc4
 800b548:	0800ef6b 	.word	0x0800ef6b
 800b54c:	0800ef7c 	.word	0x0800ef7c
 800b550:	f106 38ff 	add.w	r8, r6, #4294967295
 800b554:	f1bb 0f00 	cmp.w	fp, #0
 800b558:	d133      	bne.n	800b5c2 <__gethex+0x356>
 800b55a:	f1b8 0f00 	cmp.w	r8, #0
 800b55e:	d004      	beq.n	800b56a <__gethex+0x2fe>
 800b560:	4641      	mov	r1, r8
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fe10 	bl	800c188 <__any_on>
 800b568:	4683      	mov	fp, r0
 800b56a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b56e:	2301      	movs	r3, #1
 800b570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b574:	f008 081f 	and.w	r8, r8, #31
 800b578:	fa03 f308 	lsl.w	r3, r3, r8
 800b57c:	4213      	tst	r3, r2
 800b57e:	4631      	mov	r1, r6
 800b580:	4620      	mov	r0, r4
 800b582:	bf18      	it	ne
 800b584:	f04b 0b02 	orrne.w	fp, fp, #2
 800b588:	1bad      	subs	r5, r5, r6
 800b58a:	f7ff fe07 	bl	800b19c <rshift>
 800b58e:	687e      	ldr	r6, [r7, #4]
 800b590:	f04f 0802 	mov.w	r8, #2
 800b594:	f1bb 0f00 	cmp.w	fp, #0
 800b598:	d04a      	beq.n	800b630 <__gethex+0x3c4>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d016      	beq.n	800b5ce <__gethex+0x362>
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d018      	beq.n	800b5d6 <__gethex+0x36a>
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d109      	bne.n	800b5bc <__gethex+0x350>
 800b5a8:	f01b 0f02 	tst.w	fp, #2
 800b5ac:	d006      	beq.n	800b5bc <__gethex+0x350>
 800b5ae:	f8da 3000 	ldr.w	r3, [sl]
 800b5b2:	ea4b 0b03 	orr.w	fp, fp, r3
 800b5b6:	f01b 0f01 	tst.w	fp, #1
 800b5ba:	d10f      	bne.n	800b5dc <__gethex+0x370>
 800b5bc:	f048 0810 	orr.w	r8, r8, #16
 800b5c0:	e036      	b.n	800b630 <__gethex+0x3c4>
 800b5c2:	f04f 0b01 	mov.w	fp, #1
 800b5c6:	e7d0      	b.n	800b56a <__gethex+0x2fe>
 800b5c8:	f04f 0801 	mov.w	r8, #1
 800b5cc:	e7e2      	b.n	800b594 <__gethex+0x328>
 800b5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d0:	f1c3 0301 	rsb	r3, r3, #1
 800b5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0ef      	beq.n	800b5bc <__gethex+0x350>
 800b5dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5e0:	f104 0214 	add.w	r2, r4, #20
 800b5e4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	4694      	mov	ip, r2
 800b5f2:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5fa:	d01e      	beq.n	800b63a <__gethex+0x3ce>
 800b5fc:	3101      	adds	r1, #1
 800b5fe:	f8cc 1000 	str.w	r1, [ip]
 800b602:	f1b8 0f02 	cmp.w	r8, #2
 800b606:	f104 0214 	add.w	r2, r4, #20
 800b60a:	d13d      	bne.n	800b688 <__gethex+0x41c>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	3b01      	subs	r3, #1
 800b610:	42ab      	cmp	r3, r5
 800b612:	d10b      	bne.n	800b62c <__gethex+0x3c0>
 800b614:	1169      	asrs	r1, r5, #5
 800b616:	2301      	movs	r3, #1
 800b618:	f005 051f 	and.w	r5, r5, #31
 800b61c:	fa03 f505 	lsl.w	r5, r3, r5
 800b620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b624:	421d      	tst	r5, r3
 800b626:	bf18      	it	ne
 800b628:	f04f 0801 	movne.w	r8, #1
 800b62c:	f048 0820 	orr.w	r8, r8, #32
 800b630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b632:	601c      	str	r4, [r3, #0]
 800b634:	9b02      	ldr	r3, [sp, #8]
 800b636:	601e      	str	r6, [r3, #0]
 800b638:	e6a2      	b.n	800b380 <__gethex+0x114>
 800b63a:	4290      	cmp	r0, r2
 800b63c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b640:	d8d6      	bhi.n	800b5f0 <__gethex+0x384>
 800b642:	68a2      	ldr	r2, [r4, #8]
 800b644:	4593      	cmp	fp, r2
 800b646:	db17      	blt.n	800b678 <__gethex+0x40c>
 800b648:	6861      	ldr	r1, [r4, #4]
 800b64a:	4648      	mov	r0, r9
 800b64c:	3101      	adds	r1, #1
 800b64e:	f000 f90f 	bl	800b870 <_Balloc>
 800b652:	4682      	mov	sl, r0
 800b654:	b918      	cbnz	r0, 800b65e <__gethex+0x3f2>
 800b656:	4b1b      	ldr	r3, [pc, #108]	; (800b6c4 <__gethex+0x458>)
 800b658:	4602      	mov	r2, r0
 800b65a:	2184      	movs	r1, #132	; 0x84
 800b65c:	e6b3      	b.n	800b3c6 <__gethex+0x15a>
 800b65e:	6922      	ldr	r2, [r4, #16]
 800b660:	3202      	adds	r2, #2
 800b662:	f104 010c 	add.w	r1, r4, #12
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	300c      	adds	r0, #12
 800b66a:	f7fe fe96 	bl	800a39a <memcpy>
 800b66e:	4621      	mov	r1, r4
 800b670:	4648      	mov	r0, r9
 800b672:	f000 f93d 	bl	800b8f0 <_Bfree>
 800b676:	4654      	mov	r4, sl
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	1c51      	adds	r1, r2, #1
 800b67c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b680:	6121      	str	r1, [r4, #16]
 800b682:	2101      	movs	r1, #1
 800b684:	6151      	str	r1, [r2, #20]
 800b686:	e7bc      	b.n	800b602 <__gethex+0x396>
 800b688:	6921      	ldr	r1, [r4, #16]
 800b68a:	4559      	cmp	r1, fp
 800b68c:	dd0b      	ble.n	800b6a6 <__gethex+0x43a>
 800b68e:	2101      	movs	r1, #1
 800b690:	4620      	mov	r0, r4
 800b692:	f7ff fd83 	bl	800b19c <rshift>
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	3601      	adds	r6, #1
 800b69a:	42b3      	cmp	r3, r6
 800b69c:	f6ff aedb 	blt.w	800b456 <__gethex+0x1ea>
 800b6a0:	f04f 0801 	mov.w	r8, #1
 800b6a4:	e7c2      	b.n	800b62c <__gethex+0x3c0>
 800b6a6:	f015 051f 	ands.w	r5, r5, #31
 800b6aa:	d0f9      	beq.n	800b6a0 <__gethex+0x434>
 800b6ac:	9b01      	ldr	r3, [sp, #4]
 800b6ae:	441a      	add	r2, r3
 800b6b0:	f1c5 0520 	rsb	r5, r5, #32
 800b6b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b6b8:	f000 f9cc 	bl	800ba54 <__hi0bits>
 800b6bc:	42a8      	cmp	r0, r5
 800b6be:	dbe6      	blt.n	800b68e <__gethex+0x422>
 800b6c0:	e7ee      	b.n	800b6a0 <__gethex+0x434>
 800b6c2:	bf00      	nop
 800b6c4:	0800ef6b 	.word	0x0800ef6b

0800b6c8 <L_shift>:
 800b6c8:	f1c2 0208 	rsb	r2, r2, #8
 800b6cc:	0092      	lsls	r2, r2, #2
 800b6ce:	b570      	push	{r4, r5, r6, lr}
 800b6d0:	f1c2 0620 	rsb	r6, r2, #32
 800b6d4:	6843      	ldr	r3, [r0, #4]
 800b6d6:	6804      	ldr	r4, [r0, #0]
 800b6d8:	fa03 f506 	lsl.w	r5, r3, r6
 800b6dc:	432c      	orrs	r4, r5
 800b6de:	40d3      	lsrs	r3, r2
 800b6e0:	6004      	str	r4, [r0, #0]
 800b6e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6e6:	4288      	cmp	r0, r1
 800b6e8:	d3f4      	bcc.n	800b6d4 <L_shift+0xc>
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}

0800b6ec <__match>:
 800b6ec:	b530      	push	{r4, r5, lr}
 800b6ee:	6803      	ldr	r3, [r0, #0]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f6:	b914      	cbnz	r4, 800b6fe <__match+0x12>
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	bd30      	pop	{r4, r5, pc}
 800b6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b702:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b706:	2d19      	cmp	r5, #25
 800b708:	bf98      	it	ls
 800b70a:	3220      	addls	r2, #32
 800b70c:	42a2      	cmp	r2, r4
 800b70e:	d0f0      	beq.n	800b6f2 <__match+0x6>
 800b710:	2000      	movs	r0, #0
 800b712:	e7f3      	b.n	800b6fc <__match+0x10>

0800b714 <__hexnan>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	680b      	ldr	r3, [r1, #0]
 800b71a:	6801      	ldr	r1, [r0, #0]
 800b71c:	115e      	asrs	r6, r3, #5
 800b71e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b722:	f013 031f 	ands.w	r3, r3, #31
 800b726:	b087      	sub	sp, #28
 800b728:	bf18      	it	ne
 800b72a:	3604      	addne	r6, #4
 800b72c:	2500      	movs	r5, #0
 800b72e:	1f37      	subs	r7, r6, #4
 800b730:	4682      	mov	sl, r0
 800b732:	4690      	mov	r8, r2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f846 5c04 	str.w	r5, [r6, #-4]
 800b73a:	46b9      	mov	r9, r7
 800b73c:	463c      	mov	r4, r7
 800b73e:	9502      	str	r5, [sp, #8]
 800b740:	46ab      	mov	fp, r5
 800b742:	784a      	ldrb	r2, [r1, #1]
 800b744:	1c4b      	adds	r3, r1, #1
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	b342      	cbz	r2, 800b79c <__hexnan+0x88>
 800b74a:	4610      	mov	r0, r2
 800b74c:	9105      	str	r1, [sp, #20]
 800b74e:	9204      	str	r2, [sp, #16]
 800b750:	f7ff fd76 	bl	800b240 <__hexdig_fun>
 800b754:	2800      	cmp	r0, #0
 800b756:	d14f      	bne.n	800b7f8 <__hexnan+0xe4>
 800b758:	9a04      	ldr	r2, [sp, #16]
 800b75a:	9905      	ldr	r1, [sp, #20]
 800b75c:	2a20      	cmp	r2, #32
 800b75e:	d818      	bhi.n	800b792 <__hexnan+0x7e>
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	459b      	cmp	fp, r3
 800b764:	dd13      	ble.n	800b78e <__hexnan+0x7a>
 800b766:	454c      	cmp	r4, r9
 800b768:	d206      	bcs.n	800b778 <__hexnan+0x64>
 800b76a:	2d07      	cmp	r5, #7
 800b76c:	dc04      	bgt.n	800b778 <__hexnan+0x64>
 800b76e:	462a      	mov	r2, r5
 800b770:	4649      	mov	r1, r9
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff ffa8 	bl	800b6c8 <L_shift>
 800b778:	4544      	cmp	r4, r8
 800b77a:	d950      	bls.n	800b81e <__hexnan+0x10a>
 800b77c:	2300      	movs	r3, #0
 800b77e:	f1a4 0904 	sub.w	r9, r4, #4
 800b782:	f844 3c04 	str.w	r3, [r4, #-4]
 800b786:	f8cd b008 	str.w	fp, [sp, #8]
 800b78a:	464c      	mov	r4, r9
 800b78c:	461d      	mov	r5, r3
 800b78e:	9903      	ldr	r1, [sp, #12]
 800b790:	e7d7      	b.n	800b742 <__hexnan+0x2e>
 800b792:	2a29      	cmp	r2, #41	; 0x29
 800b794:	d155      	bne.n	800b842 <__hexnan+0x12e>
 800b796:	3102      	adds	r1, #2
 800b798:	f8ca 1000 	str.w	r1, [sl]
 800b79c:	f1bb 0f00 	cmp.w	fp, #0
 800b7a0:	d04f      	beq.n	800b842 <__hexnan+0x12e>
 800b7a2:	454c      	cmp	r4, r9
 800b7a4:	d206      	bcs.n	800b7b4 <__hexnan+0xa0>
 800b7a6:	2d07      	cmp	r5, #7
 800b7a8:	dc04      	bgt.n	800b7b4 <__hexnan+0xa0>
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7ff ff8a 	bl	800b6c8 <L_shift>
 800b7b4:	4544      	cmp	r4, r8
 800b7b6:	d934      	bls.n	800b822 <__hexnan+0x10e>
 800b7b8:	f1a8 0204 	sub.w	r2, r8, #4
 800b7bc:	4623      	mov	r3, r4
 800b7be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7c6:	429f      	cmp	r7, r3
 800b7c8:	d2f9      	bcs.n	800b7be <__hexnan+0xaa>
 800b7ca:	1b3b      	subs	r3, r7, r4
 800b7cc:	f023 0303 	bic.w	r3, r3, #3
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	3e03      	subs	r6, #3
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	bf38      	it	cc
 800b7da:	2304      	movcc	r3, #4
 800b7dc:	4443      	add	r3, r8
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f843 2b04 	str.w	r2, [r3], #4
 800b7e4:	429f      	cmp	r7, r3
 800b7e6:	d2fb      	bcs.n	800b7e0 <__hexnan+0xcc>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	b91b      	cbnz	r3, 800b7f4 <__hexnan+0xe0>
 800b7ec:	4547      	cmp	r7, r8
 800b7ee:	d126      	bne.n	800b83e <__hexnan+0x12a>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	2005      	movs	r0, #5
 800b7f6:	e025      	b.n	800b844 <__hexnan+0x130>
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	2d08      	cmp	r5, #8
 800b7fc:	f10b 0b01 	add.w	fp, fp, #1
 800b800:	dd06      	ble.n	800b810 <__hexnan+0xfc>
 800b802:	4544      	cmp	r4, r8
 800b804:	d9c3      	bls.n	800b78e <__hexnan+0x7a>
 800b806:	2300      	movs	r3, #0
 800b808:	f844 3c04 	str.w	r3, [r4, #-4]
 800b80c:	2501      	movs	r5, #1
 800b80e:	3c04      	subs	r4, #4
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	f000 000f 	and.w	r0, r0, #15
 800b816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b81a:	6020      	str	r0, [r4, #0]
 800b81c:	e7b7      	b.n	800b78e <__hexnan+0x7a>
 800b81e:	2508      	movs	r5, #8
 800b820:	e7b5      	b.n	800b78e <__hexnan+0x7a>
 800b822:	9b01      	ldr	r3, [sp, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0df      	beq.n	800b7e8 <__hexnan+0xd4>
 800b828:	f1c3 0320 	rsb	r3, r3, #32
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	40da      	lsrs	r2, r3
 800b832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b836:	4013      	ands	r3, r2
 800b838:	f846 3c04 	str.w	r3, [r6, #-4]
 800b83c:	e7d4      	b.n	800b7e8 <__hexnan+0xd4>
 800b83e:	3f04      	subs	r7, #4
 800b840:	e7d2      	b.n	800b7e8 <__hexnan+0xd4>
 800b842:	2004      	movs	r0, #4
 800b844:	b007      	add	sp, #28
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b84a <__ascii_mbtowc>:
 800b84a:	b082      	sub	sp, #8
 800b84c:	b901      	cbnz	r1, 800b850 <__ascii_mbtowc+0x6>
 800b84e:	a901      	add	r1, sp, #4
 800b850:	b142      	cbz	r2, 800b864 <__ascii_mbtowc+0x1a>
 800b852:	b14b      	cbz	r3, 800b868 <__ascii_mbtowc+0x1e>
 800b854:	7813      	ldrb	r3, [r2, #0]
 800b856:	600b      	str	r3, [r1, #0]
 800b858:	7812      	ldrb	r2, [r2, #0]
 800b85a:	1e10      	subs	r0, r2, #0
 800b85c:	bf18      	it	ne
 800b85e:	2001      	movne	r0, #1
 800b860:	b002      	add	sp, #8
 800b862:	4770      	bx	lr
 800b864:	4610      	mov	r0, r2
 800b866:	e7fb      	b.n	800b860 <__ascii_mbtowc+0x16>
 800b868:	f06f 0001 	mvn.w	r0, #1
 800b86c:	e7f8      	b.n	800b860 <__ascii_mbtowc+0x16>
	...

0800b870 <_Balloc>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	69c6      	ldr	r6, [r0, #28]
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	b976      	cbnz	r6, 800b898 <_Balloc+0x28>
 800b87a:	2010      	movs	r0, #16
 800b87c:	f7fc fc9e 	bl	80081bc <malloc>
 800b880:	4602      	mov	r2, r0
 800b882:	61e0      	str	r0, [r4, #28]
 800b884:	b920      	cbnz	r0, 800b890 <_Balloc+0x20>
 800b886:	4b18      	ldr	r3, [pc, #96]	; (800b8e8 <_Balloc+0x78>)
 800b888:	4818      	ldr	r0, [pc, #96]	; (800b8ec <_Balloc+0x7c>)
 800b88a:	216b      	movs	r1, #107	; 0x6b
 800b88c:	f7fe fda2 	bl	800a3d4 <__assert_func>
 800b890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b894:	6006      	str	r6, [r0, #0]
 800b896:	60c6      	str	r6, [r0, #12]
 800b898:	69e6      	ldr	r6, [r4, #28]
 800b89a:	68f3      	ldr	r3, [r6, #12]
 800b89c:	b183      	cbz	r3, 800b8c0 <_Balloc+0x50>
 800b89e:	69e3      	ldr	r3, [r4, #28]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a6:	b9b8      	cbnz	r0, 800b8d8 <_Balloc+0x68>
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ae:	1d72      	adds	r2, r6, #5
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f001 f91d 	bl	800caf2 <_calloc_r>
 800b8b8:	b160      	cbz	r0, 800b8d4 <_Balloc+0x64>
 800b8ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8be:	e00e      	b.n	800b8de <_Balloc+0x6e>
 800b8c0:	2221      	movs	r2, #33	; 0x21
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f001 f914 	bl	800caf2 <_calloc_r>
 800b8ca:	69e3      	ldr	r3, [r4, #28]
 800b8cc:	60f0      	str	r0, [r6, #12]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e4      	bne.n	800b89e <_Balloc+0x2e>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	6802      	ldr	r2, [r0, #0]
 800b8da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e4:	e7f7      	b.n	800b8d6 <_Balloc+0x66>
 800b8e6:	bf00      	nop
 800b8e8:	0800ee51 	.word	0x0800ee51
 800b8ec:	0800efdc 	.word	0x0800efdc

0800b8f0 <_Bfree>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	69c6      	ldr	r6, [r0, #28]
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b976      	cbnz	r6, 800b918 <_Bfree+0x28>
 800b8fa:	2010      	movs	r0, #16
 800b8fc:	f7fc fc5e 	bl	80081bc <malloc>
 800b900:	4602      	mov	r2, r0
 800b902:	61e8      	str	r0, [r5, #28]
 800b904:	b920      	cbnz	r0, 800b910 <_Bfree+0x20>
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <_Bfree+0x3c>)
 800b908:	4809      	ldr	r0, [pc, #36]	; (800b930 <_Bfree+0x40>)
 800b90a:	218f      	movs	r1, #143	; 0x8f
 800b90c:	f7fe fd62 	bl	800a3d4 <__assert_func>
 800b910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b914:	6006      	str	r6, [r0, #0]
 800b916:	60c6      	str	r6, [r0, #12]
 800b918:	b13c      	cbz	r4, 800b92a <_Bfree+0x3a>
 800b91a:	69eb      	ldr	r3, [r5, #28]
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b924:	6021      	str	r1, [r4, #0]
 800b926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	0800ee51 	.word	0x0800ee51
 800b930:	0800efdc 	.word	0x0800efdc

0800b934 <__multadd>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	690d      	ldr	r5, [r1, #16]
 800b93a:	4607      	mov	r7, r0
 800b93c:	460c      	mov	r4, r1
 800b93e:	461e      	mov	r6, r3
 800b940:	f101 0c14 	add.w	ip, r1, #20
 800b944:	2000      	movs	r0, #0
 800b946:	f8dc 3000 	ldr.w	r3, [ip]
 800b94a:	b299      	uxth	r1, r3
 800b94c:	fb02 6101 	mla	r1, r2, r1, r6
 800b950:	0c1e      	lsrs	r6, r3, #16
 800b952:	0c0b      	lsrs	r3, r1, #16
 800b954:	fb02 3306 	mla	r3, r2, r6, r3
 800b958:	b289      	uxth	r1, r1
 800b95a:	3001      	adds	r0, #1
 800b95c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b960:	4285      	cmp	r5, r0
 800b962:	f84c 1b04 	str.w	r1, [ip], #4
 800b966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b96a:	dcec      	bgt.n	800b946 <__multadd+0x12>
 800b96c:	b30e      	cbz	r6, 800b9b2 <__multadd+0x7e>
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	42ab      	cmp	r3, r5
 800b972:	dc19      	bgt.n	800b9a8 <__multadd+0x74>
 800b974:	6861      	ldr	r1, [r4, #4]
 800b976:	4638      	mov	r0, r7
 800b978:	3101      	adds	r1, #1
 800b97a:	f7ff ff79 	bl	800b870 <_Balloc>
 800b97e:	4680      	mov	r8, r0
 800b980:	b928      	cbnz	r0, 800b98e <__multadd+0x5a>
 800b982:	4602      	mov	r2, r0
 800b984:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <__multadd+0x84>)
 800b986:	480d      	ldr	r0, [pc, #52]	; (800b9bc <__multadd+0x88>)
 800b988:	21ba      	movs	r1, #186	; 0xba
 800b98a:	f7fe fd23 	bl	800a3d4 <__assert_func>
 800b98e:	6922      	ldr	r2, [r4, #16]
 800b990:	3202      	adds	r2, #2
 800b992:	f104 010c 	add.w	r1, r4, #12
 800b996:	0092      	lsls	r2, r2, #2
 800b998:	300c      	adds	r0, #12
 800b99a:	f7fe fcfe 	bl	800a39a <memcpy>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7ff ffa5 	bl	800b8f0 <_Bfree>
 800b9a6:	4644      	mov	r4, r8
 800b9a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9ac:	3501      	adds	r5, #1
 800b9ae:	615e      	str	r6, [r3, #20]
 800b9b0:	6125      	str	r5, [r4, #16]
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b8:	0800ef6b 	.word	0x0800ef6b
 800b9bc:	0800efdc 	.word	0x0800efdc

0800b9c0 <__s2b>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	461f      	mov	r7, r3
 800b9ca:	2209      	movs	r2, #9
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	db09      	blt.n	800b9f0 <__s2b+0x30>
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7ff ff47 	bl	800b870 <_Balloc>
 800b9e2:	b940      	cbnz	r0, 800b9f6 <__s2b+0x36>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	4b19      	ldr	r3, [pc, #100]	; (800ba4c <__s2b+0x8c>)
 800b9e8:	4819      	ldr	r0, [pc, #100]	; (800ba50 <__s2b+0x90>)
 800b9ea:	21d3      	movs	r1, #211	; 0xd3
 800b9ec:	f7fe fcf2 	bl	800a3d4 <__assert_func>
 800b9f0:	0052      	lsls	r2, r2, #1
 800b9f2:	3101      	adds	r1, #1
 800b9f4:	e7f0      	b.n	800b9d8 <__s2b+0x18>
 800b9f6:	9b08      	ldr	r3, [sp, #32]
 800b9f8:	6143      	str	r3, [r0, #20]
 800b9fa:	2d09      	cmp	r5, #9
 800b9fc:	f04f 0301 	mov.w	r3, #1
 800ba00:	6103      	str	r3, [r0, #16]
 800ba02:	dd16      	ble.n	800ba32 <__s2b+0x72>
 800ba04:	f104 0909 	add.w	r9, r4, #9
 800ba08:	46c8      	mov	r8, r9
 800ba0a:	442c      	add	r4, r5
 800ba0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba10:	4601      	mov	r1, r0
 800ba12:	3b30      	subs	r3, #48	; 0x30
 800ba14:	220a      	movs	r2, #10
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ff8c 	bl	800b934 <__multadd>
 800ba1c:	45a0      	cmp	r8, r4
 800ba1e:	d1f5      	bne.n	800ba0c <__s2b+0x4c>
 800ba20:	f1a5 0408 	sub.w	r4, r5, #8
 800ba24:	444c      	add	r4, r9
 800ba26:	1b2d      	subs	r5, r5, r4
 800ba28:	1963      	adds	r3, r4, r5
 800ba2a:	42bb      	cmp	r3, r7
 800ba2c:	db04      	blt.n	800ba38 <__s2b+0x78>
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	340a      	adds	r4, #10
 800ba34:	2509      	movs	r5, #9
 800ba36:	e7f6      	b.n	800ba26 <__s2b+0x66>
 800ba38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	3b30      	subs	r3, #48	; 0x30
 800ba40:	220a      	movs	r2, #10
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7ff ff76 	bl	800b934 <__multadd>
 800ba48:	e7ee      	b.n	800ba28 <__s2b+0x68>
 800ba4a:	bf00      	nop
 800ba4c:	0800ef6b 	.word	0x0800ef6b
 800ba50:	0800efdc 	.word	0x0800efdc

0800ba54 <__hi0bits>:
 800ba54:	0c03      	lsrs	r3, r0, #16
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	b9d3      	cbnz	r3, 800ba90 <__hi0bits+0x3c>
 800ba5a:	0400      	lsls	r0, r0, #16
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba62:	bf04      	itt	eq
 800ba64:	0200      	lsleq	r0, r0, #8
 800ba66:	3308      	addeq	r3, #8
 800ba68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba6c:	bf04      	itt	eq
 800ba6e:	0100      	lsleq	r0, r0, #4
 800ba70:	3304      	addeq	r3, #4
 800ba72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba76:	bf04      	itt	eq
 800ba78:	0080      	lsleq	r0, r0, #2
 800ba7a:	3302      	addeq	r3, #2
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	db05      	blt.n	800ba8c <__hi0bits+0x38>
 800ba80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba84:	f103 0301 	add.w	r3, r3, #1
 800ba88:	bf08      	it	eq
 800ba8a:	2320      	moveq	r3, #32
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	4770      	bx	lr
 800ba90:	2300      	movs	r3, #0
 800ba92:	e7e4      	b.n	800ba5e <__hi0bits+0xa>

0800ba94 <__lo0bits>:
 800ba94:	6803      	ldr	r3, [r0, #0]
 800ba96:	f013 0207 	ands.w	r2, r3, #7
 800ba9a:	d00c      	beq.n	800bab6 <__lo0bits+0x22>
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	d422      	bmi.n	800bae6 <__lo0bits+0x52>
 800baa0:	079a      	lsls	r2, r3, #30
 800baa2:	bf49      	itett	mi
 800baa4:	085b      	lsrmi	r3, r3, #1
 800baa6:	089b      	lsrpl	r3, r3, #2
 800baa8:	6003      	strmi	r3, [r0, #0]
 800baaa:	2201      	movmi	r2, #1
 800baac:	bf5c      	itt	pl
 800baae:	6003      	strpl	r3, [r0, #0]
 800bab0:	2202      	movpl	r2, #2
 800bab2:	4610      	mov	r0, r2
 800bab4:	4770      	bx	lr
 800bab6:	b299      	uxth	r1, r3
 800bab8:	b909      	cbnz	r1, 800babe <__lo0bits+0x2a>
 800baba:	0c1b      	lsrs	r3, r3, #16
 800babc:	2210      	movs	r2, #16
 800babe:	b2d9      	uxtb	r1, r3
 800bac0:	b909      	cbnz	r1, 800bac6 <__lo0bits+0x32>
 800bac2:	3208      	adds	r2, #8
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	0719      	lsls	r1, r3, #28
 800bac8:	bf04      	itt	eq
 800baca:	091b      	lsreq	r3, r3, #4
 800bacc:	3204      	addeq	r2, #4
 800bace:	0799      	lsls	r1, r3, #30
 800bad0:	bf04      	itt	eq
 800bad2:	089b      	lsreq	r3, r3, #2
 800bad4:	3202      	addeq	r2, #2
 800bad6:	07d9      	lsls	r1, r3, #31
 800bad8:	d403      	bmi.n	800bae2 <__lo0bits+0x4e>
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	f102 0201 	add.w	r2, r2, #1
 800bae0:	d003      	beq.n	800baea <__lo0bits+0x56>
 800bae2:	6003      	str	r3, [r0, #0]
 800bae4:	e7e5      	b.n	800bab2 <__lo0bits+0x1e>
 800bae6:	2200      	movs	r2, #0
 800bae8:	e7e3      	b.n	800bab2 <__lo0bits+0x1e>
 800baea:	2220      	movs	r2, #32
 800baec:	e7e1      	b.n	800bab2 <__lo0bits+0x1e>
	...

0800baf0 <__i2b>:
 800baf0:	b510      	push	{r4, lr}
 800baf2:	460c      	mov	r4, r1
 800baf4:	2101      	movs	r1, #1
 800baf6:	f7ff febb 	bl	800b870 <_Balloc>
 800bafa:	4602      	mov	r2, r0
 800bafc:	b928      	cbnz	r0, 800bb0a <__i2b+0x1a>
 800bafe:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <__i2b+0x24>)
 800bb00:	4805      	ldr	r0, [pc, #20]	; (800bb18 <__i2b+0x28>)
 800bb02:	f240 1145 	movw	r1, #325	; 0x145
 800bb06:	f7fe fc65 	bl	800a3d4 <__assert_func>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	6144      	str	r4, [r0, #20]
 800bb0e:	6103      	str	r3, [r0, #16]
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	bf00      	nop
 800bb14:	0800ef6b 	.word	0x0800ef6b
 800bb18:	0800efdc 	.word	0x0800efdc

0800bb1c <__multiply>:
 800bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	4691      	mov	r9, r2
 800bb22:	690a      	ldr	r2, [r1, #16]
 800bb24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	bfb8      	it	lt
 800bb2c:	460b      	movlt	r3, r1
 800bb2e:	460c      	mov	r4, r1
 800bb30:	bfbc      	itt	lt
 800bb32:	464c      	movlt	r4, r9
 800bb34:	4699      	movlt	r9, r3
 800bb36:	6927      	ldr	r7, [r4, #16]
 800bb38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	6861      	ldr	r1, [r4, #4]
 800bb40:	eb07 060a 	add.w	r6, r7, sl
 800bb44:	42b3      	cmp	r3, r6
 800bb46:	b085      	sub	sp, #20
 800bb48:	bfb8      	it	lt
 800bb4a:	3101      	addlt	r1, #1
 800bb4c:	f7ff fe90 	bl	800b870 <_Balloc>
 800bb50:	b930      	cbnz	r0, 800bb60 <__multiply+0x44>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4b44      	ldr	r3, [pc, #272]	; (800bc68 <__multiply+0x14c>)
 800bb56:	4845      	ldr	r0, [pc, #276]	; (800bc6c <__multiply+0x150>)
 800bb58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb5c:	f7fe fc3a 	bl	800a3d4 <__assert_func>
 800bb60:	f100 0514 	add.w	r5, r0, #20
 800bb64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb68:	462b      	mov	r3, r5
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4543      	cmp	r3, r8
 800bb6e:	d321      	bcc.n	800bbb4 <__multiply+0x98>
 800bb70:	f104 0314 	add.w	r3, r4, #20
 800bb74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb78:	f109 0314 	add.w	r3, r9, #20
 800bb7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb80:	9202      	str	r2, [sp, #8]
 800bb82:	1b3a      	subs	r2, r7, r4
 800bb84:	3a15      	subs	r2, #21
 800bb86:	f022 0203 	bic.w	r2, r2, #3
 800bb8a:	3204      	adds	r2, #4
 800bb8c:	f104 0115 	add.w	r1, r4, #21
 800bb90:	428f      	cmp	r7, r1
 800bb92:	bf38      	it	cc
 800bb94:	2204      	movcc	r2, #4
 800bb96:	9201      	str	r2, [sp, #4]
 800bb98:	9a02      	ldr	r2, [sp, #8]
 800bb9a:	9303      	str	r3, [sp, #12]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d80c      	bhi.n	800bbba <__multiply+0x9e>
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	dd03      	ble.n	800bbac <__multiply+0x90>
 800bba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d05b      	beq.n	800bc64 <__multiply+0x148>
 800bbac:	6106      	str	r6, [r0, #16]
 800bbae:	b005      	add	sp, #20
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	f843 2b04 	str.w	r2, [r3], #4
 800bbb8:	e7d8      	b.n	800bb6c <__multiply+0x50>
 800bbba:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbbe:	f1ba 0f00 	cmp.w	sl, #0
 800bbc2:	d024      	beq.n	800bc0e <__multiply+0xf2>
 800bbc4:	f104 0e14 	add.w	lr, r4, #20
 800bbc8:	46a9      	mov	r9, r5
 800bbca:	f04f 0c00 	mov.w	ip, #0
 800bbce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbd2:	f8d9 1000 	ldr.w	r1, [r9]
 800bbd6:	fa1f fb82 	uxth.w	fp, r2
 800bbda:	b289      	uxth	r1, r1
 800bbdc:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbe0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bbe4:	f8d9 2000 	ldr.w	r2, [r9]
 800bbe8:	4461      	add	r1, ip
 800bbea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbee:	fb0a c20b 	mla	r2, sl, fp, ip
 800bbf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbf6:	b289      	uxth	r1, r1
 800bbf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbfc:	4577      	cmp	r7, lr
 800bbfe:	f849 1b04 	str.w	r1, [r9], #4
 800bc02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc06:	d8e2      	bhi.n	800bbce <__multiply+0xb2>
 800bc08:	9a01      	ldr	r2, [sp, #4]
 800bc0a:	f845 c002 	str.w	ip, [r5, r2]
 800bc0e:	9a03      	ldr	r2, [sp, #12]
 800bc10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc14:	3304      	adds	r3, #4
 800bc16:	f1b9 0f00 	cmp.w	r9, #0
 800bc1a:	d021      	beq.n	800bc60 <__multiply+0x144>
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	f104 0c14 	add.w	ip, r4, #20
 800bc22:	46ae      	mov	lr, r5
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	f8bc b000 	ldrh.w	fp, [ip]
 800bc2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc30:	fb09 220b 	mla	r2, r9, fp, r2
 800bc34:	4452      	add	r2, sl
 800bc36:	b289      	uxth	r1, r1
 800bc38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc3c:	f84e 1b04 	str.w	r1, [lr], #4
 800bc40:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc48:	f8be 1000 	ldrh.w	r1, [lr]
 800bc4c:	fb09 110a 	mla	r1, r9, sl, r1
 800bc50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc54:	4567      	cmp	r7, ip
 800bc56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc5a:	d8e5      	bhi.n	800bc28 <__multiply+0x10c>
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	50a9      	str	r1, [r5, r2]
 800bc60:	3504      	adds	r5, #4
 800bc62:	e799      	b.n	800bb98 <__multiply+0x7c>
 800bc64:	3e01      	subs	r6, #1
 800bc66:	e79b      	b.n	800bba0 <__multiply+0x84>
 800bc68:	0800ef6b 	.word	0x0800ef6b
 800bc6c:	0800efdc 	.word	0x0800efdc

0800bc70 <__pow5mult>:
 800bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc74:	4615      	mov	r5, r2
 800bc76:	f012 0203 	ands.w	r2, r2, #3
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460f      	mov	r7, r1
 800bc7e:	d007      	beq.n	800bc90 <__pow5mult+0x20>
 800bc80:	4c25      	ldr	r4, [pc, #148]	; (800bd18 <__pow5mult+0xa8>)
 800bc82:	3a01      	subs	r2, #1
 800bc84:	2300      	movs	r3, #0
 800bc86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc8a:	f7ff fe53 	bl	800b934 <__multadd>
 800bc8e:	4607      	mov	r7, r0
 800bc90:	10ad      	asrs	r5, r5, #2
 800bc92:	d03d      	beq.n	800bd10 <__pow5mult+0xa0>
 800bc94:	69f4      	ldr	r4, [r6, #28]
 800bc96:	b97c      	cbnz	r4, 800bcb8 <__pow5mult+0x48>
 800bc98:	2010      	movs	r0, #16
 800bc9a:	f7fc fa8f 	bl	80081bc <malloc>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	61f0      	str	r0, [r6, #28]
 800bca2:	b928      	cbnz	r0, 800bcb0 <__pow5mult+0x40>
 800bca4:	4b1d      	ldr	r3, [pc, #116]	; (800bd1c <__pow5mult+0xac>)
 800bca6:	481e      	ldr	r0, [pc, #120]	; (800bd20 <__pow5mult+0xb0>)
 800bca8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcac:	f7fe fb92 	bl	800a3d4 <__assert_func>
 800bcb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb4:	6004      	str	r4, [r0, #0]
 800bcb6:	60c4      	str	r4, [r0, #12]
 800bcb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bcbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc0:	b94c      	cbnz	r4, 800bcd6 <__pow5mult+0x66>
 800bcc2:	f240 2171 	movw	r1, #625	; 0x271
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f7ff ff12 	bl	800baf0 <__i2b>
 800bccc:	2300      	movs	r3, #0
 800bcce:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	f04f 0900 	mov.w	r9, #0
 800bcda:	07eb      	lsls	r3, r5, #31
 800bcdc:	d50a      	bpl.n	800bcf4 <__pow5mult+0x84>
 800bcde:	4639      	mov	r1, r7
 800bce0:	4622      	mov	r2, r4
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff1a 	bl	800bb1c <__multiply>
 800bce8:	4639      	mov	r1, r7
 800bcea:	4680      	mov	r8, r0
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff fdff 	bl	800b8f0 <_Bfree>
 800bcf2:	4647      	mov	r7, r8
 800bcf4:	106d      	asrs	r5, r5, #1
 800bcf6:	d00b      	beq.n	800bd10 <__pow5mult+0xa0>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	b938      	cbnz	r0, 800bd0c <__pow5mult+0x9c>
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7ff ff0b 	bl	800bb1c <__multiply>
 800bd06:	6020      	str	r0, [r4, #0]
 800bd08:	f8c0 9000 	str.w	r9, [r0]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	e7e4      	b.n	800bcda <__pow5mult+0x6a>
 800bd10:	4638      	mov	r0, r7
 800bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd16:	bf00      	nop
 800bd18:	0800f128 	.word	0x0800f128
 800bd1c:	0800ee51 	.word	0x0800ee51
 800bd20:	0800efdc 	.word	0x0800efdc

0800bd24 <__lshift>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6849      	ldr	r1, [r1, #4]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	4607      	mov	r7, r0
 800bd36:	4691      	mov	r9, r2
 800bd38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd3c:	f108 0601 	add.w	r6, r8, #1
 800bd40:	42b3      	cmp	r3, r6
 800bd42:	db0b      	blt.n	800bd5c <__lshift+0x38>
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff fd93 	bl	800b870 <_Balloc>
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b948      	cbnz	r0, 800bd62 <__lshift+0x3e>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4b28      	ldr	r3, [pc, #160]	; (800bdf4 <__lshift+0xd0>)
 800bd52:	4829      	ldr	r0, [pc, #164]	; (800bdf8 <__lshift+0xd4>)
 800bd54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd58:	f7fe fb3c 	bl	800a3d4 <__assert_func>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	e7ee      	b.n	800bd40 <__lshift+0x1c>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f100 0114 	add.w	r1, r0, #20
 800bd68:	f100 0210 	add.w	r2, r0, #16
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	4553      	cmp	r3, sl
 800bd70:	db33      	blt.n	800bdda <__lshift+0xb6>
 800bd72:	6920      	ldr	r0, [r4, #16]
 800bd74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd78:	f104 0314 	add.w	r3, r4, #20
 800bd7c:	f019 091f 	ands.w	r9, r9, #31
 800bd80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd88:	d02b      	beq.n	800bde2 <__lshift+0xbe>
 800bd8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd8e:	468a      	mov	sl, r1
 800bd90:	2200      	movs	r2, #0
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	fa00 f009 	lsl.w	r0, r0, r9
 800bd98:	4310      	orrs	r0, r2
 800bd9a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda2:	459c      	cmp	ip, r3
 800bda4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bda8:	d8f3      	bhi.n	800bd92 <__lshift+0x6e>
 800bdaa:	ebac 0304 	sub.w	r3, ip, r4
 800bdae:	3b15      	subs	r3, #21
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	f104 0015 	add.w	r0, r4, #21
 800bdba:	4584      	cmp	ip, r0
 800bdbc:	bf38      	it	cc
 800bdbe:	2304      	movcc	r3, #4
 800bdc0:	50ca      	str	r2, [r1, r3]
 800bdc2:	b10a      	cbz	r2, 800bdc8 <__lshift+0xa4>
 800bdc4:	f108 0602 	add.w	r6, r8, #2
 800bdc8:	3e01      	subs	r6, #1
 800bdca:	4638      	mov	r0, r7
 800bdcc:	612e      	str	r6, [r5, #16]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f7ff fd8e 	bl	800b8f0 <_Bfree>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdde:	3301      	adds	r3, #1
 800bde0:	e7c5      	b.n	800bd6e <__lshift+0x4a>
 800bde2:	3904      	subs	r1, #4
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdec:	459c      	cmp	ip, r3
 800bdee:	d8f9      	bhi.n	800bde4 <__lshift+0xc0>
 800bdf0:	e7ea      	b.n	800bdc8 <__lshift+0xa4>
 800bdf2:	bf00      	nop
 800bdf4:	0800ef6b 	.word	0x0800ef6b
 800bdf8:	0800efdc 	.word	0x0800efdc

0800bdfc <__mcmp>:
 800bdfc:	b530      	push	{r4, r5, lr}
 800bdfe:	6902      	ldr	r2, [r0, #16]
 800be00:	690c      	ldr	r4, [r1, #16]
 800be02:	1b12      	subs	r2, r2, r4
 800be04:	d10e      	bne.n	800be24 <__mcmp+0x28>
 800be06:	f100 0314 	add.w	r3, r0, #20
 800be0a:	3114      	adds	r1, #20
 800be0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be1c:	42a5      	cmp	r5, r4
 800be1e:	d003      	beq.n	800be28 <__mcmp+0x2c>
 800be20:	d305      	bcc.n	800be2e <__mcmp+0x32>
 800be22:	2201      	movs	r2, #1
 800be24:	4610      	mov	r0, r2
 800be26:	bd30      	pop	{r4, r5, pc}
 800be28:	4283      	cmp	r3, r0
 800be2a:	d3f3      	bcc.n	800be14 <__mcmp+0x18>
 800be2c:	e7fa      	b.n	800be24 <__mcmp+0x28>
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295
 800be32:	e7f7      	b.n	800be24 <__mcmp+0x28>

0800be34 <__mdiff>:
 800be34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	460c      	mov	r4, r1
 800be3a:	4606      	mov	r6, r0
 800be3c:	4611      	mov	r1, r2
 800be3e:	4620      	mov	r0, r4
 800be40:	4690      	mov	r8, r2
 800be42:	f7ff ffdb 	bl	800bdfc <__mcmp>
 800be46:	1e05      	subs	r5, r0, #0
 800be48:	d110      	bne.n	800be6c <__mdiff+0x38>
 800be4a:	4629      	mov	r1, r5
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7ff fd0f 	bl	800b870 <_Balloc>
 800be52:	b930      	cbnz	r0, 800be62 <__mdiff+0x2e>
 800be54:	4b3a      	ldr	r3, [pc, #232]	; (800bf40 <__mdiff+0x10c>)
 800be56:	4602      	mov	r2, r0
 800be58:	f240 2137 	movw	r1, #567	; 0x237
 800be5c:	4839      	ldr	r0, [pc, #228]	; (800bf44 <__mdiff+0x110>)
 800be5e:	f7fe fab9 	bl	800a3d4 <__assert_func>
 800be62:	2301      	movs	r3, #1
 800be64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	bfa4      	itt	ge
 800be6e:	4643      	movge	r3, r8
 800be70:	46a0      	movge	r8, r4
 800be72:	4630      	mov	r0, r6
 800be74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be78:	bfa6      	itte	ge
 800be7a:	461c      	movge	r4, r3
 800be7c:	2500      	movge	r5, #0
 800be7e:	2501      	movlt	r5, #1
 800be80:	f7ff fcf6 	bl	800b870 <_Balloc>
 800be84:	b920      	cbnz	r0, 800be90 <__mdiff+0x5c>
 800be86:	4b2e      	ldr	r3, [pc, #184]	; (800bf40 <__mdiff+0x10c>)
 800be88:	4602      	mov	r2, r0
 800be8a:	f240 2145 	movw	r1, #581	; 0x245
 800be8e:	e7e5      	b.n	800be5c <__mdiff+0x28>
 800be90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be94:	6926      	ldr	r6, [r4, #16]
 800be96:	60c5      	str	r5, [r0, #12]
 800be98:	f104 0914 	add.w	r9, r4, #20
 800be9c:	f108 0514 	add.w	r5, r8, #20
 800bea0:	f100 0e14 	add.w	lr, r0, #20
 800bea4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800beac:	f108 0210 	add.w	r2, r8, #16
 800beb0:	46f2      	mov	sl, lr
 800beb2:	2100      	movs	r1, #0
 800beb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800beb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bebc:	fa11 f88b 	uxtah	r8, r1, fp
 800bec0:	b299      	uxth	r1, r3
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	eba8 0801 	sub.w	r8, r8, r1
 800bec8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800becc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bed0:	fa1f f888 	uxth.w	r8, r8
 800bed4:	1419      	asrs	r1, r3, #16
 800bed6:	454e      	cmp	r6, r9
 800bed8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bedc:	f84a 3b04 	str.w	r3, [sl], #4
 800bee0:	d8e8      	bhi.n	800beb4 <__mdiff+0x80>
 800bee2:	1b33      	subs	r3, r6, r4
 800bee4:	3b15      	subs	r3, #21
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	3304      	adds	r3, #4
 800beec:	3415      	adds	r4, #21
 800beee:	42a6      	cmp	r6, r4
 800bef0:	bf38      	it	cc
 800bef2:	2304      	movcc	r3, #4
 800bef4:	441d      	add	r5, r3
 800bef6:	4473      	add	r3, lr
 800bef8:	469e      	mov	lr, r3
 800befa:	462e      	mov	r6, r5
 800befc:	4566      	cmp	r6, ip
 800befe:	d30e      	bcc.n	800bf1e <__mdiff+0xea>
 800bf00:	f10c 0203 	add.w	r2, ip, #3
 800bf04:	1b52      	subs	r2, r2, r5
 800bf06:	f022 0203 	bic.w	r2, r2, #3
 800bf0a:	3d03      	subs	r5, #3
 800bf0c:	45ac      	cmp	ip, r5
 800bf0e:	bf38      	it	cc
 800bf10:	2200      	movcc	r2, #0
 800bf12:	4413      	add	r3, r2
 800bf14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf18:	b17a      	cbz	r2, 800bf3a <__mdiff+0x106>
 800bf1a:	6107      	str	r7, [r0, #16]
 800bf1c:	e7a4      	b.n	800be68 <__mdiff+0x34>
 800bf1e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf22:	fa11 f288 	uxtah	r2, r1, r8
 800bf26:	1414      	asrs	r4, r2, #16
 800bf28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf2c:	b292      	uxth	r2, r2
 800bf2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf32:	f84e 2b04 	str.w	r2, [lr], #4
 800bf36:	1421      	asrs	r1, r4, #16
 800bf38:	e7e0      	b.n	800befc <__mdiff+0xc8>
 800bf3a:	3f01      	subs	r7, #1
 800bf3c:	e7ea      	b.n	800bf14 <__mdiff+0xe0>
 800bf3e:	bf00      	nop
 800bf40:	0800ef6b 	.word	0x0800ef6b
 800bf44:	0800efdc 	.word	0x0800efdc

0800bf48 <__ulp>:
 800bf48:	b082      	sub	sp, #8
 800bf4a:	ed8d 0b00 	vstr	d0, [sp]
 800bf4e:	9a01      	ldr	r2, [sp, #4]
 800bf50:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <__ulp+0x48>)
 800bf52:	4013      	ands	r3, r2
 800bf54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dc08      	bgt.n	800bf6e <__ulp+0x26>
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf62:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf66:	da04      	bge.n	800bf72 <__ulp+0x2a>
 800bf68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf6c:	4113      	asrs	r3, r2
 800bf6e:	2200      	movs	r2, #0
 800bf70:	e008      	b.n	800bf84 <__ulp+0x3c>
 800bf72:	f1a2 0314 	sub.w	r3, r2, #20
 800bf76:	2b1e      	cmp	r3, #30
 800bf78:	bfda      	itte	le
 800bf7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bf7e:	40da      	lsrle	r2, r3
 800bf80:	2201      	movgt	r2, #1
 800bf82:	2300      	movs	r3, #0
 800bf84:	4619      	mov	r1, r3
 800bf86:	4610      	mov	r0, r2
 800bf88:	ec41 0b10 	vmov	d0, r0, r1
 800bf8c:	b002      	add	sp, #8
 800bf8e:	4770      	bx	lr
 800bf90:	7ff00000 	.word	0x7ff00000

0800bf94 <__b2d>:
 800bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	6906      	ldr	r6, [r0, #16]
 800bf9a:	f100 0814 	add.w	r8, r0, #20
 800bf9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfa2:	1f37      	subs	r7, r6, #4
 800bfa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	f7ff fd53 	bl	800ba54 <__hi0bits>
 800bfae:	f1c0 0320 	rsb	r3, r0, #32
 800bfb2:	280a      	cmp	r0, #10
 800bfb4:	600b      	str	r3, [r1, #0]
 800bfb6:	491b      	ldr	r1, [pc, #108]	; (800c024 <__b2d+0x90>)
 800bfb8:	dc15      	bgt.n	800bfe6 <__b2d+0x52>
 800bfba:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfbe:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfc2:	45b8      	cmp	r8, r7
 800bfc4:	ea43 0501 	orr.w	r5, r3, r1
 800bfc8:	bf34      	ite	cc
 800bfca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfce:	2300      	movcs	r3, #0
 800bfd0:	3015      	adds	r0, #21
 800bfd2:	fa02 f000 	lsl.w	r0, r2, r0
 800bfd6:	fa23 f30c 	lsr.w	r3, r3, ip
 800bfda:	4303      	orrs	r3, r0
 800bfdc:	461c      	mov	r4, r3
 800bfde:	ec45 4b10 	vmov	d0, r4, r5
 800bfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe6:	45b8      	cmp	r8, r7
 800bfe8:	bf3a      	itte	cc
 800bfea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfee:	f1a6 0708 	subcc.w	r7, r6, #8
 800bff2:	2300      	movcs	r3, #0
 800bff4:	380b      	subs	r0, #11
 800bff6:	d012      	beq.n	800c01e <__b2d+0x8a>
 800bff8:	f1c0 0120 	rsb	r1, r0, #32
 800bffc:	fa23 f401 	lsr.w	r4, r3, r1
 800c000:	4082      	lsls	r2, r0
 800c002:	4322      	orrs	r2, r4
 800c004:	4547      	cmp	r7, r8
 800c006:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c00a:	bf8c      	ite	hi
 800c00c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c010:	2200      	movls	r2, #0
 800c012:	4083      	lsls	r3, r0
 800c014:	40ca      	lsrs	r2, r1
 800c016:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c01a:	4313      	orrs	r3, r2
 800c01c:	e7de      	b.n	800bfdc <__b2d+0x48>
 800c01e:	ea42 0501 	orr.w	r5, r2, r1
 800c022:	e7db      	b.n	800bfdc <__b2d+0x48>
 800c024:	3ff00000 	.word	0x3ff00000

0800c028 <__d2b>:
 800c028:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	460f      	mov	r7, r1
 800c02e:	2101      	movs	r1, #1
 800c030:	ec59 8b10 	vmov	r8, r9, d0
 800c034:	4616      	mov	r6, r2
 800c036:	f7ff fc1b 	bl	800b870 <_Balloc>
 800c03a:	4604      	mov	r4, r0
 800c03c:	b930      	cbnz	r0, 800c04c <__d2b+0x24>
 800c03e:	4602      	mov	r2, r0
 800c040:	4b24      	ldr	r3, [pc, #144]	; (800c0d4 <__d2b+0xac>)
 800c042:	4825      	ldr	r0, [pc, #148]	; (800c0d8 <__d2b+0xb0>)
 800c044:	f240 310f 	movw	r1, #783	; 0x30f
 800c048:	f7fe f9c4 	bl	800a3d4 <__assert_func>
 800c04c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c054:	bb2d      	cbnz	r5, 800c0a2 <__d2b+0x7a>
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	f1b8 0300 	subs.w	r3, r8, #0
 800c05c:	d026      	beq.n	800c0ac <__d2b+0x84>
 800c05e:	4668      	mov	r0, sp
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	f7ff fd17 	bl	800ba94 <__lo0bits>
 800c066:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c06a:	b1e8      	cbz	r0, 800c0a8 <__d2b+0x80>
 800c06c:	f1c0 0320 	rsb	r3, r0, #32
 800c070:	fa02 f303 	lsl.w	r3, r2, r3
 800c074:	430b      	orrs	r3, r1
 800c076:	40c2      	lsrs	r2, r0
 800c078:	6163      	str	r3, [r4, #20]
 800c07a:	9201      	str	r2, [sp, #4]
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	61a3      	str	r3, [r4, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf14      	ite	ne
 800c084:	2202      	movne	r2, #2
 800c086:	2201      	moveq	r2, #1
 800c088:	6122      	str	r2, [r4, #16]
 800c08a:	b1bd      	cbz	r5, 800c0bc <__d2b+0x94>
 800c08c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c090:	4405      	add	r5, r0
 800c092:	603d      	str	r5, [r7, #0]
 800c094:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4620      	mov	r0, r4
 800c09c:	b003      	add	sp, #12
 800c09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0a6:	e7d6      	b.n	800c056 <__d2b+0x2e>
 800c0a8:	6161      	str	r1, [r4, #20]
 800c0aa:	e7e7      	b.n	800c07c <__d2b+0x54>
 800c0ac:	a801      	add	r0, sp, #4
 800c0ae:	f7ff fcf1 	bl	800ba94 <__lo0bits>
 800c0b2:	9b01      	ldr	r3, [sp, #4]
 800c0b4:	6163      	str	r3, [r4, #20]
 800c0b6:	3020      	adds	r0, #32
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	e7e5      	b.n	800c088 <__d2b+0x60>
 800c0bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0c4:	6038      	str	r0, [r7, #0]
 800c0c6:	6918      	ldr	r0, [r3, #16]
 800c0c8:	f7ff fcc4 	bl	800ba54 <__hi0bits>
 800c0cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0d0:	e7e2      	b.n	800c098 <__d2b+0x70>
 800c0d2:	bf00      	nop
 800c0d4:	0800ef6b 	.word	0x0800ef6b
 800c0d8:	0800efdc 	.word	0x0800efdc

0800c0dc <__ratio>:
 800c0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	4688      	mov	r8, r1
 800c0e2:	4669      	mov	r1, sp
 800c0e4:	4681      	mov	r9, r0
 800c0e6:	f7ff ff55 	bl	800bf94 <__b2d>
 800c0ea:	a901      	add	r1, sp, #4
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	ec55 4b10 	vmov	r4, r5, d0
 800c0f2:	f7ff ff4f 	bl	800bf94 <__b2d>
 800c0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0fe:	eba3 0c02 	sub.w	ip, r3, r2
 800c102:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c10c:	ec51 0b10 	vmov	r0, r1, d0
 800c110:	2b00      	cmp	r3, #0
 800c112:	bfd6      	itet	le
 800c114:	460a      	movle	r2, r1
 800c116:	462a      	movgt	r2, r5
 800c118:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c11c:	468b      	mov	fp, r1
 800c11e:	462f      	mov	r7, r5
 800c120:	bfd4      	ite	le
 800c122:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c126:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c12a:	4620      	mov	r0, r4
 800c12c:	ee10 2a10 	vmov	r2, s0
 800c130:	465b      	mov	r3, fp
 800c132:	4639      	mov	r1, r7
 800c134:	f7f4 fb92 	bl	800085c <__aeabi_ddiv>
 800c138:	ec41 0b10 	vmov	d0, r0, r1
 800c13c:	b003      	add	sp, #12
 800c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c142 <__copybits>:
 800c142:	3901      	subs	r1, #1
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	1149      	asrs	r1, r1, #5
 800c148:	6914      	ldr	r4, [r2, #16]
 800c14a:	3101      	adds	r1, #1
 800c14c:	f102 0314 	add.w	r3, r2, #20
 800c150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c154:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c158:	1f05      	subs	r5, r0, #4
 800c15a:	42a3      	cmp	r3, r4
 800c15c:	d30c      	bcc.n	800c178 <__copybits+0x36>
 800c15e:	1aa3      	subs	r3, r4, r2
 800c160:	3b11      	subs	r3, #17
 800c162:	f023 0303 	bic.w	r3, r3, #3
 800c166:	3211      	adds	r2, #17
 800c168:	42a2      	cmp	r2, r4
 800c16a:	bf88      	it	hi
 800c16c:	2300      	movhi	r3, #0
 800c16e:	4418      	add	r0, r3
 800c170:	2300      	movs	r3, #0
 800c172:	4288      	cmp	r0, r1
 800c174:	d305      	bcc.n	800c182 <__copybits+0x40>
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	f853 6b04 	ldr.w	r6, [r3], #4
 800c17c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c180:	e7eb      	b.n	800c15a <__copybits+0x18>
 800c182:	f840 3b04 	str.w	r3, [r0], #4
 800c186:	e7f4      	b.n	800c172 <__copybits+0x30>

0800c188 <__any_on>:
 800c188:	f100 0214 	add.w	r2, r0, #20
 800c18c:	6900      	ldr	r0, [r0, #16]
 800c18e:	114b      	asrs	r3, r1, #5
 800c190:	4298      	cmp	r0, r3
 800c192:	b510      	push	{r4, lr}
 800c194:	db11      	blt.n	800c1ba <__any_on+0x32>
 800c196:	dd0a      	ble.n	800c1ae <__any_on+0x26>
 800c198:	f011 011f 	ands.w	r1, r1, #31
 800c19c:	d007      	beq.n	800c1ae <__any_on+0x26>
 800c19e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1a2:	fa24 f001 	lsr.w	r0, r4, r1
 800c1a6:	fa00 f101 	lsl.w	r1, r0, r1
 800c1aa:	428c      	cmp	r4, r1
 800c1ac:	d10b      	bne.n	800c1c6 <__any_on+0x3e>
 800c1ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d803      	bhi.n	800c1be <__any_on+0x36>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	e7f7      	b.n	800c1ae <__any_on+0x26>
 800c1be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	d0f5      	beq.n	800c1b2 <__any_on+0x2a>
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e7f6      	b.n	800c1b8 <__any_on+0x30>
	...

0800c1cc <_strtol_l.constprop.0>:
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d2:	d001      	beq.n	800c1d8 <_strtol_l.constprop.0+0xc>
 800c1d4:	2b24      	cmp	r3, #36	; 0x24
 800c1d6:	d906      	bls.n	800c1e6 <_strtol_l.constprop.0+0x1a>
 800c1d8:	f7fe f8b2 	bl	800a340 <__errno>
 800c1dc:	2316      	movs	r3, #22
 800c1de:	6003      	str	r3, [r0, #0]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2cc <_strtol_l.constprop.0+0x100>
 800c1ea:	460d      	mov	r5, r1
 800c1ec:	462e      	mov	r6, r5
 800c1ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c1f6:	f017 0708 	ands.w	r7, r7, #8
 800c1fa:	d1f7      	bne.n	800c1ec <_strtol_l.constprop.0+0x20>
 800c1fc:	2c2d      	cmp	r4, #45	; 0x2d
 800c1fe:	d132      	bne.n	800c266 <_strtol_l.constprop.0+0x9a>
 800c200:	782c      	ldrb	r4, [r5, #0]
 800c202:	2701      	movs	r7, #1
 800c204:	1cb5      	adds	r5, r6, #2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d05b      	beq.n	800c2c2 <_strtol_l.constprop.0+0xf6>
 800c20a:	2b10      	cmp	r3, #16
 800c20c:	d109      	bne.n	800c222 <_strtol_l.constprop.0+0x56>
 800c20e:	2c30      	cmp	r4, #48	; 0x30
 800c210:	d107      	bne.n	800c222 <_strtol_l.constprop.0+0x56>
 800c212:	782c      	ldrb	r4, [r5, #0]
 800c214:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c218:	2c58      	cmp	r4, #88	; 0x58
 800c21a:	d14d      	bne.n	800c2b8 <_strtol_l.constprop.0+0xec>
 800c21c:	786c      	ldrb	r4, [r5, #1]
 800c21e:	2310      	movs	r3, #16
 800c220:	3502      	adds	r5, #2
 800c222:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c226:	f108 38ff 	add.w	r8, r8, #4294967295
 800c22a:	f04f 0e00 	mov.w	lr, #0
 800c22e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c232:	4676      	mov	r6, lr
 800c234:	fb03 8a19 	mls	sl, r3, r9, r8
 800c238:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c23c:	f1bc 0f09 	cmp.w	ip, #9
 800c240:	d816      	bhi.n	800c270 <_strtol_l.constprop.0+0xa4>
 800c242:	4664      	mov	r4, ip
 800c244:	42a3      	cmp	r3, r4
 800c246:	dd24      	ble.n	800c292 <_strtol_l.constprop.0+0xc6>
 800c248:	f1be 3fff 	cmp.w	lr, #4294967295
 800c24c:	d008      	beq.n	800c260 <_strtol_l.constprop.0+0x94>
 800c24e:	45b1      	cmp	r9, r6
 800c250:	d31c      	bcc.n	800c28c <_strtol_l.constprop.0+0xc0>
 800c252:	d101      	bne.n	800c258 <_strtol_l.constprop.0+0x8c>
 800c254:	45a2      	cmp	sl, r4
 800c256:	db19      	blt.n	800c28c <_strtol_l.constprop.0+0xc0>
 800c258:	fb06 4603 	mla	r6, r6, r3, r4
 800c25c:	f04f 0e01 	mov.w	lr, #1
 800c260:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c264:	e7e8      	b.n	800c238 <_strtol_l.constprop.0+0x6c>
 800c266:	2c2b      	cmp	r4, #43	; 0x2b
 800c268:	bf04      	itt	eq
 800c26a:	782c      	ldrbeq	r4, [r5, #0]
 800c26c:	1cb5      	addeq	r5, r6, #2
 800c26e:	e7ca      	b.n	800c206 <_strtol_l.constprop.0+0x3a>
 800c270:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c274:	f1bc 0f19 	cmp.w	ip, #25
 800c278:	d801      	bhi.n	800c27e <_strtol_l.constprop.0+0xb2>
 800c27a:	3c37      	subs	r4, #55	; 0x37
 800c27c:	e7e2      	b.n	800c244 <_strtol_l.constprop.0+0x78>
 800c27e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c282:	f1bc 0f19 	cmp.w	ip, #25
 800c286:	d804      	bhi.n	800c292 <_strtol_l.constprop.0+0xc6>
 800c288:	3c57      	subs	r4, #87	; 0x57
 800c28a:	e7db      	b.n	800c244 <_strtol_l.constprop.0+0x78>
 800c28c:	f04f 3eff 	mov.w	lr, #4294967295
 800c290:	e7e6      	b.n	800c260 <_strtol_l.constprop.0+0x94>
 800c292:	f1be 3fff 	cmp.w	lr, #4294967295
 800c296:	d105      	bne.n	800c2a4 <_strtol_l.constprop.0+0xd8>
 800c298:	2322      	movs	r3, #34	; 0x22
 800c29a:	6003      	str	r3, [r0, #0]
 800c29c:	4646      	mov	r6, r8
 800c29e:	b942      	cbnz	r2, 800c2b2 <_strtol_l.constprop.0+0xe6>
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	e79e      	b.n	800c1e2 <_strtol_l.constprop.0+0x16>
 800c2a4:	b107      	cbz	r7, 800c2a8 <_strtol_l.constprop.0+0xdc>
 800c2a6:	4276      	negs	r6, r6
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d0f9      	beq.n	800c2a0 <_strtol_l.constprop.0+0xd4>
 800c2ac:	f1be 0f00 	cmp.w	lr, #0
 800c2b0:	d000      	beq.n	800c2b4 <_strtol_l.constprop.0+0xe8>
 800c2b2:	1e69      	subs	r1, r5, #1
 800c2b4:	6011      	str	r1, [r2, #0]
 800c2b6:	e7f3      	b.n	800c2a0 <_strtol_l.constprop.0+0xd4>
 800c2b8:	2430      	movs	r4, #48	; 0x30
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1b1      	bne.n	800c222 <_strtol_l.constprop.0+0x56>
 800c2be:	2308      	movs	r3, #8
 800c2c0:	e7af      	b.n	800c222 <_strtol_l.constprop.0+0x56>
 800c2c2:	2c30      	cmp	r4, #48	; 0x30
 800c2c4:	d0a5      	beq.n	800c212 <_strtol_l.constprop.0+0x46>
 800c2c6:	230a      	movs	r3, #10
 800c2c8:	e7ab      	b.n	800c222 <_strtol_l.constprop.0+0x56>
 800c2ca:	bf00      	nop
 800c2cc:	0800f135 	.word	0x0800f135

0800c2d0 <_strtol_r>:
 800c2d0:	f7ff bf7c 	b.w	800c1cc <_strtol_l.constprop.0>

0800c2d4 <__ascii_wctomb>:
 800c2d4:	b149      	cbz	r1, 800c2ea <__ascii_wctomb+0x16>
 800c2d6:	2aff      	cmp	r2, #255	; 0xff
 800c2d8:	bf85      	ittet	hi
 800c2da:	238a      	movhi	r3, #138	; 0x8a
 800c2dc:	6003      	strhi	r3, [r0, #0]
 800c2de:	700a      	strbls	r2, [r1, #0]
 800c2e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2e4:	bf98      	it	ls
 800c2e6:	2001      	movls	r0, #1
 800c2e8:	4770      	bx	lr
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4770      	bx	lr

0800c2ee <__ssputs_r>:
 800c2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f2:	688e      	ldr	r6, [r1, #8]
 800c2f4:	461f      	mov	r7, r3
 800c2f6:	42be      	cmp	r6, r7
 800c2f8:	680b      	ldr	r3, [r1, #0]
 800c2fa:	4682      	mov	sl, r0
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	4690      	mov	r8, r2
 800c300:	d82c      	bhi.n	800c35c <__ssputs_r+0x6e>
 800c302:	898a      	ldrh	r2, [r1, #12]
 800c304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c308:	d026      	beq.n	800c358 <__ssputs_r+0x6a>
 800c30a:	6965      	ldr	r5, [r4, #20]
 800c30c:	6909      	ldr	r1, [r1, #16]
 800c30e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c312:	eba3 0901 	sub.w	r9, r3, r1
 800c316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c31a:	1c7b      	adds	r3, r7, #1
 800c31c:	444b      	add	r3, r9
 800c31e:	106d      	asrs	r5, r5, #1
 800c320:	429d      	cmp	r5, r3
 800c322:	bf38      	it	cc
 800c324:	461d      	movcc	r5, r3
 800c326:	0553      	lsls	r3, r2, #21
 800c328:	d527      	bpl.n	800c37a <__ssputs_r+0x8c>
 800c32a:	4629      	mov	r1, r5
 800c32c:	f7fb ff76 	bl	800821c <_malloc_r>
 800c330:	4606      	mov	r6, r0
 800c332:	b360      	cbz	r0, 800c38e <__ssputs_r+0xa0>
 800c334:	6921      	ldr	r1, [r4, #16]
 800c336:	464a      	mov	r2, r9
 800c338:	f7fe f82f 	bl	800a39a <memcpy>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	6126      	str	r6, [r4, #16]
 800c34a:	6165      	str	r5, [r4, #20]
 800c34c:	444e      	add	r6, r9
 800c34e:	eba5 0509 	sub.w	r5, r5, r9
 800c352:	6026      	str	r6, [r4, #0]
 800c354:	60a5      	str	r5, [r4, #8]
 800c356:	463e      	mov	r6, r7
 800c358:	42be      	cmp	r6, r7
 800c35a:	d900      	bls.n	800c35e <__ssputs_r+0x70>
 800c35c:	463e      	mov	r6, r7
 800c35e:	6820      	ldr	r0, [r4, #0]
 800c360:	4632      	mov	r2, r6
 800c362:	4641      	mov	r1, r8
 800c364:	f000 fb82 	bl	800ca6c <memmove>
 800c368:	68a3      	ldr	r3, [r4, #8]
 800c36a:	1b9b      	subs	r3, r3, r6
 800c36c:	60a3      	str	r3, [r4, #8]
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	4433      	add	r3, r6
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	2000      	movs	r0, #0
 800c376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c37a:	462a      	mov	r2, r5
 800c37c:	f000 fbcf 	bl	800cb1e <_realloc_r>
 800c380:	4606      	mov	r6, r0
 800c382:	2800      	cmp	r0, #0
 800c384:	d1e0      	bne.n	800c348 <__ssputs_r+0x5a>
 800c386:	6921      	ldr	r1, [r4, #16]
 800c388:	4650      	mov	r0, sl
 800c38a:	f7fe febb 	bl	800b104 <_free_r>
 800c38e:	230c      	movs	r3, #12
 800c390:	f8ca 3000 	str.w	r3, [sl]
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a0:	e7e9      	b.n	800c376 <__ssputs_r+0x88>
	...

0800c3a4 <_svfiprintf_r>:
 800c3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a8:	4698      	mov	r8, r3
 800c3aa:	898b      	ldrh	r3, [r1, #12]
 800c3ac:	061b      	lsls	r3, r3, #24
 800c3ae:	b09d      	sub	sp, #116	; 0x74
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	d50e      	bpl.n	800c3d6 <_svfiprintf_r+0x32>
 800c3b8:	690b      	ldr	r3, [r1, #16]
 800c3ba:	b963      	cbnz	r3, 800c3d6 <_svfiprintf_r+0x32>
 800c3bc:	2140      	movs	r1, #64	; 0x40
 800c3be:	f7fb ff2d 	bl	800821c <_malloc_r>
 800c3c2:	6028      	str	r0, [r5, #0]
 800c3c4:	6128      	str	r0, [r5, #16]
 800c3c6:	b920      	cbnz	r0, 800c3d2 <_svfiprintf_r+0x2e>
 800c3c8:	230c      	movs	r3, #12
 800c3ca:	603b      	str	r3, [r7, #0]
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	e0d0      	b.n	800c574 <_svfiprintf_r+0x1d0>
 800c3d2:	2340      	movs	r3, #64	; 0x40
 800c3d4:	616b      	str	r3, [r5, #20]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3da:	2320      	movs	r3, #32
 800c3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3e4:	2330      	movs	r3, #48	; 0x30
 800c3e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c58c <_svfiprintf_r+0x1e8>
 800c3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3ee:	f04f 0901 	mov.w	r9, #1
 800c3f2:	4623      	mov	r3, r4
 800c3f4:	469a      	mov	sl, r3
 800c3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3fa:	b10a      	cbz	r2, 800c400 <_svfiprintf_r+0x5c>
 800c3fc:	2a25      	cmp	r2, #37	; 0x25
 800c3fe:	d1f9      	bne.n	800c3f4 <_svfiprintf_r+0x50>
 800c400:	ebba 0b04 	subs.w	fp, sl, r4
 800c404:	d00b      	beq.n	800c41e <_svfiprintf_r+0x7a>
 800c406:	465b      	mov	r3, fp
 800c408:	4622      	mov	r2, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff ff6e 	bl	800c2ee <__ssputs_r>
 800c412:	3001      	adds	r0, #1
 800c414:	f000 80a9 	beq.w	800c56a <_svfiprintf_r+0x1c6>
 800c418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c41a:	445a      	add	r2, fp
 800c41c:	9209      	str	r2, [sp, #36]	; 0x24
 800c41e:	f89a 3000 	ldrb.w	r3, [sl]
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 80a1 	beq.w	800c56a <_svfiprintf_r+0x1c6>
 800c428:	2300      	movs	r3, #0
 800c42a:	f04f 32ff 	mov.w	r2, #4294967295
 800c42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c432:	f10a 0a01 	add.w	sl, sl, #1
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	9307      	str	r3, [sp, #28]
 800c43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c43e:	931a      	str	r3, [sp, #104]	; 0x68
 800c440:	4654      	mov	r4, sl
 800c442:	2205      	movs	r2, #5
 800c444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c448:	4850      	ldr	r0, [pc, #320]	; (800c58c <_svfiprintf_r+0x1e8>)
 800c44a:	f7f3 fec9 	bl	80001e0 <memchr>
 800c44e:	9a04      	ldr	r2, [sp, #16]
 800c450:	b9d8      	cbnz	r0, 800c48a <_svfiprintf_r+0xe6>
 800c452:	06d0      	lsls	r0, r2, #27
 800c454:	bf44      	itt	mi
 800c456:	2320      	movmi	r3, #32
 800c458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c45c:	0711      	lsls	r1, r2, #28
 800c45e:	bf44      	itt	mi
 800c460:	232b      	movmi	r3, #43	; 0x2b
 800c462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c466:	f89a 3000 	ldrb.w	r3, [sl]
 800c46a:	2b2a      	cmp	r3, #42	; 0x2a
 800c46c:	d015      	beq.n	800c49a <_svfiprintf_r+0xf6>
 800c46e:	9a07      	ldr	r2, [sp, #28]
 800c470:	4654      	mov	r4, sl
 800c472:	2000      	movs	r0, #0
 800c474:	f04f 0c0a 	mov.w	ip, #10
 800c478:	4621      	mov	r1, r4
 800c47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c47e:	3b30      	subs	r3, #48	; 0x30
 800c480:	2b09      	cmp	r3, #9
 800c482:	d94d      	bls.n	800c520 <_svfiprintf_r+0x17c>
 800c484:	b1b0      	cbz	r0, 800c4b4 <_svfiprintf_r+0x110>
 800c486:	9207      	str	r2, [sp, #28]
 800c488:	e014      	b.n	800c4b4 <_svfiprintf_r+0x110>
 800c48a:	eba0 0308 	sub.w	r3, r0, r8
 800c48e:	fa09 f303 	lsl.w	r3, r9, r3
 800c492:	4313      	orrs	r3, r2
 800c494:	9304      	str	r3, [sp, #16]
 800c496:	46a2      	mov	sl, r4
 800c498:	e7d2      	b.n	800c440 <_svfiprintf_r+0x9c>
 800c49a:	9b03      	ldr	r3, [sp, #12]
 800c49c:	1d19      	adds	r1, r3, #4
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	9103      	str	r1, [sp, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	bfbb      	ittet	lt
 800c4a6:	425b      	neglt	r3, r3
 800c4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ac:	9307      	strge	r3, [sp, #28]
 800c4ae:	9307      	strlt	r3, [sp, #28]
 800c4b0:	bfb8      	it	lt
 800c4b2:	9204      	strlt	r2, [sp, #16]
 800c4b4:	7823      	ldrb	r3, [r4, #0]
 800c4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b8:	d10c      	bne.n	800c4d4 <_svfiprintf_r+0x130>
 800c4ba:	7863      	ldrb	r3, [r4, #1]
 800c4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c4be:	d134      	bne.n	800c52a <_svfiprintf_r+0x186>
 800c4c0:	9b03      	ldr	r3, [sp, #12]
 800c4c2:	1d1a      	adds	r2, r3, #4
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	9203      	str	r2, [sp, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	bfb8      	it	lt
 800c4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4d0:	3402      	adds	r4, #2
 800c4d2:	9305      	str	r3, [sp, #20]
 800c4d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c59c <_svfiprintf_r+0x1f8>
 800c4d8:	7821      	ldrb	r1, [r4, #0]
 800c4da:	2203      	movs	r2, #3
 800c4dc:	4650      	mov	r0, sl
 800c4de:	f7f3 fe7f 	bl	80001e0 <memchr>
 800c4e2:	b138      	cbz	r0, 800c4f4 <_svfiprintf_r+0x150>
 800c4e4:	9b04      	ldr	r3, [sp, #16]
 800c4e6:	eba0 000a 	sub.w	r0, r0, sl
 800c4ea:	2240      	movs	r2, #64	; 0x40
 800c4ec:	4082      	lsls	r2, r0
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	3401      	adds	r4, #1
 800c4f2:	9304      	str	r3, [sp, #16]
 800c4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f8:	4825      	ldr	r0, [pc, #148]	; (800c590 <_svfiprintf_r+0x1ec>)
 800c4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4fe:	2206      	movs	r2, #6
 800c500:	f7f3 fe6e 	bl	80001e0 <memchr>
 800c504:	2800      	cmp	r0, #0
 800c506:	d038      	beq.n	800c57a <_svfiprintf_r+0x1d6>
 800c508:	4b22      	ldr	r3, [pc, #136]	; (800c594 <_svfiprintf_r+0x1f0>)
 800c50a:	bb1b      	cbnz	r3, 800c554 <_svfiprintf_r+0x1b0>
 800c50c:	9b03      	ldr	r3, [sp, #12]
 800c50e:	3307      	adds	r3, #7
 800c510:	f023 0307 	bic.w	r3, r3, #7
 800c514:	3308      	adds	r3, #8
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51a:	4433      	add	r3, r6
 800c51c:	9309      	str	r3, [sp, #36]	; 0x24
 800c51e:	e768      	b.n	800c3f2 <_svfiprintf_r+0x4e>
 800c520:	fb0c 3202 	mla	r2, ip, r2, r3
 800c524:	460c      	mov	r4, r1
 800c526:	2001      	movs	r0, #1
 800c528:	e7a6      	b.n	800c478 <_svfiprintf_r+0xd4>
 800c52a:	2300      	movs	r3, #0
 800c52c:	3401      	adds	r4, #1
 800c52e:	9305      	str	r3, [sp, #20]
 800c530:	4619      	mov	r1, r3
 800c532:	f04f 0c0a 	mov.w	ip, #10
 800c536:	4620      	mov	r0, r4
 800c538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c53c:	3a30      	subs	r2, #48	; 0x30
 800c53e:	2a09      	cmp	r2, #9
 800c540:	d903      	bls.n	800c54a <_svfiprintf_r+0x1a6>
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c6      	beq.n	800c4d4 <_svfiprintf_r+0x130>
 800c546:	9105      	str	r1, [sp, #20]
 800c548:	e7c4      	b.n	800c4d4 <_svfiprintf_r+0x130>
 800c54a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c54e:	4604      	mov	r4, r0
 800c550:	2301      	movs	r3, #1
 800c552:	e7f0      	b.n	800c536 <_svfiprintf_r+0x192>
 800c554:	ab03      	add	r3, sp, #12
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	462a      	mov	r2, r5
 800c55a:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <_svfiprintf_r+0x1f4>)
 800c55c:	a904      	add	r1, sp, #16
 800c55e:	4638      	mov	r0, r7
 800c560:	f7fc fe02 	bl	8009168 <_printf_float>
 800c564:	1c42      	adds	r2, r0, #1
 800c566:	4606      	mov	r6, r0
 800c568:	d1d6      	bne.n	800c518 <_svfiprintf_r+0x174>
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	065b      	lsls	r3, r3, #25
 800c56e:	f53f af2d 	bmi.w	800c3cc <_svfiprintf_r+0x28>
 800c572:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c574:	b01d      	add	sp, #116	; 0x74
 800c576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57a:	ab03      	add	r3, sp, #12
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	462a      	mov	r2, r5
 800c580:	4b05      	ldr	r3, [pc, #20]	; (800c598 <_svfiprintf_r+0x1f4>)
 800c582:	a904      	add	r1, sp, #16
 800c584:	4638      	mov	r0, r7
 800c586:	f7fd f893 	bl	80096b0 <_printf_i>
 800c58a:	e7eb      	b.n	800c564 <_svfiprintf_r+0x1c0>
 800c58c:	0800f235 	.word	0x0800f235
 800c590:	0800f23f 	.word	0x0800f23f
 800c594:	08009169 	.word	0x08009169
 800c598:	0800c2ef 	.word	0x0800c2ef
 800c59c:	0800f23b 	.word	0x0800f23b

0800c5a0 <__sfputc_r>:
 800c5a0:	6893      	ldr	r3, [r2, #8]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	b410      	push	{r4}
 800c5a8:	6093      	str	r3, [r2, #8]
 800c5aa:	da08      	bge.n	800c5be <__sfputc_r+0x1e>
 800c5ac:	6994      	ldr	r4, [r2, #24]
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	db01      	blt.n	800c5b6 <__sfputc_r+0x16>
 800c5b2:	290a      	cmp	r1, #10
 800c5b4:	d103      	bne.n	800c5be <__sfputc_r+0x1e>
 800c5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ba:	f7fd bd3e 	b.w	800a03a <__swbuf_r>
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	1c58      	adds	r0, r3, #1
 800c5c2:	6010      	str	r0, [r2, #0]
 800c5c4:	7019      	strb	r1, [r3, #0]
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <__sfputs_r>:
 800c5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	18d5      	adds	r5, r2, r3
 800c5d8:	42ac      	cmp	r4, r5
 800c5da:	d101      	bne.n	800c5e0 <__sfputs_r+0x12>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e007      	b.n	800c5f0 <__sfputs_r+0x22>
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	463a      	mov	r2, r7
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7ff ffda 	bl	800c5a0 <__sfputc_r>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d1f3      	bne.n	800c5d8 <__sfputs_r+0xa>
 800c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5f4 <_vfiprintf_r>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	b09d      	sub	sp, #116	; 0x74
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4698      	mov	r8, r3
 800c600:	4606      	mov	r6, r0
 800c602:	b118      	cbz	r0, 800c60c <_vfiprintf_r+0x18>
 800c604:	6a03      	ldr	r3, [r0, #32]
 800c606:	b90b      	cbnz	r3, 800c60c <_vfiprintf_r+0x18>
 800c608:	f7fd fc10 	bl	8009e2c <__sinit>
 800c60c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c60e:	07d9      	lsls	r1, r3, #31
 800c610:	d405      	bmi.n	800c61e <_vfiprintf_r+0x2a>
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	059a      	lsls	r2, r3, #22
 800c616:	d402      	bmi.n	800c61e <_vfiprintf_r+0x2a>
 800c618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c61a:	f7fd febc 	bl	800a396 <__retarget_lock_acquire_recursive>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	071b      	lsls	r3, r3, #28
 800c622:	d501      	bpl.n	800c628 <_vfiprintf_r+0x34>
 800c624:	692b      	ldr	r3, [r5, #16]
 800c626:	b99b      	cbnz	r3, 800c650 <_vfiprintf_r+0x5c>
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7fd fd42 	bl	800a0b4 <__swsetup_r>
 800c630:	b170      	cbz	r0, 800c650 <_vfiprintf_r+0x5c>
 800c632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c634:	07dc      	lsls	r4, r3, #31
 800c636:	d504      	bpl.n	800c642 <_vfiprintf_r+0x4e>
 800c638:	f04f 30ff 	mov.w	r0, #4294967295
 800c63c:	b01d      	add	sp, #116	; 0x74
 800c63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	0598      	lsls	r0, r3, #22
 800c646:	d4f7      	bmi.n	800c638 <_vfiprintf_r+0x44>
 800c648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c64a:	f7fd fea5 	bl	800a398 <__retarget_lock_release_recursive>
 800c64e:	e7f3      	b.n	800c638 <_vfiprintf_r+0x44>
 800c650:	2300      	movs	r3, #0
 800c652:	9309      	str	r3, [sp, #36]	; 0x24
 800c654:	2320      	movs	r3, #32
 800c656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c65e:	2330      	movs	r3, #48	; 0x30
 800c660:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c814 <_vfiprintf_r+0x220>
 800c664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c668:	f04f 0901 	mov.w	r9, #1
 800c66c:	4623      	mov	r3, r4
 800c66e:	469a      	mov	sl, r3
 800c670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c674:	b10a      	cbz	r2, 800c67a <_vfiprintf_r+0x86>
 800c676:	2a25      	cmp	r2, #37	; 0x25
 800c678:	d1f9      	bne.n	800c66e <_vfiprintf_r+0x7a>
 800c67a:	ebba 0b04 	subs.w	fp, sl, r4
 800c67e:	d00b      	beq.n	800c698 <_vfiprintf_r+0xa4>
 800c680:	465b      	mov	r3, fp
 800c682:	4622      	mov	r2, r4
 800c684:	4629      	mov	r1, r5
 800c686:	4630      	mov	r0, r6
 800c688:	f7ff ffa1 	bl	800c5ce <__sfputs_r>
 800c68c:	3001      	adds	r0, #1
 800c68e:	f000 80a9 	beq.w	800c7e4 <_vfiprintf_r+0x1f0>
 800c692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c694:	445a      	add	r2, fp
 800c696:	9209      	str	r2, [sp, #36]	; 0x24
 800c698:	f89a 3000 	ldrb.w	r3, [sl]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 80a1 	beq.w	800c7e4 <_vfiprintf_r+0x1f0>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ac:	f10a 0a01 	add.w	sl, sl, #1
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	9307      	str	r3, [sp, #28]
 800c6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ba:	4654      	mov	r4, sl
 800c6bc:	2205      	movs	r2, #5
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	4854      	ldr	r0, [pc, #336]	; (800c814 <_vfiprintf_r+0x220>)
 800c6c4:	f7f3 fd8c 	bl	80001e0 <memchr>
 800c6c8:	9a04      	ldr	r2, [sp, #16]
 800c6ca:	b9d8      	cbnz	r0, 800c704 <_vfiprintf_r+0x110>
 800c6cc:	06d1      	lsls	r1, r2, #27
 800c6ce:	bf44      	itt	mi
 800c6d0:	2320      	movmi	r3, #32
 800c6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d6:	0713      	lsls	r3, r2, #28
 800c6d8:	bf44      	itt	mi
 800c6da:	232b      	movmi	r3, #43	; 0x2b
 800c6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e6:	d015      	beq.n	800c714 <_vfiprintf_r+0x120>
 800c6e8:	9a07      	ldr	r2, [sp, #28]
 800c6ea:	4654      	mov	r4, sl
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f04f 0c0a 	mov.w	ip, #10
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6f8:	3b30      	subs	r3, #48	; 0x30
 800c6fa:	2b09      	cmp	r3, #9
 800c6fc:	d94d      	bls.n	800c79a <_vfiprintf_r+0x1a6>
 800c6fe:	b1b0      	cbz	r0, 800c72e <_vfiprintf_r+0x13a>
 800c700:	9207      	str	r2, [sp, #28]
 800c702:	e014      	b.n	800c72e <_vfiprintf_r+0x13a>
 800c704:	eba0 0308 	sub.w	r3, r0, r8
 800c708:	fa09 f303 	lsl.w	r3, r9, r3
 800c70c:	4313      	orrs	r3, r2
 800c70e:	9304      	str	r3, [sp, #16]
 800c710:	46a2      	mov	sl, r4
 800c712:	e7d2      	b.n	800c6ba <_vfiprintf_r+0xc6>
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	1d19      	adds	r1, r3, #4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	9103      	str	r1, [sp, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	bfbb      	ittet	lt
 800c720:	425b      	neglt	r3, r3
 800c722:	f042 0202 	orrlt.w	r2, r2, #2
 800c726:	9307      	strge	r3, [sp, #28]
 800c728:	9307      	strlt	r3, [sp, #28]
 800c72a:	bfb8      	it	lt
 800c72c:	9204      	strlt	r2, [sp, #16]
 800c72e:	7823      	ldrb	r3, [r4, #0]
 800c730:	2b2e      	cmp	r3, #46	; 0x2e
 800c732:	d10c      	bne.n	800c74e <_vfiprintf_r+0x15a>
 800c734:	7863      	ldrb	r3, [r4, #1]
 800c736:	2b2a      	cmp	r3, #42	; 0x2a
 800c738:	d134      	bne.n	800c7a4 <_vfiprintf_r+0x1b0>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	1d1a      	adds	r2, r3, #4
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	9203      	str	r2, [sp, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	bfb8      	it	lt
 800c746:	f04f 33ff 	movlt.w	r3, #4294967295
 800c74a:	3402      	adds	r4, #2
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c824 <_vfiprintf_r+0x230>
 800c752:	7821      	ldrb	r1, [r4, #0]
 800c754:	2203      	movs	r2, #3
 800c756:	4650      	mov	r0, sl
 800c758:	f7f3 fd42 	bl	80001e0 <memchr>
 800c75c:	b138      	cbz	r0, 800c76e <_vfiprintf_r+0x17a>
 800c75e:	9b04      	ldr	r3, [sp, #16]
 800c760:	eba0 000a 	sub.w	r0, r0, sl
 800c764:	2240      	movs	r2, #64	; 0x40
 800c766:	4082      	lsls	r2, r0
 800c768:	4313      	orrs	r3, r2
 800c76a:	3401      	adds	r4, #1
 800c76c:	9304      	str	r3, [sp, #16]
 800c76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c772:	4829      	ldr	r0, [pc, #164]	; (800c818 <_vfiprintf_r+0x224>)
 800c774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c778:	2206      	movs	r2, #6
 800c77a:	f7f3 fd31 	bl	80001e0 <memchr>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d03f      	beq.n	800c802 <_vfiprintf_r+0x20e>
 800c782:	4b26      	ldr	r3, [pc, #152]	; (800c81c <_vfiprintf_r+0x228>)
 800c784:	bb1b      	cbnz	r3, 800c7ce <_vfiprintf_r+0x1da>
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	3307      	adds	r3, #7
 800c78a:	f023 0307 	bic.w	r3, r3, #7
 800c78e:	3308      	adds	r3, #8
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c794:	443b      	add	r3, r7
 800c796:	9309      	str	r3, [sp, #36]	; 0x24
 800c798:	e768      	b.n	800c66c <_vfiprintf_r+0x78>
 800c79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c79e:	460c      	mov	r4, r1
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	e7a6      	b.n	800c6f2 <_vfiprintf_r+0xfe>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	3401      	adds	r4, #1
 800c7a8:	9305      	str	r3, [sp, #20]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f04f 0c0a 	mov.w	ip, #10
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b6:	3a30      	subs	r2, #48	; 0x30
 800c7b8:	2a09      	cmp	r2, #9
 800c7ba:	d903      	bls.n	800c7c4 <_vfiprintf_r+0x1d0>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0c6      	beq.n	800c74e <_vfiprintf_r+0x15a>
 800c7c0:	9105      	str	r1, [sp, #20]
 800c7c2:	e7c4      	b.n	800c74e <_vfiprintf_r+0x15a>
 800c7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e7f0      	b.n	800c7b0 <_vfiprintf_r+0x1bc>
 800c7ce:	ab03      	add	r3, sp, #12
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	462a      	mov	r2, r5
 800c7d4:	4b12      	ldr	r3, [pc, #72]	; (800c820 <_vfiprintf_r+0x22c>)
 800c7d6:	a904      	add	r1, sp, #16
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f7fc fcc5 	bl	8009168 <_printf_float>
 800c7de:	4607      	mov	r7, r0
 800c7e0:	1c78      	adds	r0, r7, #1
 800c7e2:	d1d6      	bne.n	800c792 <_vfiprintf_r+0x19e>
 800c7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e6:	07d9      	lsls	r1, r3, #31
 800c7e8:	d405      	bmi.n	800c7f6 <_vfiprintf_r+0x202>
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	059a      	lsls	r2, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_vfiprintf_r+0x202>
 800c7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f2:	f7fd fdd1 	bl	800a398 <__retarget_lock_release_recursive>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	065b      	lsls	r3, r3, #25
 800c7fa:	f53f af1d 	bmi.w	800c638 <_vfiprintf_r+0x44>
 800c7fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c800:	e71c      	b.n	800c63c <_vfiprintf_r+0x48>
 800c802:	ab03      	add	r3, sp, #12
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	462a      	mov	r2, r5
 800c808:	4b05      	ldr	r3, [pc, #20]	; (800c820 <_vfiprintf_r+0x22c>)
 800c80a:	a904      	add	r1, sp, #16
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7fc ff4f 	bl	80096b0 <_printf_i>
 800c812:	e7e4      	b.n	800c7de <_vfiprintf_r+0x1ea>
 800c814:	0800f235 	.word	0x0800f235
 800c818:	0800f23f 	.word	0x0800f23f
 800c81c:	08009169 	.word	0x08009169
 800c820:	0800c5cf 	.word	0x0800c5cf
 800c824:	0800f23b 	.word	0x0800f23b

0800c828 <__sflush_r>:
 800c828:	898a      	ldrh	r2, [r1, #12]
 800c82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82e:	4605      	mov	r5, r0
 800c830:	0710      	lsls	r0, r2, #28
 800c832:	460c      	mov	r4, r1
 800c834:	d458      	bmi.n	800c8e8 <__sflush_r+0xc0>
 800c836:	684b      	ldr	r3, [r1, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dc05      	bgt.n	800c848 <__sflush_r+0x20>
 800c83c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dc02      	bgt.n	800c848 <__sflush_r+0x20>
 800c842:	2000      	movs	r0, #0
 800c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c84a:	2e00      	cmp	r6, #0
 800c84c:	d0f9      	beq.n	800c842 <__sflush_r+0x1a>
 800c84e:	2300      	movs	r3, #0
 800c850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c854:	682f      	ldr	r7, [r5, #0]
 800c856:	6a21      	ldr	r1, [r4, #32]
 800c858:	602b      	str	r3, [r5, #0]
 800c85a:	d032      	beq.n	800c8c2 <__sflush_r+0x9a>
 800c85c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	075a      	lsls	r2, r3, #29
 800c862:	d505      	bpl.n	800c870 <__sflush_r+0x48>
 800c864:	6863      	ldr	r3, [r4, #4]
 800c866:	1ac0      	subs	r0, r0, r3
 800c868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c86a:	b10b      	cbz	r3, 800c870 <__sflush_r+0x48>
 800c86c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c86e:	1ac0      	subs	r0, r0, r3
 800c870:	2300      	movs	r3, #0
 800c872:	4602      	mov	r2, r0
 800c874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c876:	6a21      	ldr	r1, [r4, #32]
 800c878:	4628      	mov	r0, r5
 800c87a:	47b0      	blx	r6
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	d106      	bne.n	800c890 <__sflush_r+0x68>
 800c882:	6829      	ldr	r1, [r5, #0]
 800c884:	291d      	cmp	r1, #29
 800c886:	d82b      	bhi.n	800c8e0 <__sflush_r+0xb8>
 800c888:	4a29      	ldr	r2, [pc, #164]	; (800c930 <__sflush_r+0x108>)
 800c88a:	410a      	asrs	r2, r1
 800c88c:	07d6      	lsls	r6, r2, #31
 800c88e:	d427      	bmi.n	800c8e0 <__sflush_r+0xb8>
 800c890:	2200      	movs	r2, #0
 800c892:	6062      	str	r2, [r4, #4]
 800c894:	04d9      	lsls	r1, r3, #19
 800c896:	6922      	ldr	r2, [r4, #16]
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	d504      	bpl.n	800c8a6 <__sflush_r+0x7e>
 800c89c:	1c42      	adds	r2, r0, #1
 800c89e:	d101      	bne.n	800c8a4 <__sflush_r+0x7c>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b903      	cbnz	r3, 800c8a6 <__sflush_r+0x7e>
 800c8a4:	6560      	str	r0, [r4, #84]	; 0x54
 800c8a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8a8:	602f      	str	r7, [r5, #0]
 800c8aa:	2900      	cmp	r1, #0
 800c8ac:	d0c9      	beq.n	800c842 <__sflush_r+0x1a>
 800c8ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	d002      	beq.n	800c8bc <__sflush_r+0x94>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f7fe fc24 	bl	800b104 <_free_r>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	6360      	str	r0, [r4, #52]	; 0x34
 800c8c0:	e7c0      	b.n	800c844 <__sflush_r+0x1c>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b0      	blx	r6
 800c8c8:	1c41      	adds	r1, r0, #1
 800c8ca:	d1c8      	bne.n	800c85e <__sflush_r+0x36>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c5      	beq.n	800c85e <__sflush_r+0x36>
 800c8d2:	2b1d      	cmp	r3, #29
 800c8d4:	d001      	beq.n	800c8da <__sflush_r+0xb2>
 800c8d6:	2b16      	cmp	r3, #22
 800c8d8:	d101      	bne.n	800c8de <__sflush_r+0xb6>
 800c8da:	602f      	str	r7, [r5, #0]
 800c8dc:	e7b1      	b.n	800c842 <__sflush_r+0x1a>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	e7ad      	b.n	800c844 <__sflush_r+0x1c>
 800c8e8:	690f      	ldr	r7, [r1, #16]
 800c8ea:	2f00      	cmp	r7, #0
 800c8ec:	d0a9      	beq.n	800c842 <__sflush_r+0x1a>
 800c8ee:	0793      	lsls	r3, r2, #30
 800c8f0:	680e      	ldr	r6, [r1, #0]
 800c8f2:	bf08      	it	eq
 800c8f4:	694b      	ldreq	r3, [r1, #20]
 800c8f6:	600f      	str	r7, [r1, #0]
 800c8f8:	bf18      	it	ne
 800c8fa:	2300      	movne	r3, #0
 800c8fc:	eba6 0807 	sub.w	r8, r6, r7
 800c900:	608b      	str	r3, [r1, #8]
 800c902:	f1b8 0f00 	cmp.w	r8, #0
 800c906:	dd9c      	ble.n	800c842 <__sflush_r+0x1a>
 800c908:	6a21      	ldr	r1, [r4, #32]
 800c90a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c90c:	4643      	mov	r3, r8
 800c90e:	463a      	mov	r2, r7
 800c910:	4628      	mov	r0, r5
 800c912:	47b0      	blx	r6
 800c914:	2800      	cmp	r0, #0
 800c916:	dc06      	bgt.n	800c926 <__sflush_r+0xfe>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	e78e      	b.n	800c844 <__sflush_r+0x1c>
 800c926:	4407      	add	r7, r0
 800c928:	eba8 0800 	sub.w	r8, r8, r0
 800c92c:	e7e9      	b.n	800c902 <__sflush_r+0xda>
 800c92e:	bf00      	nop
 800c930:	dfbffffe 	.word	0xdfbffffe

0800c934 <_fflush_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	690b      	ldr	r3, [r1, #16]
 800c938:	4605      	mov	r5, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b913      	cbnz	r3, 800c944 <_fflush_r+0x10>
 800c93e:	2500      	movs	r5, #0
 800c940:	4628      	mov	r0, r5
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	b118      	cbz	r0, 800c94e <_fflush_r+0x1a>
 800c946:	6a03      	ldr	r3, [r0, #32]
 800c948:	b90b      	cbnz	r3, 800c94e <_fflush_r+0x1a>
 800c94a:	f7fd fa6f 	bl	8009e2c <__sinit>
 800c94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f3      	beq.n	800c93e <_fflush_r+0xa>
 800c956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c958:	07d0      	lsls	r0, r2, #31
 800c95a:	d404      	bmi.n	800c966 <_fflush_r+0x32>
 800c95c:	0599      	lsls	r1, r3, #22
 800c95e:	d402      	bmi.n	800c966 <_fflush_r+0x32>
 800c960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c962:	f7fd fd18 	bl	800a396 <__retarget_lock_acquire_recursive>
 800c966:	4628      	mov	r0, r5
 800c968:	4621      	mov	r1, r4
 800c96a:	f7ff ff5d 	bl	800c828 <__sflush_r>
 800c96e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c970:	07da      	lsls	r2, r3, #31
 800c972:	4605      	mov	r5, r0
 800c974:	d4e4      	bmi.n	800c940 <_fflush_r+0xc>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	059b      	lsls	r3, r3, #22
 800c97a:	d4e1      	bmi.n	800c940 <_fflush_r+0xc>
 800c97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c97e:	f7fd fd0b 	bl	800a398 <__retarget_lock_release_recursive>
 800c982:	e7dd      	b.n	800c940 <_fflush_r+0xc>

0800c984 <fiprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b503      	push	{r0, r1, lr}
 800c988:	4601      	mov	r1, r0
 800c98a:	ab03      	add	r3, sp, #12
 800c98c:	4805      	ldr	r0, [pc, #20]	; (800c9a4 <fiprintf+0x20>)
 800c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c992:	6800      	ldr	r0, [r0, #0]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	f7ff fe2d 	bl	800c5f4 <_vfiprintf_r>
 800c99a:	b002      	add	sp, #8
 800c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a0:	b003      	add	sp, #12
 800c9a2:	4770      	bx	lr
 800c9a4:	200001e0 	.word	0x200001e0

0800c9a8 <__swhatbuf_r>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	b096      	sub	sp, #88	; 0x58
 800c9b4:	4615      	mov	r5, r2
 800c9b6:	461e      	mov	r6, r3
 800c9b8:	da0d      	bge.n	800c9d6 <__swhatbuf_r+0x2e>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9c0:	f04f 0100 	mov.w	r1, #0
 800c9c4:	bf0c      	ite	eq
 800c9c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c9ca:	2340      	movne	r3, #64	; 0x40
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	6031      	str	r1, [r6, #0]
 800c9d0:	602b      	str	r3, [r5, #0]
 800c9d2:	b016      	add	sp, #88	; 0x58
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
 800c9d6:	466a      	mov	r2, sp
 800c9d8:	f000 f862 	bl	800caa0 <_fstat_r>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	dbec      	blt.n	800c9ba <__swhatbuf_r+0x12>
 800c9e0:	9901      	ldr	r1, [sp, #4]
 800c9e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c9e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9ea:	4259      	negs	r1, r3
 800c9ec:	4159      	adcs	r1, r3
 800c9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f2:	e7eb      	b.n	800c9cc <__swhatbuf_r+0x24>

0800c9f4 <__smakebuf_r>:
 800c9f4:	898b      	ldrh	r3, [r1, #12]
 800c9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9f8:	079d      	lsls	r5, r3, #30
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	d507      	bpl.n	800ca10 <__smakebuf_r+0x1c>
 800ca00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	6123      	str	r3, [r4, #16]
 800ca08:	2301      	movs	r3, #1
 800ca0a:	6163      	str	r3, [r4, #20]
 800ca0c:	b002      	add	sp, #8
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	ab01      	add	r3, sp, #4
 800ca12:	466a      	mov	r2, sp
 800ca14:	f7ff ffc8 	bl	800c9a8 <__swhatbuf_r>
 800ca18:	9900      	ldr	r1, [sp, #0]
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7fb fbfd 	bl	800821c <_malloc_r>
 800ca22:	b948      	cbnz	r0, 800ca38 <__smakebuf_r+0x44>
 800ca24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca28:	059a      	lsls	r2, r3, #22
 800ca2a:	d4ef      	bmi.n	800ca0c <__smakebuf_r+0x18>
 800ca2c:	f023 0303 	bic.w	r3, r3, #3
 800ca30:	f043 0302 	orr.w	r3, r3, #2
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	e7e3      	b.n	800ca00 <__smakebuf_r+0xc>
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	6020      	str	r0, [r4, #0]
 800ca3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	9b00      	ldr	r3, [sp, #0]
 800ca44:	6163      	str	r3, [r4, #20]
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	6120      	str	r0, [r4, #16]
 800ca4a:	b15b      	cbz	r3, 800ca64 <__smakebuf_r+0x70>
 800ca4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca50:	4630      	mov	r0, r6
 800ca52:	f000 f837 	bl	800cac4 <_isatty_r>
 800ca56:	b128      	cbz	r0, 800ca64 <__smakebuf_r+0x70>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	f023 0303 	bic.w	r3, r3, #3
 800ca5e:	f043 0301 	orr.w	r3, r3, #1
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	431d      	orrs	r5, r3
 800ca68:	81a5      	strh	r5, [r4, #12]
 800ca6a:	e7cf      	b.n	800ca0c <__smakebuf_r+0x18>

0800ca6c <memmove>:
 800ca6c:	4288      	cmp	r0, r1
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	eb01 0402 	add.w	r4, r1, r2
 800ca74:	d902      	bls.n	800ca7c <memmove+0x10>
 800ca76:	4284      	cmp	r4, r0
 800ca78:	4623      	mov	r3, r4
 800ca7a:	d807      	bhi.n	800ca8c <memmove+0x20>
 800ca7c:	1e43      	subs	r3, r0, #1
 800ca7e:	42a1      	cmp	r1, r4
 800ca80:	d008      	beq.n	800ca94 <memmove+0x28>
 800ca82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca8a:	e7f8      	b.n	800ca7e <memmove+0x12>
 800ca8c:	4402      	add	r2, r0
 800ca8e:	4601      	mov	r1, r0
 800ca90:	428a      	cmp	r2, r1
 800ca92:	d100      	bne.n	800ca96 <memmove+0x2a>
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca9e:	e7f7      	b.n	800ca90 <memmove+0x24>

0800caa0 <_fstat_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	4d07      	ldr	r5, [pc, #28]	; (800cac0 <_fstat_r+0x20>)
 800caa4:	2300      	movs	r3, #0
 800caa6:	4604      	mov	r4, r0
 800caa8:	4608      	mov	r0, r1
 800caaa:	4611      	mov	r1, r2
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	f7f7 f9d4 	bl	8003e5a <_fstat>
 800cab2:	1c43      	adds	r3, r0, #1
 800cab4:	d102      	bne.n	800cabc <_fstat_r+0x1c>
 800cab6:	682b      	ldr	r3, [r5, #0]
 800cab8:	b103      	cbz	r3, 800cabc <_fstat_r+0x1c>
 800caba:	6023      	str	r3, [r4, #0]
 800cabc:	bd38      	pop	{r3, r4, r5, pc}
 800cabe:	bf00      	nop
 800cac0:	20000704 	.word	0x20000704

0800cac4 <_isatty_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d06      	ldr	r5, [pc, #24]	; (800cae0 <_isatty_r+0x1c>)
 800cac8:	2300      	movs	r3, #0
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	602b      	str	r3, [r5, #0]
 800cad0:	f7f7 f9d3 	bl	8003e7a <_isatty>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_isatty_r+0x1a>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	b103      	cbz	r3, 800cade <_isatty_r+0x1a>
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	20000704 	.word	0x20000704

0800cae4 <abort>:
 800cae4:	b508      	push	{r3, lr}
 800cae6:	2006      	movs	r0, #6
 800cae8:	f000 f870 	bl	800cbcc <raise>
 800caec:	2001      	movs	r0, #1
 800caee:	f7f7 f965 	bl	8003dbc <_exit>

0800caf2 <_calloc_r>:
 800caf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caf4:	fba1 2402 	umull	r2, r4, r1, r2
 800caf8:	b94c      	cbnz	r4, 800cb0e <_calloc_r+0x1c>
 800cafa:	4611      	mov	r1, r2
 800cafc:	9201      	str	r2, [sp, #4]
 800cafe:	f7fb fb8d 	bl	800821c <_malloc_r>
 800cb02:	9a01      	ldr	r2, [sp, #4]
 800cb04:	4605      	mov	r5, r0
 800cb06:	b930      	cbnz	r0, 800cb16 <_calloc_r+0x24>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	b003      	add	sp, #12
 800cb0c:	bd30      	pop	{r4, r5, pc}
 800cb0e:	220c      	movs	r2, #12
 800cb10:	6002      	str	r2, [r0, #0]
 800cb12:	2500      	movs	r5, #0
 800cb14:	e7f8      	b.n	800cb08 <_calloc_r+0x16>
 800cb16:	4621      	mov	r1, r4
 800cb18:	f7fd fb24 	bl	800a164 <memset>
 800cb1c:	e7f4      	b.n	800cb08 <_calloc_r+0x16>

0800cb1e <_realloc_r>:
 800cb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb22:	4680      	mov	r8, r0
 800cb24:	4614      	mov	r4, r2
 800cb26:	460e      	mov	r6, r1
 800cb28:	b921      	cbnz	r1, 800cb34 <_realloc_r+0x16>
 800cb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2e:	4611      	mov	r1, r2
 800cb30:	f7fb bb74 	b.w	800821c <_malloc_r>
 800cb34:	b92a      	cbnz	r2, 800cb42 <_realloc_r+0x24>
 800cb36:	f7fe fae5 	bl	800b104 <_free_r>
 800cb3a:	4625      	mov	r5, r4
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb42:	f000 f85f 	bl	800cc04 <_malloc_usable_size_r>
 800cb46:	4284      	cmp	r4, r0
 800cb48:	4607      	mov	r7, r0
 800cb4a:	d802      	bhi.n	800cb52 <_realloc_r+0x34>
 800cb4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb50:	d812      	bhi.n	800cb78 <_realloc_r+0x5a>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4640      	mov	r0, r8
 800cb56:	f7fb fb61 	bl	800821c <_malloc_r>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0ed      	beq.n	800cb3c <_realloc_r+0x1e>
 800cb60:	42bc      	cmp	r4, r7
 800cb62:	4622      	mov	r2, r4
 800cb64:	4631      	mov	r1, r6
 800cb66:	bf28      	it	cs
 800cb68:	463a      	movcs	r2, r7
 800cb6a:	f7fd fc16 	bl	800a39a <memcpy>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4640      	mov	r0, r8
 800cb72:	f7fe fac7 	bl	800b104 <_free_r>
 800cb76:	e7e1      	b.n	800cb3c <_realloc_r+0x1e>
 800cb78:	4635      	mov	r5, r6
 800cb7a:	e7df      	b.n	800cb3c <_realloc_r+0x1e>

0800cb7c <_raise_r>:
 800cb7c:	291f      	cmp	r1, #31
 800cb7e:	b538      	push	{r3, r4, r5, lr}
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	d904      	bls.n	800cb90 <_raise_r+0x14>
 800cb86:	2316      	movs	r3, #22
 800cb88:	6003      	str	r3, [r0, #0]
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cb92:	b112      	cbz	r2, 800cb9a <_raise_r+0x1e>
 800cb94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb98:	b94b      	cbnz	r3, 800cbae <_raise_r+0x32>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 f830 	bl	800cc00 <_getpid_r>
 800cba0:	462a      	mov	r2, r5
 800cba2:	4601      	mov	r1, r0
 800cba4:	4620      	mov	r0, r4
 800cba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbaa:	f000 b817 	b.w	800cbdc <_kill_r>
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d00a      	beq.n	800cbc8 <_raise_r+0x4c>
 800cbb2:	1c59      	adds	r1, r3, #1
 800cbb4:	d103      	bne.n	800cbbe <_raise_r+0x42>
 800cbb6:	2316      	movs	r3, #22
 800cbb8:	6003      	str	r3, [r0, #0]
 800cbba:	2001      	movs	r0, #1
 800cbbc:	e7e7      	b.n	800cb8e <_raise_r+0x12>
 800cbbe:	2400      	movs	r4, #0
 800cbc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	4798      	blx	r3
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7e0      	b.n	800cb8e <_raise_r+0x12>

0800cbcc <raise>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <raise+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f7ff bfd3 	b.w	800cb7c <_raise_r>
 800cbd6:	bf00      	nop
 800cbd8:	200001e0 	.word	0x200001e0

0800cbdc <_kill_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	; (800cbfc <_kill_r+0x20>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	f7f7 f8d7 	bl	8003d9c <_kill>
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	d102      	bne.n	800cbf8 <_kill_r+0x1c>
 800cbf2:	682b      	ldr	r3, [r5, #0]
 800cbf4:	b103      	cbz	r3, 800cbf8 <_kill_r+0x1c>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20000704 	.word	0x20000704

0800cc00 <_getpid_r>:
 800cc00:	f7f7 b8c4 	b.w	8003d8c <_getpid>

0800cc04 <_malloc_usable_size_r>:
 800cc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc08:	1f18      	subs	r0, r3, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfbc      	itt	lt
 800cc0e:	580b      	ldrlt	r3, [r1, r0]
 800cc10:	18c0      	addlt	r0, r0, r3
 800cc12:	4770      	bx	lr

0800cc14 <pow>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	ed2d 8b02 	vpush	{d8}
 800cc1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc1e:	eef0 8a60 	vmov.f32	s17, s1
 800cc22:	ec55 4b11 	vmov	r4, r5, d1
 800cc26:	f000 fbaf 	bl	800d388 <__ieee754_pow>
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	ec57 6b10 	vmov	r6, r7, d0
 800cc36:	f7f3 ff81 	bl	8000b3c <__aeabi_dcmpun>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d13b      	bne.n	800ccb6 <pow+0xa2>
 800cc3e:	ec51 0b18 	vmov	r0, r1, d8
 800cc42:	2200      	movs	r2, #0
 800cc44:	2300      	movs	r3, #0
 800cc46:	f7f3 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc4a:	b1b8      	cbz	r0, 800cc7c <pow+0x68>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2300      	movs	r3, #0
 800cc50:	4620      	mov	r0, r4
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7f3 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d146      	bne.n	800ccea <pow+0xd6>
 800cc5c:	ec45 4b10 	vmov	d0, r4, r5
 800cc60:	f000 f922 	bl	800cea8 <finite>
 800cc64:	b338      	cbz	r0, 800ccb6 <pow+0xa2>
 800cc66:	2200      	movs	r2, #0
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	f7f3 ff3d 	bl	8000aec <__aeabi_dcmplt>
 800cc72:	b300      	cbz	r0, 800ccb6 <pow+0xa2>
 800cc74:	f7fd fb64 	bl	800a340 <__errno>
 800cc78:	2322      	movs	r3, #34	; 0x22
 800cc7a:	e01b      	b.n	800ccb4 <pow+0xa0>
 800cc7c:	ec47 6b10 	vmov	d0, r6, r7
 800cc80:	f000 f912 	bl	800cea8 <finite>
 800cc84:	b9e0      	cbnz	r0, 800ccc0 <pow+0xac>
 800cc86:	eeb0 0a48 	vmov.f32	s0, s16
 800cc8a:	eef0 0a68 	vmov.f32	s1, s17
 800cc8e:	f000 f90b 	bl	800cea8 <finite>
 800cc92:	b1a8      	cbz	r0, 800ccc0 <pow+0xac>
 800cc94:	ec45 4b10 	vmov	d0, r4, r5
 800cc98:	f000 f906 	bl	800cea8 <finite>
 800cc9c:	b180      	cbz	r0, 800ccc0 <pow+0xac>
 800cc9e:	4632      	mov	r2, r6
 800cca0:	463b      	mov	r3, r7
 800cca2:	4630      	mov	r0, r6
 800cca4:	4639      	mov	r1, r7
 800cca6:	f7f3 ff49 	bl	8000b3c <__aeabi_dcmpun>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d0e2      	beq.n	800cc74 <pow+0x60>
 800ccae:	f7fd fb47 	bl	800a340 <__errno>
 800ccb2:	2321      	movs	r3, #33	; 0x21
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	ecbd 8b02 	vpop	{d8}
 800ccba:	ec47 6b10 	vmov	d0, r6, r7
 800ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d0f2      	beq.n	800ccb6 <pow+0xa2>
 800ccd0:	eeb0 0a48 	vmov.f32	s0, s16
 800ccd4:	eef0 0a68 	vmov.f32	s1, s17
 800ccd8:	f000 f8e6 	bl	800cea8 <finite>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d0ea      	beq.n	800ccb6 <pow+0xa2>
 800cce0:	ec45 4b10 	vmov	d0, r4, r5
 800cce4:	f000 f8e0 	bl	800cea8 <finite>
 800cce8:	e7c3      	b.n	800cc72 <pow+0x5e>
 800ccea:	4f01      	ldr	r7, [pc, #4]	; (800ccf0 <pow+0xdc>)
 800ccec:	2600      	movs	r6, #0
 800ccee:	e7e2      	b.n	800ccb6 <pow+0xa2>
 800ccf0:	3ff00000 	.word	0x3ff00000

0800ccf4 <sqrt>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	ed2d 8b02 	vpush	{d8}
 800ccfa:	ec55 4b10 	vmov	r4, r5, d0
 800ccfe:	f000 f8df 	bl	800cec0 <__ieee754_sqrt>
 800cd02:	4622      	mov	r2, r4
 800cd04:	462b      	mov	r3, r5
 800cd06:	4620      	mov	r0, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	eeb0 8a40 	vmov.f32	s16, s0
 800cd0e:	eef0 8a60 	vmov.f32	s17, s1
 800cd12:	f7f3 ff13 	bl	8000b3c <__aeabi_dcmpun>
 800cd16:	b990      	cbnz	r0, 800cd3e <sqrt+0x4a>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	4629      	mov	r1, r5
 800cd20:	f7f3 fee4 	bl	8000aec <__aeabi_dcmplt>
 800cd24:	b158      	cbz	r0, 800cd3e <sqrt+0x4a>
 800cd26:	f7fd fb0b 	bl	800a340 <__errno>
 800cd2a:	2321      	movs	r3, #33	; 0x21
 800cd2c:	6003      	str	r3, [r0, #0]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	4610      	mov	r0, r2
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7f3 fd91 	bl	800085c <__aeabi_ddiv>
 800cd3a:	ec41 0b18 	vmov	d8, r0, r1
 800cd3e:	eeb0 0a48 	vmov.f32	s0, s16
 800cd42:	eef0 0a68 	vmov.f32	s1, s17
 800cd46:	ecbd 8b02 	vpop	{d8}
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	0000      	movs	r0, r0
	...

0800cd50 <cos>:
 800cd50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd52:	ec53 2b10 	vmov	r2, r3, d0
 800cd56:	4826      	ldr	r0, [pc, #152]	; (800cdf0 <cos+0xa0>)
 800cd58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd5c:	4281      	cmp	r1, r0
 800cd5e:	dc06      	bgt.n	800cd6e <cos+0x1e>
 800cd60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cde8 <cos+0x98>
 800cd64:	b005      	add	sp, #20
 800cd66:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd6a:	f000 b985 	b.w	800d078 <__kernel_cos>
 800cd6e:	4821      	ldr	r0, [pc, #132]	; (800cdf4 <cos+0xa4>)
 800cd70:	4281      	cmp	r1, r0
 800cd72:	dd09      	ble.n	800cd88 <cos+0x38>
 800cd74:	ee10 0a10 	vmov	r0, s0
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f7f3 fa8d 	bl	8000298 <__aeabi_dsub>
 800cd7e:	ec41 0b10 	vmov	d0, r0, r1
 800cd82:	b005      	add	sp, #20
 800cd84:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd88:	4668      	mov	r0, sp
 800cd8a:	f001 f829 	bl	800dde0 <__ieee754_rem_pio2>
 800cd8e:	f000 0003 	and.w	r0, r0, #3
 800cd92:	2801      	cmp	r0, #1
 800cd94:	d00b      	beq.n	800cdae <cos+0x5e>
 800cd96:	2802      	cmp	r0, #2
 800cd98:	d016      	beq.n	800cdc8 <cos+0x78>
 800cd9a:	b9e0      	cbnz	r0, 800cdd6 <cos+0x86>
 800cd9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cda0:	ed9d 0b00 	vldr	d0, [sp]
 800cda4:	f000 f968 	bl	800d078 <__kernel_cos>
 800cda8:	ec51 0b10 	vmov	r0, r1, d0
 800cdac:	e7e7      	b.n	800cd7e <cos+0x2e>
 800cdae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdb2:	ed9d 0b00 	vldr	d0, [sp]
 800cdb6:	f000 fa27 	bl	800d208 <__kernel_sin>
 800cdba:	ec53 2b10 	vmov	r2, r3, d0
 800cdbe:	ee10 0a10 	vmov	r0, s0
 800cdc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdc6:	e7da      	b.n	800cd7e <cos+0x2e>
 800cdc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdcc:	ed9d 0b00 	vldr	d0, [sp]
 800cdd0:	f000 f952 	bl	800d078 <__kernel_cos>
 800cdd4:	e7f1      	b.n	800cdba <cos+0x6a>
 800cdd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdda:	ed9d 0b00 	vldr	d0, [sp]
 800cdde:	2001      	movs	r0, #1
 800cde0:	f000 fa12 	bl	800d208 <__kernel_sin>
 800cde4:	e7e0      	b.n	800cda8 <cos+0x58>
 800cde6:	bf00      	nop
	...
 800cdf0:	3fe921fb 	.word	0x3fe921fb
 800cdf4:	7fefffff 	.word	0x7fefffff

0800cdf8 <sin>:
 800cdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdfa:	ec53 2b10 	vmov	r2, r3, d0
 800cdfe:	4828      	ldr	r0, [pc, #160]	; (800cea0 <sin+0xa8>)
 800ce00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce04:	4281      	cmp	r1, r0
 800ce06:	dc07      	bgt.n	800ce18 <sin+0x20>
 800ce08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ce98 <sin+0xa0>
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	b005      	add	sp, #20
 800ce10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce14:	f000 b9f8 	b.w	800d208 <__kernel_sin>
 800ce18:	4822      	ldr	r0, [pc, #136]	; (800cea4 <sin+0xac>)
 800ce1a:	4281      	cmp	r1, r0
 800ce1c:	dd09      	ble.n	800ce32 <sin+0x3a>
 800ce1e:	ee10 0a10 	vmov	r0, s0
 800ce22:	4619      	mov	r1, r3
 800ce24:	f7f3 fa38 	bl	8000298 <__aeabi_dsub>
 800ce28:	ec41 0b10 	vmov	d0, r0, r1
 800ce2c:	b005      	add	sp, #20
 800ce2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce32:	4668      	mov	r0, sp
 800ce34:	f000 ffd4 	bl	800dde0 <__ieee754_rem_pio2>
 800ce38:	f000 0003 	and.w	r0, r0, #3
 800ce3c:	2801      	cmp	r0, #1
 800ce3e:	d00c      	beq.n	800ce5a <sin+0x62>
 800ce40:	2802      	cmp	r0, #2
 800ce42:	d011      	beq.n	800ce68 <sin+0x70>
 800ce44:	b9f0      	cbnz	r0, 800ce84 <sin+0x8c>
 800ce46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce4a:	ed9d 0b00 	vldr	d0, [sp]
 800ce4e:	2001      	movs	r0, #1
 800ce50:	f000 f9da 	bl	800d208 <__kernel_sin>
 800ce54:	ec51 0b10 	vmov	r0, r1, d0
 800ce58:	e7e6      	b.n	800ce28 <sin+0x30>
 800ce5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce5e:	ed9d 0b00 	vldr	d0, [sp]
 800ce62:	f000 f909 	bl	800d078 <__kernel_cos>
 800ce66:	e7f5      	b.n	800ce54 <sin+0x5c>
 800ce68:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce6c:	ed9d 0b00 	vldr	d0, [sp]
 800ce70:	2001      	movs	r0, #1
 800ce72:	f000 f9c9 	bl	800d208 <__kernel_sin>
 800ce76:	ec53 2b10 	vmov	r2, r3, d0
 800ce7a:	ee10 0a10 	vmov	r0, s0
 800ce7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce82:	e7d1      	b.n	800ce28 <sin+0x30>
 800ce84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce88:	ed9d 0b00 	vldr	d0, [sp]
 800ce8c:	f000 f8f4 	bl	800d078 <__kernel_cos>
 800ce90:	e7f1      	b.n	800ce76 <sin+0x7e>
 800ce92:	bf00      	nop
 800ce94:	f3af 8000 	nop.w
	...
 800cea0:	3fe921fb 	.word	0x3fe921fb
 800cea4:	7fefffff 	.word	0x7fefffff

0800cea8 <finite>:
 800cea8:	b082      	sub	sp, #8
 800ceaa:	ed8d 0b00 	vstr	d0, [sp]
 800ceae:	9801      	ldr	r0, [sp, #4]
 800ceb0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ceb4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ceb8:	0fc0      	lsrs	r0, r0, #31
 800ceba:	b002      	add	sp, #8
 800cebc:	4770      	bx	lr
	...

0800cec0 <__ieee754_sqrt>:
 800cec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	ec55 4b10 	vmov	r4, r5, d0
 800cec8:	4e67      	ldr	r6, [pc, #412]	; (800d068 <__ieee754_sqrt+0x1a8>)
 800ceca:	43ae      	bics	r6, r5
 800cecc:	ee10 0a10 	vmov	r0, s0
 800ced0:	ee10 2a10 	vmov	r2, s0
 800ced4:	4629      	mov	r1, r5
 800ced6:	462b      	mov	r3, r5
 800ced8:	d10d      	bne.n	800cef6 <__ieee754_sqrt+0x36>
 800ceda:	f7f3 fb95 	bl	8000608 <__aeabi_dmul>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4620      	mov	r0, r4
 800cee4:	4629      	mov	r1, r5
 800cee6:	f7f3 f9d9 	bl	800029c <__adddf3>
 800ceea:	4604      	mov	r4, r0
 800ceec:	460d      	mov	r5, r1
 800ceee:	ec45 4b10 	vmov	d0, r4, r5
 800cef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	dc0b      	bgt.n	800cf12 <__ieee754_sqrt+0x52>
 800cefa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cefe:	4326      	orrs	r6, r4
 800cf00:	d0f5      	beq.n	800ceee <__ieee754_sqrt+0x2e>
 800cf02:	b135      	cbz	r5, 800cf12 <__ieee754_sqrt+0x52>
 800cf04:	f7f3 f9c8 	bl	8000298 <__aeabi_dsub>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	f7f3 fca6 	bl	800085c <__aeabi_ddiv>
 800cf10:	e7eb      	b.n	800ceea <__ieee754_sqrt+0x2a>
 800cf12:	1509      	asrs	r1, r1, #20
 800cf14:	f000 808d 	beq.w	800d032 <__ieee754_sqrt+0x172>
 800cf18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf1c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cf20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf24:	07c9      	lsls	r1, r1, #31
 800cf26:	bf5c      	itt	pl
 800cf28:	005b      	lslpl	r3, r3, #1
 800cf2a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cf2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf32:	bf58      	it	pl
 800cf34:	0052      	lslpl	r2, r2, #1
 800cf36:	2500      	movs	r5, #0
 800cf38:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf3c:	1076      	asrs	r6, r6, #1
 800cf3e:	0052      	lsls	r2, r2, #1
 800cf40:	f04f 0e16 	mov.w	lr, #22
 800cf44:	46ac      	mov	ip, r5
 800cf46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf4a:	eb0c 0001 	add.w	r0, ip, r1
 800cf4e:	4298      	cmp	r0, r3
 800cf50:	bfde      	ittt	le
 800cf52:	1a1b      	suble	r3, r3, r0
 800cf54:	eb00 0c01 	addle.w	ip, r0, r1
 800cf58:	186d      	addle	r5, r5, r1
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	f1be 0e01 	subs.w	lr, lr, #1
 800cf60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cf6c:	d1ed      	bne.n	800cf4a <__ieee754_sqrt+0x8a>
 800cf6e:	4674      	mov	r4, lr
 800cf70:	2720      	movs	r7, #32
 800cf72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cf76:	4563      	cmp	r3, ip
 800cf78:	eb01 000e 	add.w	r0, r1, lr
 800cf7c:	dc02      	bgt.n	800cf84 <__ieee754_sqrt+0xc4>
 800cf7e:	d113      	bne.n	800cfa8 <__ieee754_sqrt+0xe8>
 800cf80:	4290      	cmp	r0, r2
 800cf82:	d811      	bhi.n	800cfa8 <__ieee754_sqrt+0xe8>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	eb00 0e01 	add.w	lr, r0, r1
 800cf8a:	da57      	bge.n	800d03c <__ieee754_sqrt+0x17c>
 800cf8c:	f1be 0f00 	cmp.w	lr, #0
 800cf90:	db54      	blt.n	800d03c <__ieee754_sqrt+0x17c>
 800cf92:	f10c 0801 	add.w	r8, ip, #1
 800cf96:	eba3 030c 	sub.w	r3, r3, ip
 800cf9a:	4290      	cmp	r0, r2
 800cf9c:	bf88      	it	hi
 800cf9e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cfa2:	1a12      	subs	r2, r2, r0
 800cfa4:	440c      	add	r4, r1
 800cfa6:	46c4      	mov	ip, r8
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	3f01      	subs	r7, #1
 800cfac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cfb8:	d1dd      	bne.n	800cf76 <__ieee754_sqrt+0xb6>
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	d01b      	beq.n	800cff6 <__ieee754_sqrt+0x136>
 800cfbe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d06c <__ieee754_sqrt+0x1ac>
 800cfc2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d070 <__ieee754_sqrt+0x1b0>
 800cfc6:	e9da 0100 	ldrd	r0, r1, [sl]
 800cfca:	e9db 2300 	ldrd	r2, r3, [fp]
 800cfce:	f7f3 f963 	bl	8000298 <__aeabi_dsub>
 800cfd2:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4649      	mov	r1, r9
 800cfde:	f7f3 fd8f 	bl	8000b00 <__aeabi_dcmple>
 800cfe2:	b140      	cbz	r0, 800cff6 <__ieee754_sqrt+0x136>
 800cfe4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cfe8:	e9da 0100 	ldrd	r0, r1, [sl]
 800cfec:	e9db 2300 	ldrd	r2, r3, [fp]
 800cff0:	d126      	bne.n	800d040 <__ieee754_sqrt+0x180>
 800cff2:	3501      	adds	r5, #1
 800cff4:	463c      	mov	r4, r7
 800cff6:	106a      	asrs	r2, r5, #1
 800cff8:	0863      	lsrs	r3, r4, #1
 800cffa:	07e9      	lsls	r1, r5, #31
 800cffc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d000:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d004:	bf48      	it	mi
 800d006:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d00a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d00e:	461c      	mov	r4, r3
 800d010:	e76d      	b.n	800ceee <__ieee754_sqrt+0x2e>
 800d012:	0ad3      	lsrs	r3, r2, #11
 800d014:	3815      	subs	r0, #21
 800d016:	0552      	lsls	r2, r2, #21
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0fa      	beq.n	800d012 <__ieee754_sqrt+0x152>
 800d01c:	02dc      	lsls	r4, r3, #11
 800d01e:	d50a      	bpl.n	800d036 <__ieee754_sqrt+0x176>
 800d020:	f1c1 0420 	rsb	r4, r1, #32
 800d024:	fa22 f404 	lsr.w	r4, r2, r4
 800d028:	1e4d      	subs	r5, r1, #1
 800d02a:	408a      	lsls	r2, r1
 800d02c:	4323      	orrs	r3, r4
 800d02e:	1b41      	subs	r1, r0, r5
 800d030:	e772      	b.n	800cf18 <__ieee754_sqrt+0x58>
 800d032:	4608      	mov	r0, r1
 800d034:	e7f0      	b.n	800d018 <__ieee754_sqrt+0x158>
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	3101      	adds	r1, #1
 800d03a:	e7ef      	b.n	800d01c <__ieee754_sqrt+0x15c>
 800d03c:	46e0      	mov	r8, ip
 800d03e:	e7aa      	b.n	800cf96 <__ieee754_sqrt+0xd6>
 800d040:	f7f3 f92c 	bl	800029c <__adddf3>
 800d044:	e9da 8900 	ldrd	r8, r9, [sl]
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4640      	mov	r0, r8
 800d04e:	4649      	mov	r1, r9
 800d050:	f7f3 fd4c 	bl	8000aec <__aeabi_dcmplt>
 800d054:	b120      	cbz	r0, 800d060 <__ieee754_sqrt+0x1a0>
 800d056:	1ca0      	adds	r0, r4, #2
 800d058:	bf08      	it	eq
 800d05a:	3501      	addeq	r5, #1
 800d05c:	3402      	adds	r4, #2
 800d05e:	e7ca      	b.n	800cff6 <__ieee754_sqrt+0x136>
 800d060:	3401      	adds	r4, #1
 800d062:	f024 0401 	bic.w	r4, r4, #1
 800d066:	e7c6      	b.n	800cff6 <__ieee754_sqrt+0x136>
 800d068:	7ff00000 	.word	0x7ff00000
 800d06c:	200001e8 	.word	0x200001e8
 800d070:	200001f0 	.word	0x200001f0
 800d074:	00000000 	.word	0x00000000

0800d078 <__kernel_cos>:
 800d078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	ec57 6b10 	vmov	r6, r7, d0
 800d080:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d084:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d088:	ed8d 1b00 	vstr	d1, [sp]
 800d08c:	da07      	bge.n	800d09e <__kernel_cos+0x26>
 800d08e:	ee10 0a10 	vmov	r0, s0
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 fd68 	bl	8000b68 <__aeabi_d2iz>
 800d098:	2800      	cmp	r0, #0
 800d09a:	f000 8088 	beq.w	800d1ae <__kernel_cos+0x136>
 800d09e:	4632      	mov	r2, r6
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	4639      	mov	r1, r7
 800d0a6:	f7f3 faaf 	bl	8000608 <__aeabi_dmul>
 800d0aa:	4b51      	ldr	r3, [pc, #324]	; (800d1f0 <__kernel_cos+0x178>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	460d      	mov	r5, r1
 800d0b2:	f7f3 faa9 	bl	8000608 <__aeabi_dmul>
 800d0b6:	a340      	add	r3, pc, #256	; (adr r3, 800d1b8 <__kernel_cos+0x140>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7f3 faa0 	bl	8000608 <__aeabi_dmul>
 800d0c8:	a33d      	add	r3, pc, #244	; (adr r3, 800d1c0 <__kernel_cos+0x148>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	f7f3 f8e5 	bl	800029c <__adddf3>
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	462b      	mov	r3, r5
 800d0d6:	f7f3 fa97 	bl	8000608 <__aeabi_dmul>
 800d0da:	a33b      	add	r3, pc, #236	; (adr r3, 800d1c8 <__kernel_cos+0x150>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	f7f3 f8da 	bl	8000298 <__aeabi_dsub>
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	462b      	mov	r3, r5
 800d0e8:	f7f3 fa8e 	bl	8000608 <__aeabi_dmul>
 800d0ec:	a338      	add	r3, pc, #224	; (adr r3, 800d1d0 <__kernel_cos+0x158>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	f7f3 f8d3 	bl	800029c <__adddf3>
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	462b      	mov	r3, r5
 800d0fa:	f7f3 fa85 	bl	8000608 <__aeabi_dmul>
 800d0fe:	a336      	add	r3, pc, #216	; (adr r3, 800d1d8 <__kernel_cos+0x160>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f8c8 	bl	8000298 <__aeabi_dsub>
 800d108:	4622      	mov	r2, r4
 800d10a:	462b      	mov	r3, r5
 800d10c:	f7f3 fa7c 	bl	8000608 <__aeabi_dmul>
 800d110:	a333      	add	r3, pc, #204	; (adr r3, 800d1e0 <__kernel_cos+0x168>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f8c1 	bl	800029c <__adddf3>
 800d11a:	4622      	mov	r2, r4
 800d11c:	462b      	mov	r3, r5
 800d11e:	f7f3 fa73 	bl	8000608 <__aeabi_dmul>
 800d122:	4622      	mov	r2, r4
 800d124:	462b      	mov	r3, r5
 800d126:	f7f3 fa6f 	bl	8000608 <__aeabi_dmul>
 800d12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d12e:	4604      	mov	r4, r0
 800d130:	460d      	mov	r5, r1
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 fa67 	bl	8000608 <__aeabi_dmul>
 800d13a:	460b      	mov	r3, r1
 800d13c:	4602      	mov	r2, r0
 800d13e:	4629      	mov	r1, r5
 800d140:	4620      	mov	r0, r4
 800d142:	f7f3 f8a9 	bl	8000298 <__aeabi_dsub>
 800d146:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <__kernel_cos+0x17c>)
 800d148:	4598      	cmp	r8, r3
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	dc10      	bgt.n	800d172 <__kernel_cos+0xfa>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4650      	mov	r0, sl
 800d156:	4659      	mov	r1, fp
 800d158:	f7f3 f89e 	bl	8000298 <__aeabi_dsub>
 800d15c:	460b      	mov	r3, r1
 800d15e:	4926      	ldr	r1, [pc, #152]	; (800d1f8 <__kernel_cos+0x180>)
 800d160:	4602      	mov	r2, r0
 800d162:	2000      	movs	r0, #0
 800d164:	f7f3 f898 	bl	8000298 <__aeabi_dsub>
 800d168:	ec41 0b10 	vmov	d0, r0, r1
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d172:	4b22      	ldr	r3, [pc, #136]	; (800d1fc <__kernel_cos+0x184>)
 800d174:	4920      	ldr	r1, [pc, #128]	; (800d1f8 <__kernel_cos+0x180>)
 800d176:	4598      	cmp	r8, r3
 800d178:	bfcc      	ite	gt
 800d17a:	4d21      	ldrgt	r5, [pc, #132]	; (800d200 <__kernel_cos+0x188>)
 800d17c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d180:	2400      	movs	r4, #0
 800d182:	4622      	mov	r2, r4
 800d184:	462b      	mov	r3, r5
 800d186:	2000      	movs	r0, #0
 800d188:	f7f3 f886 	bl	8000298 <__aeabi_dsub>
 800d18c:	4622      	mov	r2, r4
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	462b      	mov	r3, r5
 800d194:	4650      	mov	r0, sl
 800d196:	4659      	mov	r1, fp
 800d198:	f7f3 f87e 	bl	8000298 <__aeabi_dsub>
 800d19c:	4632      	mov	r2, r6
 800d19e:	463b      	mov	r3, r7
 800d1a0:	f7f3 f87a 	bl	8000298 <__aeabi_dsub>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	e7da      	b.n	800d164 <__kernel_cos+0xec>
 800d1ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d1e8 <__kernel_cos+0x170>
 800d1b2:	e7db      	b.n	800d16c <__kernel_cos+0xf4>
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	be8838d4 	.word	0xbe8838d4
 800d1bc:	bda8fae9 	.word	0xbda8fae9
 800d1c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d1c4:	3e21ee9e 	.word	0x3e21ee9e
 800d1c8:	809c52ad 	.word	0x809c52ad
 800d1cc:	3e927e4f 	.word	0x3e927e4f
 800d1d0:	19cb1590 	.word	0x19cb1590
 800d1d4:	3efa01a0 	.word	0x3efa01a0
 800d1d8:	16c15177 	.word	0x16c15177
 800d1dc:	3f56c16c 	.word	0x3f56c16c
 800d1e0:	5555554c 	.word	0x5555554c
 800d1e4:	3fa55555 	.word	0x3fa55555
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	3ff00000 	.word	0x3ff00000
 800d1f0:	3fe00000 	.word	0x3fe00000
 800d1f4:	3fd33332 	.word	0x3fd33332
 800d1f8:	3ff00000 	.word	0x3ff00000
 800d1fc:	3fe90000 	.word	0x3fe90000
 800d200:	3fd20000 	.word	0x3fd20000
 800d204:	00000000 	.word	0x00000000

0800d208 <__kernel_sin>:
 800d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	ed2d 8b04 	vpush	{d8-d9}
 800d210:	eeb0 8a41 	vmov.f32	s16, s2
 800d214:	eef0 8a61 	vmov.f32	s17, s3
 800d218:	ec55 4b10 	vmov	r4, r5, d0
 800d21c:	b083      	sub	sp, #12
 800d21e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d222:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d226:	9001      	str	r0, [sp, #4]
 800d228:	da06      	bge.n	800d238 <__kernel_sin+0x30>
 800d22a:	ee10 0a10 	vmov	r0, s0
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 fc9a 	bl	8000b68 <__aeabi_d2iz>
 800d234:	2800      	cmp	r0, #0
 800d236:	d051      	beq.n	800d2dc <__kernel_sin+0xd4>
 800d238:	4622      	mov	r2, r4
 800d23a:	462b      	mov	r3, r5
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f3 f9e2 	bl	8000608 <__aeabi_dmul>
 800d244:	4682      	mov	sl, r0
 800d246:	468b      	mov	fp, r1
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f9da 	bl	8000608 <__aeabi_dmul>
 800d254:	a341      	add	r3, pc, #260	; (adr r3, 800d35c <__kernel_sin+0x154>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	4680      	mov	r8, r0
 800d25c:	4689      	mov	r9, r1
 800d25e:	4650      	mov	r0, sl
 800d260:	4659      	mov	r1, fp
 800d262:	f7f3 f9d1 	bl	8000608 <__aeabi_dmul>
 800d266:	a33f      	add	r3, pc, #252	; (adr r3, 800d364 <__kernel_sin+0x15c>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f814 	bl	8000298 <__aeabi_dsub>
 800d270:	4652      	mov	r2, sl
 800d272:	465b      	mov	r3, fp
 800d274:	f7f3 f9c8 	bl	8000608 <__aeabi_dmul>
 800d278:	a33c      	add	r3, pc, #240	; (adr r3, 800d36c <__kernel_sin+0x164>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f80d 	bl	800029c <__adddf3>
 800d282:	4652      	mov	r2, sl
 800d284:	465b      	mov	r3, fp
 800d286:	f7f3 f9bf 	bl	8000608 <__aeabi_dmul>
 800d28a:	a33a      	add	r3, pc, #232	; (adr r3, 800d374 <__kernel_sin+0x16c>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	f7f3 f802 	bl	8000298 <__aeabi_dsub>
 800d294:	4652      	mov	r2, sl
 800d296:	465b      	mov	r3, fp
 800d298:	f7f3 f9b6 	bl	8000608 <__aeabi_dmul>
 800d29c:	a337      	add	r3, pc, #220	; (adr r3, 800d37c <__kernel_sin+0x174>)
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	f7f2 fffb 	bl	800029c <__adddf3>
 800d2a6:	9b01      	ldr	r3, [sp, #4]
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	460f      	mov	r7, r1
 800d2ac:	b9eb      	cbnz	r3, 800d2ea <__kernel_sin+0xe2>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	4659      	mov	r1, fp
 800d2b6:	f7f3 f9a7 	bl	8000608 <__aeabi_dmul>
 800d2ba:	a325      	add	r3, pc, #148	; (adr r3, 800d350 <__kernel_sin+0x148>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f7f2 ffea 	bl	8000298 <__aeabi_dsub>
 800d2c4:	4642      	mov	r2, r8
 800d2c6:	464b      	mov	r3, r9
 800d2c8:	f7f3 f99e 	bl	8000608 <__aeabi_dmul>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	f7f2 ffe2 	bl	800029c <__adddf3>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	460d      	mov	r5, r1
 800d2dc:	ec45 4b10 	vmov	d0, r4, r5
 800d2e0:	b003      	add	sp, #12
 800d2e2:	ecbd 8b04 	vpop	{d8-d9}
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	4b1b      	ldr	r3, [pc, #108]	; (800d358 <__kernel_sin+0x150>)
 800d2ec:	ec51 0b18 	vmov	r0, r1, d8
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f7f3 f989 	bl	8000608 <__aeabi_dmul>
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	ec41 0b19 	vmov	d9, r0, r1
 800d2fc:	463b      	mov	r3, r7
 800d2fe:	4640      	mov	r0, r8
 800d300:	4649      	mov	r1, r9
 800d302:	f7f3 f981 	bl	8000608 <__aeabi_dmul>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	ec51 0b19 	vmov	r0, r1, d9
 800d30e:	f7f2 ffc3 	bl	8000298 <__aeabi_dsub>
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	f7f3 f977 	bl	8000608 <__aeabi_dmul>
 800d31a:	ec53 2b18 	vmov	r2, r3, d8
 800d31e:	f7f2 ffbb 	bl	8000298 <__aeabi_dsub>
 800d322:	a30b      	add	r3, pc, #44	; (adr r3, 800d350 <__kernel_sin+0x148>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	4640      	mov	r0, r8
 800d32e:	4649      	mov	r1, r9
 800d330:	f7f3 f96a 	bl	8000608 <__aeabi_dmul>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f2 ffae 	bl	800029c <__adddf3>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	4620      	mov	r0, r4
 800d346:	4629      	mov	r1, r5
 800d348:	f7f2 ffa6 	bl	8000298 <__aeabi_dsub>
 800d34c:	e7c4      	b.n	800d2d8 <__kernel_sin+0xd0>
 800d34e:	bf00      	nop
 800d350:	55555549 	.word	0x55555549
 800d354:	3fc55555 	.word	0x3fc55555
 800d358:	3fe00000 	.word	0x3fe00000
 800d35c:	5acfd57c 	.word	0x5acfd57c
 800d360:	3de5d93a 	.word	0x3de5d93a
 800d364:	8a2b9ceb 	.word	0x8a2b9ceb
 800d368:	3e5ae5e6 	.word	0x3e5ae5e6
 800d36c:	57b1fe7d 	.word	0x57b1fe7d
 800d370:	3ec71de3 	.word	0x3ec71de3
 800d374:	19c161d5 	.word	0x19c161d5
 800d378:	3f2a01a0 	.word	0x3f2a01a0
 800d37c:	1110f8a6 	.word	0x1110f8a6
 800d380:	3f811111 	.word	0x3f811111
 800d384:	00000000 	.word	0x00000000

0800d388 <__ieee754_pow>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	ed2d 8b06 	vpush	{d8-d10}
 800d390:	b089      	sub	sp, #36	; 0x24
 800d392:	ed8d 1b00 	vstr	d1, [sp]
 800d396:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d39a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d39e:	ea58 0102 	orrs.w	r1, r8, r2
 800d3a2:	ec57 6b10 	vmov	r6, r7, d0
 800d3a6:	d115      	bne.n	800d3d4 <__ieee754_pow+0x4c>
 800d3a8:	19b3      	adds	r3, r6, r6
 800d3aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d3ae:	4152      	adcs	r2, r2
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	4b89      	ldr	r3, [pc, #548]	; (800d5d8 <__ieee754_pow+0x250>)
 800d3b4:	4193      	sbcs	r3, r2
 800d3b6:	f080 84d1 	bcs.w	800dd5c <__ieee754_pow+0x9d4>
 800d3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3be:	4630      	mov	r0, r6
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	f7f2 ff6b 	bl	800029c <__adddf3>
 800d3c6:	ec41 0b10 	vmov	d0, r0, r1
 800d3ca:	b009      	add	sp, #36	; 0x24
 800d3cc:	ecbd 8b06 	vpop	{d8-d10}
 800d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d4:	4b81      	ldr	r3, [pc, #516]	; (800d5dc <__ieee754_pow+0x254>)
 800d3d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	ee10 aa10 	vmov	sl, s0
 800d3e0:	463d      	mov	r5, r7
 800d3e2:	dc06      	bgt.n	800d3f2 <__ieee754_pow+0x6a>
 800d3e4:	d101      	bne.n	800d3ea <__ieee754_pow+0x62>
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	d1e7      	bne.n	800d3ba <__ieee754_pow+0x32>
 800d3ea:	4598      	cmp	r8, r3
 800d3ec:	dc01      	bgt.n	800d3f2 <__ieee754_pow+0x6a>
 800d3ee:	d10f      	bne.n	800d410 <__ieee754_pow+0x88>
 800d3f0:	b172      	cbz	r2, 800d410 <__ieee754_pow+0x88>
 800d3f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d3f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d3fa:	ea55 050a 	orrs.w	r5, r5, sl
 800d3fe:	d1dc      	bne.n	800d3ba <__ieee754_pow+0x32>
 800d400:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d404:	18db      	adds	r3, r3, r3
 800d406:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d40a:	4152      	adcs	r2, r2
 800d40c:	429d      	cmp	r5, r3
 800d40e:	e7d0      	b.n	800d3b2 <__ieee754_pow+0x2a>
 800d410:	2d00      	cmp	r5, #0
 800d412:	da3b      	bge.n	800d48c <__ieee754_pow+0x104>
 800d414:	4b72      	ldr	r3, [pc, #456]	; (800d5e0 <__ieee754_pow+0x258>)
 800d416:	4598      	cmp	r8, r3
 800d418:	dc51      	bgt.n	800d4be <__ieee754_pow+0x136>
 800d41a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d41e:	4598      	cmp	r8, r3
 800d420:	f340 84ab 	ble.w	800dd7a <__ieee754_pow+0x9f2>
 800d424:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d42c:	2b14      	cmp	r3, #20
 800d42e:	dd0f      	ble.n	800d450 <__ieee754_pow+0xc8>
 800d430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d434:	fa22 f103 	lsr.w	r1, r2, r3
 800d438:	fa01 f303 	lsl.w	r3, r1, r3
 800d43c:	4293      	cmp	r3, r2
 800d43e:	f040 849c 	bne.w	800dd7a <__ieee754_pow+0x9f2>
 800d442:	f001 0101 	and.w	r1, r1, #1
 800d446:	f1c1 0302 	rsb	r3, r1, #2
 800d44a:	9304      	str	r3, [sp, #16]
 800d44c:	b182      	cbz	r2, 800d470 <__ieee754_pow+0xe8>
 800d44e:	e05f      	b.n	800d510 <__ieee754_pow+0x188>
 800d450:	2a00      	cmp	r2, #0
 800d452:	d15b      	bne.n	800d50c <__ieee754_pow+0x184>
 800d454:	f1c3 0314 	rsb	r3, r3, #20
 800d458:	fa48 f103 	asr.w	r1, r8, r3
 800d45c:	fa01 f303 	lsl.w	r3, r1, r3
 800d460:	4543      	cmp	r3, r8
 800d462:	f040 8487 	bne.w	800dd74 <__ieee754_pow+0x9ec>
 800d466:	f001 0101 	and.w	r1, r1, #1
 800d46a:	f1c1 0302 	rsb	r3, r1, #2
 800d46e:	9304      	str	r3, [sp, #16]
 800d470:	4b5c      	ldr	r3, [pc, #368]	; (800d5e4 <__ieee754_pow+0x25c>)
 800d472:	4598      	cmp	r8, r3
 800d474:	d132      	bne.n	800d4dc <__ieee754_pow+0x154>
 800d476:	f1b9 0f00 	cmp.w	r9, #0
 800d47a:	f280 8477 	bge.w	800dd6c <__ieee754_pow+0x9e4>
 800d47e:	4959      	ldr	r1, [pc, #356]	; (800d5e4 <__ieee754_pow+0x25c>)
 800d480:	4632      	mov	r2, r6
 800d482:	463b      	mov	r3, r7
 800d484:	2000      	movs	r0, #0
 800d486:	f7f3 f9e9 	bl	800085c <__aeabi_ddiv>
 800d48a:	e79c      	b.n	800d3c6 <__ieee754_pow+0x3e>
 800d48c:	2300      	movs	r3, #0
 800d48e:	9304      	str	r3, [sp, #16]
 800d490:	2a00      	cmp	r2, #0
 800d492:	d13d      	bne.n	800d510 <__ieee754_pow+0x188>
 800d494:	4b51      	ldr	r3, [pc, #324]	; (800d5dc <__ieee754_pow+0x254>)
 800d496:	4598      	cmp	r8, r3
 800d498:	d1ea      	bne.n	800d470 <__ieee754_pow+0xe8>
 800d49a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d49e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800d4a6:	f000 8459 	beq.w	800dd5c <__ieee754_pow+0x9d4>
 800d4aa:	4b4f      	ldr	r3, [pc, #316]	; (800d5e8 <__ieee754_pow+0x260>)
 800d4ac:	429c      	cmp	r4, r3
 800d4ae:	dd08      	ble.n	800d4c2 <__ieee754_pow+0x13a>
 800d4b0:	f1b9 0f00 	cmp.w	r9, #0
 800d4b4:	f2c0 8456 	blt.w	800dd64 <__ieee754_pow+0x9dc>
 800d4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4bc:	e783      	b.n	800d3c6 <__ieee754_pow+0x3e>
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e7e5      	b.n	800d48e <__ieee754_pow+0x106>
 800d4c2:	f1b9 0f00 	cmp.w	r9, #0
 800d4c6:	f04f 0000 	mov.w	r0, #0
 800d4ca:	f04f 0100 	mov.w	r1, #0
 800d4ce:	f6bf af7a 	bge.w	800d3c6 <__ieee754_pow+0x3e>
 800d4d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d4d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d4da:	e774      	b.n	800d3c6 <__ieee754_pow+0x3e>
 800d4dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d4e0:	d106      	bne.n	800d4f0 <__ieee754_pow+0x168>
 800d4e2:	4632      	mov	r2, r6
 800d4e4:	463b      	mov	r3, r7
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f3 f88d 	bl	8000608 <__aeabi_dmul>
 800d4ee:	e76a      	b.n	800d3c6 <__ieee754_pow+0x3e>
 800d4f0:	4b3e      	ldr	r3, [pc, #248]	; (800d5ec <__ieee754_pow+0x264>)
 800d4f2:	4599      	cmp	r9, r3
 800d4f4:	d10c      	bne.n	800d510 <__ieee754_pow+0x188>
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	db0a      	blt.n	800d510 <__ieee754_pow+0x188>
 800d4fa:	ec47 6b10 	vmov	d0, r6, r7
 800d4fe:	b009      	add	sp, #36	; 0x24
 800d500:	ecbd 8b06 	vpop	{d8-d10}
 800d504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d508:	f7ff bcda 	b.w	800cec0 <__ieee754_sqrt>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	ec47 6b10 	vmov	d0, r6, r7
 800d514:	f000 fe6a 	bl	800e1ec <fabs>
 800d518:	ec51 0b10 	vmov	r0, r1, d0
 800d51c:	f1ba 0f00 	cmp.w	sl, #0
 800d520:	d129      	bne.n	800d576 <__ieee754_pow+0x1ee>
 800d522:	b124      	cbz	r4, 800d52e <__ieee754_pow+0x1a6>
 800d524:	4b2f      	ldr	r3, [pc, #188]	; (800d5e4 <__ieee754_pow+0x25c>)
 800d526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d123      	bne.n	800d576 <__ieee754_pow+0x1ee>
 800d52e:	f1b9 0f00 	cmp.w	r9, #0
 800d532:	da05      	bge.n	800d540 <__ieee754_pow+0x1b8>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	2000      	movs	r0, #0
 800d53a:	492a      	ldr	r1, [pc, #168]	; (800d5e4 <__ieee754_pow+0x25c>)
 800d53c:	f7f3 f98e 	bl	800085c <__aeabi_ddiv>
 800d540:	2d00      	cmp	r5, #0
 800d542:	f6bf af40 	bge.w	800d3c6 <__ieee754_pow+0x3e>
 800d546:	9b04      	ldr	r3, [sp, #16]
 800d548:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d54c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d550:	431c      	orrs	r4, r3
 800d552:	d108      	bne.n	800d566 <__ieee754_pow+0x1de>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4610      	mov	r0, r2
 800d55a:	4619      	mov	r1, r3
 800d55c:	f7f2 fe9c 	bl	8000298 <__aeabi_dsub>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	e78f      	b.n	800d486 <__ieee754_pow+0xfe>
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	f47f af2c 	bne.w	800d3c6 <__ieee754_pow+0x3e>
 800d56e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d572:	4619      	mov	r1, r3
 800d574:	e727      	b.n	800d3c6 <__ieee754_pow+0x3e>
 800d576:	0feb      	lsrs	r3, r5, #31
 800d578:	3b01      	subs	r3, #1
 800d57a:	9306      	str	r3, [sp, #24]
 800d57c:	9a06      	ldr	r2, [sp, #24]
 800d57e:	9b04      	ldr	r3, [sp, #16]
 800d580:	4313      	orrs	r3, r2
 800d582:	d102      	bne.n	800d58a <__ieee754_pow+0x202>
 800d584:	4632      	mov	r2, r6
 800d586:	463b      	mov	r3, r7
 800d588:	e7e6      	b.n	800d558 <__ieee754_pow+0x1d0>
 800d58a:	4b19      	ldr	r3, [pc, #100]	; (800d5f0 <__ieee754_pow+0x268>)
 800d58c:	4598      	cmp	r8, r3
 800d58e:	f340 80fb 	ble.w	800d788 <__ieee754_pow+0x400>
 800d592:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d596:	4598      	cmp	r8, r3
 800d598:	4b13      	ldr	r3, [pc, #76]	; (800d5e8 <__ieee754_pow+0x260>)
 800d59a:	dd0c      	ble.n	800d5b6 <__ieee754_pow+0x22e>
 800d59c:	429c      	cmp	r4, r3
 800d59e:	dc0f      	bgt.n	800d5c0 <__ieee754_pow+0x238>
 800d5a0:	f1b9 0f00 	cmp.w	r9, #0
 800d5a4:	da0f      	bge.n	800d5c6 <__ieee754_pow+0x23e>
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	b009      	add	sp, #36	; 0x24
 800d5aa:	ecbd 8b06 	vpop	{d8-d10}
 800d5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b2:	f000 beca 	b.w	800e34a <__math_oflow>
 800d5b6:	429c      	cmp	r4, r3
 800d5b8:	dbf2      	blt.n	800d5a0 <__ieee754_pow+0x218>
 800d5ba:	4b0a      	ldr	r3, [pc, #40]	; (800d5e4 <__ieee754_pow+0x25c>)
 800d5bc:	429c      	cmp	r4, r3
 800d5be:	dd19      	ble.n	800d5f4 <__ieee754_pow+0x26c>
 800d5c0:	f1b9 0f00 	cmp.w	r9, #0
 800d5c4:	dcef      	bgt.n	800d5a6 <__ieee754_pow+0x21e>
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	b009      	add	sp, #36	; 0x24
 800d5ca:	ecbd 8b06 	vpop	{d8-d10}
 800d5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d2:	f000 beb1 	b.w	800e338 <__math_uflow>
 800d5d6:	bf00      	nop
 800d5d8:	fff00000 	.word	0xfff00000
 800d5dc:	7ff00000 	.word	0x7ff00000
 800d5e0:	433fffff 	.word	0x433fffff
 800d5e4:	3ff00000 	.word	0x3ff00000
 800d5e8:	3fefffff 	.word	0x3fefffff
 800d5ec:	3fe00000 	.word	0x3fe00000
 800d5f0:	41e00000 	.word	0x41e00000
 800d5f4:	4b60      	ldr	r3, [pc, #384]	; (800d778 <__ieee754_pow+0x3f0>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f7f2 fe4e 	bl	8000298 <__aeabi_dsub>
 800d5fc:	a354      	add	r3, pc, #336	; (adr r3, 800d750 <__ieee754_pow+0x3c8>)
 800d5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d602:	4604      	mov	r4, r0
 800d604:	460d      	mov	r5, r1
 800d606:	f7f2 ffff 	bl	8000608 <__aeabi_dmul>
 800d60a:	a353      	add	r3, pc, #332	; (adr r3, 800d758 <__ieee754_pow+0x3d0>)
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	4606      	mov	r6, r0
 800d612:	460f      	mov	r7, r1
 800d614:	4620      	mov	r0, r4
 800d616:	4629      	mov	r1, r5
 800d618:	f7f2 fff6 	bl	8000608 <__aeabi_dmul>
 800d61c:	4b57      	ldr	r3, [pc, #348]	; (800d77c <__ieee754_pow+0x3f4>)
 800d61e:	4682      	mov	sl, r0
 800d620:	468b      	mov	fp, r1
 800d622:	2200      	movs	r2, #0
 800d624:	4620      	mov	r0, r4
 800d626:	4629      	mov	r1, r5
 800d628:	f7f2 ffee 	bl	8000608 <__aeabi_dmul>
 800d62c:	4602      	mov	r2, r0
 800d62e:	460b      	mov	r3, r1
 800d630:	a14b      	add	r1, pc, #300	; (adr r1, 800d760 <__ieee754_pow+0x3d8>)
 800d632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d636:	f7f2 fe2f 	bl	8000298 <__aeabi_dsub>
 800d63a:	4622      	mov	r2, r4
 800d63c:	462b      	mov	r3, r5
 800d63e:	f7f2 ffe3 	bl	8000608 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	2000      	movs	r0, #0
 800d648:	494d      	ldr	r1, [pc, #308]	; (800d780 <__ieee754_pow+0x3f8>)
 800d64a:	f7f2 fe25 	bl	8000298 <__aeabi_dsub>
 800d64e:	4622      	mov	r2, r4
 800d650:	4680      	mov	r8, r0
 800d652:	4689      	mov	r9, r1
 800d654:	462b      	mov	r3, r5
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f2 ffd5 	bl	8000608 <__aeabi_dmul>
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	4640      	mov	r0, r8
 800d664:	4649      	mov	r1, r9
 800d666:	f7f2 ffcf 	bl	8000608 <__aeabi_dmul>
 800d66a:	a33f      	add	r3, pc, #252	; (adr r3, 800d768 <__ieee754_pow+0x3e0>)
 800d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d670:	f7f2 ffca 	bl	8000608 <__aeabi_dmul>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	4650      	mov	r0, sl
 800d67a:	4659      	mov	r1, fp
 800d67c:	f7f2 fe0c 	bl	8000298 <__aeabi_dsub>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4680      	mov	r8, r0
 800d686:	4689      	mov	r9, r1
 800d688:	4630      	mov	r0, r6
 800d68a:	4639      	mov	r1, r7
 800d68c:	f7f2 fe06 	bl	800029c <__adddf3>
 800d690:	2000      	movs	r0, #0
 800d692:	4632      	mov	r2, r6
 800d694:	463b      	mov	r3, r7
 800d696:	4604      	mov	r4, r0
 800d698:	460d      	mov	r5, r1
 800d69a:	f7f2 fdfd 	bl	8000298 <__aeabi_dsub>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	4649      	mov	r1, r9
 800d6a6:	f7f2 fdf7 	bl	8000298 <__aeabi_dsub>
 800d6aa:	9b04      	ldr	r3, [sp, #16]
 800d6ac:	9a06      	ldr	r2, [sp, #24]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	4682      	mov	sl, r0
 800d6b4:	468b      	mov	fp, r1
 800d6b6:	f040 81e7 	bne.w	800da88 <__ieee754_pow+0x700>
 800d6ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d770 <__ieee754_pow+0x3e8>
 800d6be:	eeb0 8a47 	vmov.f32	s16, s14
 800d6c2:	eef0 8a67 	vmov.f32	s17, s15
 800d6c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d6ca:	2600      	movs	r6, #0
 800d6cc:	4632      	mov	r2, r6
 800d6ce:	463b      	mov	r3, r7
 800d6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6d4:	f7f2 fde0 	bl	8000298 <__aeabi_dsub>
 800d6d8:	4622      	mov	r2, r4
 800d6da:	462b      	mov	r3, r5
 800d6dc:	f7f2 ff94 	bl	8000608 <__aeabi_dmul>
 800d6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6e4:	4680      	mov	r8, r0
 800d6e6:	4689      	mov	r9, r1
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	4659      	mov	r1, fp
 800d6ec:	f7f2 ff8c 	bl	8000608 <__aeabi_dmul>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	f7f2 fdd0 	bl	800029c <__adddf3>
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	463b      	mov	r3, r7
 800d700:	4680      	mov	r8, r0
 800d702:	4689      	mov	r9, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 ff7e 	bl	8000608 <__aeabi_dmul>
 800d70c:	460b      	mov	r3, r1
 800d70e:	4604      	mov	r4, r0
 800d710:	460d      	mov	r5, r1
 800d712:	4602      	mov	r2, r0
 800d714:	4649      	mov	r1, r9
 800d716:	4640      	mov	r0, r8
 800d718:	f7f2 fdc0 	bl	800029c <__adddf3>
 800d71c:	4b19      	ldr	r3, [pc, #100]	; (800d784 <__ieee754_pow+0x3fc>)
 800d71e:	4299      	cmp	r1, r3
 800d720:	ec45 4b19 	vmov	d9, r4, r5
 800d724:	4606      	mov	r6, r0
 800d726:	460f      	mov	r7, r1
 800d728:	468b      	mov	fp, r1
 800d72a:	f340 82f0 	ble.w	800dd0e <__ieee754_pow+0x986>
 800d72e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d736:	4303      	orrs	r3, r0
 800d738:	f000 81e4 	beq.w	800db04 <__ieee754_pow+0x77c>
 800d73c:	ec51 0b18 	vmov	r0, r1, d8
 800d740:	2200      	movs	r2, #0
 800d742:	2300      	movs	r3, #0
 800d744:	f7f3 f9d2 	bl	8000aec <__aeabi_dcmplt>
 800d748:	3800      	subs	r0, #0
 800d74a:	bf18      	it	ne
 800d74c:	2001      	movne	r0, #1
 800d74e:	e72b      	b.n	800d5a8 <__ieee754_pow+0x220>
 800d750:	60000000 	.word	0x60000000
 800d754:	3ff71547 	.word	0x3ff71547
 800d758:	f85ddf44 	.word	0xf85ddf44
 800d75c:	3e54ae0b 	.word	0x3e54ae0b
 800d760:	55555555 	.word	0x55555555
 800d764:	3fd55555 	.word	0x3fd55555
 800d768:	652b82fe 	.word	0x652b82fe
 800d76c:	3ff71547 	.word	0x3ff71547
 800d770:	00000000 	.word	0x00000000
 800d774:	bff00000 	.word	0xbff00000
 800d778:	3ff00000 	.word	0x3ff00000
 800d77c:	3fd00000 	.word	0x3fd00000
 800d780:	3fe00000 	.word	0x3fe00000
 800d784:	408fffff 	.word	0x408fffff
 800d788:	4bd5      	ldr	r3, [pc, #852]	; (800dae0 <__ieee754_pow+0x758>)
 800d78a:	402b      	ands	r3, r5
 800d78c:	2200      	movs	r2, #0
 800d78e:	b92b      	cbnz	r3, 800d79c <__ieee754_pow+0x414>
 800d790:	4bd4      	ldr	r3, [pc, #848]	; (800dae4 <__ieee754_pow+0x75c>)
 800d792:	f7f2 ff39 	bl	8000608 <__aeabi_dmul>
 800d796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d79a:	460c      	mov	r4, r1
 800d79c:	1523      	asrs	r3, r4, #20
 800d79e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7a2:	4413      	add	r3, r2
 800d7a4:	9305      	str	r3, [sp, #20]
 800d7a6:	4bd0      	ldr	r3, [pc, #832]	; (800dae8 <__ieee754_pow+0x760>)
 800d7a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d7ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d7b0:	429c      	cmp	r4, r3
 800d7b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7b6:	dd08      	ble.n	800d7ca <__ieee754_pow+0x442>
 800d7b8:	4bcc      	ldr	r3, [pc, #816]	; (800daec <__ieee754_pow+0x764>)
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	f340 8162 	ble.w	800da84 <__ieee754_pow+0x6fc>
 800d7c0:	9b05      	ldr	r3, [sp, #20]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9305      	str	r3, [sp, #20]
 800d7c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d7ca:	2400      	movs	r4, #0
 800d7cc:	00e3      	lsls	r3, r4, #3
 800d7ce:	9307      	str	r3, [sp, #28]
 800d7d0:	4bc7      	ldr	r3, [pc, #796]	; (800daf0 <__ieee754_pow+0x768>)
 800d7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7d6:	ed93 7b00 	vldr	d7, [r3]
 800d7da:	4629      	mov	r1, r5
 800d7dc:	ec53 2b17 	vmov	r2, r3, d7
 800d7e0:	eeb0 9a47 	vmov.f32	s18, s14
 800d7e4:	eef0 9a67 	vmov.f32	s19, s15
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	f7f2 fd55 	bl	8000298 <__aeabi_dsub>
 800d7ee:	4652      	mov	r2, sl
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	460f      	mov	r7, r1
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	ec51 0b19 	vmov	r0, r1, d9
 800d7fa:	f7f2 fd4f 	bl	800029c <__adddf3>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	2000      	movs	r0, #0
 800d804:	49bb      	ldr	r1, [pc, #748]	; (800daf4 <__ieee754_pow+0x76c>)
 800d806:	f7f3 f829 	bl	800085c <__aeabi_ddiv>
 800d80a:	ec41 0b1a 	vmov	d10, r0, r1
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4630      	mov	r0, r6
 800d814:	4639      	mov	r1, r7
 800d816:	f7f2 fef7 	bl	8000608 <__aeabi_dmul>
 800d81a:	2300      	movs	r3, #0
 800d81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d820:	9302      	str	r3, [sp, #8]
 800d822:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d826:	46ab      	mov	fp, r5
 800d828:	106d      	asrs	r5, r5, #1
 800d82a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d82e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d832:	ec41 0b18 	vmov	d8, r0, r1
 800d836:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d83a:	2200      	movs	r2, #0
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	4614      	mov	r4, r2
 800d842:	461d      	mov	r5, r3
 800d844:	f7f2 fee0 	bl	8000608 <__aeabi_dmul>
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	4630      	mov	r0, r6
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f2 fd22 	bl	8000298 <__aeabi_dsub>
 800d854:	ec53 2b19 	vmov	r2, r3, d9
 800d858:	4606      	mov	r6, r0
 800d85a:	460f      	mov	r7, r1
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f2 fd1a 	bl	8000298 <__aeabi_dsub>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4650      	mov	r0, sl
 800d86a:	4659      	mov	r1, fp
 800d86c:	f7f2 fd14 	bl	8000298 <__aeabi_dsub>
 800d870:	4642      	mov	r2, r8
 800d872:	464b      	mov	r3, r9
 800d874:	f7f2 fec8 	bl	8000608 <__aeabi_dmul>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fd0a 	bl	8000298 <__aeabi_dsub>
 800d884:	ec53 2b1a 	vmov	r2, r3, d10
 800d888:	f7f2 febe 	bl	8000608 <__aeabi_dmul>
 800d88c:	ec53 2b18 	vmov	r2, r3, d8
 800d890:	ec41 0b19 	vmov	d9, r0, r1
 800d894:	ec51 0b18 	vmov	r0, r1, d8
 800d898:	f7f2 feb6 	bl	8000608 <__aeabi_dmul>
 800d89c:	a37c      	add	r3, pc, #496	; (adr r3, 800da90 <__ieee754_pow+0x708>)
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	460d      	mov	r5, r1
 800d8a6:	f7f2 feaf 	bl	8000608 <__aeabi_dmul>
 800d8aa:	a37b      	add	r3, pc, #492	; (adr r3, 800da98 <__ieee754_pow+0x710>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fcf4 	bl	800029c <__adddf3>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f7f2 fea6 	bl	8000608 <__aeabi_dmul>
 800d8bc:	a378      	add	r3, pc, #480	; (adr r3, 800daa0 <__ieee754_pow+0x718>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 fceb 	bl	800029c <__adddf3>
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	f7f2 fe9d 	bl	8000608 <__aeabi_dmul>
 800d8ce:	a376      	add	r3, pc, #472	; (adr r3, 800daa8 <__ieee754_pow+0x720>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fce2 	bl	800029c <__adddf3>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	462b      	mov	r3, r5
 800d8dc:	f7f2 fe94 	bl	8000608 <__aeabi_dmul>
 800d8e0:	a373      	add	r3, pc, #460	; (adr r3, 800dab0 <__ieee754_pow+0x728>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f7f2 fcd9 	bl	800029c <__adddf3>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	f7f2 fe8b 	bl	8000608 <__aeabi_dmul>
 800d8f2:	a371      	add	r3, pc, #452	; (adr r3, 800dab8 <__ieee754_pow+0x730>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fcd0 	bl	800029c <__adddf3>
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	462b      	mov	r3, r5
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f7f2 fe7e 	bl	8000608 <__aeabi_dmul>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4630      	mov	r0, r6
 800d912:	4639      	mov	r1, r7
 800d914:	f7f2 fe78 	bl	8000608 <__aeabi_dmul>
 800d918:	4642      	mov	r2, r8
 800d91a:	4604      	mov	r4, r0
 800d91c:	460d      	mov	r5, r1
 800d91e:	464b      	mov	r3, r9
 800d920:	ec51 0b18 	vmov	r0, r1, d8
 800d924:	f7f2 fcba 	bl	800029c <__adddf3>
 800d928:	ec53 2b19 	vmov	r2, r3, d9
 800d92c:	f7f2 fe6c 	bl	8000608 <__aeabi_dmul>
 800d930:	4622      	mov	r2, r4
 800d932:	462b      	mov	r3, r5
 800d934:	f7f2 fcb2 	bl	800029c <__adddf3>
 800d938:	4642      	mov	r2, r8
 800d93a:	4682      	mov	sl, r0
 800d93c:	468b      	mov	fp, r1
 800d93e:	464b      	mov	r3, r9
 800d940:	4640      	mov	r0, r8
 800d942:	4649      	mov	r1, r9
 800d944:	f7f2 fe60 	bl	8000608 <__aeabi_dmul>
 800d948:	4b6b      	ldr	r3, [pc, #428]	; (800daf8 <__ieee754_pow+0x770>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	4606      	mov	r6, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	f7f2 fca4 	bl	800029c <__adddf3>
 800d954:	4652      	mov	r2, sl
 800d956:	465b      	mov	r3, fp
 800d958:	f7f2 fca0 	bl	800029c <__adddf3>
 800d95c:	2000      	movs	r0, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	4640      	mov	r0, r8
 800d968:	4649      	mov	r1, r9
 800d96a:	f7f2 fe4d 	bl	8000608 <__aeabi_dmul>
 800d96e:	4b62      	ldr	r3, [pc, #392]	; (800daf8 <__ieee754_pow+0x770>)
 800d970:	4680      	mov	r8, r0
 800d972:	4689      	mov	r9, r1
 800d974:	2200      	movs	r2, #0
 800d976:	4620      	mov	r0, r4
 800d978:	4629      	mov	r1, r5
 800d97a:	f7f2 fc8d 	bl	8000298 <__aeabi_dsub>
 800d97e:	4632      	mov	r2, r6
 800d980:	463b      	mov	r3, r7
 800d982:	f7f2 fc89 	bl	8000298 <__aeabi_dsub>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4650      	mov	r0, sl
 800d98c:	4659      	mov	r1, fp
 800d98e:	f7f2 fc83 	bl	8000298 <__aeabi_dsub>
 800d992:	ec53 2b18 	vmov	r2, r3, d8
 800d996:	f7f2 fe37 	bl	8000608 <__aeabi_dmul>
 800d99a:	4622      	mov	r2, r4
 800d99c:	4606      	mov	r6, r0
 800d99e:	460f      	mov	r7, r1
 800d9a0:	462b      	mov	r3, r5
 800d9a2:	ec51 0b19 	vmov	r0, r1, d9
 800d9a6:	f7f2 fe2f 	bl	8000608 <__aeabi_dmul>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	f7f2 fc73 	bl	800029c <__adddf3>
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460f      	mov	r7, r1
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	f7f2 fc6b 	bl	800029c <__adddf3>
 800d9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800dac0 <__ieee754_pow+0x738>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	f7f2 fe19 	bl	8000608 <__aeabi_dmul>
 800d9d6:	4642      	mov	r2, r8
 800d9d8:	ec41 0b18 	vmov	d8, r0, r1
 800d9dc:	464b      	mov	r3, r9
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	f7f2 fc59 	bl	8000298 <__aeabi_dsub>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 fc53 	bl	8000298 <__aeabi_dsub>
 800d9f2:	a335      	add	r3, pc, #212	; (adr r3, 800dac8 <__ieee754_pow+0x740>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fe06 	bl	8000608 <__aeabi_dmul>
 800d9fc:	a334      	add	r3, pc, #208	; (adr r3, 800dad0 <__ieee754_pow+0x748>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	4606      	mov	r6, r0
 800da04:	460f      	mov	r7, r1
 800da06:	4620      	mov	r0, r4
 800da08:	4629      	mov	r1, r5
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4630      	mov	r0, r6
 800da14:	4639      	mov	r1, r7
 800da16:	f7f2 fc41 	bl	800029c <__adddf3>
 800da1a:	9a07      	ldr	r2, [sp, #28]
 800da1c:	4b37      	ldr	r3, [pc, #220]	; (800dafc <__ieee754_pow+0x774>)
 800da1e:	4413      	add	r3, r2
 800da20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da24:	f7f2 fc3a 	bl	800029c <__adddf3>
 800da28:	4682      	mov	sl, r0
 800da2a:	9805      	ldr	r0, [sp, #20]
 800da2c:	468b      	mov	fp, r1
 800da2e:	f7f2 fd81 	bl	8000534 <__aeabi_i2d>
 800da32:	9a07      	ldr	r2, [sp, #28]
 800da34:	4b32      	ldr	r3, [pc, #200]	; (800db00 <__ieee754_pow+0x778>)
 800da36:	4413      	add	r3, r2
 800da38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	4652      	mov	r2, sl
 800da42:	465b      	mov	r3, fp
 800da44:	ec51 0b18 	vmov	r0, r1, d8
 800da48:	f7f2 fc28 	bl	800029c <__adddf3>
 800da4c:	4642      	mov	r2, r8
 800da4e:	464b      	mov	r3, r9
 800da50:	f7f2 fc24 	bl	800029c <__adddf3>
 800da54:	4632      	mov	r2, r6
 800da56:	463b      	mov	r3, r7
 800da58:	f7f2 fc20 	bl	800029c <__adddf3>
 800da5c:	2000      	movs	r0, #0
 800da5e:	4632      	mov	r2, r6
 800da60:	463b      	mov	r3, r7
 800da62:	4604      	mov	r4, r0
 800da64:	460d      	mov	r5, r1
 800da66:	f7f2 fc17 	bl	8000298 <__aeabi_dsub>
 800da6a:	4642      	mov	r2, r8
 800da6c:	464b      	mov	r3, r9
 800da6e:	f7f2 fc13 	bl	8000298 <__aeabi_dsub>
 800da72:	ec53 2b18 	vmov	r2, r3, d8
 800da76:	f7f2 fc0f 	bl	8000298 <__aeabi_dsub>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	4650      	mov	r0, sl
 800da80:	4659      	mov	r1, fp
 800da82:	e610      	b.n	800d6a6 <__ieee754_pow+0x31e>
 800da84:	2401      	movs	r4, #1
 800da86:	e6a1      	b.n	800d7cc <__ieee754_pow+0x444>
 800da88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dad8 <__ieee754_pow+0x750>
 800da8c:	e617      	b.n	800d6be <__ieee754_pow+0x336>
 800da8e:	bf00      	nop
 800da90:	4a454eef 	.word	0x4a454eef
 800da94:	3fca7e28 	.word	0x3fca7e28
 800da98:	93c9db65 	.word	0x93c9db65
 800da9c:	3fcd864a 	.word	0x3fcd864a
 800daa0:	a91d4101 	.word	0xa91d4101
 800daa4:	3fd17460 	.word	0x3fd17460
 800daa8:	518f264d 	.word	0x518f264d
 800daac:	3fd55555 	.word	0x3fd55555
 800dab0:	db6fabff 	.word	0xdb6fabff
 800dab4:	3fdb6db6 	.word	0x3fdb6db6
 800dab8:	33333303 	.word	0x33333303
 800dabc:	3fe33333 	.word	0x3fe33333
 800dac0:	e0000000 	.word	0xe0000000
 800dac4:	3feec709 	.word	0x3feec709
 800dac8:	dc3a03fd 	.word	0xdc3a03fd
 800dacc:	3feec709 	.word	0x3feec709
 800dad0:	145b01f5 	.word	0x145b01f5
 800dad4:	be3e2fe0 	.word	0xbe3e2fe0
 800dad8:	00000000 	.word	0x00000000
 800dadc:	3ff00000 	.word	0x3ff00000
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	43400000 	.word	0x43400000
 800dae8:	0003988e 	.word	0x0003988e
 800daec:	000bb679 	.word	0x000bb679
 800daf0:	0800f248 	.word	0x0800f248
 800daf4:	3ff00000 	.word	0x3ff00000
 800daf8:	40080000 	.word	0x40080000
 800dafc:	0800f268 	.word	0x0800f268
 800db00:	0800f258 	.word	0x0800f258
 800db04:	a3b3      	add	r3, pc, #716	; (adr r3, 800ddd4 <__ieee754_pow+0xa4c>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	4640      	mov	r0, r8
 800db0c:	4649      	mov	r1, r9
 800db0e:	f7f2 fbc5 	bl	800029c <__adddf3>
 800db12:	4622      	mov	r2, r4
 800db14:	ec41 0b1a 	vmov	d10, r0, r1
 800db18:	462b      	mov	r3, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	4639      	mov	r1, r7
 800db1e:	f7f2 fbbb 	bl	8000298 <__aeabi_dsub>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	ec51 0b1a 	vmov	r0, r1, d10
 800db2a:	f7f2 fffd 	bl	8000b28 <__aeabi_dcmpgt>
 800db2e:	2800      	cmp	r0, #0
 800db30:	f47f ae04 	bne.w	800d73c <__ieee754_pow+0x3b4>
 800db34:	4aa2      	ldr	r2, [pc, #648]	; (800ddc0 <__ieee754_pow+0xa38>)
 800db36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db3a:	4293      	cmp	r3, r2
 800db3c:	f340 8107 	ble.w	800dd4e <__ieee754_pow+0x9c6>
 800db40:	151b      	asrs	r3, r3, #20
 800db42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db4a:	fa4a fa03 	asr.w	sl, sl, r3
 800db4e:	44da      	add	sl, fp
 800db50:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800db54:	489b      	ldr	r0, [pc, #620]	; (800ddc4 <__ieee754_pow+0xa3c>)
 800db56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800db5a:	4108      	asrs	r0, r1
 800db5c:	ea00 030a 	and.w	r3, r0, sl
 800db60:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800db64:	f1c1 0114 	rsb	r1, r1, #20
 800db68:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800db6c:	fa4a fa01 	asr.w	sl, sl, r1
 800db70:	f1bb 0f00 	cmp.w	fp, #0
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	4620      	mov	r0, r4
 800db7a:	4629      	mov	r1, r5
 800db7c:	bfb8      	it	lt
 800db7e:	f1ca 0a00 	rsblt	sl, sl, #0
 800db82:	f7f2 fb89 	bl	8000298 <__aeabi_dsub>
 800db86:	ec41 0b19 	vmov	d9, r0, r1
 800db8a:	4642      	mov	r2, r8
 800db8c:	464b      	mov	r3, r9
 800db8e:	ec51 0b19 	vmov	r0, r1, d9
 800db92:	f7f2 fb83 	bl	800029c <__adddf3>
 800db96:	a37a      	add	r3, pc, #488	; (adr r3, 800dd80 <__ieee754_pow+0x9f8>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	2000      	movs	r0, #0
 800db9e:	4604      	mov	r4, r0
 800dba0:	460d      	mov	r5, r1
 800dba2:	f7f2 fd31 	bl	8000608 <__aeabi_dmul>
 800dba6:	ec53 2b19 	vmov	r2, r3, d9
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	4620      	mov	r0, r4
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	f7f2 fb71 	bl	8000298 <__aeabi_dsub>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4640      	mov	r0, r8
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	f7f2 fb6b 	bl	8000298 <__aeabi_dsub>
 800dbc2:	a371      	add	r3, pc, #452	; (adr r3, 800dd88 <__ieee754_pow+0xa00>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fd1e 	bl	8000608 <__aeabi_dmul>
 800dbcc:	a370      	add	r3, pc, #448	; (adr r3, 800dd90 <__ieee754_pow+0xa08>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	4689      	mov	r9, r1
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 fd15 	bl	8000608 <__aeabi_dmul>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	4649      	mov	r1, r9
 800dbe6:	f7f2 fb59 	bl	800029c <__adddf3>
 800dbea:	4604      	mov	r4, r0
 800dbec:	460d      	mov	r5, r1
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	f7f2 fb51 	bl	800029c <__adddf3>
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	463b      	mov	r3, r7
 800dbfe:	4680      	mov	r8, r0
 800dc00:	4689      	mov	r9, r1
 800dc02:	f7f2 fb49 	bl	8000298 <__aeabi_dsub>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7f2 fb43 	bl	8000298 <__aeabi_dsub>
 800dc12:	4642      	mov	r2, r8
 800dc14:	4606      	mov	r6, r0
 800dc16:	460f      	mov	r7, r1
 800dc18:	464b      	mov	r3, r9
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fcf3 	bl	8000608 <__aeabi_dmul>
 800dc22:	a35d      	add	r3, pc, #372	; (adr r3, 800dd98 <__ieee754_pow+0xa10>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	4604      	mov	r4, r0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	f7f2 fcec 	bl	8000608 <__aeabi_dmul>
 800dc30:	a35b      	add	r3, pc, #364	; (adr r3, 800dda0 <__ieee754_pow+0xa18>)
 800dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc36:	f7f2 fb2f 	bl	8000298 <__aeabi_dsub>
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	462b      	mov	r3, r5
 800dc3e:	f7f2 fce3 	bl	8000608 <__aeabi_dmul>
 800dc42:	a359      	add	r3, pc, #356	; (adr r3, 800dda8 <__ieee754_pow+0xa20>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	f7f2 fb28 	bl	800029c <__adddf3>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	f7f2 fcda 	bl	8000608 <__aeabi_dmul>
 800dc54:	a356      	add	r3, pc, #344	; (adr r3, 800ddb0 <__ieee754_pow+0xa28>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fb1d 	bl	8000298 <__aeabi_dsub>
 800dc5e:	4622      	mov	r2, r4
 800dc60:	462b      	mov	r3, r5
 800dc62:	f7f2 fcd1 	bl	8000608 <__aeabi_dmul>
 800dc66:	a354      	add	r3, pc, #336	; (adr r3, 800ddb8 <__ieee754_pow+0xa30>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fb16 	bl	800029c <__adddf3>
 800dc70:	4622      	mov	r2, r4
 800dc72:	462b      	mov	r3, r5
 800dc74:	f7f2 fcc8 	bl	8000608 <__aeabi_dmul>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 fb0a 	bl	8000298 <__aeabi_dsub>
 800dc84:	4604      	mov	r4, r0
 800dc86:	460d      	mov	r5, r1
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	4649      	mov	r1, r9
 800dc90:	f7f2 fcba 	bl	8000608 <__aeabi_dmul>
 800dc94:	2200      	movs	r2, #0
 800dc96:	ec41 0b19 	vmov	d9, r0, r1
 800dc9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc9e:	4620      	mov	r0, r4
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7f2 faf9 	bl	8000298 <__aeabi_dsub>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	ec51 0b19 	vmov	r0, r1, d9
 800dcae:	f7f2 fdd5 	bl	800085c <__aeabi_ddiv>
 800dcb2:	4632      	mov	r2, r6
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	463b      	mov	r3, r7
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 fca3 	bl	8000608 <__aeabi_dmul>
 800dcc2:	4632      	mov	r2, r6
 800dcc4:	463b      	mov	r3, r7
 800dcc6:	f7f2 fae9 	bl	800029c <__adddf3>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 fae1 	bl	8000298 <__aeabi_dsub>
 800dcd6:	4642      	mov	r2, r8
 800dcd8:	464b      	mov	r3, r9
 800dcda:	f7f2 fadd 	bl	8000298 <__aeabi_dsub>
 800dcde:	460b      	mov	r3, r1
 800dce0:	4602      	mov	r2, r0
 800dce2:	4939      	ldr	r1, [pc, #228]	; (800ddc8 <__ieee754_pow+0xa40>)
 800dce4:	2000      	movs	r0, #0
 800dce6:	f7f2 fad7 	bl	8000298 <__aeabi_dsub>
 800dcea:	ec41 0b10 	vmov	d0, r0, r1
 800dcee:	ee10 3a90 	vmov	r3, s1
 800dcf2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dcf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfa:	da2b      	bge.n	800dd54 <__ieee754_pow+0x9cc>
 800dcfc:	4650      	mov	r0, sl
 800dcfe:	f000 fa7f 	bl	800e200 <scalbn>
 800dd02:	ec51 0b10 	vmov	r0, r1, d0
 800dd06:	ec53 2b18 	vmov	r2, r3, d8
 800dd0a:	f7ff bbee 	b.w	800d4ea <__ieee754_pow+0x162>
 800dd0e:	4b2f      	ldr	r3, [pc, #188]	; (800ddcc <__ieee754_pow+0xa44>)
 800dd10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd14:	429e      	cmp	r6, r3
 800dd16:	f77f af0d 	ble.w	800db34 <__ieee754_pow+0x7ac>
 800dd1a:	4b2d      	ldr	r3, [pc, #180]	; (800ddd0 <__ieee754_pow+0xa48>)
 800dd1c:	440b      	add	r3, r1
 800dd1e:	4303      	orrs	r3, r0
 800dd20:	d009      	beq.n	800dd36 <__ieee754_pow+0x9ae>
 800dd22:	ec51 0b18 	vmov	r0, r1, d8
 800dd26:	2200      	movs	r2, #0
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f7f2 fedf 	bl	8000aec <__aeabi_dcmplt>
 800dd2e:	3800      	subs	r0, #0
 800dd30:	bf18      	it	ne
 800dd32:	2001      	movne	r0, #1
 800dd34:	e448      	b.n	800d5c8 <__ieee754_pow+0x240>
 800dd36:	4622      	mov	r2, r4
 800dd38:	462b      	mov	r3, r5
 800dd3a:	f7f2 faad 	bl	8000298 <__aeabi_dsub>
 800dd3e:	4642      	mov	r2, r8
 800dd40:	464b      	mov	r3, r9
 800dd42:	f7f2 fee7 	bl	8000b14 <__aeabi_dcmpge>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f43f aef4 	beq.w	800db34 <__ieee754_pow+0x7ac>
 800dd4c:	e7e9      	b.n	800dd22 <__ieee754_pow+0x99a>
 800dd4e:	f04f 0a00 	mov.w	sl, #0
 800dd52:	e71a      	b.n	800db8a <__ieee754_pow+0x802>
 800dd54:	ec51 0b10 	vmov	r0, r1, d0
 800dd58:	4619      	mov	r1, r3
 800dd5a:	e7d4      	b.n	800dd06 <__ieee754_pow+0x97e>
 800dd5c:	491a      	ldr	r1, [pc, #104]	; (800ddc8 <__ieee754_pow+0xa40>)
 800dd5e:	2000      	movs	r0, #0
 800dd60:	f7ff bb31 	b.w	800d3c6 <__ieee754_pow+0x3e>
 800dd64:	2000      	movs	r0, #0
 800dd66:	2100      	movs	r1, #0
 800dd68:	f7ff bb2d 	b.w	800d3c6 <__ieee754_pow+0x3e>
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	4639      	mov	r1, r7
 800dd70:	f7ff bb29 	b.w	800d3c6 <__ieee754_pow+0x3e>
 800dd74:	9204      	str	r2, [sp, #16]
 800dd76:	f7ff bb7b 	b.w	800d470 <__ieee754_pow+0xe8>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f7ff bb65 	b.w	800d44a <__ieee754_pow+0xc2>
 800dd80:	00000000 	.word	0x00000000
 800dd84:	3fe62e43 	.word	0x3fe62e43
 800dd88:	fefa39ef 	.word	0xfefa39ef
 800dd8c:	3fe62e42 	.word	0x3fe62e42
 800dd90:	0ca86c39 	.word	0x0ca86c39
 800dd94:	be205c61 	.word	0xbe205c61
 800dd98:	72bea4d0 	.word	0x72bea4d0
 800dd9c:	3e663769 	.word	0x3e663769
 800dda0:	c5d26bf1 	.word	0xc5d26bf1
 800dda4:	3ebbbd41 	.word	0x3ebbbd41
 800dda8:	af25de2c 	.word	0xaf25de2c
 800ddac:	3f11566a 	.word	0x3f11566a
 800ddb0:	16bebd93 	.word	0x16bebd93
 800ddb4:	3f66c16c 	.word	0x3f66c16c
 800ddb8:	5555553e 	.word	0x5555553e
 800ddbc:	3fc55555 	.word	0x3fc55555
 800ddc0:	3fe00000 	.word	0x3fe00000
 800ddc4:	fff00000 	.word	0xfff00000
 800ddc8:	3ff00000 	.word	0x3ff00000
 800ddcc:	4090cbff 	.word	0x4090cbff
 800ddd0:	3f6f3400 	.word	0x3f6f3400
 800ddd4:	652b82fe 	.word	0x652b82fe
 800ddd8:	3c971547 	.word	0x3c971547
 800dddc:	00000000 	.word	0x00000000

0800dde0 <__ieee754_rem_pio2>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	ed2d 8b02 	vpush	{d8}
 800dde8:	ec55 4b10 	vmov	r4, r5, d0
 800ddec:	4bca      	ldr	r3, [pc, #808]	; (800e118 <__ieee754_rem_pio2+0x338>)
 800ddee:	b08b      	sub	sp, #44	; 0x2c
 800ddf0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ddf4:	4598      	cmp	r8, r3
 800ddf6:	4682      	mov	sl, r0
 800ddf8:	9502      	str	r5, [sp, #8]
 800ddfa:	dc08      	bgt.n	800de0e <__ieee754_rem_pio2+0x2e>
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	2300      	movs	r3, #0
 800de00:	ed80 0b00 	vstr	d0, [r0]
 800de04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de08:	f04f 0b00 	mov.w	fp, #0
 800de0c:	e028      	b.n	800de60 <__ieee754_rem_pio2+0x80>
 800de0e:	4bc3      	ldr	r3, [pc, #780]	; (800e11c <__ieee754_rem_pio2+0x33c>)
 800de10:	4598      	cmp	r8, r3
 800de12:	dc78      	bgt.n	800df06 <__ieee754_rem_pio2+0x126>
 800de14:	9b02      	ldr	r3, [sp, #8]
 800de16:	4ec2      	ldr	r6, [pc, #776]	; (800e120 <__ieee754_rem_pio2+0x340>)
 800de18:	2b00      	cmp	r3, #0
 800de1a:	ee10 0a10 	vmov	r0, s0
 800de1e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e0e0 <__ieee754_rem_pio2+0x300>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	4629      	mov	r1, r5
 800de26:	dd39      	ble.n	800de9c <__ieee754_rem_pio2+0xbc>
 800de28:	f7f2 fa36 	bl	8000298 <__aeabi_dsub>
 800de2c:	45b0      	cmp	r8, r6
 800de2e:	4604      	mov	r4, r0
 800de30:	460d      	mov	r5, r1
 800de32:	d01b      	beq.n	800de6c <__ieee754_rem_pio2+0x8c>
 800de34:	a3ac      	add	r3, pc, #688	; (adr r3, 800e0e8 <__ieee754_rem_pio2+0x308>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	f7f2 fa2d 	bl	8000298 <__aeabi_dsub>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	e9ca 2300 	strd	r2, r3, [sl]
 800de46:	4620      	mov	r0, r4
 800de48:	4629      	mov	r1, r5
 800de4a:	f7f2 fa25 	bl	8000298 <__aeabi_dsub>
 800de4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e0e8 <__ieee754_rem_pio2+0x308>)
 800de50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de54:	f7f2 fa20 	bl	8000298 <__aeabi_dsub>
 800de58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de5c:	f04f 0b01 	mov.w	fp, #1
 800de60:	4658      	mov	r0, fp
 800de62:	b00b      	add	sp, #44	; 0x2c
 800de64:	ecbd 8b02 	vpop	{d8}
 800de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e0f0 <__ieee754_rem_pio2+0x310>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7f2 fa11 	bl	8000298 <__aeabi_dsub>
 800de76:	a3a0      	add	r3, pc, #640	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x318>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	4604      	mov	r4, r0
 800de7e:	460d      	mov	r5, r1
 800de80:	f7f2 fa0a 	bl	8000298 <__aeabi_dsub>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	e9ca 2300 	strd	r2, r3, [sl]
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fa02 	bl	8000298 <__aeabi_dsub>
 800de94:	a398      	add	r3, pc, #608	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x318>)
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	e7db      	b.n	800de54 <__ieee754_rem_pio2+0x74>
 800de9c:	f7f2 f9fe 	bl	800029c <__adddf3>
 800dea0:	45b0      	cmp	r8, r6
 800dea2:	4604      	mov	r4, r0
 800dea4:	460d      	mov	r5, r1
 800dea6:	d016      	beq.n	800ded6 <__ieee754_rem_pio2+0xf6>
 800dea8:	a38f      	add	r3, pc, #572	; (adr r3, 800e0e8 <__ieee754_rem_pio2+0x308>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 f9f5 	bl	800029c <__adddf3>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	e9ca 2300 	strd	r2, r3, [sl]
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	f7f2 f9eb 	bl	8000298 <__aeabi_dsub>
 800dec2:	a389      	add	r3, pc, #548	; (adr r3, 800e0e8 <__ieee754_rem_pio2+0x308>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f7f2 f9e8 	bl	800029c <__adddf3>
 800decc:	f04f 3bff 	mov.w	fp, #4294967295
 800ded0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ded4:	e7c4      	b.n	800de60 <__ieee754_rem_pio2+0x80>
 800ded6:	a386      	add	r3, pc, #536	; (adr r3, 800e0f0 <__ieee754_rem_pio2+0x310>)
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	f7f2 f9de 	bl	800029c <__adddf3>
 800dee0:	a385      	add	r3, pc, #532	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x318>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	4604      	mov	r4, r0
 800dee8:	460d      	mov	r5, r1
 800deea:	f7f2 f9d7 	bl	800029c <__adddf3>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	e9ca 2300 	strd	r2, r3, [sl]
 800def6:	4620      	mov	r0, r4
 800def8:	4629      	mov	r1, r5
 800defa:	f7f2 f9cd 	bl	8000298 <__aeabi_dsub>
 800defe:	a37e      	add	r3, pc, #504	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x318>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	e7e0      	b.n	800dec8 <__ieee754_rem_pio2+0xe8>
 800df06:	4b87      	ldr	r3, [pc, #540]	; (800e124 <__ieee754_rem_pio2+0x344>)
 800df08:	4598      	cmp	r8, r3
 800df0a:	f300 80d8 	bgt.w	800e0be <__ieee754_rem_pio2+0x2de>
 800df0e:	f000 f96d 	bl	800e1ec <fabs>
 800df12:	ec55 4b10 	vmov	r4, r5, d0
 800df16:	ee10 0a10 	vmov	r0, s0
 800df1a:	a379      	add	r3, pc, #484	; (adr r3, 800e100 <__ieee754_rem_pio2+0x320>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	4629      	mov	r1, r5
 800df22:	f7f2 fb71 	bl	8000608 <__aeabi_dmul>
 800df26:	4b80      	ldr	r3, [pc, #512]	; (800e128 <__ieee754_rem_pio2+0x348>)
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 f9b7 	bl	800029c <__adddf3>
 800df2e:	f7f2 fe1b 	bl	8000b68 <__aeabi_d2iz>
 800df32:	4683      	mov	fp, r0
 800df34:	f7f2 fafe 	bl	8000534 <__aeabi_i2d>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	ec43 2b18 	vmov	d8, r2, r3
 800df40:	a367      	add	r3, pc, #412	; (adr r3, 800e0e0 <__ieee754_rem_pio2+0x300>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 fb5f 	bl	8000608 <__aeabi_dmul>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 f9a1 	bl	8000298 <__aeabi_dsub>
 800df56:	a364      	add	r3, pc, #400	; (adr r3, 800e0e8 <__ieee754_rem_pio2+0x308>)
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	4606      	mov	r6, r0
 800df5e:	460f      	mov	r7, r1
 800df60:	ec51 0b18 	vmov	r0, r1, d8
 800df64:	f7f2 fb50 	bl	8000608 <__aeabi_dmul>
 800df68:	f1bb 0f1f 	cmp.w	fp, #31
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	dc0d      	bgt.n	800df8e <__ieee754_rem_pio2+0x1ae>
 800df72:	4b6e      	ldr	r3, [pc, #440]	; (800e12c <__ieee754_rem_pio2+0x34c>)
 800df74:	f10b 32ff 	add.w	r2, fp, #4294967295
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	4543      	cmp	r3, r8
 800df7e:	d006      	beq.n	800df8e <__ieee754_rem_pio2+0x1ae>
 800df80:	4622      	mov	r2, r4
 800df82:	462b      	mov	r3, r5
 800df84:	4630      	mov	r0, r6
 800df86:	4639      	mov	r1, r7
 800df88:	f7f2 f986 	bl	8000298 <__aeabi_dsub>
 800df8c:	e00e      	b.n	800dfac <__ieee754_rem_pio2+0x1cc>
 800df8e:	462b      	mov	r3, r5
 800df90:	4622      	mov	r2, r4
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 f97f 	bl	8000298 <__aeabi_dsub>
 800df9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800df9e:	9303      	str	r3, [sp, #12]
 800dfa0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dfa4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dfa8:	2b10      	cmp	r3, #16
 800dfaa:	dc02      	bgt.n	800dfb2 <__ieee754_rem_pio2+0x1d2>
 800dfac:	e9ca 0100 	strd	r0, r1, [sl]
 800dfb0:	e039      	b.n	800e026 <__ieee754_rem_pio2+0x246>
 800dfb2:	a34f      	add	r3, pc, #316	; (adr r3, 800e0f0 <__ieee754_rem_pio2+0x310>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	ec51 0b18 	vmov	r0, r1, d8
 800dfbc:	f7f2 fb24 	bl	8000608 <__aeabi_dmul>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4630      	mov	r0, r6
 800dfca:	4639      	mov	r1, r7
 800dfcc:	f7f2 f964 	bl	8000298 <__aeabi_dsub>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 f95c 	bl	8000298 <__aeabi_dsub>
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	462b      	mov	r3, r5
 800dfe4:	f7f2 f958 	bl	8000298 <__aeabi_dsub>
 800dfe8:	a343      	add	r3, pc, #268	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x318>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	ec51 0b18 	vmov	r0, r1, d8
 800dff6:	f7f2 fb07 	bl	8000608 <__aeabi_dmul>
 800dffa:	4622      	mov	r2, r4
 800dffc:	462b      	mov	r3, r5
 800dffe:	f7f2 f94b 	bl	8000298 <__aeabi_dsub>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4604      	mov	r4, r0
 800e008:	460d      	mov	r5, r1
 800e00a:	4640      	mov	r0, r8
 800e00c:	4649      	mov	r1, r9
 800e00e:	f7f2 f943 	bl	8000298 <__aeabi_dsub>
 800e012:	9a03      	ldr	r2, [sp, #12]
 800e014:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	2b31      	cmp	r3, #49	; 0x31
 800e01c:	dc24      	bgt.n	800e068 <__ieee754_rem_pio2+0x288>
 800e01e:	e9ca 0100 	strd	r0, r1, [sl]
 800e022:	4646      	mov	r6, r8
 800e024:	464f      	mov	r7, r9
 800e026:	e9da 8900 	ldrd	r8, r9, [sl]
 800e02a:	4630      	mov	r0, r6
 800e02c:	4642      	mov	r2, r8
 800e02e:	464b      	mov	r3, r9
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 f931 	bl	8000298 <__aeabi_dsub>
 800e036:	462b      	mov	r3, r5
 800e038:	4622      	mov	r2, r4
 800e03a:	f7f2 f92d 	bl	8000298 <__aeabi_dsub>
 800e03e:	9b02      	ldr	r3, [sp, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e046:	f6bf af0b 	bge.w	800de60 <__ieee754_rem_pio2+0x80>
 800e04a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e04e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e056:	f8ca 8000 	str.w	r8, [sl]
 800e05a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e05e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e062:	f1cb 0b00 	rsb	fp, fp, #0
 800e066:	e6fb      	b.n	800de60 <__ieee754_rem_pio2+0x80>
 800e068:	a327      	add	r3, pc, #156	; (adr r3, 800e108 <__ieee754_rem_pio2+0x328>)
 800e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06e:	ec51 0b18 	vmov	r0, r1, d8
 800e072:	f7f2 fac9 	bl	8000608 <__aeabi_dmul>
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	f7f2 f909 	bl	8000298 <__aeabi_dsub>
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	4640      	mov	r0, r8
 800e090:	4649      	mov	r1, r9
 800e092:	f7f2 f901 	bl	8000298 <__aeabi_dsub>
 800e096:	4622      	mov	r2, r4
 800e098:	462b      	mov	r3, r5
 800e09a:	f7f2 f8fd 	bl	8000298 <__aeabi_dsub>
 800e09e:	a31c      	add	r3, pc, #112	; (adr r3, 800e110 <__ieee754_rem_pio2+0x330>)
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	ec51 0b18 	vmov	r0, r1, d8
 800e0ac:	f7f2 faac 	bl	8000608 <__aeabi_dmul>
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	462b      	mov	r3, r5
 800e0b4:	f7f2 f8f0 	bl	8000298 <__aeabi_dsub>
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	e760      	b.n	800df80 <__ieee754_rem_pio2+0x1a0>
 800e0be:	4b1c      	ldr	r3, [pc, #112]	; (800e130 <__ieee754_rem_pio2+0x350>)
 800e0c0:	4598      	cmp	r8, r3
 800e0c2:	dd37      	ble.n	800e134 <__ieee754_rem_pio2+0x354>
 800e0c4:	ee10 2a10 	vmov	r2, s0
 800e0c8:	462b      	mov	r3, r5
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	f7f2 f8e3 	bl	8000298 <__aeabi_dsub>
 800e0d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e0d6:	e9ca 0100 	strd	r0, r1, [sl]
 800e0da:	e695      	b.n	800de08 <__ieee754_rem_pio2+0x28>
 800e0dc:	f3af 8000 	nop.w
 800e0e0:	54400000 	.word	0x54400000
 800e0e4:	3ff921fb 	.word	0x3ff921fb
 800e0e8:	1a626331 	.word	0x1a626331
 800e0ec:	3dd0b461 	.word	0x3dd0b461
 800e0f0:	1a600000 	.word	0x1a600000
 800e0f4:	3dd0b461 	.word	0x3dd0b461
 800e0f8:	2e037073 	.word	0x2e037073
 800e0fc:	3ba3198a 	.word	0x3ba3198a
 800e100:	6dc9c883 	.word	0x6dc9c883
 800e104:	3fe45f30 	.word	0x3fe45f30
 800e108:	2e000000 	.word	0x2e000000
 800e10c:	3ba3198a 	.word	0x3ba3198a
 800e110:	252049c1 	.word	0x252049c1
 800e114:	397b839a 	.word	0x397b839a
 800e118:	3fe921fb 	.word	0x3fe921fb
 800e11c:	4002d97b 	.word	0x4002d97b
 800e120:	3ff921fb 	.word	0x3ff921fb
 800e124:	413921fb 	.word	0x413921fb
 800e128:	3fe00000 	.word	0x3fe00000
 800e12c:	0800f278 	.word	0x0800f278
 800e130:	7fefffff 	.word	0x7fefffff
 800e134:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e138:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e13c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e140:	4620      	mov	r0, r4
 800e142:	460d      	mov	r5, r1
 800e144:	f7f2 fd10 	bl	8000b68 <__aeabi_d2iz>
 800e148:	f7f2 f9f4 	bl	8000534 <__aeabi_i2d>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e158:	f7f2 f89e 	bl	8000298 <__aeabi_dsub>
 800e15c:	4b21      	ldr	r3, [pc, #132]	; (800e1e4 <__ieee754_rem_pio2+0x404>)
 800e15e:	2200      	movs	r2, #0
 800e160:	f7f2 fa52 	bl	8000608 <__aeabi_dmul>
 800e164:	460d      	mov	r5, r1
 800e166:	4604      	mov	r4, r0
 800e168:	f7f2 fcfe 	bl	8000b68 <__aeabi_d2iz>
 800e16c:	f7f2 f9e2 	bl	8000534 <__aeabi_i2d>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4620      	mov	r0, r4
 800e176:	4629      	mov	r1, r5
 800e178:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e17c:	f7f2 f88c 	bl	8000298 <__aeabi_dsub>
 800e180:	4b18      	ldr	r3, [pc, #96]	; (800e1e4 <__ieee754_rem_pio2+0x404>)
 800e182:	2200      	movs	r2, #0
 800e184:	f7f2 fa40 	bl	8000608 <__aeabi_dmul>
 800e188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e18c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e190:	2703      	movs	r7, #3
 800e192:	2400      	movs	r4, #0
 800e194:	2500      	movs	r5, #0
 800e196:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e19a:	4622      	mov	r2, r4
 800e19c:	462b      	mov	r3, r5
 800e19e:	46b9      	mov	r9, r7
 800e1a0:	3f01      	subs	r7, #1
 800e1a2:	f7f2 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d1f5      	bne.n	800e196 <__ieee754_rem_pio2+0x3b6>
 800e1aa:	4b0f      	ldr	r3, [pc, #60]	; (800e1e8 <__ieee754_rem_pio2+0x408>)
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	4632      	mov	r2, r6
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	4651      	mov	r1, sl
 800e1b8:	a804      	add	r0, sp, #16
 800e1ba:	f000 f8d1 	bl	800e360 <__kernel_rem_pio2>
 800e1be:	9b02      	ldr	r3, [sp, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	4683      	mov	fp, r0
 800e1c4:	f6bf ae4c 	bge.w	800de60 <__ieee754_rem_pio2+0x80>
 800e1c8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1d0:	e9ca 2300 	strd	r2, r3, [sl]
 800e1d4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e1d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1dc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e1e0:	e73f      	b.n	800e062 <__ieee754_rem_pio2+0x282>
 800e1e2:	bf00      	nop
 800e1e4:	41700000 	.word	0x41700000
 800e1e8:	0800f2f8 	.word	0x0800f2f8

0800e1ec <fabs>:
 800e1ec:	ec51 0b10 	vmov	r0, r1, d0
 800e1f0:	ee10 2a10 	vmov	r2, s0
 800e1f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1f8:	ec43 2b10 	vmov	d0, r2, r3
 800e1fc:	4770      	bx	lr
	...

0800e200 <scalbn>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	ec55 4b10 	vmov	r4, r5, d0
 800e206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e20a:	4606      	mov	r6, r0
 800e20c:	462b      	mov	r3, r5
 800e20e:	b999      	cbnz	r1, 800e238 <scalbn+0x38>
 800e210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e214:	4323      	orrs	r3, r4
 800e216:	d03f      	beq.n	800e298 <scalbn+0x98>
 800e218:	4b35      	ldr	r3, [pc, #212]	; (800e2f0 <scalbn+0xf0>)
 800e21a:	4629      	mov	r1, r5
 800e21c:	ee10 0a10 	vmov	r0, s0
 800e220:	2200      	movs	r2, #0
 800e222:	f7f2 f9f1 	bl	8000608 <__aeabi_dmul>
 800e226:	4b33      	ldr	r3, [pc, #204]	; (800e2f4 <scalbn+0xf4>)
 800e228:	429e      	cmp	r6, r3
 800e22a:	4604      	mov	r4, r0
 800e22c:	460d      	mov	r5, r1
 800e22e:	da10      	bge.n	800e252 <scalbn+0x52>
 800e230:	a327      	add	r3, pc, #156	; (adr r3, 800e2d0 <scalbn+0xd0>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	e01f      	b.n	800e278 <scalbn+0x78>
 800e238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e23c:	4291      	cmp	r1, r2
 800e23e:	d10c      	bne.n	800e25a <scalbn+0x5a>
 800e240:	ee10 2a10 	vmov	r2, s0
 800e244:	4620      	mov	r0, r4
 800e246:	4629      	mov	r1, r5
 800e248:	f7f2 f828 	bl	800029c <__adddf3>
 800e24c:	4604      	mov	r4, r0
 800e24e:	460d      	mov	r5, r1
 800e250:	e022      	b.n	800e298 <scalbn+0x98>
 800e252:	460b      	mov	r3, r1
 800e254:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e258:	3936      	subs	r1, #54	; 0x36
 800e25a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e25e:	4296      	cmp	r6, r2
 800e260:	dd0d      	ble.n	800e27e <scalbn+0x7e>
 800e262:	2d00      	cmp	r5, #0
 800e264:	a11c      	add	r1, pc, #112	; (adr r1, 800e2d8 <scalbn+0xd8>)
 800e266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26a:	da02      	bge.n	800e272 <scalbn+0x72>
 800e26c:	a11c      	add	r1, pc, #112	; (adr r1, 800e2e0 <scalbn+0xe0>)
 800e26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e272:	a319      	add	r3, pc, #100	; (adr r3, 800e2d8 <scalbn+0xd8>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	f7f2 f9c6 	bl	8000608 <__aeabi_dmul>
 800e27c:	e7e6      	b.n	800e24c <scalbn+0x4c>
 800e27e:	1872      	adds	r2, r6, r1
 800e280:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e284:	428a      	cmp	r2, r1
 800e286:	dcec      	bgt.n	800e262 <scalbn+0x62>
 800e288:	2a00      	cmp	r2, #0
 800e28a:	dd08      	ble.n	800e29e <scalbn+0x9e>
 800e28c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e298:	ec45 4b10 	vmov	d0, r4, r5
 800e29c:	bd70      	pop	{r4, r5, r6, pc}
 800e29e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e2a2:	da08      	bge.n	800e2b6 <scalbn+0xb6>
 800e2a4:	2d00      	cmp	r5, #0
 800e2a6:	a10a      	add	r1, pc, #40	; (adr r1, 800e2d0 <scalbn+0xd0>)
 800e2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ac:	dac0      	bge.n	800e230 <scalbn+0x30>
 800e2ae:	a10e      	add	r1, pc, #56	; (adr r1, 800e2e8 <scalbn+0xe8>)
 800e2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b4:	e7bc      	b.n	800e230 <scalbn+0x30>
 800e2b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2ba:	3236      	adds	r2, #54	; 0x36
 800e2bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	4b0c      	ldr	r3, [pc, #48]	; (800e2f8 <scalbn+0xf8>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	e7d5      	b.n	800e278 <scalbn+0x78>
 800e2cc:	f3af 8000 	nop.w
 800e2d0:	c2f8f359 	.word	0xc2f8f359
 800e2d4:	01a56e1f 	.word	0x01a56e1f
 800e2d8:	8800759c 	.word	0x8800759c
 800e2dc:	7e37e43c 	.word	0x7e37e43c
 800e2e0:	8800759c 	.word	0x8800759c
 800e2e4:	fe37e43c 	.word	0xfe37e43c
 800e2e8:	c2f8f359 	.word	0xc2f8f359
 800e2ec:	81a56e1f 	.word	0x81a56e1f
 800e2f0:	43500000 	.word	0x43500000
 800e2f4:	ffff3cb0 	.word	0xffff3cb0
 800e2f8:	3c900000 	.word	0x3c900000

0800e2fc <with_errno>:
 800e2fc:	b570      	push	{r4, r5, r6, lr}
 800e2fe:	4604      	mov	r4, r0
 800e300:	460d      	mov	r5, r1
 800e302:	4616      	mov	r6, r2
 800e304:	f7fc f81c 	bl	800a340 <__errno>
 800e308:	4629      	mov	r1, r5
 800e30a:	6006      	str	r6, [r0, #0]
 800e30c:	4620      	mov	r0, r4
 800e30e:	bd70      	pop	{r4, r5, r6, pc}

0800e310 <xflow>:
 800e310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e312:	4614      	mov	r4, r2
 800e314:	461d      	mov	r5, r3
 800e316:	b108      	cbz	r0, 800e31c <xflow+0xc>
 800e318:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e31c:	e9cd 2300 	strd	r2, r3, [sp]
 800e320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f2 f96e 	bl	8000608 <__aeabi_dmul>
 800e32c:	2222      	movs	r2, #34	; 0x22
 800e32e:	b003      	add	sp, #12
 800e330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e334:	f7ff bfe2 	b.w	800e2fc <with_errno>

0800e338 <__math_uflow>:
 800e338:	b508      	push	{r3, lr}
 800e33a:	2200      	movs	r2, #0
 800e33c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e340:	f7ff ffe6 	bl	800e310 <xflow>
 800e344:	ec41 0b10 	vmov	d0, r0, r1
 800e348:	bd08      	pop	{r3, pc}

0800e34a <__math_oflow>:
 800e34a:	b508      	push	{r3, lr}
 800e34c:	2200      	movs	r2, #0
 800e34e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e352:	f7ff ffdd 	bl	800e310 <xflow>
 800e356:	ec41 0b10 	vmov	d0, r0, r1
 800e35a:	bd08      	pop	{r3, pc}
 800e35c:	0000      	movs	r0, r0
	...

0800e360 <__kernel_rem_pio2>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	ed2d 8b02 	vpush	{d8}
 800e368:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e36c:	f112 0f14 	cmn.w	r2, #20
 800e370:	9306      	str	r3, [sp, #24]
 800e372:	9104      	str	r1, [sp, #16]
 800e374:	4bc2      	ldr	r3, [pc, #776]	; (800e680 <__kernel_rem_pio2+0x320>)
 800e376:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e378:	9009      	str	r0, [sp, #36]	; 0x24
 800e37a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	9b06      	ldr	r3, [sp, #24]
 800e382:	f103 33ff 	add.w	r3, r3, #4294967295
 800e386:	bfa8      	it	ge
 800e388:	1ed4      	subge	r4, r2, #3
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	bfb2      	itee	lt
 800e38e:	2400      	movlt	r4, #0
 800e390:	2318      	movge	r3, #24
 800e392:	fb94 f4f3 	sdivge	r4, r4, r3
 800e396:	f06f 0317 	mvn.w	r3, #23
 800e39a:	fb04 3303 	mla	r3, r4, r3, r3
 800e39e:	eb03 0a02 	add.w	sl, r3, r2
 800e3a2:	9b00      	ldr	r3, [sp, #0]
 800e3a4:	9a05      	ldr	r2, [sp, #20]
 800e3a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e670 <__kernel_rem_pio2+0x310>
 800e3aa:	eb03 0802 	add.w	r8, r3, r2
 800e3ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e3b0:	1aa7      	subs	r7, r4, r2
 800e3b2:	ae20      	add	r6, sp, #128	; 0x80
 800e3b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e3b8:	2500      	movs	r5, #0
 800e3ba:	4545      	cmp	r5, r8
 800e3bc:	dd13      	ble.n	800e3e6 <__kernel_rem_pio2+0x86>
 800e3be:	9b06      	ldr	r3, [sp, #24]
 800e3c0:	aa20      	add	r2, sp, #128	; 0x80
 800e3c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e3c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e3ca:	f04f 0800 	mov.w	r8, #0
 800e3ce:	9b00      	ldr	r3, [sp, #0]
 800e3d0:	4598      	cmp	r8, r3
 800e3d2:	dc31      	bgt.n	800e438 <__kernel_rem_pio2+0xd8>
 800e3d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e670 <__kernel_rem_pio2+0x310>
 800e3d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e3dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3e0:	462f      	mov	r7, r5
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	e01b      	b.n	800e41e <__kernel_rem_pio2+0xbe>
 800e3e6:	42ef      	cmn	r7, r5
 800e3e8:	d407      	bmi.n	800e3fa <__kernel_rem_pio2+0x9a>
 800e3ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e3ee:	f7f2 f8a1 	bl	8000534 <__aeabi_i2d>
 800e3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e3f6:	3501      	adds	r5, #1
 800e3f8:	e7df      	b.n	800e3ba <__kernel_rem_pio2+0x5a>
 800e3fa:	ec51 0b18 	vmov	r0, r1, d8
 800e3fe:	e7f8      	b.n	800e3f2 <__kernel_rem_pio2+0x92>
 800e400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e404:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e408:	f7f2 f8fe 	bl	8000608 <__aeabi_dmul>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e414:	f7f1 ff42 	bl	800029c <__adddf3>
 800e418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e41c:	3601      	adds	r6, #1
 800e41e:	9b05      	ldr	r3, [sp, #20]
 800e420:	429e      	cmp	r6, r3
 800e422:	f1a7 0708 	sub.w	r7, r7, #8
 800e426:	ddeb      	ble.n	800e400 <__kernel_rem_pio2+0xa0>
 800e428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e42c:	f108 0801 	add.w	r8, r8, #1
 800e430:	ecab 7b02 	vstmia	fp!, {d7}
 800e434:	3508      	adds	r5, #8
 800e436:	e7ca      	b.n	800e3ce <__kernel_rem_pio2+0x6e>
 800e438:	9b00      	ldr	r3, [sp, #0]
 800e43a:	aa0c      	add	r2, sp, #48	; 0x30
 800e43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e440:	930b      	str	r3, [sp, #44]	; 0x2c
 800e442:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e448:	9c00      	ldr	r4, [sp, #0]
 800e44a:	930a      	str	r3, [sp, #40]	; 0x28
 800e44c:	00e3      	lsls	r3, r4, #3
 800e44e:	9308      	str	r3, [sp, #32]
 800e450:	ab98      	add	r3, sp, #608	; 0x260
 800e452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e456:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e45a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e45e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e460:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e464:	46c3      	mov	fp, r8
 800e466:	46a1      	mov	r9, r4
 800e468:	f1b9 0f00 	cmp.w	r9, #0
 800e46c:	f1a5 0508 	sub.w	r5, r5, #8
 800e470:	dc77      	bgt.n	800e562 <__kernel_rem_pio2+0x202>
 800e472:	ec47 6b10 	vmov	d0, r6, r7
 800e476:	4650      	mov	r0, sl
 800e478:	f7ff fec2 	bl	800e200 <scalbn>
 800e47c:	ec57 6b10 	vmov	r6, r7, d0
 800e480:	2200      	movs	r2, #0
 800e482:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e486:	ee10 0a10 	vmov	r0, s0
 800e48a:	4639      	mov	r1, r7
 800e48c:	f7f2 f8bc 	bl	8000608 <__aeabi_dmul>
 800e490:	ec41 0b10 	vmov	d0, r0, r1
 800e494:	f000 fab4 	bl	800ea00 <floor>
 800e498:	4b7a      	ldr	r3, [pc, #488]	; (800e684 <__kernel_rem_pio2+0x324>)
 800e49a:	ec51 0b10 	vmov	r0, r1, d0
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f7f2 f8b2 	bl	8000608 <__aeabi_dmul>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f1 fef4 	bl	8000298 <__aeabi_dsub>
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	f7f2 fb58 	bl	8000b68 <__aeabi_d2iz>
 800e4b8:	9002      	str	r0, [sp, #8]
 800e4ba:	f7f2 f83b 	bl	8000534 <__aeabi_i2d>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	f7f1 fee7 	bl	8000298 <__aeabi_dsub>
 800e4ca:	f1ba 0f00 	cmp.w	sl, #0
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	460f      	mov	r7, r1
 800e4d2:	dd6d      	ble.n	800e5b0 <__kernel_rem_pio2+0x250>
 800e4d4:	1e61      	subs	r1, r4, #1
 800e4d6:	ab0c      	add	r3, sp, #48	; 0x30
 800e4d8:	9d02      	ldr	r5, [sp, #8]
 800e4da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4de:	f1ca 0018 	rsb	r0, sl, #24
 800e4e2:	fa43 f200 	asr.w	r2, r3, r0
 800e4e6:	4415      	add	r5, r2
 800e4e8:	4082      	lsls	r2, r0
 800e4ea:	1a9b      	subs	r3, r3, r2
 800e4ec:	aa0c      	add	r2, sp, #48	; 0x30
 800e4ee:	9502      	str	r5, [sp, #8]
 800e4f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e4f4:	f1ca 0217 	rsb	r2, sl, #23
 800e4f8:	fa43 fb02 	asr.w	fp, r3, r2
 800e4fc:	f1bb 0f00 	cmp.w	fp, #0
 800e500:	dd65      	ble.n	800e5ce <__kernel_rem_pio2+0x26e>
 800e502:	9b02      	ldr	r3, [sp, #8]
 800e504:	2200      	movs	r2, #0
 800e506:	3301      	adds	r3, #1
 800e508:	9302      	str	r3, [sp, #8]
 800e50a:	4615      	mov	r5, r2
 800e50c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e510:	4294      	cmp	r4, r2
 800e512:	f300 809f 	bgt.w	800e654 <__kernel_rem_pio2+0x2f4>
 800e516:	f1ba 0f00 	cmp.w	sl, #0
 800e51a:	dd07      	ble.n	800e52c <__kernel_rem_pio2+0x1cc>
 800e51c:	f1ba 0f01 	cmp.w	sl, #1
 800e520:	f000 80c1 	beq.w	800e6a6 <__kernel_rem_pio2+0x346>
 800e524:	f1ba 0f02 	cmp.w	sl, #2
 800e528:	f000 80c7 	beq.w	800e6ba <__kernel_rem_pio2+0x35a>
 800e52c:	f1bb 0f02 	cmp.w	fp, #2
 800e530:	d14d      	bne.n	800e5ce <__kernel_rem_pio2+0x26e>
 800e532:	4632      	mov	r2, r6
 800e534:	463b      	mov	r3, r7
 800e536:	4954      	ldr	r1, [pc, #336]	; (800e688 <__kernel_rem_pio2+0x328>)
 800e538:	2000      	movs	r0, #0
 800e53a:	f7f1 fead 	bl	8000298 <__aeabi_dsub>
 800e53e:	4606      	mov	r6, r0
 800e540:	460f      	mov	r7, r1
 800e542:	2d00      	cmp	r5, #0
 800e544:	d043      	beq.n	800e5ce <__kernel_rem_pio2+0x26e>
 800e546:	4650      	mov	r0, sl
 800e548:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e678 <__kernel_rem_pio2+0x318>
 800e54c:	f7ff fe58 	bl	800e200 <scalbn>
 800e550:	4630      	mov	r0, r6
 800e552:	4639      	mov	r1, r7
 800e554:	ec53 2b10 	vmov	r2, r3, d0
 800e558:	f7f1 fe9e 	bl	8000298 <__aeabi_dsub>
 800e55c:	4606      	mov	r6, r0
 800e55e:	460f      	mov	r7, r1
 800e560:	e035      	b.n	800e5ce <__kernel_rem_pio2+0x26e>
 800e562:	4b4a      	ldr	r3, [pc, #296]	; (800e68c <__kernel_rem_pio2+0x32c>)
 800e564:	2200      	movs	r2, #0
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 f84d 	bl	8000608 <__aeabi_dmul>
 800e56e:	f7f2 fafb 	bl	8000b68 <__aeabi_d2iz>
 800e572:	f7f1 ffdf 	bl	8000534 <__aeabi_i2d>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	ec43 2b18 	vmov	d8, r2, r3
 800e57e:	4b44      	ldr	r3, [pc, #272]	; (800e690 <__kernel_rem_pio2+0x330>)
 800e580:	2200      	movs	r2, #0
 800e582:	f7f2 f841 	bl	8000608 <__aeabi_dmul>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4630      	mov	r0, r6
 800e58c:	4639      	mov	r1, r7
 800e58e:	f7f1 fe83 	bl	8000298 <__aeabi_dsub>
 800e592:	f7f2 fae9 	bl	8000b68 <__aeabi_d2iz>
 800e596:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e59a:	f84b 0b04 	str.w	r0, [fp], #4
 800e59e:	ec51 0b18 	vmov	r0, r1, d8
 800e5a2:	f7f1 fe7b 	bl	800029c <__adddf3>
 800e5a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460f      	mov	r7, r1
 800e5ae:	e75b      	b.n	800e468 <__kernel_rem_pio2+0x108>
 800e5b0:	d106      	bne.n	800e5c0 <__kernel_rem_pio2+0x260>
 800e5b2:	1e63      	subs	r3, r4, #1
 800e5b4:	aa0c      	add	r2, sp, #48	; 0x30
 800e5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e5be:	e79d      	b.n	800e4fc <__kernel_rem_pio2+0x19c>
 800e5c0:	4b34      	ldr	r3, [pc, #208]	; (800e694 <__kernel_rem_pio2+0x334>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f7f2 faa6 	bl	8000b14 <__aeabi_dcmpge>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d140      	bne.n	800e64e <__kernel_rem_pio2+0x2ee>
 800e5cc:	4683      	mov	fp, r0
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	f7f2 fa7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	f000 80c1 	beq.w	800e762 <__kernel_rem_pio2+0x402>
 800e5e0:	1e65      	subs	r5, r4, #1
 800e5e2:	462b      	mov	r3, r5
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	9900      	ldr	r1, [sp, #0]
 800e5e8:	428b      	cmp	r3, r1
 800e5ea:	da6d      	bge.n	800e6c8 <__kernel_rem_pio2+0x368>
 800e5ec:	2a00      	cmp	r2, #0
 800e5ee:	f000 808a 	beq.w	800e706 <__kernel_rem_pio2+0x3a6>
 800e5f2:	ab0c      	add	r3, sp, #48	; 0x30
 800e5f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e5f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 80ae 	beq.w	800e75e <__kernel_rem_pio2+0x3fe>
 800e602:	4650      	mov	r0, sl
 800e604:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e678 <__kernel_rem_pio2+0x318>
 800e608:	f7ff fdfa 	bl	800e200 <scalbn>
 800e60c:	1c6b      	adds	r3, r5, #1
 800e60e:	00da      	lsls	r2, r3, #3
 800e610:	9205      	str	r2, [sp, #20]
 800e612:	ec57 6b10 	vmov	r6, r7, d0
 800e616:	aa70      	add	r2, sp, #448	; 0x1c0
 800e618:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e68c <__kernel_rem_pio2+0x32c>
 800e61c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e620:	462c      	mov	r4, r5
 800e622:	f04f 0800 	mov.w	r8, #0
 800e626:	2c00      	cmp	r4, #0
 800e628:	f280 80d4 	bge.w	800e7d4 <__kernel_rem_pio2+0x474>
 800e62c:	462c      	mov	r4, r5
 800e62e:	2c00      	cmp	r4, #0
 800e630:	f2c0 8102 	blt.w	800e838 <__kernel_rem_pio2+0x4d8>
 800e634:	4b18      	ldr	r3, [pc, #96]	; (800e698 <__kernel_rem_pio2+0x338>)
 800e636:	461e      	mov	r6, r3
 800e638:	ab70      	add	r3, sp, #448	; 0x1c0
 800e63a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e63e:	1b2b      	subs	r3, r5, r4
 800e640:	f04f 0900 	mov.w	r9, #0
 800e644:	f04f 0a00 	mov.w	sl, #0
 800e648:	2700      	movs	r7, #0
 800e64a:	9306      	str	r3, [sp, #24]
 800e64c:	e0e6      	b.n	800e81c <__kernel_rem_pio2+0x4bc>
 800e64e:	f04f 0b02 	mov.w	fp, #2
 800e652:	e756      	b.n	800e502 <__kernel_rem_pio2+0x1a2>
 800e654:	f8d8 3000 	ldr.w	r3, [r8]
 800e658:	bb05      	cbnz	r5, 800e69c <__kernel_rem_pio2+0x33c>
 800e65a:	b123      	cbz	r3, 800e666 <__kernel_rem_pio2+0x306>
 800e65c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e660:	f8c8 3000 	str.w	r3, [r8]
 800e664:	2301      	movs	r3, #1
 800e666:	3201      	adds	r2, #1
 800e668:	f108 0804 	add.w	r8, r8, #4
 800e66c:	461d      	mov	r5, r3
 800e66e:	e74f      	b.n	800e510 <__kernel_rem_pio2+0x1b0>
	...
 800e67c:	3ff00000 	.word	0x3ff00000
 800e680:	0800f440 	.word	0x0800f440
 800e684:	40200000 	.word	0x40200000
 800e688:	3ff00000 	.word	0x3ff00000
 800e68c:	3e700000 	.word	0x3e700000
 800e690:	41700000 	.word	0x41700000
 800e694:	3fe00000 	.word	0x3fe00000
 800e698:	0800f400 	.word	0x0800f400
 800e69c:	1acb      	subs	r3, r1, r3
 800e69e:	f8c8 3000 	str.w	r3, [r8]
 800e6a2:	462b      	mov	r3, r5
 800e6a4:	e7df      	b.n	800e666 <__kernel_rem_pio2+0x306>
 800e6a6:	1e62      	subs	r2, r4, #1
 800e6a8:	ab0c      	add	r3, sp, #48	; 0x30
 800e6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6b2:	a90c      	add	r1, sp, #48	; 0x30
 800e6b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e6b8:	e738      	b.n	800e52c <__kernel_rem_pio2+0x1cc>
 800e6ba:	1e62      	subs	r2, r4, #1
 800e6bc:	ab0c      	add	r3, sp, #48	; 0x30
 800e6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6c6:	e7f4      	b.n	800e6b2 <__kernel_rem_pio2+0x352>
 800e6c8:	a90c      	add	r1, sp, #48	; 0x30
 800e6ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	e788      	b.n	800e5e6 <__kernel_rem_pio2+0x286>
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e6da:	2900      	cmp	r1, #0
 800e6dc:	d0fa      	beq.n	800e6d4 <__kernel_rem_pio2+0x374>
 800e6de:	9a08      	ldr	r2, [sp, #32]
 800e6e0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e6e4:	446a      	add	r2, sp
 800e6e6:	3a98      	subs	r2, #152	; 0x98
 800e6e8:	9208      	str	r2, [sp, #32]
 800e6ea:	9a06      	ldr	r2, [sp, #24]
 800e6ec:	a920      	add	r1, sp, #128	; 0x80
 800e6ee:	18a2      	adds	r2, r4, r2
 800e6f0:	18e3      	adds	r3, r4, r3
 800e6f2:	f104 0801 	add.w	r8, r4, #1
 800e6f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e6fa:	9302      	str	r3, [sp, #8]
 800e6fc:	9b02      	ldr	r3, [sp, #8]
 800e6fe:	4543      	cmp	r3, r8
 800e700:	da04      	bge.n	800e70c <__kernel_rem_pio2+0x3ac>
 800e702:	461c      	mov	r4, r3
 800e704:	e6a2      	b.n	800e44c <__kernel_rem_pio2+0xec>
 800e706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e708:	2301      	movs	r3, #1
 800e70a:	e7e4      	b.n	800e6d6 <__kernel_rem_pio2+0x376>
 800e70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e712:	f7f1 ff0f 	bl	8000534 <__aeabi_i2d>
 800e716:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71c:	46ab      	mov	fp, r5
 800e71e:	461c      	mov	r4, r3
 800e720:	f04f 0900 	mov.w	r9, #0
 800e724:	2600      	movs	r6, #0
 800e726:	2700      	movs	r7, #0
 800e728:	9b05      	ldr	r3, [sp, #20]
 800e72a:	4599      	cmp	r9, r3
 800e72c:	dd06      	ble.n	800e73c <__kernel_rem_pio2+0x3dc>
 800e72e:	9b08      	ldr	r3, [sp, #32]
 800e730:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e734:	f108 0801 	add.w	r8, r8, #1
 800e738:	9308      	str	r3, [sp, #32]
 800e73a:	e7df      	b.n	800e6fc <__kernel_rem_pio2+0x39c>
 800e73c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e740:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e744:	f7f1 ff60 	bl	8000608 <__aeabi_dmul>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4630      	mov	r0, r6
 800e74e:	4639      	mov	r1, r7
 800e750:	f7f1 fda4 	bl	800029c <__adddf3>
 800e754:	f109 0901 	add.w	r9, r9, #1
 800e758:	4606      	mov	r6, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	e7e4      	b.n	800e728 <__kernel_rem_pio2+0x3c8>
 800e75e:	3d01      	subs	r5, #1
 800e760:	e747      	b.n	800e5f2 <__kernel_rem_pio2+0x292>
 800e762:	ec47 6b10 	vmov	d0, r6, r7
 800e766:	f1ca 0000 	rsb	r0, sl, #0
 800e76a:	f7ff fd49 	bl	800e200 <scalbn>
 800e76e:	ec57 6b10 	vmov	r6, r7, d0
 800e772:	4ba0      	ldr	r3, [pc, #640]	; (800e9f4 <__kernel_rem_pio2+0x694>)
 800e774:	ee10 0a10 	vmov	r0, s0
 800e778:	2200      	movs	r2, #0
 800e77a:	4639      	mov	r1, r7
 800e77c:	f7f2 f9ca 	bl	8000b14 <__aeabi_dcmpge>
 800e780:	b1f8      	cbz	r0, 800e7c2 <__kernel_rem_pio2+0x462>
 800e782:	4b9d      	ldr	r3, [pc, #628]	; (800e9f8 <__kernel_rem_pio2+0x698>)
 800e784:	2200      	movs	r2, #0
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f1 ff3d 	bl	8000608 <__aeabi_dmul>
 800e78e:	f7f2 f9eb 	bl	8000b68 <__aeabi_d2iz>
 800e792:	4680      	mov	r8, r0
 800e794:	f7f1 fece 	bl	8000534 <__aeabi_i2d>
 800e798:	4b96      	ldr	r3, [pc, #600]	; (800e9f4 <__kernel_rem_pio2+0x694>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	f7f1 ff34 	bl	8000608 <__aeabi_dmul>
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f7f1 fd76 	bl	8000298 <__aeabi_dsub>
 800e7ac:	f7f2 f9dc 	bl	8000b68 <__aeabi_d2iz>
 800e7b0:	1c65      	adds	r5, r4, #1
 800e7b2:	ab0c      	add	r3, sp, #48	; 0x30
 800e7b4:	f10a 0a18 	add.w	sl, sl, #24
 800e7b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e7bc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e7c0:	e71f      	b.n	800e602 <__kernel_rem_pio2+0x2a2>
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	f7f2 f9cf 	bl	8000b68 <__aeabi_d2iz>
 800e7ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e7cc:	4625      	mov	r5, r4
 800e7ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e7d2:	e716      	b.n	800e602 <__kernel_rem_pio2+0x2a2>
 800e7d4:	ab0c      	add	r3, sp, #48	; 0x30
 800e7d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e7da:	f7f1 feab 	bl	8000534 <__aeabi_i2d>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	f7f1 ff11 	bl	8000608 <__aeabi_dmul>
 800e7e6:	4642      	mov	r2, r8
 800e7e8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	f7f1 ff09 	bl	8000608 <__aeabi_dmul>
 800e7f6:	3c01      	subs	r4, #1
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	460f      	mov	r7, r1
 800e7fc:	e713      	b.n	800e626 <__kernel_rem_pio2+0x2c6>
 800e7fe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e802:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e806:	f7f1 feff 	bl	8000608 <__aeabi_dmul>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	4648      	mov	r0, r9
 800e810:	4651      	mov	r1, sl
 800e812:	f7f1 fd43 	bl	800029c <__adddf3>
 800e816:	3701      	adds	r7, #1
 800e818:	4681      	mov	r9, r0
 800e81a:	468a      	mov	sl, r1
 800e81c:	9b00      	ldr	r3, [sp, #0]
 800e81e:	429f      	cmp	r7, r3
 800e820:	dc02      	bgt.n	800e828 <__kernel_rem_pio2+0x4c8>
 800e822:	9b06      	ldr	r3, [sp, #24]
 800e824:	429f      	cmp	r7, r3
 800e826:	ddea      	ble.n	800e7fe <__kernel_rem_pio2+0x49e>
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	ab48      	add	r3, sp, #288	; 0x120
 800e82c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e830:	e9c6 9a00 	strd	r9, sl, [r6]
 800e834:	3c01      	subs	r4, #1
 800e836:	e6fa      	b.n	800e62e <__kernel_rem_pio2+0x2ce>
 800e838:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	dc0b      	bgt.n	800e856 <__kernel_rem_pio2+0x4f6>
 800e83e:	2b00      	cmp	r3, #0
 800e840:	dc39      	bgt.n	800e8b6 <__kernel_rem_pio2+0x556>
 800e842:	d05d      	beq.n	800e900 <__kernel_rem_pio2+0x5a0>
 800e844:	9b02      	ldr	r3, [sp, #8]
 800e846:	f003 0007 	and.w	r0, r3, #7
 800e84a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e84e:	ecbd 8b02 	vpop	{d8}
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d1f3      	bne.n	800e844 <__kernel_rem_pio2+0x4e4>
 800e85c:	9b05      	ldr	r3, [sp, #20]
 800e85e:	9500      	str	r5, [sp, #0]
 800e860:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e864:	eb0d 0403 	add.w	r4, sp, r3
 800e868:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e86c:	46a2      	mov	sl, r4
 800e86e:	9b00      	ldr	r3, [sp, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	f1aa 0a08 	sub.w	sl, sl, #8
 800e876:	dc69      	bgt.n	800e94c <__kernel_rem_pio2+0x5ec>
 800e878:	46aa      	mov	sl, r5
 800e87a:	f1ba 0f01 	cmp.w	sl, #1
 800e87e:	f1a4 0408 	sub.w	r4, r4, #8
 800e882:	f300 8083 	bgt.w	800e98c <__kernel_rem_pio2+0x62c>
 800e886:	9c05      	ldr	r4, [sp, #20]
 800e888:	ab48      	add	r3, sp, #288	; 0x120
 800e88a:	441c      	add	r4, r3
 800e88c:	2000      	movs	r0, #0
 800e88e:	2100      	movs	r1, #0
 800e890:	2d01      	cmp	r5, #1
 800e892:	f300 809a 	bgt.w	800e9ca <__kernel_rem_pio2+0x66a>
 800e896:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e89a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e89e:	f1bb 0f00 	cmp.w	fp, #0
 800e8a2:	f040 8098 	bne.w	800e9d6 <__kernel_rem_pio2+0x676>
 800e8a6:	9b04      	ldr	r3, [sp, #16]
 800e8a8:	e9c3 7800 	strd	r7, r8, [r3]
 800e8ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e8b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e8b4:	e7c6      	b.n	800e844 <__kernel_rem_pio2+0x4e4>
 800e8b6:	9e05      	ldr	r6, [sp, #20]
 800e8b8:	ab48      	add	r3, sp, #288	; 0x120
 800e8ba:	441e      	add	r6, r3
 800e8bc:	462c      	mov	r4, r5
 800e8be:	2000      	movs	r0, #0
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	2c00      	cmp	r4, #0
 800e8c4:	da33      	bge.n	800e92e <__kernel_rem_pio2+0x5ce>
 800e8c6:	f1bb 0f00 	cmp.w	fp, #0
 800e8ca:	d036      	beq.n	800e93a <__kernel_rem_pio2+0x5da>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8d2:	9c04      	ldr	r4, [sp, #16]
 800e8d4:	e9c4 2300 	strd	r2, r3, [r4]
 800e8d8:	4602      	mov	r2, r0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e8e0:	f7f1 fcda 	bl	8000298 <__aeabi_dsub>
 800e8e4:	ae4a      	add	r6, sp, #296	; 0x128
 800e8e6:	2401      	movs	r4, #1
 800e8e8:	42a5      	cmp	r5, r4
 800e8ea:	da29      	bge.n	800e940 <__kernel_rem_pio2+0x5e0>
 800e8ec:	f1bb 0f00 	cmp.w	fp, #0
 800e8f0:	d002      	beq.n	800e8f8 <__kernel_rem_pio2+0x598>
 800e8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	9b04      	ldr	r3, [sp, #16]
 800e8fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e8fe:	e7a1      	b.n	800e844 <__kernel_rem_pio2+0x4e4>
 800e900:	9c05      	ldr	r4, [sp, #20]
 800e902:	ab48      	add	r3, sp, #288	; 0x120
 800e904:	441c      	add	r4, r3
 800e906:	2000      	movs	r0, #0
 800e908:	2100      	movs	r1, #0
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	da09      	bge.n	800e922 <__kernel_rem_pio2+0x5c2>
 800e90e:	f1bb 0f00 	cmp.w	fp, #0
 800e912:	d002      	beq.n	800e91a <__kernel_rem_pio2+0x5ba>
 800e914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e918:	4619      	mov	r1, r3
 800e91a:	9b04      	ldr	r3, [sp, #16]
 800e91c:	e9c3 0100 	strd	r0, r1, [r3]
 800e920:	e790      	b.n	800e844 <__kernel_rem_pio2+0x4e4>
 800e922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e926:	f7f1 fcb9 	bl	800029c <__adddf3>
 800e92a:	3d01      	subs	r5, #1
 800e92c:	e7ed      	b.n	800e90a <__kernel_rem_pio2+0x5aa>
 800e92e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e932:	f7f1 fcb3 	bl	800029c <__adddf3>
 800e936:	3c01      	subs	r4, #1
 800e938:	e7c3      	b.n	800e8c2 <__kernel_rem_pio2+0x562>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	e7c8      	b.n	800e8d2 <__kernel_rem_pio2+0x572>
 800e940:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e944:	f7f1 fcaa 	bl	800029c <__adddf3>
 800e948:	3401      	adds	r4, #1
 800e94a:	e7cd      	b.n	800e8e8 <__kernel_rem_pio2+0x588>
 800e94c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e950:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e954:	9b00      	ldr	r3, [sp, #0]
 800e956:	3b01      	subs	r3, #1
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	4632      	mov	r2, r6
 800e95c:	463b      	mov	r3, r7
 800e95e:	4640      	mov	r0, r8
 800e960:	4649      	mov	r1, r9
 800e962:	f7f1 fc9b 	bl	800029c <__adddf3>
 800e966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4640      	mov	r0, r8
 800e970:	4649      	mov	r1, r9
 800e972:	f7f1 fc91 	bl	8000298 <__aeabi_dsub>
 800e976:	4632      	mov	r2, r6
 800e978:	463b      	mov	r3, r7
 800e97a:	f7f1 fc8f 	bl	800029c <__adddf3>
 800e97e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e986:	ed8a 7b00 	vstr	d7, [sl]
 800e98a:	e770      	b.n	800e86e <__kernel_rem_pio2+0x50e>
 800e98c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e990:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e994:	4640      	mov	r0, r8
 800e996:	4632      	mov	r2, r6
 800e998:	463b      	mov	r3, r7
 800e99a:	4649      	mov	r1, r9
 800e99c:	f7f1 fc7e 	bl	800029c <__adddf3>
 800e9a0:	e9cd 0100 	strd	r0, r1, [sp]
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	4640      	mov	r0, r8
 800e9aa:	4649      	mov	r1, r9
 800e9ac:	f7f1 fc74 	bl	8000298 <__aeabi_dsub>
 800e9b0:	4632      	mov	r2, r6
 800e9b2:	463b      	mov	r3, r7
 800e9b4:	f7f1 fc72 	bl	800029c <__adddf3>
 800e9b8:	ed9d 7b00 	vldr	d7, [sp]
 800e9bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9c0:	ed84 7b00 	vstr	d7, [r4]
 800e9c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9c8:	e757      	b.n	800e87a <__kernel_rem_pio2+0x51a>
 800e9ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e9ce:	f7f1 fc65 	bl	800029c <__adddf3>
 800e9d2:	3d01      	subs	r5, #1
 800e9d4:	e75c      	b.n	800e890 <__kernel_rem_pio2+0x530>
 800e9d6:	9b04      	ldr	r3, [sp, #16]
 800e9d8:	9a04      	ldr	r2, [sp, #16]
 800e9da:	601f      	str	r7, [r3, #0]
 800e9dc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e9e0:	605c      	str	r4, [r3, #4]
 800e9e2:	609d      	str	r5, [r3, #8]
 800e9e4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e9e8:	60d3      	str	r3, [r2, #12]
 800e9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ee:	6110      	str	r0, [r2, #16]
 800e9f0:	6153      	str	r3, [r2, #20]
 800e9f2:	e727      	b.n	800e844 <__kernel_rem_pio2+0x4e4>
 800e9f4:	41700000 	.word	0x41700000
 800e9f8:	3e700000 	.word	0x3e700000
 800e9fc:	00000000 	.word	0x00000000

0800ea00 <floor>:
 800ea00:	ec51 0b10 	vmov	r0, r1, d0
 800ea04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ea10:	2e13      	cmp	r6, #19
 800ea12:	ee10 5a10 	vmov	r5, s0
 800ea16:	ee10 8a10 	vmov	r8, s0
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	dc31      	bgt.n	800ea82 <floor+0x82>
 800ea1e:	2e00      	cmp	r6, #0
 800ea20:	da14      	bge.n	800ea4c <floor+0x4c>
 800ea22:	a333      	add	r3, pc, #204	; (adr r3, 800eaf0 <floor+0xf0>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	f7f1 fc38 	bl	800029c <__adddf3>
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f7f2 f87a 	bl	8000b28 <__aeabi_dcmpgt>
 800ea34:	b138      	cbz	r0, 800ea46 <floor+0x46>
 800ea36:	2c00      	cmp	r4, #0
 800ea38:	da53      	bge.n	800eae2 <floor+0xe2>
 800ea3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ea3e:	4325      	orrs	r5, r4
 800ea40:	d052      	beq.n	800eae8 <floor+0xe8>
 800ea42:	4c2d      	ldr	r4, [pc, #180]	; (800eaf8 <floor+0xf8>)
 800ea44:	2500      	movs	r5, #0
 800ea46:	4621      	mov	r1, r4
 800ea48:	4628      	mov	r0, r5
 800ea4a:	e024      	b.n	800ea96 <floor+0x96>
 800ea4c:	4f2b      	ldr	r7, [pc, #172]	; (800eafc <floor+0xfc>)
 800ea4e:	4137      	asrs	r7, r6
 800ea50:	ea01 0307 	and.w	r3, r1, r7
 800ea54:	4303      	orrs	r3, r0
 800ea56:	d01e      	beq.n	800ea96 <floor+0x96>
 800ea58:	a325      	add	r3, pc, #148	; (adr r3, 800eaf0 <floor+0xf0>)
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f7f1 fc1d 	bl	800029c <__adddf3>
 800ea62:	2200      	movs	r2, #0
 800ea64:	2300      	movs	r3, #0
 800ea66:	f7f2 f85f 	bl	8000b28 <__aeabi_dcmpgt>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d0eb      	beq.n	800ea46 <floor+0x46>
 800ea6e:	2c00      	cmp	r4, #0
 800ea70:	bfbe      	ittt	lt
 800ea72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ea76:	4133      	asrlt	r3, r6
 800ea78:	18e4      	addlt	r4, r4, r3
 800ea7a:	ea24 0407 	bic.w	r4, r4, r7
 800ea7e:	2500      	movs	r5, #0
 800ea80:	e7e1      	b.n	800ea46 <floor+0x46>
 800ea82:	2e33      	cmp	r6, #51	; 0x33
 800ea84:	dd0b      	ble.n	800ea9e <floor+0x9e>
 800ea86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ea8a:	d104      	bne.n	800ea96 <floor+0x96>
 800ea8c:	ee10 2a10 	vmov	r2, s0
 800ea90:	460b      	mov	r3, r1
 800ea92:	f7f1 fc03 	bl	800029c <__adddf3>
 800ea96:	ec41 0b10 	vmov	d0, r0, r1
 800ea9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800eaa2:	f04f 37ff 	mov.w	r7, #4294967295
 800eaa6:	40df      	lsrs	r7, r3
 800eaa8:	4238      	tst	r0, r7
 800eaaa:	d0f4      	beq.n	800ea96 <floor+0x96>
 800eaac:	a310      	add	r3, pc, #64	; (adr r3, 800eaf0 <floor+0xf0>)
 800eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab2:	f7f1 fbf3 	bl	800029c <__adddf3>
 800eab6:	2200      	movs	r2, #0
 800eab8:	2300      	movs	r3, #0
 800eaba:	f7f2 f835 	bl	8000b28 <__aeabi_dcmpgt>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d0c1      	beq.n	800ea46 <floor+0x46>
 800eac2:	2c00      	cmp	r4, #0
 800eac4:	da0a      	bge.n	800eadc <floor+0xdc>
 800eac6:	2e14      	cmp	r6, #20
 800eac8:	d101      	bne.n	800eace <floor+0xce>
 800eaca:	3401      	adds	r4, #1
 800eacc:	e006      	b.n	800eadc <floor+0xdc>
 800eace:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ead2:	2301      	movs	r3, #1
 800ead4:	40b3      	lsls	r3, r6
 800ead6:	441d      	add	r5, r3
 800ead8:	45a8      	cmp	r8, r5
 800eada:	d8f6      	bhi.n	800eaca <floor+0xca>
 800eadc:	ea25 0507 	bic.w	r5, r5, r7
 800eae0:	e7b1      	b.n	800ea46 <floor+0x46>
 800eae2:	2500      	movs	r5, #0
 800eae4:	462c      	mov	r4, r5
 800eae6:	e7ae      	b.n	800ea46 <floor+0x46>
 800eae8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eaec:	e7ab      	b.n	800ea46 <floor+0x46>
 800eaee:	bf00      	nop
 800eaf0:	8800759c 	.word	0x8800759c
 800eaf4:	7e37e43c 	.word	0x7e37e43c
 800eaf8:	bff00000 	.word	0xbff00000
 800eafc:	000fffff 	.word	0x000fffff

0800eb00 <_init>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	bf00      	nop
 800eb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb06:	bc08      	pop	{r3}
 800eb08:	469e      	mov	lr, r3
 800eb0a:	4770      	bx	lr

0800eb0c <_fini>:
 800eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0e:	bf00      	nop
 800eb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb12:	bc08      	pop	{r3}
 800eb14:	469e      	mov	lr, r3
 800eb16:	4770      	bx	lr
