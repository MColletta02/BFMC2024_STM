
BL_Completo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  0800e840  0800e840  0001e840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f100  0800f100  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f100  0800f100  0001f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f108  0800f108  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f108  0800f108  0001f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f110  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001f8  0800f308  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800f308  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124ef  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000283a  00000000  00000000  0003275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e94  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019de3  00000000  00000000  000370ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001681b  00000000  00000000  00050e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f67c  00000000  00000000  000676aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006960  00000000  00000000  00106d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0010d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e828 	.word	0x0800e828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800e828 	.word	0x0800e828

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <BL_DegreeSec2RPM>:


#include <BL_motor.h>
#include "Configuration.h"

float BL_DegreeSec2RPM(float speed_degsec){
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001038 <BL_DegreeSec2RPM+0x38>
 8001012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001016:	eddf 6a09 	vldr	s13, [pc, #36]	; 800103c <BL_DegreeSec2RPM+0x3c>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	42700000 	.word	0x42700000
 800103c:	43b40000 	.word	0x43b40000

08001040 <BL_set_PWM>:

void BL_set_PWM(float duty){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]

	TIM10->CCR1 = duty*TIM10->ARR;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <BL_set_PWM+0x38>)
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <BL_set_PWM+0x38>)
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	ee17 2a90 	vmov	r2, s15
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40014400 	.word	0x40014400

0800107c <init_PID>:
#include "Configuration.h"

#include <stdio.h>


void init_PID(PID* p, float Tc, float u_max, float u_min){
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	ed87 0a02 	vstr	s0, [r7, #8]
 8001088:	edc7 0a01 	vstr	s1, [r7, #4]
 800108c:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80010ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80010ce:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	609a      	str	r2, [r3, #8]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PID_controller>:

float PID_controller(PID* p , float y, float r, float zero){
 80010f0:	b480      	push	{r7}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001100:	ed87 1a00 	vstr	s2, [r7]
	float u;
	float newIterm;
	float e = 0;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	623b      	str	r3, [r7, #32]

	e = r-y;
 800110a:	ed97 7a01 	vldr	s14, [r7, #4]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	edc7 7a08 	vstr	s15, [r7, #32]


	float Pterm = p->Kp*e;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ed97 7a08 	vldr	s14, [r7, #32]
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 6a01 	vldr	s13, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edd3 7a06 	vldr	s15, [r3, #24]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edd3 6a02 	vldr	s13, [r3, #8]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	edd3 7a06 	vldr	s15, [r3, #24]
 800116a:	edd7 6a08 	vldr	s13, [r7, #32]
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a3a      	ldr	r2, [r7, #32]
 800117e:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm + zero;
 8001180:	ed97 7a07 	vldr	s14, [r7, #28]
 8001184:	edd7 7a06 	vldr	s15, [r7, #24]
 8001188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001194:	ed97 7a00 	vldr	s14, [r7]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dd03      	ble.n	80011bc <PID_controller+0xcc>
		u = p->u_max;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	e010      	b.n	80011de <PID_controller+0xee>
	} else if(u < p->u_min){
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 7a05 	vldr	s15, [r3, #20]
 80011c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d503      	bpl.n	80011d8 <PID_controller+0xe8>
		u = p->u_min;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	e002      	b.n	80011de <PID_controller+0xee>
	} else {
		p->Iterm = newIterm;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	61da      	str	r2, [r3, #28]
	//Entra qua dentro solo se è il PID di sterzo
	if(zero == 0){
		//printf("errore: %.2f, y: %.2f, r: %.2f, u: %.2f \r\n", e, y, r, u);
	}

	return u;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	ee07 3a90 	vmov	s15, r3
}
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	372c      	adds	r7, #44	; 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4619      	mov	r1, r3
 8001200:	2007      	movs	r0, #7
 8001202:	f000 fa45 	bl	8001690 <bno055_writeData>
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4619      	mov	r1, r3
 800121c:	203d      	movs	r0, #61	; 0x3d
 800121e:	f000 fa37 	bl	8001690 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001228:	2013      	movs	r0, #19
 800122a:	f000 fa25 	bl	8001678 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800122e:	e002      	b.n	8001236 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001230:	2007      	movs	r0, #7
 8001232:	f000 fa21 	bl	8001678 <bno055_delay>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ffe3 	bl	800120e <bno055_setOperationMode>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001250:	200c      	movs	r0, #12
 8001252:	f7ff ffdc 	bl	800120e <bno055_setOperationMode>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800125e:	2120      	movs	r1, #32
 8001260:	203f      	movs	r0, #63	; 0x3f
 8001262:	f000 fa15 	bl	8001690 <bno055_writeData>
  bno055_delay(700);
 8001266:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800126a:	f000 fa05 	bl	8001678 <bno055_delay>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  bno055_reset();
 800127a:	f7ff ffee 	bl	800125a <bno055_reset>

  uint8_t id = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	2000      	movs	r0, #0
 800128a:	f000 faed 	bl	8001868 <bno055_readData>
  if (id != BNO055_ID) {
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2ba0      	cmp	r3, #160	; 0xa0
 8001292:	d004      	beq.n	800129e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <bno055_setup+0x4c>)
 800129a:	f008 fd0b 	bl	8009cb4 <iprintf>
  }
  bno055_setPage(0);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ffa7 	bl	80011f2 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	203f      	movs	r0, #63	; 0x3f
 80012a8:	f000 f9f2 	bl	8001690 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80012ac:	f7ff ffc7 	bl	800123e <bno055_setOperationModeConfig>
  bno055_delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 f9e1 	bl	8001678 <bno055_delay>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800e840 	.word	0x0800e840

080012c4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80012c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012c8:	b09e      	sub	sp, #120	; 0x78
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff ff8d 	bl	80011f2 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80012d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d108      	bne.n	80012f2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80012e0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	2208      	movs	r2, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fabc 	bl	8001868 <bno055_readData>
 80012f0:	e007      	b.n	8001302 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80012f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fa:	2206      	movs	r2, #6
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fab3 	bl	8001868 <bno055_readData>

  double scale = 1;
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <bno055_getVector+0x270>)
 8001308:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800130c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001310:	2b0e      	cmp	r3, #14
 8001312:	d109      	bne.n	8001328 <bno055_getVector+0x64>
    scale = magScale;
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <bno055_getVector+0x274>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8fb 	bl	8000514 <__aeabi_ui2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001326:	e03e      	b.n	80013a6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132c:	2b08      	cmp	r3, #8
 800132e:	d007      	beq.n	8001340 <bno055_getVector+0x7c>
 8001330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001334:	2b28      	cmp	r3, #40	; 0x28
 8001336:	d003      	beq.n	8001340 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800133c:	2b2e      	cmp	r3, #46	; 0x2e
 800133e:	d109      	bne.n	8001354 <bno055_getVector+0x90>
    scale = accelScale;
 8001340:	4b7e      	ldr	r3, [pc, #504]	; (800153c <bno055_getVector+0x278>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8e5 	bl	8000514 <__aeabi_ui2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001352:	e028      	b.n	80013a6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001358:	2b14      	cmp	r3, #20
 800135a:	d109      	bne.n	8001370 <bno055_getVector+0xac>
    scale = angularRateScale;
 800135c:	4b78      	ldr	r3, [pc, #480]	; (8001540 <bno055_getVector+0x27c>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d7 	bl	8000514 <__aeabi_ui2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800136e:	e01a      	b.n	80013a6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001374:	2b1a      	cmp	r3, #26
 8001376:	d109      	bne.n	800138c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001378:	4b72      	ldr	r3, [pc, #456]	; (8001544 <bno055_getVector+0x280>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8c9 	bl	8000514 <__aeabi_ui2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800138a:	e00c      	b.n	80013a6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800138c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001390:	2b20      	cmp	r3, #32
 8001392:	d108      	bne.n	80013a6 <bno055_getVector+0xe2>
    scale = quaScale;
 8001394:	4b6c      	ldr	r3, [pc, #432]	; (8001548 <bno055_getVector+0x284>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8bb 	bl	8000514 <__aeabi_ui2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f008 fde6 	bl	8009f80 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d150      	bne.n	800145e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80013bc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8b0 	bl	8000534 <__aeabi_i2d>
 80013d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013d8:	f7ff fa40 	bl	800085c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80013e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f89c 	bl	8000534 <__aeabi_i2d>
 80013fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001400:	f7ff fa2c 	bl	800085c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800140c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f888 	bl	8000534 <__aeabi_i2d>
 8001424:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001428:	f7ff fa18 	bl	800085c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f874 	bl	8000534 <__aeabi_i2d>
 800144c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001450:	f7ff fa04 	bl	800085c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800145c:	e03b      	b.n	80014d6 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800145e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f85f 	bl	8000534 <__aeabi_i2d>
 8001476:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800147a:	f7ff f9ef 	bl	800085c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001486:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f84b 	bl	8000534 <__aeabi_i2d>
 800149e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014a2:	f7ff f9db 	bl	800085c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80014ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f837 	bl	8000534 <__aeabi_i2d>
 80014c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014ca:	f7ff f9c7 	bl	800085c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 80014d6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80014da:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014ee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80014f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80014f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80014fa:	ec49 8b14 	vmov	d4, r8, r9
 80014fe:	ec45 4b15 	vmov	d5, r4, r5
 8001502:	ec41 0b16 	vmov	d6, r0, r1
 8001506:	ec43 2b17 	vmov	d7, r2, r3
}
 800150a:	eeb0 0a44 	vmov.f32	s0, s8
 800150e:	eef0 0a64 	vmov.f32	s1, s9
 8001512:	eeb0 1a45 	vmov.f32	s2, s10
 8001516:	eef0 1a65 	vmov.f32	s3, s11
 800151a:	eeb0 2a46 	vmov.f32	s4, s12
 800151e:	eef0 2a66 	vmov.f32	s5, s13
 8001522:	eeb0 3a47 	vmov.f32	s6, s14
 8001526:	eef0 3a67 	vmov.f32	s7, s15
 800152a:	3778      	adds	r7, #120	; 0x78
 800152c:	46bd      	mov	sp, r7
 800152e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001532:	bf00      	nop
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	20000006 	.word	0x20000006
 800153c:	20000000 	.word	0x20000000
 8001540:	20000002 	.word	0x20000002
 8001544:	20000004 	.word	0x20000004
 8001548:	20000008 	.word	0x20000008

0800154c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 800154c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001550:	b090      	sub	sp, #64	; 0x40
 8001552:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001554:	2014      	movs	r0, #20
 8001556:	f7ff feb5 	bl	80012c4 <bno055_getVector>
 800155a:	eeb0 4a40 	vmov.f32	s8, s0
 800155e:	eef0 4a60 	vmov.f32	s9, s1
 8001562:	eeb0 5a41 	vmov.f32	s10, s2
 8001566:	eef0 5a61 	vmov.f32	s11, s3
 800156a:	eeb0 6a42 	vmov.f32	s12, s4
 800156e:	eef0 6a62 	vmov.f32	s13, s5
 8001572:	eeb0 7a43 	vmov.f32	s14, s6
 8001576:	eef0 7a63 	vmov.f32	s15, s7
 800157a:	ed87 4b08 	vstr	d4, [r7, #32]
 800157e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001582:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001586:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800158a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800158e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001592:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800159a:	ec49 8b14 	vmov	d4, r8, r9
 800159e:	ec45 4b15 	vmov	d5, r4, r5
 80015a2:	ec41 0b16 	vmov	d6, r0, r1
 80015a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80015aa:	eeb0 0a44 	vmov.f32	s0, s8
 80015ae:	eef0 0a64 	vmov.f32	s1, s9
 80015b2:	eeb0 1a45 	vmov.f32	s2, s10
 80015b6:	eef0 1a65 	vmov.f32	s3, s11
 80015ba:	eeb0 2a46 	vmov.f32	s4, s12
 80015be:	eef0 2a66 	vmov.f32	s5, s13
 80015c2:	eeb0 3a47 	vmov.f32	s6, s14
 80015c6:	eef0 3a67 	vmov.f32	s7, s15
 80015ca:	3740      	adds	r7, #64	; 0x40
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080015d2 <bno055_getVectorGravity>:
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 80015d2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d6:	b090      	sub	sp, #64	; 0x40
 80015d8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 80015da:	202e      	movs	r0, #46	; 0x2e
 80015dc:	f7ff fe72 	bl	80012c4 <bno055_getVector>
 80015e0:	eeb0 4a40 	vmov.f32	s8, s0
 80015e4:	eef0 4a60 	vmov.f32	s9, s1
 80015e8:	eeb0 5a41 	vmov.f32	s10, s2
 80015ec:	eef0 5a61 	vmov.f32	s11, s3
 80015f0:	eeb0 6a42 	vmov.f32	s12, s4
 80015f4:	eef0 6a62 	vmov.f32	s13, s5
 80015f8:	eeb0 7a43 	vmov.f32	s14, s6
 80015fc:	eef0 7a63 	vmov.f32	s15, s7
 8001600:	ed87 4b08 	vstr	d4, [r7, #32]
 8001604:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001608:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800160c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001614:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001618:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800161c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001620:	ec49 8b14 	vmov	d4, r8, r9
 8001624:	ec45 4b15 	vmov	d5, r4, r5
 8001628:	ec41 0b16 	vmov	d6, r0, r1
 800162c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001630:	eeb0 0a44 	vmov.f32	s0, s8
 8001634:	eef0 0a64 	vmov.f32	s1, s9
 8001638:	eeb0 1a45 	vmov.f32	s2, s10
 800163c:	eef0 1a65 	vmov.f32	s3, s11
 8001640:	eeb0 2a46 	vmov.f32	s4, s12
 8001644:	eef0 2a66 	vmov.f32	s5, s13
 8001648:	eeb0 3a47 	vmov.f32	s6, s14
 800164c:	eef0 3a67 	vmov.f32	s7, s15
 8001650:	3740      	adds	r7, #64	; 0x40
 8001652:	46bd      	mov	sp, r7
 8001654:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001658 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <bno055_assignI2C+0x1c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000214 	.word	0x20000214

08001678 <bno055_delay>:

void bno055_delay(int time) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fca6 	bl	8003fd4 <HAL_Delay>
#endif
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af02      	add	r7, sp, #8
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	733b      	strb	r3, [r7, #12]
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80016a8:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <bno055_writeData+0x184>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f107 020c 	add.w	r2, r7, #12
 80016b0:	230a      	movs	r3, #10
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2302      	movs	r3, #2
 80016b6:	2150      	movs	r1, #80	; 0x50
 80016b8:	f003 fb50 	bl	8004d5c <HAL_I2C_Master_Transmit>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80a0 	beq.w	8001808 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d103      	bne.n	80016d6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80016ce:	4852      	ldr	r0, [pc, #328]	; (8001818 <bno055_writeData+0x188>)
 80016d0:	f008 fb56 	bl	8009d80 <puts>
 80016d4:	e012      	b.n	80016fc <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d103      	bne.n	80016e4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80016dc:	484f      	ldr	r0, [pc, #316]	; (800181c <bno055_writeData+0x18c>)
 80016de:	f008 fb4f 	bl	8009d80 <puts>
 80016e2:	e00b      	b.n	80016fc <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d103      	bne.n	80016f2 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80016ea:	484d      	ldr	r0, [pc, #308]	; (8001820 <bno055_writeData+0x190>)
 80016ec:	f008 fb48 	bl	8009d80 <puts>
 80016f0:	e004      	b.n	80016fc <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	4619      	mov	r1, r3
 80016f6:	484b      	ldr	r0, [pc, #300]	; (8001824 <bno055_writeData+0x194>)
 80016f8:	f008 fadc 	bl	8009cb4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80016fc:	4b45      	ldr	r3, [pc, #276]	; (8001814 <bno055_writeData+0x184>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 ff8b 	bl	800561c <HAL_I2C_GetError>
 8001706:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d07e      	beq.n	800180c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d103      	bne.n	800171c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001714:	4844      	ldr	r0, [pc, #272]	; (8001828 <bno055_writeData+0x198>)
 8001716:	f008 fb33 	bl	8009d80 <puts>
 800171a:	e021      	b.n	8001760 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d103      	bne.n	800172a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001722:	4842      	ldr	r0, [pc, #264]	; (800182c <bno055_writeData+0x19c>)
 8001724:	f008 fb2c 	bl	8009d80 <puts>
 8001728:	e01a      	b.n	8001760 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d103      	bne.n	8001738 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001730:	483f      	ldr	r0, [pc, #252]	; (8001830 <bno055_writeData+0x1a0>)
 8001732:	f008 fb25 	bl	8009d80 <puts>
 8001736:	e013      	b.n	8001760 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d103      	bne.n	8001746 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800173e:	483d      	ldr	r0, [pc, #244]	; (8001834 <bno055_writeData+0x1a4>)
 8001740:	f008 fb1e 	bl	8009d80 <puts>
 8001744:	e00c      	b.n	8001760 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d103      	bne.n	8001754 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800174c:	483a      	ldr	r0, [pc, #232]	; (8001838 <bno055_writeData+0x1a8>)
 800174e:	f008 fb17 	bl	8009d80 <puts>
 8001752:	e005      	b.n	8001760 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b20      	cmp	r3, #32
 8001758:	d102      	bne.n	8001760 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800175a:	4838      	ldr	r0, [pc, #224]	; (800183c <bno055_writeData+0x1ac>)
 800175c:	f008 fb10 	bl	8009d80 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <bno055_writeData+0x184>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 ff4b 	bl	8005600 <HAL_I2C_GetState>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001774:	4832      	ldr	r0, [pc, #200]	; (8001840 <bno055_writeData+0x1b0>)
 8001776:	f008 fb03 	bl	8009d80 <puts>
 800177a:	e048      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b20      	cmp	r3, #32
 8001780:	d103      	bne.n	800178a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001782:	482f      	ldr	r0, [pc, #188]	; (8001840 <bno055_writeData+0x1b0>)
 8001784:	f008 fafc 	bl	8009d80 <puts>
 8001788:	e041      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	2b24      	cmp	r3, #36	; 0x24
 800178e:	d103      	bne.n	8001798 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001790:	482c      	ldr	r0, [pc, #176]	; (8001844 <bno055_writeData+0x1b4>)
 8001792:	f008 faf5 	bl	8009d80 <puts>
 8001796:	e03a      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b21      	cmp	r3, #33	; 0x21
 800179c:	d103      	bne.n	80017a6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800179e:	482a      	ldr	r0, [pc, #168]	; (8001848 <bno055_writeData+0x1b8>)
 80017a0:	f008 faee 	bl	8009d80 <puts>
 80017a4:	e033      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b22      	cmp	r3, #34	; 0x22
 80017aa:	d103      	bne.n	80017b4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80017ac:	4827      	ldr	r0, [pc, #156]	; (800184c <bno055_writeData+0x1bc>)
 80017ae:	f008 fae7 	bl	8009d80 <puts>
 80017b2:	e02c      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b28      	cmp	r3, #40	; 0x28
 80017b8:	d103      	bne.n	80017c2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80017ba:	4825      	ldr	r0, [pc, #148]	; (8001850 <bno055_writeData+0x1c0>)
 80017bc:	f008 fae0 	bl	8009d80 <puts>
 80017c0:	e025      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b29      	cmp	r3, #41	; 0x29
 80017c6:	d103      	bne.n	80017d0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80017c8:	4822      	ldr	r0, [pc, #136]	; (8001854 <bno055_writeData+0x1c4>)
 80017ca:	f008 fad9 	bl	8009d80 <puts>
 80017ce:	e01e      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b2a      	cmp	r3, #42	; 0x2a
 80017d4:	d103      	bne.n	80017de <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80017d6:	4820      	ldr	r0, [pc, #128]	; (8001858 <bno055_writeData+0x1c8>)
 80017d8:	f008 fad2 	bl	8009d80 <puts>
 80017dc:	e017      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b60      	cmp	r3, #96	; 0x60
 80017e2:	d103      	bne.n	80017ec <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80017e4:	481d      	ldr	r0, [pc, #116]	; (800185c <bno055_writeData+0x1cc>)
 80017e6:	f008 facb 	bl	8009d80 <puts>
 80017ea:	e010      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2ba0      	cmp	r3, #160	; 0xa0
 80017f0:	d103      	bne.n	80017fa <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80017f2:	481b      	ldr	r0, [pc, #108]	; (8001860 <bno055_writeData+0x1d0>)
 80017f4:	f008 fac4 	bl	8009d80 <puts>
 80017f8:	e009      	b.n	800180e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2be0      	cmp	r3, #224	; 0xe0
 80017fe:	d106      	bne.n	800180e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <bno055_writeData+0x1d4>)
 8001802:	f008 fabd 	bl	8009d80 <puts>
 8001806:	e002      	b.n	800180e <bno055_writeData+0x17e>
    return;
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <bno055_writeData+0x17e>
    return;
 800180c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000214 	.word	0x20000214
 8001818:	0800e87c 	.word	0x0800e87c
 800181c:	0800e8a0 	.word	0x0800e8a0
 8001820:	0800e8c8 	.word	0x0800e8c8
 8001824:	0800e8ec 	.word	0x0800e8ec
 8001828:	0800e904 	.word	0x0800e904
 800182c:	0800e918 	.word	0x0800e918
 8001830:	0800e92c 	.word	0x0800e92c
 8001834:	0800e940 	.word	0x0800e940
 8001838:	0800e954 	.word	0x0800e954
 800183c:	0800e968 	.word	0x0800e968
 8001840:	0800e980 	.word	0x0800e980
 8001844:	0800e998 	.word	0x0800e998
 8001848:	0800e9ac 	.word	0x0800e9ac
 800184c:	0800e9c4 	.word	0x0800e9c4
 8001850:	0800e9dc 	.word	0x0800e9dc
 8001854:	0800e9f4 	.word	0x0800e9f4
 8001858:	0800ea14 	.word	0x0800ea14
 800185c:	0800ea34 	.word	0x0800ea34
 8001860:	0800ea4c 	.word	0x0800ea4c
 8001864:	0800ea64 	.word	0x0800ea64

08001868 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <bno055_readData+0x40>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	1dfa      	adds	r2, r7, #7
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	2150      	movs	r1, #80	; 0x50
 8001886:	f003 fa69 	bl	8004d5c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <bno055_readData+0x40>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	b29b      	uxth	r3, r3
 8001892:	2264      	movs	r2, #100	; 0x64
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	2150      	movs	r1, #80	; 0x50
 800189a:	f003 fb5d 	bl	8004f58 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000214 	.word	0x20000214

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b0:	f002 fb1e 	bl	8003ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 f9f0 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b8:	f000 fc96 	bl	80021e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018bc:	f000 faaa 	bl	8001e14 <MX_I2C1_Init>
  MX_TIM1_Init();
 80018c0:	f000 fad6 	bl	8001e70 <MX_TIM1_Init>
  MX_TIM10_Init();
 80018c4:	f000 fbca 	bl	800205c <MX_TIM10_Init>
  MX_TIM11_Init();
 80018c8:	f000 fc16 	bl	80020f8 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80018cc:	f000 fc38 	bl	8002140 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018d0:	f000 fb70 	bl	8001fb4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80018d4:	f000 fc5e 	bl	8002194 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80018d8:	f000 fa4a 	bl	8001d70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018dc:	2100      	movs	r1, #0
 80018de:	48a8      	ldr	r0, [pc, #672]	; (8001b80 <main+0x2d4>)
 80018e0:	f004 ff7a 	bl	80067d8 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80018e4:	2100      	movs	r1, #0
 80018e6:	48a7      	ldr	r0, [pc, #668]	; (8001b84 <main+0x2d8>)
 80018e8:	f004 ff76 	bl	80067d8 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80018ec:	213c      	movs	r1, #60	; 0x3c
 80018ee:	48a6      	ldr	r0, [pc, #664]	; (8001b88 <main+0x2dc>)
 80018f0:	f005 f8c8 	bl	8006a84 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 80018f4:	48a5      	ldr	r0, [pc, #660]	; (8001b8c <main+0x2e0>)
 80018f6:	f004 feb3 	bl	8006660 <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 80018fa:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8001b90 <main+0x2e4>
 80018fe:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8001b94 <main+0x2e8>
 8001902:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8001b90 <main+0x2e4>
 8001906:	48a4      	ldr	r0, [pc, #656]	; (8001b98 <main+0x2ec>)
 8001908:	f7ff fbb8 	bl	800107c <init_PID>
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0);
 800190c:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8001b9c <main+0x2f0>
 8001910:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8001ba0 <main+0x2f4>
 8001914:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8001ba4 <main+0x2f8>
 8001918:	489f      	ldr	r0, [pc, #636]	; (8001b98 <main+0x2ec>)
 800191a:	f7ff fbd0 	bl	80010be <tune_PID>

	init_PID(&pid_traction_RWD, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 800191e:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8001b90 <main+0x2e4>
 8001922:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8001b94 <main+0x2e8>
 8001926:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8001b90 <main+0x2e4>
 800192a:	489f      	ldr	r0, [pc, #636]	; (8001ba8 <main+0x2fc>)
 800192c:	f7ff fba6 	bl	800107c <init_PID>
	tune_PID(&pid_traction_RWD, KP_TRACTION_RWD, KI_TRACTION_RWD, 0);
 8001930:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8001b9c <main+0x2f0>
 8001934:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8001bac <main+0x300>
 8001938:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001bb0 <main+0x304>
 800193c:	489a      	ldr	r0, [pc, #616]	; (8001ba8 <main+0x2fc>)
 800193e:	f7ff fbbe 	bl	80010be <tune_PID>

	init_PID(&pid_traction_DESC, TRACTION_SAMPLING_TIME, MAX_U_TRACTION, MIN_U_TRACTION);
 8001942:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8001b90 <main+0x2e4>
 8001946:	eddf 0a93 	vldr	s1, [pc, #588]	; 8001b94 <main+0x2e8>
 800194a:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001b90 <main+0x2e4>
 800194e:	4899      	ldr	r0, [pc, #612]	; (8001bb4 <main+0x308>)
 8001950:	f7ff fb94 	bl	800107c <init_PID>
	tune_PID(&pid_traction_DESC, KP_TRACTION_DESC, KI_TRACTION_DESC, 0);
 8001954:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8001b9c <main+0x2f0>
 8001958:	eddf 0a97 	vldr	s1, [pc, #604]	; 8001bb8 <main+0x30c>
 800195c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8001bbc <main+0x310>
 8001960:	4894      	ldr	r0, [pc, #592]	; (8001bb4 <main+0x308>)
 8001962:	f7ff fbac 	bl	80010be <tune_PID>

	//PID steering per le curve
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING);
 8001966:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8001bc0 <main+0x314>
 800196a:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001bc4 <main+0x318>
 800196e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8001b90 <main+0x2e4>
 8001972:	4895      	ldr	r0, [pc, #596]	; (8001bc8 <main+0x31c>)
 8001974:	f7ff fb82 	bl	800107c <init_PID>
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0);
 8001978:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8001b9c <main+0x2f0>
 800197c:	eddf 0a93 	vldr	s1, [pc, #588]	; 8001bcc <main+0x320>
 8001980:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001984:	4890      	ldr	r0, [pc, #576]	; (8001bc8 <main+0x31c>)
 8001986:	f7ff fb9a 	bl	80010be <tune_PID>
	//PID steering per le curve
	//init_PID(&pid_steering_STR, STEERING_SAMPLING_TIME, MAX_U_STEERING, MIN_U_STEERING);
	//tune_PID(&pid_steering_STR, KP_STEERING_STR, KI_STEERING_STR, 0);

	// IMU BNO055 config
	HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1, 5, 1000);
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	2205      	movs	r2, #5
 8001990:	2150      	movs	r1, #80	; 0x50
 8001992:	488f      	ldr	r0, [pc, #572]	; (8001bd0 <main+0x324>)
 8001994:	f003 fd06 	bl	80053a4 <HAL_I2C_IsDeviceReady>
	bno055_assignI2C(&hi2c1);
 8001998:	488d      	ldr	r0, [pc, #564]	; (8001bd0 <main+0x324>)
 800199a:	f7ff fe5d 	bl	8001658 <bno055_assignI2C>
	bno055_setup();
 800199e:	f7ff fc69 	bl	8001274 <bno055_setup>
	bno055_setOperationModeNDOF();
 80019a2:	f7ff fc53 	bl	800124c <bno055_setOperationModeNDOF>

	servo_motor(0);
 80019a6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8001b9c <main+0x2f0>
 80019aa:	f001 fea5 	bl	80036f8 <servo_motor>
	data.flag = 6;
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <main+0x328>)
 80019b0:	2206      	movs	r2, #6
 80019b2:	601a      	str	r2, [r3, #0]
	flag_serial_read = 1;
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <main+0x32c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

	printf("Initialization Completed!\r\n");
 80019ba:	4888      	ldr	r0, [pc, #544]	; (8001bdc <main+0x330>)
 80019bc:	f008 f9e0 	bl	8009d80 <puts>

	//HAL_UART_Receive_IT(&huart6, (uint8_t*)(msg + msg_index), 1);
	HAL_UART_Receive_IT(&huart6, app, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	4987      	ldr	r1, [pc, #540]	; (8001be0 <main+0x334>)
 80019c4:	4887      	ldr	r0, [pc, #540]	; (8001be4 <main+0x338>)
 80019c6:	f006 f824 	bl	8007a12 <HAL_UART_Receive_IT>
		//-------------------------------------------------------------


		//-------------------------------------------------------------
		//GESTIONE PULSANTE
		max_flag_button = 3;
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <main+0x33c>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	601a      	str	r2, [r3, #0]

		switch(flag_button){
 80019d0:	4b86      	ldr	r3, [pc, #536]	; (8001bec <main+0x340>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	f200 809c 	bhi.w	8001b14 <main+0x268>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <main+0x138>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f9 	.word	0x080019f9
 80019e8:	08001a07 	.word	0x08001a07
 80019ec:	08001a43 	.word	0x08001a43
 80019f0:	08001aa5 	.word	0x08001aa5
 80019f4:	08001ac5 	.word	0x08001ac5
		//Calibrazione
		case -1:
			data.flag = -1;
 80019f8:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <main+0x328>)
 80019fa:	f04f 32ff 	mov.w	r2, #4294967295
 80019fe:	601a      	str	r2, [r3, #0]
			ProceduraCalibrazione();
 8001a00:	f001 fc34 	bl	800326c <ProceduraCalibrazione>
			break;
 8001a04:	e086      	b.n	8001b14 <main+0x268>
			//Idle
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	4879      	ldr	r0, [pc, #484]	; (8001bf0 <main+0x344>)
 8001a0c:	f003 f816 	bl	8004a3c <HAL_GPIO_WritePin>
			data.flag = 4;
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <main+0x328>)
 8001a12:	2204      	movs	r2, #4
 8001a14:	601a      	str	r2, [r3, #0]
			data.linear_speed_ref_m_s = -0.20; //[m/s]
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <main+0x328>)
 8001a18:	4a76      	ldr	r2, [pc, #472]	; (8001bf4 <main+0x348>)
 8001a1a:	609a      	str	r2, [r3, #8]
			data.curvature_radius_ref_m = 1.05; // [m]
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <main+0x328>)
 8001a1e:	4a76      	ldr	r2, [pc, #472]	; (8001bf8 <main+0x34c>)
 8001a20:	605a      	str	r2, [r3, #4]
			data.dy = 0.35; //[m]
 8001a22:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <main+0x328>)
 8001a24:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <main+0x350>)
 8001a26:	60da      	str	r2, [r3, #12]
			data.dx = 1.00; //[m]
 8001a28:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <main+0x328>)
 8001a2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a2e:	611a      	str	r2, [r3, #16]
			data.distanza_frenata = 0; //[m]
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <main+0x328>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
			data.old_linear_speed_ref_m_s = 0; //[m]
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <main+0x328>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
			//data.flag= 6;
			break;
 8001a40:	e068      	b.n	8001b14 <main+0x268>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2120      	movs	r1, #32
 8001a46:	486a      	ldr	r0, [pc, #424]	; (8001bf0 <main+0x344>)
 8001a48:	f002 fff8 	bl	8004a3c <HAL_GPIO_WritePin>

			data.flag = 1;
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <main+0x328>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
			data.linear_speed_ref_m_s = 0.00; //[m/s]
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <main+0x328>)
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
			data.curvature_radius_ref_m = 10; // [m]
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <main+0x328>)
 8001a5c:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <main+0x354>)
 8001a5e:	605a      	str	r2, [r3, #4]
			data.dy = 0.35; //[m]
 8001a60:	4b5c      	ldr	r3, [pc, #368]	; (8001bd4 <main+0x328>)
 8001a62:	4a66      	ldr	r2, [pc, #408]	; (8001bfc <main+0x350>)
 8001a64:	60da      	str	r2, [r3, #12]
			data.dx = 1.00; //[m]
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <main+0x328>)
 8001a68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a6c:	611a      	str	r2, [r3, #16]
			data.distanza_frenata = 0; //[m]
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <main+0x328>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
			data.old_linear_speed_ref_m_s = 0; //[m]
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <main+0x328>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]

			if(cnt_manovre >= 100){
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <main+0x358>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001c08 <main+0x35c>
 8001a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	da00      	bge.n	8001a94 <main+0x1e8>
				cnt_manovre = 0;
				flag_button = 3;
			}
			break;
 8001a92:	e03f      	b.n	8001b14 <main+0x268>
				cnt_manovre = 0;
 8001a94:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <main+0x358>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
				flag_button = 3;
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <main+0x340>)
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	601a      	str	r2, [r3, #0]
			break;
 8001aa2:	e037      	b.n	8001b14 <main+0x268>
		case 2:
			if(flag_discesa){
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <main+0x360>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <main+0x20c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	484f      	ldr	r0, [pc, #316]	; (8001bf0 <main+0x344>)
 8001ab2:	f002 ffc3 	bl	8004a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			}

			//lettura_seriale();
			//PrintState();
			break;
 8001ab6:	e02d      	b.n	8001b14 <main+0x268>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2120      	movs	r1, #32
 8001abc:	484c      	ldr	r0, [pc, #304]	; (8001bf0 <main+0x344>)
 8001abe:	f002 ffbd 	bl	8004a3c <HAL_GPIO_WritePin>
			break;
 8001ac2:	e027      	b.n	8001b14 <main+0x268>
		case 3:
			if(flag_discesa){
 8001ac4:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <main+0x360>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <main+0x22c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2120      	movs	r1, #32
 8001ad0:	4847      	ldr	r0, [pc, #284]	; (8001bf0 <main+0x344>)
 8001ad2:	f002 ffb3 	bl	8004a3c <HAL_GPIO_WritePin>
 8001ad6:	e004      	b.n	8001ae2 <main+0x236>
			} else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2120      	movs	r1, #32
 8001adc:	4844      	ldr	r0, [pc, #272]	; (8001bf0 <main+0x344>)
 8001ade:	f002 ffad 	bl	8004a3c <HAL_GPIO_WritePin>
			}

			data.flag = 4;
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <main+0x328>)
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	601a      	str	r2, [r3, #0]
			data.linear_speed_ref_m_s = -0.20; //[m/s]
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <main+0x328>)
 8001aea:	4a42      	ldr	r2, [pc, #264]	; (8001bf4 <main+0x348>)
 8001aec:	609a      	str	r2, [r3, #8]
			data.curvature_radius_ref_m = 1.05; // [m]
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <main+0x328>)
 8001af0:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <main+0x34c>)
 8001af2:	605a      	str	r2, [r3, #4]
			data.dy = 0.35; //[m]
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <main+0x328>)
 8001af6:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <main+0x350>)
 8001af8:	60da      	str	r2, [r3, #12]
			data.dx = 1.00; //[m]
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <main+0x328>)
 8001afc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b00:	611a      	str	r2, [r3, #16]
			data.distanza_frenata = 0; //[m]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <main+0x328>)
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
			data.old_linear_speed_ref_m_s = 0; //[m]
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <main+0x328>)
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
			break;
 8001b12:	bf00      	nop
		}

		//-------------------------------------------------------------
		//PERCORSO AUTOMATICO
		if(flag_button == 3){
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <main+0x340>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d101      	bne.n	8001b20 <main+0x274>
			procedura();
 8001b1c:	f001 faf8 	bl	8003110 <procedura>
		}

		//-------------------------------------------------------------
		//CONTROLLO
		if (data.flag > 0 && data.flag < 6) {
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <main+0x328>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f340 80a1 	ble.w	8001c6c <main+0x3c0>
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <main+0x328>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	f300 809c 	bgt.w	8001c6c <main+0x3c0>
			if (flag_10ms == 1) { //Car enabled from user
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <main+0x364>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 80a5 	bne.w	8001c88 <main+0x3dc>
				flag_10ms = 0;
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <main+0x364>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

				//Measure speed with encoder
				lettura_vel_encoder();
 8001b44:	f000 fc48 	bl	80023d8 <lettura_vel_encoder>

				//TRACTION control
				switch (data.flag){
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <main+0x328>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	dc02      	bgt.n	8001b56 <main+0x2aa>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dc03      	bgt.n	8001b5c <main+0x2b0>
 8001b54:	e06a      	b.n	8001c2c <main+0x380>
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d060      	beq.n	8001c1c <main+0x370>
 8001b5a:	e067      	b.n	8001c2c <main+0x380>
				case 1:
				case 2:
				case 3:
					controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <main+0x368>)
 8001b5e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <main+0x328>)
 8001b64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <main+0x36c>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001b72:	eef0 0a46 	vmov.f32	s1, s12
 8001b76:	eeb0 0a66 	vmov.f32	s0, s13
 8001b7a:	f000 fd1d 	bl	80025b8 <controllo_trazione>
					break;
 8001b7e:	e055      	b.n	8001c2c <main+0x380>
 8001b80:	200002b4 	.word	0x200002b4
 8001b84:	20000344 	.word	0x20000344
 8001b88:	200002fc 	.word	0x200002fc
 8001b8c:	2000038c 	.word	0x2000038c
 8001b90:	3c23d70a 	.word	0x3c23d70a
 8001b94:	3f7d70a4 	.word	0x3f7d70a4
 8001b98:	200004b8 	.word	0x200004b8
 8001b9c:	00000000 	.word	0x00000000
 8001ba0:	3a83126f 	.word	0x3a83126f
 8001ba4:	3593a3b6 	.word	0x3593a3b6
 8001ba8:	200004d8 	.word	0x200004d8
 8001bac:	3983126f 	.word	0x3983126f
 8001bb0:	339652e8 	.word	0x339652e8
 8001bb4:	200004f8 	.word	0x200004f8
 8001bb8:	3af9096c 	.word	0x3af9096c
 8001bbc:	332bcc77 	.word	0x332bcc77
 8001bc0:	c2100000 	.word	0xc2100000
 8001bc4:	42100000 	.word	0x42100000
 8001bc8:	20000518 	.word	0x20000518
 8001bcc:	437a0000 	.word	0x437a0000
 8001bd0:	20000260 	.word	0x20000260
 8001bd4:	2000045c 	.word	0x2000045c
 8001bd8:	2000054c 	.word	0x2000054c
 8001bdc:	0800ea7c 	.word	0x0800ea7c
 8001be0:	2000058c 	.word	0x2000058c
 8001be4:	20000418 	.word	0x20000418
 8001be8:	20000540 	.word	0x20000540
 8001bec:	20000544 	.word	0x20000544
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	be4ccccd 	.word	0xbe4ccccd
 8001bf8:	3f866666 	.word	0x3f866666
 8001bfc:	3eb33333 	.word	0x3eb33333
 8001c00:	41200000 	.word	0x41200000
 8001c04:	20000554 	.word	0x20000554
 8001c08:	42c80000 	.word	0x42c80000
 8001c0c:	20000568 	.word	0x20000568
 8001c10:	20000548 	.word	0x20000548
 8001c14:	20000478 	.word	0x20000478
 8001c18:	2000000c 	.word	0x2000000c
				case 5:
					cambio_velocita(data.distanza_frenata);
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <main+0x3e0>)
 8001c1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	f001 f9db 	bl	8002fe0 <cambio_velocita>
					break;
 8001c2a:	bf00      	nop
				}

				//-------------------------------------------------------------

				get_yaw_rate();
 8001c2c:	f000 fc40 	bl	80024b0 <get_yaw_rate>
				get_inclination();
 8001c30:	f000 fc82 	bl	8002538 <get_inclination>

				//STEERING control
				switch (data.flag){
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <main+0x3e0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d824      	bhi.n	8001c88 <main+0x3dc>
 8001c3e:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <main+0x398>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c65 	.word	0x08001c65
 8001c48:	08001c65 	.word	0x08001c65
 8001c4c:	08001c59 	.word	0x08001c59
 8001c50:	08001c5f 	.word	0x08001c5f
 8001c54:	08001c65 	.word	0x08001c65
				case 3:
					cambio_corsia();
 8001c58:	f001 f8ca 	bl	8002df0 <cambio_corsia>
					break;
 8001c5c:	e005      	b.n	8001c6a <main+0x3be>
				case 4:
					parcheggio();
 8001c5e:	f000 fd9b 	bl	8002798 <parcheggio>
					break;
 8001c62:	e002      	b.n	8001c6a <main+0x3be>
				case 1:
				case 2:
				case 5:
					lane_keeping();
 8001c64:	f000 fcfe 	bl	8002664 <lane_keeping>
					break;
 8001c68:	bf00      	nop
			if (flag_10ms == 1) { //Car enabled from user
 8001c6a:	e00d      	b.n	8001c88 <main+0x3dc>
				}
			//printf("%f;%f\r\n", u_trazione, vehicleState.linear_speed_m_s);
		}
	} else if (data.flag == 6)
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <main+0x3e0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	f47f aeaa 	bne.w	80019ca <main+0x11e>
	{
		BL_set_PWM(NEUTRAL_PWM);
 8001c76:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001c90 <main+0x3e4>
 8001c7a:	f7ff f9e1 	bl	8001040 <BL_set_PWM>
		servo_motor(0);
 8001c7e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001c94 <main+0x3e8>
 8001c82:	f001 fd39 	bl	80036f8 <servo_motor>
 8001c86:	e6a0      	b.n	80019ca <main+0x11e>
			if (flag_10ms == 1) { //Car enabled from user
 8001c88:	bf00      	nop
		max_flag_button = 3;
 8001c8a:	e69e      	b.n	80019ca <main+0x11e>
 8001c8c:	2000045c 	.word	0x2000045c
 8001c90:	3d98b71c 	.word	0x3d98b71c
 8001c94:	00000000 	.word	0x00000000

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	; 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	; 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f008 f96a 	bl	8009f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <SystemClock_Config+0xd0>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <SystemClock_Config+0xd0>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <SystemClock_Config+0xd0>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <SystemClock_Config+0xd4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ce4:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <SystemClock_Config+0xd4>)
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <SystemClock_Config+0xd4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d00:	2310      	movs	r3, #16
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d16:	2304      	movs	r3, #4
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 ffb4 	bl	8005c90 <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d2e:	f001 fb3d 	bl	80033ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	230f      	movs	r3, #15
 8001d34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fa16 	bl	8006180 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d5a:	f001 fb27 	bl	80033ac <Error_Handler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3750      	adds	r7, #80	; 0x50
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000

08001d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d76:	463b      	mov	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001d84:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <MX_ADC1_Init+0x9c>)
 8001d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <MX_ADC1_Init+0xa0>)
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001dd2:	f002 f923 	bl	800401c <HAL_ADC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ddc:	f001 fae6 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001de0:	230b      	movs	r3, #11
 8001de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_ADC1_Init+0x98>)
 8001df2:	f002 f957 	bl	80040a4 <HAL_ADC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001dfc:	f001 fad6 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000218 	.word	0x20000218
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	0f000001 	.word	0x0f000001

08001e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_I2C1_Init+0x54>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_I2C1_Init+0x58>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e52:	f002 fe3f 	bl	8004ad4 <HAL_I2C_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e5c:	f001 faa6 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000260 	.word	0x20000260
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	000186a0 	.word	0x000186a0

08001e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b096      	sub	sp, #88	; 0x58
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 f869 	bl	8009f80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001eb0:	4a3f      	ldr	r2, [pc, #252]	; (8001fb0 <MX_TIM1_Init+0x140>)
 8001eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1681-1;
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001eb6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1001-1;
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001edc:	4833      	ldr	r0, [pc, #204]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001ede:	f004 fb6f 	bl	80065c0 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f001 fa60 	bl	80033ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482c      	ldr	r0, [pc, #176]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001efa:	f005 f81b 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f04:	f001 fa52 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f08:	4828      	ldr	r0, [pc, #160]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001f0a:	f004 fc0b 	bl	8006724 <HAL_TIM_PWM_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f14:	f001 fa4a 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f24:	4619      	mov	r1, r3
 8001f26:	4821      	ldr	r0, [pc, #132]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001f28:	f005 fbc0 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001f32:	f001 fa3b 	bl	80033ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f36:	2360      	movs	r3, #96	; 0x60
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001f5c:	f004 ff28 	bl	8006db0 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001f66:	f001 fa21 	bl	80033ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001f8e:	f005 fbfb 	bl	8007788 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001f98:	f001 fa08 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM1_Init+0x13c>)
 8001f9e:	f001 fd75 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3758      	adds	r7, #88	; 0x58
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002b4 	.word	0x200002b4
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f007 ffdc 	bl	8009f80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001fe6:	f06f 0201 	mvn.w	r2, #1
 8001fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <MX_TIM2_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002000:	2301      	movs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002010:	2301      	movs	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_TIM2_Init+0xa4>)
 8002024:	f004 fc88 	bl	8006938 <HAL_TIM_Encoder_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800202e:	f001 f9bd 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <MX_TIM2_Init+0xa4>)
 8002040:	f005 fb34 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800204a:	f001 f9af 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	; 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002fc 	.word	0x200002fc

0800205c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <MX_TIM10_Init+0x94>)
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <MX_TIM10_Init+0x98>)
 8002078:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 840-1;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <MX_TIM10_Init+0x94>)
 800207c:	f240 3247 	movw	r2, #839	; 0x347
 8002080:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_TIM10_Init+0x94>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000-1;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <MX_TIM10_Init+0x94>)
 800208a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800208e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MX_TIM10_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_TIM10_Init+0x94>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800209c:	4814      	ldr	r0, [pc, #80]	; (80020f0 <MX_TIM10_Init+0x94>)
 800209e:	f004 fa8f 	bl	80065c0 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80020a8:	f001 f980 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80020ac:	4810      	ldr	r0, [pc, #64]	; (80020f0 <MX_TIM10_Init+0x94>)
 80020ae:	f004 fb39 	bl	8006724 <HAL_TIM_PWM_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80020b8:	f001 f978 	bl	80033ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020bc:	2360      	movs	r3, #96	; 0x60
 80020be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <MX_TIM10_Init+0x94>)
 80020d4:	f004 fe6c 	bl	8006db0 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80020de:	f001 f965 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <MX_TIM10_Init+0x94>)
 80020e4:	f001 fcd2 	bl	8003a8c <HAL_TIM_MspPostInit>

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000344 	.word	0x20000344
 80020f4:	40014400 	.word	0x40014400

080020f8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_TIM11_Init+0x40>)
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <MX_TIM11_Init+0x44>)
 8002100:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 120-1;
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <MX_TIM11_Init+0x40>)
 8002104:	2277      	movs	r2, #119	; 0x77
 8002106:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_TIM11_Init+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7000-1;
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MX_TIM11_Init+0x40>)
 8002110:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002114:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_TIM11_Init+0x40>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_TIM11_Init+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_TIM11_Init+0x40>)
 8002124:	f004 fa4c 	bl	80065c0 <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800212e:	f001 f93d 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000038c 	.word	0x2000038c
 800213c:	40014800 	.word	0x40014800

08002140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f005 fb6c 	bl	8007854 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002182:	f001 f913 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003d4 	.word	0x200003d4
 8002190:	40004400 	.word	0x40004400

08002194 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_USART6_UART_Init+0x50>)
 800219c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_USART6_UART_Init+0x4c>)
 80021ce:	f005 fb41 	bl	8007854 <HAL_UART_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 80021d8:	f001 f8e8 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000418 	.word	0x20000418
 80021e4:	40011400 	.word	0x40011400

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <MX_GPIO_Init+0x124>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <MX_GPIO_Init+0x124>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <MX_GPIO_Init+0x124>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <MX_GPIO_Init+0x124>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a3a      	ldr	r2, [pc, #232]	; (800230c <MX_GPIO_Init+0x124>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <MX_GPIO_Init+0x124>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <MX_GPIO_Init+0x124>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a33      	ldr	r2, [pc, #204]	; (800230c <MX_GPIO_Init+0x124>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <MX_GPIO_Init+0x124>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <MX_GPIO_Init+0x124>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a2c      	ldr	r2, [pc, #176]	; (800230c <MX_GPIO_Init+0x124>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <MX_GPIO_Init+0x124>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	4827      	ldr	r0, [pc, #156]	; (8002310 <MX_GPIO_Init+0x128>)
 8002274:	f002 fbe2 	bl	8004a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	2120      	movs	r1, #32
 800227c:	4825      	ldr	r0, [pc, #148]	; (8002314 <MX_GPIO_Init+0x12c>)
 800227e:	f002 fbdd 	bl	8004a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002288:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	481d      	ldr	r0, [pc, #116]	; (8002310 <MX_GPIO_Init+0x128>)
 800229a:	f002 fa33 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800229e:	2301      	movs	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4816      	ldr	r0, [pc, #88]	; (8002310 <MX_GPIO_Init+0x128>)
 80022b6:	f002 fa25 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022ba:	2320      	movs	r3, #32
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <MX_GPIO_Init+0x12c>)
 80022d2:	f002 fa17 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <MX_GPIO_Init+0x12c>)
 80022ee:	f002 fa09 	bl	8004704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2028      	movs	r0, #40	; 0x28
 80022f8:	f002 f9cd 	bl	8004696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022fc:	2028      	movs	r0, #40	; 0x28
 80022fe:	f002 f9e6 	bl	80046ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40020800 	.word	0x40020800
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------
//Timer11 for temporization (10ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d13d      	bne.n	80023a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
		flag_10ms = 1;
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

		//Encoder
		vehicleState.counts = TIM2->CNT;
 800232e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	461a      	mov	r2, r3
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002338:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 800233a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	6253      	str	r3, [r2, #36]	; 0x24

		//Variabile per la calibrazione
		cnt_10ms_button++;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002350:	6013      	str	r3, [r2, #0]

		//Variabile per la manovra
		if(data.flag == 3 || data.flag == 4 || flag_button == 1){
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d007      	beq.n	800236a <HAL_TIM_PeriodElapsedCallback+0x52>
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b04      	cmp	r3, #4
 8002360:	d003      	beq.n	800236a <HAL_TIM_PeriodElapsedCallback+0x52>
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d109      	bne.n	800237e <HAL_TIM_PeriodElapsedCallback+0x66>
			cnt_manovre++;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800237a:	edc3 7a00 	vstr	s15, [r3]
		}

		//Temporizzazione della calibrazione
		if(flag_button == -1){
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PeriodElapsedCallback+0x7a>
			counter_cal_ESC++;
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002390:	6013      	str	r3, [r2, #0]
		}

		if(flag_button == 3){
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d104      	bne.n	80023a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			cnt_procedura++;
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023a2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	2000038c 	.word	0x2000038c
 80023b4:	20000548 	.word	0x20000548
 80023b8:	20000478 	.word	0x20000478
 80023bc:	20000580 	.word	0x20000580
 80023c0:	2000045c 	.word	0x2000045c
 80023c4:	20000544 	.word	0x20000544
 80023c8:	20000554 	.word	0x20000554
 80023cc:	20000584 	.word	0x20000584
 80023d0:	20000570 	.word	0x20000570
 80023d4:	00000000 	.word	0x00000000

080023d8 <lettura_vel_encoder>:

//-------------------------------------------------------------
//MISURAZIONI
void lettura_vel_encoder(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	vehicleState.ref_count = TIM2->ARR / 2;
 80023dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <lettura_vel_encoder+0xc8>)
 80023e8:	605a      	str	r2, [r3, #4]
	vehicleState.delta_count = vehicleState.counts - vehicleState.ref_count;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <lettura_vel_encoder+0xc8>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <lettura_vel_encoder+0xc8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <lettura_vel_encoder+0xc8>)
 80023f6:	6093      	str	r3, [r2, #8]

	vehicleState.delta_angle_deg = (vehicleState.delta_count * 360) / ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO));
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <lettura_vel_encoder+0xc8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f895 	bl	8000534 <__aeabi_i2d>
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <lettura_vel_encoder+0xcc>)
 8002410:	f7fe fa24 	bl	800085c <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fbec 	bl	8000bf8 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <lettura_vel_encoder+0xc8>)
 8002424:	60d3      	str	r3, [r2, #12]
	vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg / ENCODER_SAMPLING_TIME;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <lettura_vel_encoder+0xc8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f894 	bl	8000558 <__aeabi_f2d>
 8002430:	a319      	add	r3, pc, #100	; (adr r3, 8002498 <lettura_vel_encoder+0xc0>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe fa11 	bl	800085c <__aeabi_ddiv>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fbd9 	bl	8000bf8 <__aeabi_d2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <lettura_vel_encoder+0xc8>)
 800244a:	6113      	str	r3, [r2, #16]
	vehicleState.motor_speed_RPM = BL_DegreeSec2RPM(vehicleState.motor_speed_deg_sec);
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <lettura_vel_encoder+0xc8>)
 800244e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002452:	eeb0 0a67 	vmov.f32	s0, s15
 8002456:	f7fe fdd3 	bl	8001000 <BL_DegreeSec2RPM>
 800245a:	eef0 7a40 	vmov.f32	s15, s0
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <lettura_vel_encoder+0xc8>)
 8002460:	edc3 7a05 	vstr	s15, [r3, #20]
	vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM * RPM_2_m_s;
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <lettura_vel_encoder+0xc8>)
 8002466:	ed93 7a05 	vldr	s14, [r3, #20]
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <lettura_vel_encoder+0xd0>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <lettura_vel_encoder+0xc8>)
 8002476:	edc3 7a06 	vstr	s15, [r3, #24]

	//Speed reference for motor
	vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s / RPM_2_m_s;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <lettura_vel_encoder+0xd4>)
 800247c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <lettura_vel_encoder+0xd0>)
 8002482:	ed93 7a00 	vldr	s14, [r3]
 8002486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <lettura_vel_encoder+0xc8>)
 800248c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f3af 8000 	nop.w
 8002498:	47ae147b 	.word	0x47ae147b
 800249c:	3f847ae1 	.word	0x3f847ae1
 80024a0:	20000478 	.word	0x20000478
 80024a4:	40c00000 	.word	0x40c00000
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	2000045c 	.word	0x2000045c

080024b0 <get_yaw_rate>:

void get_yaw_rate()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
	bno055_vector_t v = bno055_getVectorGyroscope();
 80024b6:	f7ff f849 	bl	800154c <bno055_getVectorGyroscope>
 80024ba:	eeb0 4a40 	vmov.f32	s8, s0
 80024be:	eef0 4a60 	vmov.f32	s9, s1
 80024c2:	eeb0 5a41 	vmov.f32	s10, s2
 80024c6:	eef0 5a61 	vmov.f32	s11, s3
 80024ca:	eeb0 6a42 	vmov.f32	s12, s4
 80024ce:	eef0 6a62 	vmov.f32	s13, s5
 80024d2:	eeb0 7a43 	vmov.f32	s14, s6
 80024d6:	eef0 7a63 	vmov.f32	s15, s7
 80024da:	ed87 4b00 	vstr	d4, [r7]
 80024de:	ed87 5b02 	vstr	d5, [r7, #8]
 80024e2:	ed87 6b04 	vstr	d6, [r7, #16]
 80024e6:	ed87 7b06 	vstr	d7, [r7, #24]
	vehicleState.yaw_rate_deg_sec = v.z;
 80024ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ee:	4910      	ldr	r1, [pc, #64]	; (8002530 <get_yaw_rate+0x80>)
 80024f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec * M_PI) / 180;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <get_yaw_rate+0x80>)
 80024f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80024fa:	a30b      	add	r3, pc, #44	; (adr r3, 8002528 <get_yaw_rate+0x78>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f882 	bl	8000608 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <get_yaw_rate+0x84>)
 8002512:	f7fe f9a3 	bl	800085c <__aeabi_ddiv>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4905      	ldr	r1, [pc, #20]	; (8002530 <get_yaw_rate+0x80>)
 800251c:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	54442d18 	.word	0x54442d18
 800252c:	400921fb 	.word	0x400921fb
 8002530:	20000478 	.word	0x20000478
 8002534:	40668000 	.word	0x40668000

08002538 <get_inclination>:

void get_inclination()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
	bno055_vector_t u = bno055_getVectorGravity();
 800253e:	f7ff f848 	bl	80015d2 <bno055_getVectorGravity>
 8002542:	eeb0 4a40 	vmov.f32	s8, s0
 8002546:	eef0 4a60 	vmov.f32	s9, s1
 800254a:	eeb0 5a41 	vmov.f32	s10, s2
 800254e:	eef0 5a61 	vmov.f32	s11, s3
 8002552:	eeb0 6a42 	vmov.f32	s12, s4
 8002556:	eef0 6a62 	vmov.f32	s13, s5
 800255a:	eeb0 7a43 	vmov.f32	s14, s6
 800255e:	eef0 7a63 	vmov.f32	s15, s7
 8002562:	ed87 4b00 	vstr	d4, [r7]
 8002566:	ed87 5b02 	vstr	d5, [r7, #8]
 800256a:	ed87 6b04 	vstr	d6, [r7, #16]
 800256e:	ed87 7b06 	vstr	d7, [r7, #24]
	vehicleState.x_acceleration = u.x;
 8002572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <get_inclination+0x78>)
 8002578:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	if(vehicleState.x_acceleration < -0.6){
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <get_inclination+0x78>)
 800257e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002582:	a309      	add	r3, pc, #36	; (adr r3, 80025a8 <get_inclination+0x70>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fe fab0 	bl	8000aec <__aeabi_dcmplt>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <get_inclination+0x62>
		flag_discesa = 1;
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <get_inclination+0x7c>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
	} else{
		flag_discesa = 0;
	}
	//printf("%d, %f\r\n", flag_discesa, vehicleState.x_acceleration);
}
 8002598:	e002      	b.n	80025a0 <get_inclination+0x68>
		flag_discesa = 0;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <get_inclination+0x7c>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	33333333 	.word	0x33333333
 80025ac:	bfe33333 	.word	0xbfe33333
 80025b0:	20000478 	.word	0x20000478
 80025b4:	20000568 	.word	0x20000568

080025b8 <controllo_trazione>:

void controllo_trazione(float v, float v_ref){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	ed87 0a01 	vstr	s0, [r7, #4]
 80025c2:	edc7 0a00 	vstr	s1, [r7]
	//Fa la scelta tra il PID che va avanti e quello che va indietro
	if(v_ref >= 0){
 80025c6:	edd7 7a00 	vldr	s15, [r7]
 80025ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	db21      	blt.n	8002618 <controllo_trazione+0x60>
		if(flag_discesa){
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <controllo_trazione+0x94>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <controllo_trazione+0x42>
			u_trazione = PID_controller(&pid_traction_DESC, v, v_ref, NEUTRAL_PWM);
 80025dc:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8002650 <controllo_trazione+0x98>
 80025e0:	edd7 0a00 	vldr	s1, [r7]
 80025e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80025e8:	481a      	ldr	r0, [pc, #104]	; (8002654 <controllo_trazione+0x9c>)
 80025ea:	f7fe fd81 	bl	80010f0 <PID_controller>
 80025ee:	eef0 7a40 	vmov.f32	s15, s0
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <controllo_trazione+0xa0>)
 80025f4:	edc3 7a00 	vstr	s15, [r3]
 80025f8:	e01c      	b.n	8002634 <controllo_trazione+0x7c>
		} else {
			u_trazione = PID_controller(&pid_traction, v, v_ref, NEUTRAL_PWM);
 80025fa:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002650 <controllo_trazione+0x98>
 80025fe:	edd7 0a00 	vldr	s1, [r7]
 8002602:	ed97 0a01 	vldr	s0, [r7, #4]
 8002606:	4815      	ldr	r0, [pc, #84]	; (800265c <controllo_trazione+0xa4>)
 8002608:	f7fe fd72 	bl	80010f0 <PID_controller>
 800260c:	eef0 7a40 	vmov.f32	s15, s0
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <controllo_trazione+0xa0>)
 8002612:	edc3 7a00 	vstr	s15, [r3]
 8002616:	e00d      	b.n	8002634 <controllo_trazione+0x7c>
		}
	} else{
		u_trazione = PID_controller(&pid_traction_RWD, v, v_ref, NEUTRAL_PWM);
 8002618:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8002650 <controllo_trazione+0x98>
 800261c:	edd7 0a00 	vldr	s1, [r7]
 8002620:	ed97 0a01 	vldr	s0, [r7, #4]
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <controllo_trazione+0xa8>)
 8002626:	f7fe fd63 	bl	80010f0 <PID_controller>
 800262a:	eef0 7a40 	vmov.f32	s15, s0
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <controllo_trazione+0xa0>)
 8002630:	edc3 7a00 	vstr	s15, [r3]
	}

	BL_set_PWM(u_trazione);
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <controllo_trazione+0xa0>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	eeb0 0a67 	vmov.f32	s0, s15
 800263e:	f7fe fcff 	bl	8001040 <BL_set_PWM>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000568 	.word	0x20000568
 8002650:	3d98b71c 	.word	0x3d98b71c
 8002654:	200004f8 	.word	0x200004f8
 8002658:	20000538 	.word	0x20000538
 800265c:	200004b8 	.word	0x200004b8
 8002660:	200004d8 	.word	0x200004d8

08002664 <lane_keeping>:

//-------------------------------------------------------------
//LANE KEEPING
void lane_keeping()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
		servo_motor(u_sterzo);
		printf("CURVA\r\n");
	}
*/

	vehicleState.yaw_rate_ref_rad_sec = data.linear_speed_ref_m_s / data.curvature_radius_ref_m;
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <lane_keeping+0x120>)
 800266c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002670:	4b44      	ldr	r3, [pc, #272]	; (8002784 <lane_keeping+0x120>)
 8002672:	edd3 7a01 	vldr	s15, [r3, #4]
 8002676:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800267a:	ee16 0a90 	vmov	r0, s13
 800267e:	f7fd ff6b 	bl	8000558 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4940      	ldr	r1, [pc, #256]	; (8002788 <lane_keeping+0x124>)
 8002688:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	//vehicleState.yaw_rate_ref_rad_sec = vehicleState.linear_speed_m_s / data.curvature_radius_ref_m;

	float yaw_rate_ref_rad_sec_abs = valore_assoluto(vehicleState.yaw_rate_ref_rad_sec);
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <lane_keeping+0x124>)
 800268e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe faaf 	bl	8000bf8 <__aeabi_d2f>
 800269a:	4603      	mov	r3, r0
 800269c:	ee00 3a10 	vmov	s0, r3
 80026a0:	f000 fdb8 	bl	8003214 <valore_assoluto>
 80026a4:	ed87 0a01 	vstr	s0, [r7, #4]
	float yaw_rate_rad_sec_abs = valore_assoluto(vehicleState.yaw_rate_rad_sec);
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <lane_keeping+0x124>)
 80026aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe faa1 	bl	8000bf8 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	ee00 3a10 	vmov	s0, r3
 80026bc:	f000 fdaa 	bl	8003214 <valore_assoluto>
 80026c0:	ed87 0a00 	vstr	s0, [r7]

	u_sterzo = PID_controller(&pid_steering, yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs, 0);
 80026c4:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800278c <lane_keeping+0x128>
 80026c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80026cc:	ed97 0a00 	vldr	s0, [r7]
 80026d0:	482f      	ldr	r0, [pc, #188]	; (8002790 <lane_keeping+0x12c>)
 80026d2:	f7fe fd0d 	bl	80010f0 <PID_controller>
 80026d6:	eef0 7a40 	vmov.f32	s15, s0
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <lane_keeping+0x130>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]

	//minus because yawrate and steering are opposite
	if (data.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <lane_keeping+0x120>)
 80026e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	db1a      	blt.n	8002726 <lane_keeping+0xc2>
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <lane_keeping+0x130>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	dd12      	ble.n	8002726 <lane_keeping+0xc2>
		u_sterzo *= -1.0;
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <lane_keeping+0x130>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff27 	bl	8000558 <__aeabi_f2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fa71 	bl	8000bf8 <__aeabi_d2f>
 8002716:	4603      	mov	r3, r0
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef1 7a67 	vneg.f32	s15, s15
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <lane_keeping+0x130>)
 8002722:	edc3 7a00 	vstr	s15, [r3]
	if (data.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <lane_keeping+0x120>)
 8002728:	edd3 7a01 	vldr	s15, [r3, #4]
 800272c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002734:	d51a      	bpl.n	800276c <lane_keeping+0x108>
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <lane_keeping+0x130>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d512      	bpl.n	800276c <lane_keeping+0x108>
		u_sterzo *= -1.0;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <lane_keeping+0x130>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff04 	bl	8000558 <__aeabi_f2d>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe fa4e 	bl	8000bf8 <__aeabi_d2f>
 800275c:	4603      	mov	r3, r0
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef1 7a67 	vneg.f32	s15, s15
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <lane_keeping+0x130>)
 8002768:	edc3 7a00 	vstr	s15, [r3]

	servo_motor(u_sterzo);
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <lane_keeping+0x130>)
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	eeb0 0a67 	vmov.f32	s0, s15
 8002776:	f000 ffbf 	bl	80036f8 <servo_motor>
	//printf("%f\r\n", vehicleState.yaw_rate_rad_sec);
	//printf("%f\r\n", u_sterzo);

}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000045c 	.word	0x2000045c
 8002788:	20000478 	.word	0x20000478
 800278c:	00000000 	.word	0x00000000
 8002790:	20000518 	.word	0x20000518
 8002794:	2000053c 	.word	0x2000053c

08002798 <parcheggio>:

//-------------------------------------------------------------
//PARCHEGGIO
void parcheggio()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	if (data.linear_speed_ref_m_s < 0)
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <parcheggio+0x84>)
 800279e:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	d51b      	bpl.n	80027e4 <parcheggio+0x4c>
	{ //Entro nel parcheggio
		switch (flag_ingresso_parcheggio){
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <parcheggio+0x88>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d010      	beq.n	80027d6 <parcheggio+0x3e>
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	dc2f      	bgt.n	8002818 <parcheggio+0x80>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <parcheggio+0x2a>
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d007      	beq.n	80027d0 <parcheggio+0x38>
		case 1:
			uscita_parcheggio();
			break;
		}
	}
}
 80027c0:	e02a      	b.n	8002818 <parcheggio+0x80>
			muoviti_n_metri_dritto(1.70, 0.20);
 80027c2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002824 <parcheggio+0x8c>
 80027c6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002828 <parcheggio+0x90>
 80027ca:	f000 fa2f 	bl	8002c2c <muoviti_n_metri_dritto>
			break;
 80027ce:	e023      	b.n	8002818 <parcheggio+0x80>
			ingresso_parcheggio();
 80027d0:	f000 f832 	bl	8002838 <ingresso_parcheggio>
			break;
 80027d4:	e020      	b.n	8002818 <parcheggio+0x80>
			sistemazione_parcheggio(0.15, 0.20);
 80027d6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002824 <parcheggio+0x8c>
 80027da:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800282c <parcheggio+0x94>
 80027de:	f000 fa71 	bl	8002cc4 <sistemazione_parcheggio>
			break;
 80027e2:	e019      	b.n	8002818 <parcheggio+0x80>
	else if (data.linear_speed_ref_m_s > 0) //Esco dal parcheggio
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <parcheggio+0x84>)
 80027e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	dc00      	bgt.n	80027f6 <parcheggio+0x5e>
}
 80027f4:	e010      	b.n	8002818 <parcheggio+0x80>
		switch (flag_uscita_parcheggio){
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <parcheggio+0x98>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <parcheggio+0x6c>
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d007      	beq.n	8002812 <parcheggio+0x7a>
}
 8002802:	e009      	b.n	8002818 <parcheggio+0x80>
			sistemazione_parcheggio(0.25, -0.20);
 8002804:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002834 <parcheggio+0x9c>
 8002808:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800280c:	f000 fa5a 	bl	8002cc4 <sistemazione_parcheggio>
			break;
 8002810:	e002      	b.n	8002818 <parcheggio+0x80>
			uscita_parcheggio();
 8002812:	f000 f909 	bl	8002a28 <uscita_parcheggio>
			break;
 8002816:	bf00      	nop
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000045c 	.word	0x2000045c
 8002820:	20000558 	.word	0x20000558
 8002824:	3e4ccccd 	.word	0x3e4ccccd
 8002828:	3fd9999a 	.word	0x3fd9999a
 800282c:	3e19999a 	.word	0x3e19999a
 8002830:	2000055c 	.word	0x2000055c
 8002834:	be4ccccd 	.word	0xbe4ccccd

08002838 <ingresso_parcheggio>:

void ingresso_parcheggio(){
 8002838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800283c:	af00      	add	r7, sp, #0

	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100);
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002840:	ed93 7a03 	vldr	s14, [r3, #12]
 8002844:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002846:	edd3 6a04 	vldr	s13, [r3, #16]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 800284c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <ingresso_parcheggio+0x1cc>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	ed9f 5a6c 	vldr	s10, [pc, #432]	; 8002a08 <ingresso_parcheggio+0x1d0>
 800285a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 800285e:	eef0 1a65 	vmov.f32	s3, s11
 8002862:	eeb0 1a46 	vmov.f32	s2, s12
 8002866:	eef0 0a66 	vmov.f32	s1, s13
 800286a:	eeb0 0a47 	vmov.f32	s0, s14
 800286e:	f000 fda3 	bl	80033b8 <calcolo_yaw_rate>
 8002872:	ee10 3a10 	vmov	r3, s0
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe6e 	bl	8000558 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4962      	ldr	r1, [pc, #392]	; (8002a0c <ingresso_parcheggio+0x1d4>)
 8002882:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 8002886:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <ingresso_parcheggio+0x1d4>)
 8002888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f9b2 	bl	8000bf8 <__aeabi_d2f>
 8002894:	4604      	mov	r4, r0
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <ingresso_parcheggio+0x1d4>)
 8002898:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f9aa 	bl	8000bf8 <__aeabi_d2f>
 80028a4:	4603      	mov	r3, r0
 80028a6:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8002a10 <ingresso_parcheggio+0x1d8>
 80028aa:	ee00 3a90 	vmov	s1, r3
 80028ae:	ee00 4a10 	vmov	s0, r4
 80028b2:	4858      	ldr	r0, [pc, #352]	; (8002a14 <ingresso_parcheggio+0x1dc>)
 80028b4:	f7fe fc1c 	bl	80010f0 <PID_controller>
 80028b8:	eef0 7a40 	vmov.f32	s15, s0
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <ingresso_parcheggio+0x1e0>)
 80028be:	edc3 7a00 	vstr	s15, [r3]
	controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 80028c2:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <ingresso_parcheggio+0x1d4>)
 80028c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 80028ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <ingresso_parcheggio+0x1e4>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80028d8:	eef0 0a46 	vmov.f32	s1, s12
 80028dc:	eeb0 0a66 	vmov.f32	s0, s13
 80028e0:	f7ff fe6a 	bl	80025b8 <controllo_trazione>
	//printf("%f; %f \r\n", vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec);

	if(data.linear_speed_ref_m_s > 0)
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 80028e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	dd0d      	ble.n	8002910 <ingresso_parcheggio+0xd8>
	{
		servo_motor((int) -u_sterzo);
 80028f4:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <ingresso_parcheggio+0x1e0>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	eef1 7a67 	vneg.f32	s15, s15
 80028fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	f000 fef5 	bl	80036f8 <servo_motor>
 800290e:	e00a      	b.n	8002926 <ingresso_parcheggio+0xee>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <ingresso_parcheggio+0x1e0>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	f000 fee9 	bl	80036f8 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s))+TEMPO_SALITA_PID_TRAZIONE_RWD)
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <ingresso_parcheggio+0x1cc>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a08 <ingresso_parcheggio+0x1d0>
 8002930:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002934:	ee16 0a90 	vmov	r0, s13
 8002938:	f7fd fe0e 	bl	8000558 <__aeabi_f2d>
 800293c:	4604      	mov	r4, r0
 800293e:	460d      	mov	r5, r1
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002942:	ed93 7a04 	vldr	s14, [r3, #16]
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002948:	edd3 7a04 	vldr	s15, [r3, #16]
 800294c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002952:	edd3 6a03 	vldr	s13, [r3, #12]
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002958:	edd3 7a03 	vldr	s15, [r3, #12]
 800295c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fdf6 	bl	8000558 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	ec43 2b10 	vmov	d0, r2, r3
 8002974:	f00a f852 	bl	800ca1c <sqrt>
 8002978:	ec51 0b10 	vmov	r0, r1, d0
 800297c:	a31c      	add	r3, pc, #112	; (adr r3, 80029f0 <ingresso_parcheggio+0x1b8>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fe41 	bl	8000608 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4690      	mov	r8, r2
 800298c:	4699      	mov	r9, r3
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <ingresso_parcheggio+0x1c8>)
 8002990:	edd3 7a02 	vldr	s15, [r3, #8]
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	f000 fc3c 	bl	8003214 <valore_assoluto>
 800299c:	ee10 3a10 	vmov	r3, s0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdd9 	bl	8000558 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4640      	mov	r0, r8
 80029ac:	4649      	mov	r1, r9
 80029ae:	f7fd ff55 	bl	800085c <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	a30f      	add	r3, pc, #60	; (adr r3, 80029f8 <ingresso_parcheggio+0x1c0>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fc6c 	bl	800029c <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fe f8a2 	bl	8000b14 <__aeabi_dcmpge>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d100      	bne.n	80029d8 <ingresso_parcheggio+0x1a0>
	{
		cnt_manovre = 0;
		flag_ingresso_parcheggio++;
	}
}
 80029d6:	e008      	b.n	80029ea <ingresso_parcheggio+0x1b2>
		cnt_manovre = 0;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <ingresso_parcheggio+0x1cc>)
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
		flag_ingresso_parcheggio++;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <ingresso_parcheggio+0x1e8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <ingresso_parcheggio+0x1e8>)
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029f0:	147ae148 	.word	0x147ae148
 80029f4:	3ff147ae 	.word	0x3ff147ae
 80029f8:	9999999a 	.word	0x9999999a
 80029fc:	3fc99999 	.word	0x3fc99999
 8002a00:	2000045c 	.word	0x2000045c
 8002a04:	20000554 	.word	0x20000554
 8002a08:	42c80000 	.word	0x42c80000
 8002a0c:	20000478 	.word	0x20000478
 8002a10:	00000000 	.word	0x00000000
 8002a14:	20000518 	.word	0x20000518
 8002a18:	2000053c 	.word	0x2000053c
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	20000558 	.word	0x20000558
 8002a24:	00000000 	.word	0x00000000

08002a28 <uscita_parcheggio>:

void uscita_parcheggio(){
 8002a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a2c:	af00      	add	r7, sp, #0

	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100);
 8002a2e:	4b74      	ldr	r3, [pc, #464]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002a30:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a34:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002a36:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a3a:	4b71      	ldr	r3, [pc, #452]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002a3c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <uscita_parcheggio+0x1dc>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8002c08 <uscita_parcheggio+0x1e0>
 8002a4a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002a4e:	eef0 1a65 	vmov.f32	s3, s11
 8002a52:	eeb0 1a46 	vmov.f32	s2, s12
 8002a56:	eef0 0a66 	vmov.f32	s1, s13
 8002a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5e:	f000 fcab 	bl	80033b8 <calcolo_yaw_rate>
 8002a62:	ee10 3a10 	vmov	r3, s0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd76 	bl	8000558 <__aeabi_f2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4966      	ldr	r1, [pc, #408]	; (8002c0c <uscita_parcheggio+0x1e4>)
 8002a72:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <uscita_parcheggio+0x1e4>)
 8002a78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f8ba 	bl	8000bf8 <__aeabi_d2f>
 8002a84:	4604      	mov	r4, r0
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <uscita_parcheggio+0x1e4>)
 8002a88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f8b2 	bl	8000bf8 <__aeabi_d2f>
 8002a94:	4603      	mov	r3, r0
 8002a96:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8002c10 <uscita_parcheggio+0x1e8>
 8002a9a:	ee00 3a90 	vmov	s1, r3
 8002a9e:	ee00 4a10 	vmov	s0, r4
 8002aa2:	485c      	ldr	r0, [pc, #368]	; (8002c14 <uscita_parcheggio+0x1ec>)
 8002aa4:	f7fe fb24 	bl	80010f0 <PID_controller>
 8002aa8:	eef0 7a40 	vmov.f32	s15, s0
 8002aac:	4b5a      	ldr	r3, [pc, #360]	; (8002c18 <uscita_parcheggio+0x1f0>)
 8002aae:	edc3 7a00 	vstr	s15, [r3]
	controllo_trazione(vehicleState.motor_speed_RPM, data.linear_speed_ref_m_s / RPM_2_m_s);
 8002ab2:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <uscita_parcheggio+0x1e4>)
 8002ab4:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ab8:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002aba:	ed93 7a02 	vldr	s14, [r3, #8]
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <uscita_parcheggio+0x1f4>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002ac8:	eef0 0a46 	vmov.f32	s1, s12
 8002acc:	eeb0 0a66 	vmov.f32	s0, s13
 8002ad0:	f7ff fd72 	bl	80025b8 <controllo_trazione>
	//printf("%f;%f \r\n", vehicleState.yaw_rate_ref_rad_sec, vehicleState.yaw_rate_rad_sec);

	if(data.linear_speed_ref_m_s > 0)
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	dd0d      	ble.n	8002b00 <uscita_parcheggio+0xd8>
	{
		servo_motor((int) -u_sterzo);
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <uscita_parcheggio+0x1f0>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	eef1 7a67 	vneg.f32	s15, s15
 8002aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	f000 fdfd 	bl	80036f8 <servo_motor>
 8002afe:	e00a      	b.n	8002b16 <uscita_parcheggio+0xee>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002b00:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <uscita_parcheggio+0x1f0>)
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b12:	f000 fdf1 	bl	80036f8 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s))+TEMPO_SALITA_PID_TRAZIONE)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <uscita_parcheggio+0x1dc>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002c08 <uscita_parcheggio+0x1e0>
 8002b20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b24:	ee16 0a90 	vmov	r0, s13
 8002b28:	f7fd fd16 	bl	8000558 <__aeabi_f2d>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	460d      	mov	r5, r1
 8002b30:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002b32:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002b42:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002b48:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b54:	ee17 0a90 	vmov	r0, s15
 8002b58:	f7fd fcfe 	bl	8000558 <__aeabi_f2d>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	ec43 2b10 	vmov	d0, r2, r3
 8002b64:	f009 ff5a 	bl	800ca1c <sqrt>
 8002b68:	ec51 0b10 	vmov	r0, r1, d0
 8002b6c:	a320      	add	r3, pc, #128	; (adr r3, 8002bf0 <uscita_parcheggio+0x1c8>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fd49 	bl	8000608 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b84:	eeb0 0a67 	vmov.f32	s0, s15
 8002b88:	f000 fb44 	bl	8003214 <valore_assoluto>
 8002b8c:	ee10 3a10 	vmov	r3, s0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fce1 	bl	8000558 <__aeabi_f2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4640      	mov	r0, r8
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	f7fd fe5d 	bl	800085c <__aeabi_ddiv>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	a313      	add	r3, pc, #76	; (adr r3, 8002bf8 <uscita_parcheggio+0x1d0>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fb74 	bl	800029c <__adddf3>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4620      	mov	r0, r4
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f7fd ffaa 	bl	8000b14 <__aeabi_dcmpge>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d100      	bne.n	8002bc8 <uscita_parcheggio+0x1a0>
		flag_uscita_parcheggio = 0;
		flag_serial_read = 1;
		data.flag = 1;
		flag_button = 2;
	}
}
 8002bc6:	e00f      	b.n	8002be8 <uscita_parcheggio+0x1c0>
		cnt_manovre = 0;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <uscita_parcheggio+0x1dc>)
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
		flag_uscita_parcheggio = 0;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <uscita_parcheggio+0x1f8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
		flag_serial_read = 1;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <uscita_parcheggio+0x1fc>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
		data.flag = 1;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <uscita_parcheggio+0x1d8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
		flag_button = 2;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <uscita_parcheggio+0x200>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bee:	bf00      	nop
 8002bf0:	147ae148 	.word	0x147ae148
 8002bf4:	3ff147ae 	.word	0x3ff147ae
 8002bf8:	9999999a 	.word	0x9999999a
 8002bfc:	3fc99999 	.word	0x3fc99999
 8002c00:	2000045c 	.word	0x2000045c
 8002c04:	20000554 	.word	0x20000554
 8002c08:	42c80000 	.word	0x42c80000
 8002c0c:	20000478 	.word	0x20000478
 8002c10:	00000000 	.word	0x00000000
 8002c14:	20000518 	.word	0x20000518
 8002c18:	2000053c 	.word	0x2000053c
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	2000055c 	.word	0x2000055c
 8002c24:	2000054c 	.word	0x2000054c
 8002c28:	20000544 	.word	0x20000544

08002c2c <muoviti_n_metri_dritto>:

//-------------------------------------------------------------
//MOVIMENTI CALCOLATI DRITTO
void muoviti_n_metri_dritto(float spostamento, float v){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c36:	edc7 0a00 	vstr	s1, [r7]
	float t = spostamento/v;
 8002c3a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c3e:	ed97 7a00 	vldr	s14, [r7]
 8002c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c46:	edc7 7a03 	vstr	s15, [r7, #12]
	servo_motor(0);
 8002c4a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002cac <muoviti_n_metri_dritto+0x80>
 8002c4e:	f000 fd53 	bl	80036f8 <servo_motor>
	controllo_trazione(vehicleState.motor_speed_RPM, v/RPM_2_m_s);
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <muoviti_n_metri_dritto+0x84>)
 8002c54:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <muoviti_n_metri_dritto+0x88>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ed97 7a00 	vldr	s14, [r7]
 8002c62:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002c66:	eef0 0a46 	vmov.f32	s1, s12
 8002c6a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c6e:	f7ff fca3 	bl	80025b8 <controllo_trazione>

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= t){
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <muoviti_n_metri_dritto+0x8c>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002cbc <muoviti_n_metri_dritto+0x90>
 8002c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c80:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d900      	bls.n	8002c90 <muoviti_n_metri_dritto+0x64>
		cnt_manovre = 0;
		//flag_serial_read = 0;
		flag_ingresso_parcheggio++;
		//data.flag = 4;
	}
}
 8002c8e:	e008      	b.n	8002ca2 <muoviti_n_metri_dritto+0x76>
		cnt_manovre = 0;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <muoviti_n_metri_dritto+0x8c>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
		flag_ingresso_parcheggio++;
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <muoviti_n_metri_dritto+0x94>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <muoviti_n_metri_dritto+0x94>)
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	20000478 	.word	0x20000478
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	20000554 	.word	0x20000554
 8002cbc:	42c80000 	.word	0x42c80000
 8002cc0:	20000558 	.word	0x20000558

08002cc4 <sistemazione_parcheggio>:

void sistemazione_parcheggio(float spostamento, float v){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	ed2d 8b02 	vpush	{d8}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cd2:	edc7 0a00 	vstr	s1, [r7]
	float t = spostamento/v;
 8002cd6:	edd7 6a01 	vldr	s13, [r7, #4]
 8002cda:	ed97 7a00 	vldr	s14, [r7]
 8002cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	servo_motor(0);
 8002ce6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002dbc <sistemazione_parcheggio+0xf8>
 8002cea:	f000 fd05 	bl	80036f8 <servo_motor>
	controllo_trazione(vehicleState.motor_speed_RPM, v/RPM_2_m_s);
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <sistemazione_parcheggio+0xfc>)
 8002cf0:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <sistemazione_parcheggio+0x100>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ed97 7a00 	vldr	s14, [r7]
 8002cfe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002d02:	eef0 0a46 	vmov.f32	s1, s12
 8002d06:	eeb0 0a66 	vmov.f32	s0, s13
 8002d0a:	f7ff fc55 	bl	80025b8 <controllo_trazione>
	//In base al verso di rotazione seleziono il tempo di salita del motore
	if(v > 0)
 8002d0e:	edd7 7a00 	vldr	s15, [r7]
 8002d12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	dd03      	ble.n	8002d24 <sistemazione_parcheggio+0x60>
	{
		tempo_salita_pid = TEMPO_SALITA_PID_TRAZIONE;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <sistemazione_parcheggio+0x104>)
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <sistemazione_parcheggio+0x108>)
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e002      	b.n	8002d2a <sistemazione_parcheggio+0x66>
	}
	else
	{
		tempo_salita_pid = TEMPO_SALITA_PID_TRAZIONE_RWD;
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <sistemazione_parcheggio+0x104>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <sistemazione_parcheggio+0x108>)
 8002d28:	601a      	str	r2, [r3, #0]
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= valore_assoluto(t+tempo_salita_pid)){
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <sistemazione_parcheggio+0x10c>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002dd4 <sistemazione_parcheggio+0x110>
 8002d34:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <sistemazione_parcheggio+0x104>)
 8002d3a:	ed93 7a00 	vldr	s14, [r3]
 8002d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4a:	f000 fa63 	bl	8003214 <valore_assoluto>
 8002d4e:	eef0 7a40 	vmov.f32	s15, s0
 8002d52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	da00      	bge.n	8002d5e <sistemazione_parcheggio+0x9a>
		else if(v < 0){
			cnt_manovre = 0;
			flag_uscita_parcheggio++;
		}
	}
}
 8002d5c:	e028      	b.n	8002db0 <sistemazione_parcheggio+0xec>
		if (v > 0){
 8002d5e:	edd7 7a00 	vldr	s15, [r7]
 8002d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	dd10      	ble.n	8002d8e <sistemazione_parcheggio+0xca>
			data.flag = 6;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <sistemazione_parcheggio+0x114>)
 8002d6e:	2206      	movs	r2, #6
 8002d70:	601a      	str	r2, [r3, #0]
			cnt_manovre = 0;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <sistemazione_parcheggio+0x10c>)
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
			flag_ingresso_parcheggio = 0;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <sistemazione_parcheggio+0x118>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
			flag_serial_read = 1;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <sistemazione_parcheggio+0x11c>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
			flag_button = 0;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <sistemazione_parcheggio+0x120>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	e010      	b.n	8002db0 <sistemazione_parcheggio+0xec>
		else if(v < 0){
 8002d8e:	edd7 7a00 	vldr	s15, [r7]
 8002d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d400      	bmi.n	8002d9e <sistemazione_parcheggio+0xda>
}
 8002d9c:	e008      	b.n	8002db0 <sistemazione_parcheggio+0xec>
			cnt_manovre = 0;
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <sistemazione_parcheggio+0x10c>)
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
			flag_uscita_parcheggio++;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <sistemazione_parcheggio+0x124>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <sistemazione_parcheggio+0x124>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	ecbd 8b02 	vpop	{d8}
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00000000 	.word	0x00000000
 8002dc0:	20000478 	.word	0x20000478
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	20000550 	.word	0x20000550
 8002dcc:	3e4ccccd 	.word	0x3e4ccccd
 8002dd0:	20000554 	.word	0x20000554
 8002dd4:	42c80000 	.word	0x42c80000
 8002dd8:	2000045c 	.word	0x2000045c
 8002ddc:	20000558 	.word	0x20000558
 8002de0:	2000054c 	.word	0x2000054c
 8002de4:	20000544 	.word	0x20000544
 8002de8:	2000055c 	.word	0x2000055c
 8002dec:	00000000 	.word	0x00000000

08002df0 <cambio_corsia>:

//-------------------------------------------------------------
//CAMBIO CORSIA
void cambio_corsia(){
 8002df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002df4:	ed2d 8b04 	vpush	{d8-d9}
 8002df8:	af00      	add	r7, sp, #0
	vehicleState.yaw_rate_ref_rad_sec = calcolo_yaw_rate(data.dy, data.dx, data.linear_speed_ref_m_s, cnt_manovre/100) + (data.linear_speed_ref_m_s/(data.curvature_radius_ref_m+valore_assoluto(data.dy)));
 8002dfa:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002dfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e00:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002e02:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e06:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002e08:	ed93 6a02 	vldr	s12, [r3, #8]
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <cambio_corsia+0x1cc>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8002fc0 <cambio_corsia+0x1d0>
 8002e16:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002e1a:	eef0 1a65 	vmov.f32	s3, s11
 8002e1e:	eeb0 1a46 	vmov.f32	s2, s12
 8002e22:	eef0 0a66 	vmov.f32	s1, s13
 8002e26:	eeb0 0a47 	vmov.f32	s0, s14
 8002e2a:	f000 fac5 	bl	80033b8 <calcolo_yaw_rate>
 8002e2e:	eeb0 9a40 	vmov.f32	s18, s0
 8002e32:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002e34:	ed93 8a02 	vldr	s16, [r3, #8]
 8002e38:	4b5f      	ldr	r3, [pc, #380]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002e3a:	edd3 8a01 	vldr	s17, [r3, #4]
 8002e3e:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002e40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e44:	eeb0 0a67 	vmov.f32	s0, s15
 8002e48:	f000 f9e4 	bl	8003214 <valore_assoluto>
 8002e4c:	eef0 7a40 	vmov.f32	s15, s0
 8002e50:	ee38 7aa7 	vadd.f32	s14, s17, s15
 8002e54:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002e58:	ee79 7a27 	vadd.f32	s15, s18, s15
 8002e5c:	ee17 0a90 	vmov	r0, s15
 8002e60:	f7fd fb7a 	bl	8000558 <__aeabi_f2d>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4956      	ldr	r1, [pc, #344]	; (8002fc4 <cambio_corsia+0x1d4>)
 8002e6a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	u_sterzo = PID_controller(&pid_steering, vehicleState.yaw_rate_rad_sec, vehicleState.yaw_rate_ref_rad_sec, 0);
 8002e6e:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <cambio_corsia+0x1d4>)
 8002e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fd febe 	bl	8000bf8 <__aeabi_d2f>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <cambio_corsia+0x1d4>)
 8002e80:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fd feb6 	bl	8000bf8 <__aeabi_d2f>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002fc8 <cambio_corsia+0x1d8>
 8002e92:	ee00 3a90 	vmov	s1, r3
 8002e96:	ee00 4a10 	vmov	s0, r4
 8002e9a:	484c      	ldr	r0, [pc, #304]	; (8002fcc <cambio_corsia+0x1dc>)
 8002e9c:	f7fe f928 	bl	80010f0 <PID_controller>
 8002ea0:	eef0 7a40 	vmov.f32	s15, s0
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <cambio_corsia+0x1e0>)
 8002ea6:	edc3 7a00 	vstr	s15, [r3]

	if(data.linear_speed_ref_m_s > 0)
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002eac:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd0d      	ble.n	8002ed6 <cambio_corsia+0xe6>
	{
		servo_motor((int) -u_sterzo);
 8002eba:	4b45      	ldr	r3, [pc, #276]	; (8002fd0 <cambio_corsia+0x1e0>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eef1 7a67 	vneg.f32	s15, s15
 8002ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	f000 fc12 	bl	80036f8 <servo_motor>
 8002ed4:	e00a      	b.n	8002eec <cambio_corsia+0xfc>
	}
	else
	{
		servo_motor((int) u_sterzo);
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <cambio_corsia+0x1e0>)
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee8:	f000 fc06 	bl	80036f8 <servo_motor>
	}

	//Manovra finita, resetto tutto
	if(cnt_manovre/100 >= (CORREZIONE_LAMBDA*sqrt(data.dx*data.dx + data.dy*data.dy)/valore_assoluto(data.linear_speed_ref_m_s)))
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <cambio_corsia+0x1cc>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002fc0 <cambio_corsia+0x1d0>
 8002ef6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002efa:	ee16 0a90 	vmov	r0, s13
 8002efe:	f7fd fb2b 	bl	8000558 <__aeabi_f2d>
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f08:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f16:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f18:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f1c:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2a:	ee17 0a90 	vmov	r0, s15
 8002f2e:	f7fd fb13 	bl	8000558 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	ec43 2b10 	vmov	d0, r2, r3
 8002f3a:	f009 fd6f 	bl	800ca1c <sqrt>
 8002f3e:	ec51 0b10 	vmov	r0, r1, d0
 8002f42:	a31b      	add	r3, pc, #108	; (adr r3, 8002fb0 <cambio_corsia+0x1c0>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fb5e 	bl	8000608 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4690      	mov	r8, r2
 8002f52:	4699      	mov	r9, r3
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5e:	f000 f959 	bl	8003214 <valore_assoluto>
 8002f62:	ee10 3a10 	vmov	r3, s0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd faf6 	bl	8000558 <__aeabi_f2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4640      	mov	r0, r8
 8002f72:	4649      	mov	r1, r9
 8002f74:	f7fd fc72 	bl	800085c <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	f7fd fdc8 	bl	8000b14 <__aeabi_dcmpge>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <cambio_corsia+0x19c>
	{
		cnt_manovre = 0;
		flag_serial_read = 1;
		data.linear_speed_ref_m_s = -0.20;
	}
}
 8002f8a:	e009      	b.n	8002fa0 <cambio_corsia+0x1b0>
		cnt_manovre = 0;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <cambio_corsia+0x1cc>)
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
		flag_serial_read = 1;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <cambio_corsia+0x1e4>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
		data.linear_speed_ref_m_s = -0.20;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <cambio_corsia+0x1c8>)
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <cambio_corsia+0x1e8>)
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	ecbd 8b04 	vpop	{d8-d9}
 8002fa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fac:	f3af 8000 	nop.w
 8002fb0:	147ae148 	.word	0x147ae148
 8002fb4:	3ff147ae 	.word	0x3ff147ae
 8002fb8:	2000045c 	.word	0x2000045c
 8002fbc:	20000554 	.word	0x20000554
 8002fc0:	42c80000 	.word	0x42c80000
 8002fc4:	20000478 	.word	0x20000478
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	20000518 	.word	0x20000518
 8002fd0:	2000053c 	.word	0x2000053c
 8002fd4:	2000054c 	.word	0x2000054c
 8002fd8:	be4ccccd 	.word	0xbe4ccccd
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <cambio_velocita>:

//-------------------------------------------------------------
//RALLENTAMENTO
// cambia il valore della velocita da un valore iniziale a uno finale in uno spazio stop_space definito
void cambio_velocita(float stop_space) {
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	ed87 0a01 	vstr	s0, [r7, #4]
	float acceleration = (data.linear_speed_ref_m_s*data.linear_speed_ref_m_s - data.old_linear_speed_ref_m_s*data.old_linear_speed_ref_m_s) / (2 * stop_space); // Accelerazione costante per fermarsi uniformemente
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <cambio_velocita+0x118>)
 8002fec:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <cambio_velocita+0x118>)
 8002ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <cambio_velocita+0x118>)
 8002ffc:	edd3 6a06 	vldr	s13, [r3, #24]
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <cambio_velocita+0x118>)
 8003002:	edd3 7a06 	vldr	s15, [r3, #24]
 8003006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800300e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003012:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301a:	edc7 7a03 	vstr	s15, [r7, #12]

	if(flag_serial_read == 1)
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <cambio_velocita+0x11c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <cambio_velocita+0x56>
	{
		current_linear_speed_ref_m_s = data.old_linear_speed_ref_m_s;
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <cambio_velocita+0x118>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4a35      	ldr	r2, [pc, #212]	; (8003100 <cambio_velocita+0x120>)
 800302c:	6013      	str	r3, [r2, #0]
		flag_serial_read = 0;
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <cambio_velocita+0x11c>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

		}

		controllo_trazione(vehicleState.motor_speed_RPM, current_linear_speed_ref_m_s/RPM_2_m_s);
	}
}
 8003034:	e058      	b.n	80030e8 <cambio_velocita+0x108>
		current_linear_speed_ref_m_s += acceleration*TRACTION_SAMPLING_TIME;
 8003036:	4b32      	ldr	r3, [pc, #200]	; (8003100 <cambio_velocita+0x120>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa8c 	bl	8000558 <__aeabi_f2d>
 8003040:	4604      	mov	r4, r0
 8003042:	460d      	mov	r5, r1
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fd fa87 	bl	8000558 <__aeabi_f2d>
 800304a:	a329      	add	r3, pc, #164	; (adr r3, 80030f0 <cambio_velocita+0x110>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd fada 	bl	8000608 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	f7fd f91e 	bl	800029c <__adddf3>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fdc6 	bl	8000bf8 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	4a24      	ldr	r2, [pc, #144]	; (8003100 <cambio_velocita+0x120>)
 8003070:	6013      	str	r3, [r2, #0]
		if(data.linear_speed_ref_m_s - data.old_linear_speed_ref_m_s < 0)
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <cambio_velocita+0x118>)
 8003074:	ed93 7a02 	vldr	s14, [r3, #8]
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <cambio_velocita+0x118>)
 800307a:	edd3 7a06 	vldr	s15, [r3, #24]
 800307e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308a:	d50e      	bpl.n	80030aa <cambio_velocita+0xca>
			if (current_linear_speed_ref_m_s <= data.linear_speed_ref_m_s)
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <cambio_velocita+0x118>)
 800308e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <cambio_velocita+0x120>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	db11      	blt.n	80030c6 <cambio_velocita+0xe6>
				cambiamento_velocita = 0;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <cambio_velocita+0x124>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e00d      	b.n	80030c6 <cambio_velocita+0xe6>
			if(current_linear_speed_ref_m_s >= data.linear_speed_ref_m_s)
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <cambio_velocita+0x118>)
 80030ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <cambio_velocita+0x120>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d802      	bhi.n	80030c6 <cambio_velocita+0xe6>
				flag_serial_read = 1;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <cambio_velocita+0x11c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
		controllo_trazione(vehicleState.motor_speed_RPM, current_linear_speed_ref_m_s/RPM_2_m_s);
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <cambio_velocita+0x128>)
 80030c8:	edd3 6a05 	vldr	s13, [r3, #20]
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <cambio_velocita+0x120>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <cambio_velocita+0x12c>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80030dc:	eef0 0a46 	vmov.f32	s1, s12
 80030e0:	eeb0 0a66 	vmov.f32	s0, s13
 80030e4:	f7ff fa68 	bl	80025b8 <controllo_trazione>
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bdb0      	pop	{r4, r5, r7, pc}
 80030f0:	47ae147b 	.word	0x47ae147b
 80030f4:	3f847ae1 	.word	0x3f847ae1
 80030f8:	2000045c 	.word	0x2000045c
 80030fc:	2000054c 	.word	0x2000054c
 8003100:	20000560 	.word	0x20000560
 8003104:	20000564 	.word	0x20000564
 8003108:	20000478 	.word	0x20000478
 800310c:	2000000c 	.word	0x2000000c

08003110 <procedura>:

//-------------------------------------------------------------
//PROCEDURA AUTOMATICA PER IL PERCORSO
void procedura(){
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	switch(flag_procedura){
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <procedura+0x30>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <procedura+0x10>
 800311c:	2b01      	cmp	r3, #1
		data.dy = 0.35;
		data.dx = 0.90;
		//next_procedura()
		break;
	case 1:
		break;
 800311e:	e009      	b.n	8003134 <procedura+0x24>
		data.flag = 4;
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <procedura+0x34>)
 8003122:	2204      	movs	r2, #4
 8003124:	601a      	str	r2, [r3, #0]
		data.dy = 0.35;
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <procedura+0x34>)
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <procedura+0x38>)
 800312a:	60da      	str	r2, [r3, #12]
		data.dx = 0.90;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <procedura+0x34>)
 800312e:	4a07      	ldr	r2, [pc, #28]	; (800314c <procedura+0x3c>)
 8003130:	611a      	str	r2, [r3, #16]
		break;
 8003132:	bf00      	nop
	}
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000056c 	.word	0x2000056c
 8003144:	2000045c 	.word	0x2000045c
 8003148:	3eb33333 	.word	0x3eb33333
 800314c:	3f666666 	.word	0x3f666666

08003150 <HAL_GPIO_EXTI_Callback>:
	}
}

//-------------------------------------------------------------
//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003160:	d13a      	bne.n	80031d8 <HAL_GPIO_EXTI_Callback+0x88>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Button pressed
 8003162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003166:	4822      	ldr	r0, [pc, #136]	; (80031f0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003168:	f001 fc50 	bl	8004a0c <HAL_GPIO_ReadPin>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_GPIO_EXTI_Callback+0x2c>
			buttonPressStartTime = cnt_10ms_button;
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e02d      	b.n	80031d8 <HAL_GPIO_EXTI_Callback+0x88>

		} else { // Button released
			buttonPressEndTime = cnt_10ms_button;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_GPIO_EXTI_Callback+0xac>)
 8003182:	6013      	str	r3, [r2, #0]

			//Verifico quantotemp ho tenuto premuto il tasto
			pressDuration = buttonPressEndTime - buttonPressStartTime;
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_GPIO_EXTI_Callback+0xac>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003190:	6013      	str	r3, [r2, #0]
			if (pressDuration < SHORT_PRESS_THRESHOLD)
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b63      	cmp	r3, #99	; 0x63
 8003198:	d813      	bhi.n	80031c2 <HAL_GPIO_EXTI_Callback+0x72>
			{
				if(flag_button >= 0 && flag_button < max_flag_button){
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <HAL_GPIO_EXTI_Callback+0x6a>
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_GPIO_EXTI_Callback+0xb8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	da05      	bge.n	80031ba <HAL_GPIO_EXTI_Callback+0x6a>
					flag_button++;
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e00e      	b.n	80031d8 <HAL_GPIO_EXTI_Callback+0x88>
				}
				else
				{
					flag_button = 0;
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e00a      	b.n	80031d8 <HAL_GPIO_EXTI_Callback+0x88>
				}
			} else if (pressDuration >= LONG_PRESS_THRESHOLD)
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_GPIO_EXTI_Callback+0xb0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2bc7      	cmp	r3, #199	; 0xc7
 80031c8:	d906      	bls.n	80031d8 <HAL_GPIO_EXTI_Callback+0x88>
			{
				flag_button = -1;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_GPIO_EXTI_Callback+0xb4>)
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	601a      	str	r2, [r3, #0]
				counter_cal_ESC = 0;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_GPIO_EXTI_Callback+0xbc>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_10){
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d102      	bne.n	80031e6 <HAL_GPIO_EXTI_Callback+0x96>
		printf("letto interrupt \r\n");
 80031e0:	480b      	ldr	r0, [pc, #44]	; (8003210 <HAL_GPIO_EXTI_Callback+0xc0>)
 80031e2:	f006 fdcd 	bl	8009d80 <puts>
	}
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40020800 	.word	0x40020800
 80031f4:	20000580 	.word	0x20000580
 80031f8:	20000574 	.word	0x20000574
 80031fc:	20000578 	.word	0x20000578
 8003200:	2000057c 	.word	0x2000057c
 8003204:	20000544 	.word	0x20000544
 8003208:	20000540 	.word	0x20000540
 800320c:	20000584 	.word	0x20000584
 8003210:	0800ea98 	.word	0x0800ea98

08003214 <valore_assoluto>:

float valore_assoluto(float x)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0)
 800321e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d504      	bpl.n	8003236 <valore_assoluto+0x22>
	{
		return -x;
 800322c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003230:	eef1 7a67 	vneg.f32	s15, s15
 8003234:	e001      	b.n	800323a <valore_assoluto+0x26>
	}
	else
	{
		return x;
 8003236:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 800323a:	eeb0 0a67 	vmov.f32	s0, s15
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <__io_putchar>:

//-------------------------------------------------------------
//STAMPE
//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8003250:	1d39      	adds	r1, r7, #4
 8003252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003256:	2201      	movs	r2, #1
 8003258:	4803      	ldr	r0, [pc, #12]	; (8003268 <__io_putchar+0x20>)
 800325a:	f004 fb48 	bl	80078ee <HAL_UART_Transmit>
	return ch;
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200003d4 	.word	0x200003d4

0800326c <ProceduraCalibrazione>:
  printf("%s", app);
}

//-------------------------------------------------------------
//CALIBRAZIONE
void ProceduraCalibrazione(){
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	if(counter_cal_ESC < 5){
 8003270:	4b44      	ldr	r3, [pc, #272]	; (8003384 <ProceduraCalibrazione+0x118>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	dc04      	bgt.n	8003282 <ProceduraCalibrazione+0x16>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	2102      	movs	r1, #2
 800327c:	4842      	ldr	r0, [pc, #264]	; (8003388 <ProceduraCalibrazione+0x11c>)
 800327e:	f001 fbdd 	bl	8004a3c <HAL_GPIO_WritePin>
	}
	if(counter_cal_ESC <= 300){
 8003282:	4b40      	ldr	r3, [pc, #256]	; (8003384 <ProceduraCalibrazione+0x118>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800328a:	dc13      	bgt.n	80032b4 <ProceduraCalibrazione+0x48>
		if(!(counter_cal_ESC % 15)){
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <ProceduraCalibrazione+0x118>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b3e      	ldr	r3, [pc, #248]	; (800338c <ProceduraCalibrazione+0x120>)
 8003292:	fb83 1302 	smull	r1, r3, r3, r2
 8003296:	4413      	add	r3, r2
 8003298:	10d9      	asrs	r1, r3, #3
 800329a:	17d3      	asrs	r3, r2, #31
 800329c:	1ac9      	subs	r1, r1, r3
 800329e:	460b      	mov	r3, r1
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a5b      	subs	r3, r3, r1
 80032a4:	1ad1      	subs	r1, r2, r3
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d169      	bne.n	800337e <ProceduraCalibrazione+0x112>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80032aa:	2120      	movs	r1, #32
 80032ac:	4838      	ldr	r0, [pc, #224]	; (8003390 <ProceduraCalibrazione+0x124>)
 80032ae:	f001 fbde 	bl	8004a6e <HAL_GPIO_TogglePin>
	}
	else if (counter_cal_ESC <= 1300){
		data.flag = 6;
		flag_button = 0;
	}
}
 80032b2:	e064      	b.n	800337e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 600){
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <ProceduraCalibrazione+0x118>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80032bc:	dc0f      	bgt.n	80032de <ProceduraCalibrazione+0x72>
		duty = NEUTRAL_PWM;
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <ProceduraCalibrazione+0x128>)
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <ProceduraCalibrazione+0x12c>)
 80032c2:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <ProceduraCalibrazione+0x128>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	eeb0 0a67 	vmov.f32	s0, s15
 80032ce:	f7fd feb7 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2120      	movs	r1, #32
 80032d6:	482e      	ldr	r0, [pc, #184]	; (8003390 <ProceduraCalibrazione+0x124>)
 80032d8:	f001 fbb0 	bl	8004a3c <HAL_GPIO_WritePin>
}
 80032dc:	e04f      	b.n	800337e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 900){
 80032de:	4b29      	ldr	r3, [pc, #164]	; (8003384 <ProceduraCalibrazione+0x118>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80032e6:	dc0f      	bgt.n	8003308 <ProceduraCalibrazione+0x9c>
		duty = MAX_PWM;
 80032e8:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <ProceduraCalibrazione+0x128>)
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <ProceduraCalibrazione+0x130>)
 80032ec:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <ProceduraCalibrazione+0x128>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f7fd fea2 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2120      	movs	r1, #32
 8003300:	4823      	ldr	r0, [pc, #140]	; (8003390 <ProceduraCalibrazione+0x124>)
 8003302:	f001 fb9b 	bl	8004a3c <HAL_GPIO_WritePin>
}
 8003306:	e03a      	b.n	800337e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 1100){
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <ProceduraCalibrazione+0x118>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f240 424c 	movw	r2, #1100	; 0x44c
 8003310:	4293      	cmp	r3, r2
 8003312:	dc0f      	bgt.n	8003334 <ProceduraCalibrazione+0xc8>
		duty = MIN_PWM;
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <ProceduraCalibrazione+0x128>)
 8003316:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <ProceduraCalibrazione+0x134>)
 8003318:	601a      	str	r2, [r3, #0]
		BL_set_PWM(duty);
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <ProceduraCalibrazione+0x128>)
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	f7fd fe8c 	bl	8001040 <BL_set_PWM>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003328:	2201      	movs	r2, #1
 800332a:	2120      	movs	r1, #32
 800332c:	4818      	ldr	r0, [pc, #96]	; (8003390 <ProceduraCalibrazione+0x124>)
 800332e:	f001 fb85 	bl	8004a3c <HAL_GPIO_WritePin>
}
 8003332:	e024      	b.n	800337e <ProceduraCalibrazione+0x112>
	else if(counter_cal_ESC <= 1200){
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <ProceduraCalibrazione+0x118>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800333c:	dc13      	bgt.n	8003366 <ProceduraCalibrazione+0xfa>
		if(!(counter_cal_ESC % 15)){
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <ProceduraCalibrazione+0x118>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <ProceduraCalibrazione+0x120>)
 8003344:	fb83 1302 	smull	r1, r3, r3, r2
 8003348:	4413      	add	r3, r2
 800334a:	10d9      	asrs	r1, r3, #3
 800334c:	17d3      	asrs	r3, r2, #31
 800334e:	1ac9      	subs	r1, r1, r3
 8003350:	460b      	mov	r3, r1
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a5b      	subs	r3, r3, r1
 8003356:	1ad1      	subs	r1, r2, r3
 8003358:	2900      	cmp	r1, #0
 800335a:	d110      	bne.n	800337e <ProceduraCalibrazione+0x112>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800335c:	2120      	movs	r1, #32
 800335e:	480c      	ldr	r0, [pc, #48]	; (8003390 <ProceduraCalibrazione+0x124>)
 8003360:	f001 fb85 	bl	8004a6e <HAL_GPIO_TogglePin>
}
 8003364:	e00b      	b.n	800337e <ProceduraCalibrazione+0x112>
	else if (counter_cal_ESC <= 1300){
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <ProceduraCalibrazione+0x118>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f240 5214 	movw	r2, #1300	; 0x514
 800336e:	4293      	cmp	r3, r2
 8003370:	dc05      	bgt.n	800337e <ProceduraCalibrazione+0x112>
		data.flag = 6;
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <ProceduraCalibrazione+0x138>)
 8003374:	2206      	movs	r2, #6
 8003376:	601a      	str	r2, [r3, #0]
		flag_button = 0;
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <ProceduraCalibrazione+0x13c>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000584 	.word	0x20000584
 8003388:	40021000 	.word	0x40021000
 800338c:	88888889 	.word	0x88888889
 8003390:	40020000 	.word	0x40020000
 8003394:	20000588 	.word	0x20000588
 8003398:	3d98b71c 	.word	0x3d98b71c
 800339c:	3f7d70a4 	.word	0x3f7d70a4
 80033a0:	3c23d70a 	.word	0x3c23d70a
 80033a4:	2000045c 	.word	0x2000045c
 80033a8:	20000544 	.word	0x20000544

080033ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80033b4:	e7fe      	b.n	80033b4 <Error_Handler+0x8>
	...

080033b8 <calcolo_yaw_rate>:
 *  	v<0, dy<0
 *  PARCHEGGIO A DESTRA
 *  	v<0, dy>0
 */

float calcolo_yaw_rate(float dy, float dx, float v, float t){
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b08a      	sub	sp, #40	; 0x28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	ed87 0a07 	vstr	s0, [r7, #28]
 80033c4:	edc7 0a06 	vstr	s1, [r7, #24]
 80033c8:	ed87 1a05 	vstr	s2, [r7, #20]
 80033cc:	edc7 1a04 	vstr	s3, [r7, #16]
	float lambda = dx;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

	if(dx < 2.00){
 80033d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80033d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	d546      	bpl.n	8003474 <calcolo_yaw_rate+0xbc>
		//Correzione dulla dy (funzione lineare trovata sperimentalmente)
		dy += -0.04*dx + 0.08;
 80033e6:	69f8      	ldr	r0, [r7, #28]
 80033e8:	f7fd f8b6 	bl	8000558 <__aeabi_f2d>
 80033ec:	4604      	mov	r4, r0
 80033ee:	460d      	mov	r5, r1
 80033f0:	69b8      	ldr	r0, [r7, #24]
 80033f2:	f7fd f8b1 	bl	8000558 <__aeabi_f2d>
 80033f6:	a3b3      	add	r3, pc, #716	; (adr r3, 80036c4 <calcolo_yaw_rate+0x30c>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f7fd f904 	bl	8000608 <__aeabi_dmul>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	a3b0      	add	r3, pc, #704	; (adr r3, 80036cc <calcolo_yaw_rate+0x314>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f7fc ff45 	bl	800029c <__adddf3>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4620      	mov	r0, r4
 8003418:	4629      	mov	r1, r5
 800341a:	f7fc ff3f 	bl	800029c <__adddf3>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f7fd fbe7 	bl	8000bf8 <__aeabi_d2f>
 800342a:	4603      	mov	r3, r0
 800342c:	61fb      	str	r3, [r7, #28]

		//Approssimazione di lambda utilizzando il teorema di pitagora
		lambda = CORREZIONE_LAMBDA*sqrt(dx*dx + dy*dy);
 800342e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003432:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003436:	edd7 7a07 	vldr	s15, [r7, #28]
 800343a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800343e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003442:	ee17 0a90 	vmov	r0, s15
 8003446:	f7fd f887 	bl	8000558 <__aeabi_f2d>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	ec43 2b10 	vmov	d0, r2, r3
 8003452:	f009 fae3 	bl	800ca1c <sqrt>
 8003456:	ec51 0b10 	vmov	r0, r1, d0
 800345a:	a39e      	add	r3, pc, #632	; (adr r3, 80036d4 <calcolo_yaw_rate+0x31c>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f8d2 	bl	8000608 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fbc4 	bl	8000bf8 <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
	}


	//Caso limite, per non rompere l'andamento
	if(lambda*lambda <= 4 * dy*dy){
 8003474:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003478:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800347c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003480:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003484:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003488:	edd7 7a07 	vldr	s15, [r7, #28]
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	d805      	bhi.n	80034a6 <calcolo_yaw_rate+0xee>
		lambda = 2 * dy;
 800349a:	edd7 7a07 	vldr	s15, [r7, #28]
 800349e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	return (2 * dy * v * PI * cos(PI / 2 - (2 * PI * t * v) / lambda)) /
 80034a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80034aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	ee17 0a90 	vmov	r0, s15
 80034ba:	f7fd f84d 	bl	8000558 <__aeabi_f2d>
 80034be:	a387      	add	r3, pc, #540	; (adr r3, 80036dc <calcolo_yaw_rate+0x324>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f8a0 	bl	8000608 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	6938      	ldr	r0, [r7, #16]
 80034d2:	f7fd f841 	bl	8000558 <__aeabi_f2d>
 80034d6:	a383      	add	r3, pc, #524	; (adr r3, 80036e4 <calcolo_yaw_rate+0x32c>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd f894 	bl	8000608 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4690      	mov	r8, r2
 80034e6:	4699      	mov	r9, r3
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f7fd f835 	bl	8000558 <__aeabi_f2d>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4640      	mov	r0, r8
 80034f4:	4649      	mov	r1, r9
 80034f6:	f7fd f887 	bl	8000608 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4690      	mov	r8, r2
 8003500:	4699      	mov	r9, r3
 8003502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003504:	f7fd f828 	bl	8000558 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4640      	mov	r0, r8
 800350e:	4649      	mov	r1, r9
 8003510:	f7fd f9a4 	bl	800085c <__aeabi_ddiv>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	a174      	add	r1, pc, #464	; (adr r1, 80036ec <calcolo_yaw_rate+0x334>)
 800351a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800351e:	f7fc febb 	bl	8000298 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	ec43 2b17 	vmov	d7, r2, r3
 800352a:	eeb0 0a47 	vmov.f32	s0, s14
 800352e:	eef0 0a67 	vmov.f32	s1, s15
 8003532:	f009 faa1 	bl	800ca78 <cos>
 8003536:	ec53 2b10 	vmov	r2, r3, d0
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fd f863 	bl	8000608 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9c7 2302 	strd	r2, r3, [r7, #8]
			(lambda * lambda * sqrt(1 - pow((dy * v / lambda - (dy * v * sin(PI / 2 - (2 * t * v * PI) / lambda)) / lambda), 2) / (v * v)));
 800354a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800354e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003552:	ee17 0a90 	vmov	r0, s15
 8003556:	f7fc ffff 	bl	8000558 <__aeabi_f2d>
 800355a:	4680      	mov	r8, r0
 800355c:	4689      	mov	r9, r1
 800355e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003562:	edd7 7a05 	vldr	s15, [r7, #20]
 8003566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800356e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003572:	ee16 0a90 	vmov	r0, s13
 8003576:	f7fc ffef 	bl	8000558 <__aeabi_f2d>
 800357a:	4682      	mov	sl, r0
 800357c:	468b      	mov	fp, r1
 800357e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	ee17 0a90 	vmov	r0, s15
 800358e:	f7fc ffe3 	bl	8000558 <__aeabi_f2d>
 8003592:	e9c7 0100 	strd	r0, r1, [r7]
 8003596:	edd7 7a04 	vldr	s15, [r7, #16]
 800359a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800359e:	edd7 7a05 	vldr	s15, [r7, #20]
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	ee17 0a90 	vmov	r0, s15
 80035aa:	f7fc ffd5 	bl	8000558 <__aeabi_f2d>
 80035ae:	a34b      	add	r3, pc, #300	; (adr r3, 80036dc <calcolo_yaw_rate+0x324>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fd f828 	bl	8000608 <__aeabi_dmul>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035c2:	f7fc ffc9 	bl	8000558 <__aeabi_f2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd f945 	bl	800085c <__aeabi_ddiv>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	a145      	add	r1, pc, #276	; (adr r1, 80036ec <calcolo_yaw_rate+0x334>)
 80035d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035dc:	f7fc fe5c 	bl	8000298 <__aeabi_dsub>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	ec43 2b17 	vmov	d7, r2, r3
 80035e8:	eeb0 0a47 	vmov.f32	s0, s14
 80035ec:	eef0 0a67 	vmov.f32	s1, s15
 80035f0:	f009 fa96 	bl	800cb20 <sin>
 80035f4:	ec53 2b10 	vmov	r2, r3, d0
 80035f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fc:	f7fd f804 	bl	8000608 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4614      	mov	r4, r2
 8003606:	461d      	mov	r5, r3
 8003608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800360a:	f7fc ffa5 	bl	8000558 <__aeabi_f2d>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4620      	mov	r0, r4
 8003614:	4629      	mov	r1, r5
 8003616:	f7fd f921 	bl	800085c <__aeabi_ddiv>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4650      	mov	r0, sl
 8003620:	4659      	mov	r1, fp
 8003622:	f7fc fe39 	bl	8000298 <__aeabi_dsub>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	ec43 2b17 	vmov	d7, r2, r3
 800362e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80036b8 <calcolo_yaw_rate+0x300>
 8003632:	eeb0 0a47 	vmov.f32	s0, s14
 8003636:	eef0 0a67 	vmov.f32	s1, s15
 800363a:	f009 f97f 	bl	800c93c <pow>
 800363e:	ec55 4b10 	vmov	r4, r5, d0
 8003642:	edd7 7a05 	vldr	s15, [r7, #20]
 8003646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff83 	bl	8000558 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	f7fd f8ff 	bl	800085c <__aeabi_ddiv>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	f04f 0000 	mov.w	r0, #0
 8003666:	4916      	ldr	r1, [pc, #88]	; (80036c0 <calcolo_yaw_rate+0x308>)
 8003668:	f7fc fe16 	bl	8000298 <__aeabi_dsub>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	ec43 2b17 	vmov	d7, r2, r3
 8003674:	eeb0 0a47 	vmov.f32	s0, s14
 8003678:	eef0 0a67 	vmov.f32	s1, s15
 800367c:	f009 f9ce 	bl	800ca1c <sqrt>
 8003680:	ec53 2b10 	vmov	r2, r3, d0
 8003684:	4640      	mov	r0, r8
 8003686:	4649      	mov	r1, r9
 8003688:	f7fc ffbe 	bl	8000608 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
	return (2 * dy * v * PI * cos(PI / 2 - (2 * PI * t * v) / lambda)) /
 8003690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003694:	f7fd f8e2 	bl	800085c <__aeabi_ddiv>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	f7fd faaa 	bl	8000bf8 <__aeabi_d2f>
 80036a4:	4603      	mov	r3, r0
 80036a6:	ee07 3a90 	vmov	s15, r3
}
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b6:	bf00      	nop
 80036b8:	00000000 	.word	0x00000000
 80036bc:	40000000 	.word	0x40000000
 80036c0:	3ff00000 	.word	0x3ff00000
 80036c4:	47ae147b 	.word	0x47ae147b
 80036c8:	bfa47ae1 	.word	0xbfa47ae1
 80036cc:	47ae147b 	.word	0x47ae147b
 80036d0:	3fb47ae1 	.word	0x3fb47ae1
 80036d4:	147ae148 	.word	0x147ae148
 80036d8:	3ff147ae 	.word	0x3ff147ae
 80036dc:	54524550 	.word	0x54524550
 80036e0:	400921fb 	.word	0x400921fb
 80036e4:	54524550 	.word	0x54524550
 80036e8:	401921fb 	.word	0x401921fb
 80036ec:	54524550 	.word	0x54524550
 80036f0:	3ff921fb 	.word	0x3ff921fb
 80036f4:	00000000 	.word	0x00000000

080036f8 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 8003702:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <servo_motor+0xb8>)
 8003704:	617b      	str	r3, [r7, #20]
	float ccr;
	float conv_angolo;

	if(angolo < MIN_ANGOLO){
 8003706:	edd7 7a01 	vldr	s15, [r7, #4]
 800370a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80037b4 <servo_motor+0xbc>
 800370e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	d502      	bpl.n	800371e <servo_motor+0x26>
		angolo = MIN_ANGOLO;
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <servo_motor+0xc0>)
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	e00a      	b.n	8003734 <servo_motor+0x3c>
	}

	else if (angolo > MAX_ANGOLO){
 800371e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003722:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80037bc <servo_motor+0xc4>
 8003726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	dd01      	ble.n	8003734 <servo_motor+0x3c>
		angolo = MAX_ANGOLO;
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <servo_motor+0xc8>)
 8003732:	607b      	str	r3, [r7, #4]
	}

	conv_angolo = angolo + DRITTO;
 8003734:	edd7 7a01 	vldr	s15, [r7, #4]
 8003738:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80037c4 <servo_motor+0xcc>
 800373c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003740:	edc7 7a04 	vstr	s15, [r7, #16]

	ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8003744:	6938      	ldr	r0, [r7, #16]
 8003746:	f7fc ff07 	bl	8000558 <__aeabi_f2d>
 800374a:	a317      	add	r3, pc, #92	; (adr r3, 80037a8 <servo_motor+0xb0>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc ff5a 	bl	8000608 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <servo_motor+0xd0>)
 8003762:	f7fc fd9b 	bl	800029c <__adddf3>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4614      	mov	r4, r2
 800376c:	461d      	mov	r5, r3
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7fc fef2 	bl	8000558 <__aeabi_f2d>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f7fd f86e 	bl	800085c <__aeabi_ddiv>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	f7fd fa36 	bl	8000bf8 <__aeabi_d2f>
 800378c:	4603      	mov	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=ccr;
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <servo_motor+0xd4>)
 8003792:	edd7 7a03 	vldr	s15, [r7, #12]
 8003796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379a:	ee17 2a90 	vmov	r2, s15
 800379e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037a0:	bf00      	nop
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bdb0      	pop	{r4, r5, r7, pc}
 80037a8:	f544bb1b 	.word	0xf544bb1b
 80037ac:	3f86c0d6 	.word	0x3f86c0d6
 80037b0:	3ca3d70a 	.word	0x3ca3d70a
 80037b4:	c2100000 	.word	0xc2100000
 80037b8:	c2100000 	.word	0xc2100000
 80037bc:	42100000 	.word	0x42100000
 80037c0:	42100000 	.word	0x42100000
 80037c4:	42400000 	.word	0x42400000
 80037c8:	3fe00000 	.word	0x3fe00000
 80037cc:	40010000 	.word	0x40010000

080037d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_MspInit+0x4c>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	4a0f      	ldr	r2, [pc, #60]	; (800381c <HAL_MspInit+0x4c>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_MspInit+0x4c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_MspInit+0x4c>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_MspInit+0x4c>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800380e:	2007      	movs	r0, #7
 8003810:	f000 ff36 	bl	8004680 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800

08003820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <HAL_ADC_MspInit+0x7c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d127      	bne.n	8003892 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_ADC_MspInit+0x80>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800387a:	2302      	movs	r3, #2
 800387c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387e:	2303      	movs	r3, #3
 8003880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4805      	ldr	r0, [pc, #20]	; (80038a4 <HAL_ADC_MspInit+0x84>)
 800388e:	f000 ff39 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003892:	bf00      	nop
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40012000 	.word	0x40012000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020800 	.word	0x40020800

080038a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_I2C_MspInit+0x84>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d12c      	bne.n	8003924 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_I2C_MspInit+0x88>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 80038e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80038ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ec:	2312      	movs	r3, #18
 80038ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038f8:	2304      	movs	r3, #4
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4619      	mov	r1, r3
 8003902:	480c      	ldr	r0, [pc, #48]	; (8003934 <HAL_I2C_MspInit+0x8c>)
 8003904:	f000 fefe 	bl	8004704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_I2C_MspInit+0x88>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_I2C_MspInit+0x88>)
 8003912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_I2C_MspInit+0x88>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003924:	bf00      	nop
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40005400 	.word	0x40005400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400

08003938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d11e      	bne.n	8003988 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2100      	movs	r1, #0
 800396a:	2018      	movs	r0, #24
 800396c:	f000 fe93 	bl	8004696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003970:	2018      	movs	r0, #24
 8003972:	f000 feac 	bl	80046ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	201a      	movs	r0, #26
 800397c:	f000 fe8b 	bl	8004696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003980:	201a      	movs	r0, #26
 8003982:	f000 fea4 	bl	80046ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003986:	e02e      	b.n	80039e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_TIM_Base_MspInit+0xc0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
}
 80039ae:	e01a      	b.n	80039e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_TIM_Base_MspInit+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d115      	bne.n	80039e6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_TIM_Base_MspInit+0xbc>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	201a      	movs	r0, #26
 80039dc:	f000 fe5b 	bl	8004696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80039e0:	201a      	movs	r0, #26
 80039e2:	f000 fe74 	bl	80046ce <HAL_NVIC_EnableIRQ>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40014400 	.word	0x40014400
 80039fc:	40014800 	.word	0x40014800

08003a00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d12b      	bne.n	8003a7a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a76:	f000 fe45 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020000 	.word	0x40020000

08003a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <HAL_TIM_MspPostInit+0xb4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d11f      	bne.n	8003aee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8003aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4818      	ldr	r0, [pc, #96]	; (8003b48 <HAL_TIM_MspPostInit+0xbc>)
 8003ae8:	f000 fe0c 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003aec:	e023      	b.n	8003b36 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIM_MspPostInit+0xc0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d11e      	bne.n	8003b36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	6313      	str	r3, [r2, #48]	; 0x30
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_TIM_MspPostInit+0xb8>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8003b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003b26:	2303      	movs	r3, #3
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4807      	ldr	r0, [pc, #28]	; (8003b50 <HAL_TIM_MspPostInit+0xc4>)
 8003b32:	f000 fde7 	bl	8004704 <HAL_GPIO_Init>
}
 8003b36:	bf00      	nop
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40020400 	.word	0x40020400

08003b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 031c 	add.w	r3, r7, #28
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a32      	ldr	r2, [pc, #200]	; (8003c3c <HAL_UART_MspInit+0xe8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d12c      	bne.n	8003bd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8003bae:	230c      	movs	r3, #12
 8003bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 031c 	add.w	r3, r7, #28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481e      	ldr	r0, [pc, #120]	; (8003c44 <HAL_UART_MspInit+0xf0>)
 8003bca:	f000 fd9b 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003bce:	e030      	b.n	8003c32 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_UART_MspInit+0xf4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d12b      	bne.n	8003c32 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003be4:	f043 0320 	orr.w	r3, r3, #32
 8003be8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_UART_MspInit+0xec>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c12:	23c0      	movs	r3, #192	; 0xc0
 8003c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	2302      	movs	r3, #2
 8003c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c22:	2308      	movs	r3, #8
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c26:	f107 031c 	add.w	r3, r7, #28
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4807      	ldr	r0, [pc, #28]	; (8003c4c <HAL_UART_MspInit+0xf8>)
 8003c2e:	f000 fd69 	bl	8004704 <HAL_GPIO_Init>
}
 8003c32:	bf00      	nop
 8003c34:	3730      	adds	r7, #48	; 0x30
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40020000 	.word	0x40020000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	40020800 	.word	0x40020800

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <NMI_Handler+0x4>

08003c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5a:	e7fe      	b.n	8003c5a <HardFault_Handler+0x4>

08003c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <MemManage_Handler+0x4>

08003c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c66:	e7fe      	b.n	8003c66 <BusFault_Handler+0x4>

08003c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <UsageFault_Handler+0x4>

08003c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c9c:	f000 f97a 	bl	8003f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003caa:	f002 ff79 	bl	8006ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200002b4 	.word	0x200002b4

08003cb8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cbc:	4803      	ldr	r0, [pc, #12]	; (8003ccc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003cbe:	f002 ff6f 	bl	8006ba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003cc2:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003cc4:	f002 ff6c 	bl	8006ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200002b4 	.word	0x200002b4
 8003cd0:	2000038c 	.word	0x2000038c

08003cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003cd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003cdc:	f000 fee2 	bl	8004aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ce0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ce4:	f000 fede 	bl	8004aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return 1;
 8003cf0:	2301      	movs	r3, #1
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_kill>:

int _kill(int pid, int sig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d06:	f006 f9af 	bl	800a068 <__errno>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2216      	movs	r2, #22
 8003d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_exit>:

void _exit (int status)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffe7 	bl	8003cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d2e:	e7fe      	b.n	8003d2e <_exit+0x12>

08003d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00a      	b.n	8003d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d42:	f3af 8000 	nop.w
 8003d46:	4601      	mov	r1, r0
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	60ba      	str	r2, [r7, #8]
 8003d4e:	b2ca      	uxtb	r2, r1
 8003d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dbf0      	blt.n	8003d42 <_read+0x12>
  }

  return len;
 8003d60:	687b      	ldr	r3, [r7, #4]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e009      	b.n	8003d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	60ba      	str	r2, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fa5f 	bl	8003248 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	dbf1      	blt.n	8003d7c <_write+0x12>
  }
  return len;
 8003d98:	687b      	ldr	r3, [r7, #4]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_close>:

int _close(int file)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dca:	605a      	str	r2, [r3, #4]
  return 0;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_isatty>:

int _isatty(int file)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <_sbrk+0x5c>)
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <_sbrk+0x60>)
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <_sbrk+0x64>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <_sbrk+0x64>)
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <_sbrk+0x68>)
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d207      	bcs.n	8003e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e3c:	f006 f914 	bl	800a068 <__errno>
 8003e40:	4603      	mov	r3, r0
 8003e42:	220c      	movs	r2, #12
 8003e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	e009      	b.n	8003e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <_sbrk+0x64>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <_sbrk+0x64>)
 8003e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20018000 	.word	0x20018000
 8003e6c:	00000400 	.word	0x00000400
 8003e70:	20000590 	.word	0x20000590
 8003e74:	200006e8 	.word	0x200006e8

08003e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <SystemInit+0x20>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <SystemInit+0x20>)
 8003e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ec6:	f7ff ffd7 	bl	8003e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eca:	f006 f8d3 	bl	800a074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ece:	f7fd fced 	bl	80018ac <main>
  bx  lr    
 8003ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ed4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003ee0:	0800f110 	.word	0x0800f110
  ldr r2, =_sbss
 8003ee4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003ee8:	200006e4 	.word	0x200006e4

08003eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>
	...

08003ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_Init+0x40>)
 8003efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_Init+0x40>)
 8003f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_Init+0x40>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_Init+0x40>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 fbb1 	bl	8004680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f000 f808 	bl	8003f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f24:	f7ff fc54 	bl	80037d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_InitTick+0x54>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_InitTick+0x58>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fbc9 	bl	80046ea <HAL_SYSTICK_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e00e      	b.n	8003f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d80a      	bhi.n	8003f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	f000 fb91 	bl	8004696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f74:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <HAL_InitTick+0x5c>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000010 	.word	0x20000010
 8003f8c:	20000018 	.word	0x20000018
 8003f90:	20000014 	.word	0x20000014

08003f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_IncTick+0x20>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000018 	.word	0x20000018
 8003fb8:	20000594 	.word	0x20000594

08003fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_GetTick+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000594 	.word	0x20000594

08003fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff ffee 	bl	8003fbc <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d005      	beq.n	8003ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_Delay+0x44>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffa:	bf00      	nop
 8003ffc:	f7ff ffde 	bl	8003fbc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f7      	bhi.n	8003ffc <HAL_Delay+0x28>
  {
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000018 	.word	0x20000018

0800401c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e033      	b.n	800409a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fbf0 	bl	8003820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004062:	f023 0302 	bic.w	r3, r3, #2
 8004066:	f043 0202 	orr.w	r2, r3, #2
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f93a 	bl	80042e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
 800408a:	e001      	b.n	8004090 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e105      	b.n	80042cc <HAL_ADC_ConfigChannel+0x228>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d925      	bls.n	800411c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	3b1e      	subs	r3, #30
 80040e6:	2207      	movs	r2, #7
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43da      	mvns	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	400a      	ands	r2, r1
 80040f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4618      	mov	r0, r3
 8004108:	4603      	mov	r3, r0
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4403      	add	r3, r0
 800410e:	3b1e      	subs	r3, #30
 8004110:	409a      	lsls	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e022      	b.n	8004162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	2207      	movs	r2, #7
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	400a      	ands	r2, r1
 800413e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	4603      	mov	r3, r0
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4403      	add	r3, r0
 8004158:	409a      	lsls	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b06      	cmp	r3, #6
 8004168:	d824      	bhi.n	80041b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b05      	subs	r3, #5
 800417c:	221f      	movs	r2, #31
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b05      	subs	r3, #5
 80041a6:	fa00 f203 	lsl.w	r2, r0, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
 80041b2:	e04c      	b.n	800424e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d824      	bhi.n	8004206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b23      	subs	r3, #35	; 0x23
 80041ce:	221f      	movs	r2, #31
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43da      	mvns	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	400a      	ands	r2, r1
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	3b23      	subs	r3, #35	; 0x23
 80041f8:	fa00 f203 	lsl.w	r2, r0, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
 8004204:	e023      	b.n	800424e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	3b41      	subs	r3, #65	; 0x41
 8004218:	221f      	movs	r2, #31
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	400a      	ands	r2, r1
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	4618      	mov	r0, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	3b41      	subs	r3, #65	; 0x41
 8004242:	fa00 f203 	lsl.w	r2, r0, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_ADC_ConfigChannel+0x234>)
 8004250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <HAL_ADC_ConfigChannel+0x238>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d109      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x1cc>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b12      	cmp	r3, #18
 8004262:	d105      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_ADC_ConfigChannel+0x238>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d123      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b10      	cmp	r3, #16
 8004280:	d003      	beq.n	800428a <HAL_ADC_ConfigChannel+0x1e6>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b11      	cmp	r3, #17
 8004288:	d11b      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d111      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <HAL_ADC_ConfigChannel+0x23c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <HAL_ADC_ConfigChannel+0x240>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0c9a      	lsrs	r2, r3, #18
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042b4:	e002      	b.n	80042bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f9      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40012300 	.word	0x40012300
 80042dc:	40012000 	.word	0x40012000
 80042e0:	20000010 	.word	0x20000010
 80042e4:	431bde83 	.word	0x431bde83

080042e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f0:	4b79      	ldr	r3, [pc, #484]	; (80044d8 <ADC_Init+0x1f0>)
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	021a      	lsls	r2, r3, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	4a58      	ldr	r2, [pc, #352]	; (80044dc <ADC_Init+0x1f4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800438e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6899      	ldr	r1, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	e00f      	b.n	80043e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0202 	bic.w	r2, r2, #2
 80043f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7e1b      	ldrb	r3, [r3, #24]
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	3b01      	subs	r3, #1
 8004440:	035a      	lsls	r2, r3, #13
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	e007      	b.n	800445c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	3b01      	subs	r3, #1
 8004478:	051a      	lsls	r2, r3, #20
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800449e:	025a      	lsls	r2, r3, #9
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6899      	ldr	r1, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	029a      	lsls	r2, r3, #10
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012300 	.word	0x40012300
 80044dc:	0f000001 	.word	0x0f000001

080044e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <__NVIC_SetPriorityGrouping+0x44>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044fc:	4013      	ands	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800450c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004512:	4a04      	ldr	r2, [pc, #16]	; (8004524 <__NVIC_SetPriorityGrouping+0x44>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	60d3      	str	r3, [r2, #12]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <__NVIC_GetPriorityGrouping+0x18>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	f003 0307 	and.w	r3, r3, #7
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db0b      	blt.n	800456e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <__NVIC_EnableIRQ+0x38>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2001      	movs	r0, #1
 8004566:	fa00 f202 	lsl.w	r2, r0, r2
 800456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000e100 	.word	0xe000e100

08004580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db0a      	blt.n	80045aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	490c      	ldr	r1, [pc, #48]	; (80045cc <__NVIC_SetPriority+0x4c>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	440b      	add	r3, r1
 80045a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a8:	e00a      	b.n	80045c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4908      	ldr	r1, [pc, #32]	; (80045d0 <__NVIC_SetPriority+0x50>)
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	3b04      	subs	r3, #4
 80045b8:	0112      	lsls	r2, r2, #4
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	440b      	add	r3, r1
 80045be:	761a      	strb	r2, [r3, #24]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000e100 	.word	0xe000e100
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f1c3 0307 	rsb	r3, r3, #7
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf28      	it	cs
 80045f2:	2304      	movcs	r3, #4
 80045f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d902      	bls.n	8004604 <NVIC_EncodePriority+0x30>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3b03      	subs	r3, #3
 8004602:	e000      	b.n	8004606 <NVIC_EncodePriority+0x32>
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	401a      	ands	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800461c:	f04f 31ff 	mov.w	r1, #4294967295
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43d9      	mvns	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800462c:	4313      	orrs	r3, r2
         );
}
 800462e:	4618      	mov	r0, r3
 8004630:	3724      	adds	r7, #36	; 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800464c:	d301      	bcc.n	8004652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800464e:	2301      	movs	r3, #1
 8004650:	e00f      	b.n	8004672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <SysTick_Config+0x40>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800465a:	210f      	movs	r1, #15
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	f7ff ff8e 	bl	8004580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <SysTick_Config+0x40>)
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <SysTick_Config+0x40>)
 800466c:	2207      	movs	r2, #7
 800466e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	e000e010 	.word	0xe000e010

08004680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff29 	bl	80044e0 <__NVIC_SetPriorityGrouping>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a8:	f7ff ff3e 	bl	8004528 <__NVIC_GetPriorityGrouping>
 80046ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff ff8e 	bl	80045d4 <NVIC_EncodePriority>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff5d 	bl	8004580 <__NVIC_SetPriority>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff31 	bl	8004544 <__NVIC_EnableIRQ>
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff ffa2 	bl	800463c <SysTick_Config>
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e159      	b.n	80049d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004720:	2201      	movs	r2, #1
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	f040 8148 	bne.w	80049ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d005      	beq.n	8004756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004752:	2b02      	cmp	r3, #2
 8004754:	d130      	bne.n	80047b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	2203      	movs	r2, #3
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800478c:	2201      	movs	r2, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 0201 	and.w	r2, r3, #1
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d017      	beq.n	80047f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	2203      	movs	r2, #3
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d123      	bne.n	8004848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	220f      	movs	r2, #15
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	08da      	lsrs	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3208      	adds	r2, #8
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0203 	and.w	r2, r3, #3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a2 	beq.w	80049ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b57      	ldr	r3, [pc, #348]	; (80049ec <HAL_GPIO_Init+0x2e8>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	4a56      	ldr	r2, [pc, #344]	; (80049ec <HAL_GPIO_Init+0x2e8>)
 8004894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004898:	6453      	str	r3, [r2, #68]	; 0x44
 800489a:	4b54      	ldr	r3, [pc, #336]	; (80049ec <HAL_GPIO_Init+0x2e8>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a6:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_GPIO_Init+0x2ec>)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <HAL_GPIO_Init+0x2f0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d019      	beq.n	8004906 <HAL_GPIO_Init+0x202>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_GPIO_Init+0x2f4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <HAL_GPIO_Init+0x1fe>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a47      	ldr	r2, [pc, #284]	; (80049fc <HAL_GPIO_Init+0x2f8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00d      	beq.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a46      	ldr	r2, [pc, #280]	; (8004a00 <HAL_GPIO_Init+0x2fc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <HAL_GPIO_Init+0x1f6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a45      	ldr	r2, [pc, #276]	; (8004a04 <HAL_GPIO_Init+0x300>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_GPIO_Init+0x1f2>
 80048f2:	2304      	movs	r3, #4
 80048f4:	e008      	b.n	8004908 <HAL_GPIO_Init+0x204>
 80048f6:	2307      	movs	r3, #7
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x204>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e004      	b.n	8004908 <HAL_GPIO_Init+0x204>
 80048fe:	2302      	movs	r3, #2
 8004900:	e002      	b.n	8004908 <HAL_GPIO_Init+0x204>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_GPIO_Init+0x204>
 8004906:	2300      	movs	r3, #0
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f002 0203 	and.w	r2, r2, #3
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	4093      	lsls	r3, r2
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004918:	4935      	ldr	r1, [pc, #212]	; (80049f0 <HAL_GPIO_Init+0x2ec>)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_GPIO_Init+0x304>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494a:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <HAL_GPIO_Init+0x304>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004950:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <HAL_GPIO_Init+0x304>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004974:	4a24      	ldr	r2, [pc, #144]	; (8004a08 <HAL_GPIO_Init+0x304>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800497a:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <HAL_GPIO_Init+0x304>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800499e:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <HAL_GPIO_Init+0x304>)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_GPIO_Init+0x304>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c8:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <HAL_GPIO_Init+0x304>)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	f67f aea2 	bls.w	8004720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40020800 	.word	0x40020800
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e001      	b.n	8004a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a4c:	787b      	ldrb	r3, [r7, #1]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a58:	e003      	b.n	8004a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	041a      	lsls	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	619a      	str	r2, [r3, #24]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a80:	887a      	ldrh	r2, [r7, #2]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4013      	ands	r3, r2
 8004a86:	041a      	lsls	r2, r3, #16
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43d9      	mvns	r1, r3
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	400b      	ands	r3, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d006      	beq.n	8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe fb44 	bl	8003150 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40013c00 	.word	0x40013c00

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e12b      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fe fed4 	bl	80038a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b38:	f001 fd1a 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d807      	bhi.n	8004b58 <HAL_I2C_Init+0x84>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_I2C_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e006      	b.n	8004b66 <HAL_I2C_Init+0x92>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_I2C_Init+0x27c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bf94      	ite	ls
 8004b60:	2301      	movls	r3, #1
 8004b62:	2300      	movhi	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e7      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a78      	ldr	r2, [pc, #480]	; (8004d54 <HAL_I2C_Init+0x280>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0c9b      	lsrs	r3, r3, #18
 8004b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <HAL_I2C_Init+0xd4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	e009      	b.n	8004bbc <HAL_I2C_Init+0xe8>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_I2C_Init+0x284>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	3301      	adds	r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	495c      	ldr	r1, [pc, #368]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d819      	bhi.n	8004c10 <HAL_I2C_Init+0x13c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e59      	subs	r1, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_I2C_Init+0x138>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e59      	subs	r1, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	e051      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e04f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_I2C_Init+0x168>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e012      	b.n	8004c62 <HAL_I2C_Init+0x18e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	0099      	lsls	r1, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Init+0x196>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <HAL_I2C_Init+0x1bc>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e58      	subs	r0, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	0099      	lsls	r1, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6911      	ldr	r1, [r2, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68d2      	ldr	r2, [r2, #12]
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	000186a0 	.word	0x000186a0
 8004d4c:	001e847f 	.word	0x001e847f
 8004d50:	003d08ff 	.word	0x003d08ff
 8004d54:	431bde83 	.word	0x431bde83
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	461a      	mov	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	817b      	strh	r3, [r7, #10]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7ff f924 	bl	8003fbc <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	f040 80e0 	bne.w	8004f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2319      	movs	r3, #25
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4970      	ldr	r1, [pc, #448]	; (8004f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fda0 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0d3      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_I2C_Master_Transmit+0x50>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e0cc      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d007      	beq.n	8004dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2221      	movs	r2, #33	; 0x21
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2210      	movs	r2, #16
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	893a      	ldrh	r2, [r7, #8]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a50      	ldr	r2, [pc, #320]	; (8004f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fc0a 	bl	8005634 <I2C_MasterRequestWrite>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e08d      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e40:	e066      	b.n	8004f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fe1a 	bl	8005a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06b      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_I2C_Master_Transmit+0x188>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	6a39      	ldr	r1, [r7, #32]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fe0a 	bl	8005b02 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d107      	bne.n	8004f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e01a      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d194      	bne.n	8004e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	00100002 	.word	0x00100002
 8004f54:	ffff0000 	.word	0xffff0000

08004f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	461a      	mov	r2, r3
 8004f64:	460b      	mov	r3, r1
 8004f66:	817b      	strh	r3, [r7, #10]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f6c:	f7ff f826 	bl	8003fbc <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	f040 820b 	bne.w	8005396 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	2319      	movs	r3, #25
 8004f86:	2201      	movs	r2, #1
 8004f88:	497c      	ldr	r1, [pc, #496]	; (800517c <HAL_I2C_Master_Receive+0x224>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fca2 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e1fe      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2C_Master_Receive+0x50>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e1f7      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d007      	beq.n	8004fce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2222      	movs	r2, #34	; 0x22
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	893a      	ldrh	r2, [r7, #8]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <HAL_I2C_Master_Receive+0x228>)
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005010:	8979      	ldrh	r1, [r7, #10]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb8e 	bl	8005738 <I2C_MasterRequestRead>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e1b8      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d113      	bne.n	8005056 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e18c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d11b      	bne.n	8005096 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e16c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	2b02      	cmp	r3, #2
 800509c:	d11b      	bne.n	80050d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	e14c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050fc:	e138      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b03      	cmp	r3, #3
 8005104:	f200 80f1 	bhi.w	80052ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	2b01      	cmp	r3, #1
 800510e:	d123      	bne.n	8005158 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fd35 	bl	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e139      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005156:	e10b      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	2b02      	cmp	r3, #2
 800515e:	d14e      	bne.n	80051fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2200      	movs	r2, #0
 8005168:	4906      	ldr	r1, [pc, #24]	; (8005184 <HAL_I2C_Master_Receive+0x22c>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fbb2 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e10e      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
 800517a:	bf00      	nop
 800517c:	00100002 	.word	0x00100002
 8005180:	ffff0000 	.word	0xffff0000
 8005184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051fc:	e0b8      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	4966      	ldr	r1, [pc, #408]	; (80053a0 <HAL_I2C_Master_Receive+0x448>)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fb63 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0bf      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	494f      	ldr	r1, [pc, #316]	; (80053a0 <HAL_I2C_Master_Receive+0x448>)
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fb35 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e091      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e8:	e042      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fc48 	bl	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e04c      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d118      	bne.n	8005370 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f aec2 	bne.w	80050fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	00010004 	.word	0x00010004

080053a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	460b      	mov	r3, r1
 80053b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7fe fe02 	bl	8003fbc <HAL_GetTick>
 80053b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	f040 8111 	bne.w	80055ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2319      	movs	r3, #25
 80053d2:	2201      	movs	r2, #1
 80053d4:	4988      	ldr	r1, [pc, #544]	; (80055f8 <HAL_I2C_IsDeviceReady+0x254>)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa7c 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
 80053e4:	e104      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_I2C_IsDeviceReady+0x50>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e0fd      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d007      	beq.n	800541a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2224      	movs	r2, #36	; 0x24
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a70      	ldr	r2, [pc, #448]	; (80055fc <HAL_I2C_IsDeviceReady+0x258>)
 800543c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa3a 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005474:	d103      	bne.n	800547e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0b6      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005490:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005492:	f7fe fd93 	bl	8003fbc <HAL_GetTick>
 8005496:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054c6:	e025      	b.n	8005514 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fe fd78 	bl	8003fbc <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <HAL_I2C_IsDeviceReady+0x13a>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	22a0      	movs	r2, #160	; 0xa0
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2ba0      	cmp	r3, #160	; 0xa0
 800551e:	d005      	beq.n	800552c <HAL_I2C_IsDeviceReady+0x188>
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <HAL_I2C_IsDeviceReady+0x188>
 8005526:	7dbb      	ldrb	r3, [r7, #22]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0cd      	beq.n	80054c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d129      	bne.n	8005596 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2319      	movs	r3, #25
 800556e:	2201      	movs	r2, #1
 8005570:	4921      	ldr	r1, [pc, #132]	; (80055f8 <HAL_I2C_IsDeviceReady+0x254>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f9ae 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e036      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e02c      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2319      	movs	r3, #25
 80055b6:	2201      	movs	r2, #1
 80055b8:	490f      	ldr	r1, [pc, #60]	; (80055f8 <HAL_I2C_IsDeviceReady+0x254>)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f98a 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e012      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	f4ff af32 	bcc.w	800543e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	00100002 	.word	0x00100002
 80055fc:	ffff0000 	.word	0xffff0000

08005600 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	460b      	mov	r3, r1
 8005642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d006      	beq.n	800565e <I2C_MasterRequestWrite+0x2a>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d003      	beq.n	800565e <I2C_MasterRequestWrite+0x2a>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800565c:	d108      	bne.n	8005670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e00b      	b.n	8005688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	2b12      	cmp	r3, #18
 8005676:	d107      	bne.n	8005688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f91d 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ae:	d103      	bne.n	80056b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e035      	b.n	8005728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c4:	d108      	bne.n	80056d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d4:	611a      	str	r2, [r3, #16]
 80056d6:	e01b      	b.n	8005710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056d8:	897b      	ldrh	r3, [r7, #10]
 80056da:	11db      	asrs	r3, r3, #7
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 0306 	and.w	r3, r3, #6
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f063 030f 	orn	r3, r3, #15
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <I2C_MasterRequestWrite+0xfc>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f943 	bl	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e010      	b.n	8005728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005706:	897b      	ldrh	r3, [r7, #10]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4907      	ldr	r1, [pc, #28]	; (8005734 <I2C_MasterRequestWrite+0x100>)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f933 	bl	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	00010008 	.word	0x00010008
 8005734:	00010002 	.word	0x00010002

08005738 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	460b      	mov	r3, r1
 8005746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800575c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d006      	beq.n	8005772 <I2C_MasterRequestRead+0x3a>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d003      	beq.n	8005772 <I2C_MasterRequestRead+0x3a>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005770:	d108      	bne.n	8005784 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e00b      	b.n	800579c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	2b11      	cmp	r3, #17
 800578a:	d107      	bne.n	800579c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f893 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d103      	bne.n	80057cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e079      	b.n	80058c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d108      	bne.n	80057ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057da:	897b      	ldrh	r3, [r7, #10]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	611a      	str	r2, [r3, #16]
 80057ea:	e05f      	b.n	80058ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057ec:	897b      	ldrh	r3, [r7, #10]
 80057ee:	11db      	asrs	r3, r3, #7
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 0306 	and.w	r3, r3, #6
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f063 030f 	orn	r3, r3, #15
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4930      	ldr	r1, [pc, #192]	; (80058cc <I2C_MasterRequestRead+0x194>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f8b9 	bl	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e054      	b.n	80058c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800581a:	897b      	ldrh	r3, [r7, #10]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4929      	ldr	r1, [pc, #164]	; (80058d0 <I2C_MasterRequestRead+0x198>)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f8a9 	bl	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e044      	b.n	80058c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f831 	bl	80058d4 <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00d      	beq.n	8005894 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005886:	d103      	bne.n	8005890 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e017      	b.n	80058c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005894:	897b      	ldrh	r3, [r7, #10]
 8005896:	11db      	asrs	r3, r3, #7
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f003 0306 	and.w	r3, r3, #6
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f063 030e 	orn	r3, r3, #14
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4907      	ldr	r1, [pc, #28]	; (80058d0 <I2C_MasterRequestRead+0x198>)
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f865 	bl	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	00010008 	.word	0x00010008
 80058d0:	00010002 	.word	0x00010002

080058d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e4:	e025      	b.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d021      	beq.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fe fb65 	bl	8003fbc <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d116      	bne.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e023      	b.n	800597a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10d      	bne.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x84>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	e00c      	b.n	8005972 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	43da      	mvns	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d0b6      	beq.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005990:	e051      	b.n	8005a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a0:	d123      	bne.n	80059ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f043 0204 	orr.w	r2, r3, #4
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e046      	b.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d021      	beq.n	8005a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f2:	f7fe fae3 	bl	8003fbc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e020      	b.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10c      	bne.n	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	e00b      	b.n	8005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	43da      	mvns	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4013      	ands	r3, r2
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d18d      	bne.n	8005992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8c:	e02d      	b.n	8005aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f8ce 	bl	8005c30 <I2C_IsAcknowledgeFailed>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e02d      	b.n	8005afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d021      	beq.n	8005aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa6:	f7fe fa89 	bl	8003fbc <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d302      	bcc.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d116      	bne.n	8005aea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e007      	b.n	8005afa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	d1ca      	bne.n	8005a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b0e:	e02d      	b.n	8005b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f88d 	bl	8005c30 <I2C_IsAcknowledgeFailed>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e02d      	b.n	8005b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d021      	beq.n	8005b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b28:	f7fe fa48 	bl	8003fbc <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e007      	b.n	8005b7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d1ca      	bne.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b90:	e042      	b.n	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d119      	bne.n	8005bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e029      	b.n	8005c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7fe f9f2 	bl	8003fbc <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d116      	bne.n	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e007      	b.n	8005c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d1b5      	bne.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c46:	d11b      	bne.n	8005c80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	f043 0204 	orr.w	r2, r3, #4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e267      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d075      	beq.n	8005d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cae:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cba:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d112      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc6:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	4b7e      	ldr	r3, [pc, #504]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x108>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d157      	bne.n	8005d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e242      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_OscConfig+0x74>
 8005cf6:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a75      	ldr	r2, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e01d      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x98>
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6f      	ldr	r2, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a68      	ldr	r2, [pc, #416]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a65      	ldr	r2, [pc, #404]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fe f938 	bl	8003fbc <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fe f934 	bl	8003fbc <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e207      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b5b      	ldr	r3, [pc, #364]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0xc0>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7fe f924 	bl	8003fbc <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fe f920 	bl	8003fbc <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e1f3      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8a:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0xe8>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d063      	beq.n	8005e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d11c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d116      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e1c7      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4937      	ldr	r1, [pc, #220]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df6:	e03a      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e00:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fe f8d9 	bl	8003fbc <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e0e:	f7fe f8d5 	bl	8003fbc <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1a8      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
 8005e40:	e015      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fe f8b8 	bl	8003fbc <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e50:	f7fe f8b4 	bl	8003fbc <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e187      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d036      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fe f898 	bl	8003fbc <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e90:	f7fe f894 	bl	8003fbc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e167      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x200>
 8005eae:	e01b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb6:	f7fe f881 	bl	8003fbc <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ebc:	e00e      	b.n	8005edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fe f87d 	bl	8003fbc <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d907      	bls.n	8005edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e150      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	42470000 	.word	0x42470000
 8005ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	4b88      	ldr	r3, [pc, #544]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1ea      	bne.n	8005ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8097 	beq.w	8006024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efa:	4b81      	ldr	r3, [pc, #516]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10f      	bne.n	8005f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a7c      	ldr	r2, [pc, #496]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f26:	4b77      	ldr	r3, [pc, #476]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f32:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fe f83d 	bl	8003fbc <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fe f839 	bl	8003fbc <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e10c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCC_OscConfig+0x2ea>
 8005f6c:	4b64      	ldr	r3, [pc, #400]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a63      	ldr	r2, [pc, #396]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	e01c      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x30c>
 8005f82:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a5e      	ldr	r2, [pc, #376]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 0304 	orr.w	r3, r3, #4
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a5b      	ldr	r2, [pc, #364]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f9c:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a57      	ldr	r2, [pc, #348]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	4b55      	ldr	r3, [pc, #340]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fae:	f023 0304 	bic.w	r3, r3, #4
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fd fffe 	bl	8003fbc <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fd fffa 	bl	8003fbc <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0cb      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	4b49      	ldr	r3, [pc, #292]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x334>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fd ffe8 	bl	8003fbc <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fd ffe4 	bl	8003fbc <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e0b5      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ee      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d105      	bne.n	8006024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006018:	4b39      	ldr	r3, [pc, #228]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	4a38      	ldr	r2, [pc, #224]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a1 	beq.w	8006170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800602e:	4b34      	ldr	r3, [pc, #208]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b08      	cmp	r3, #8
 8006038:	d05c      	beq.n	80060f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d141      	bne.n	80060c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd ffb8 	bl	8003fbc <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fd ffb4 	bl	8003fbc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e087      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	019b      	lsls	r3, r3, #6
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	3b01      	subs	r3, #1
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	491b      	ldr	r1, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fd ff8d 	bl	8003fbc <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fd ff89 	bl	8003fbc <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e05c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x416>
 80060c4:	e054      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fd ff76 	bl	8003fbc <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fd ff72 	bl	8003fbc <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e045      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x444>
 80060f2:	e03d      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e038      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8006100:	40023800 	.word	0x40023800
 8006104:	40007000 	.word	0x40007000
 8006108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x4ec>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d028      	beq.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d121      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d11a      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	3b01      	subs	r3, #1
 8006156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0cc      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d90c      	bls.n	80061bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b65      	ldr	r3, [pc, #404]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061aa:	4b63      	ldr	r3, [pc, #396]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0b8      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ec:	4b53      	ldr	r3, [pc, #332]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a52      	ldr	r2, [pc, #328]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	494d      	ldr	r1, [pc, #308]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d044      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621e:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d119      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e07f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d003      	beq.n	800623e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623a:	2b03      	cmp	r3, #3
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623e:	4b3f      	ldr	r3, [pc, #252]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e06f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e067      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4934      	ldr	r1, [pc, #208]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006270:	f7fd fea4 	bl	8003fbc <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fd fea0 	bl	8003fbc <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e04f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 020c 	and.w	r2, r3, #12
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	429a      	cmp	r2, r3
 800629e:	d1eb      	bne.n	8006278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20c      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e032      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d4:	4b19      	ldr	r3, [pc, #100]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4916      	ldr	r1, [pc, #88]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	490e      	ldr	r1, [pc, #56]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006306:	f000 f821 	bl	800634c <HAL_RCC_GetSysClockFreq>
 800630a:	4602      	mov	r2, r0
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	490a      	ldr	r1, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	5ccb      	ldrb	r3, [r1, r3]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_ClockConfig+0x1c8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd fe04 	bl	8003f34 <HAL_InitTick>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40023c00 	.word	0x40023c00
 800633c:	40023800 	.word	0x40023800
 8006340:	0800eab0 	.word	0x0800eab0
 8006344:	20000010 	.word	0x20000010
 8006348:	20000014 	.word	0x20000014

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006350:	b094      	sub	sp, #80	; 0x50
 8006352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
 8006358:	2300      	movs	r3, #0
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635c:	2300      	movs	r3, #0
 800635e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d00d      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x40>
 8006370:	2b08      	cmp	r3, #8
 8006372:	f200 80e1 	bhi.w	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0x34>
 800637a:	2b04      	cmp	r3, #4
 800637c:	d003      	beq.n	8006386 <HAL_RCC_GetSysClockFreq+0x3a>
 800637e:	e0db      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006384:	e0db      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006386:	4b73      	ldr	r3, [pc, #460]	; (8006554 <HAL_RCC_GetSysClockFreq+0x208>)
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800638a:	e0d8      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800638c:	4b6f      	ldr	r3, [pc, #444]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006396:	4b6d      	ldr	r3, [pc, #436]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a2:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	2200      	movs	r2, #0
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	0159      	lsls	r1, r3, #5
 80063cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d0:	0150      	lsls	r0, r2, #5
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4621      	mov	r1, r4
 80063d8:	1a51      	subs	r1, r2, r1
 80063da:	6139      	str	r1, [r7, #16]
 80063dc:	4629      	mov	r1, r5
 80063de:	eb63 0301 	sbc.w	r3, r3, r1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f0:	4659      	mov	r1, fp
 80063f2:	018b      	lsls	r3, r1, #6
 80063f4:	4651      	mov	r1, sl
 80063f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063fa:	4651      	mov	r1, sl
 80063fc:	018a      	lsls	r2, r1, #6
 80063fe:	4651      	mov	r1, sl
 8006400:	ebb2 0801 	subs.w	r8, r2, r1
 8006404:	4659      	mov	r1, fp
 8006406:	eb63 0901 	sbc.w	r9, r3, r1
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800641a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800641e:	4690      	mov	r8, r2
 8006420:	4699      	mov	r9, r3
 8006422:	4623      	mov	r3, r4
 8006424:	eb18 0303 	adds.w	r3, r8, r3
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	462b      	mov	r3, r5
 800642c:	eb49 0303 	adc.w	r3, r9, r3
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800643e:	4629      	mov	r1, r5
 8006440:	024b      	lsls	r3, r1, #9
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006448:	4621      	mov	r1, r4
 800644a:	024a      	lsls	r2, r1, #9
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
 8006456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800645c:	f7fa fc1c 	bl	8000c98 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4613      	mov	r3, r2
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006468:	e058      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	099b      	lsrs	r3, r3, #6
 8006470:	2200      	movs	r2, #0
 8006472:	4618      	mov	r0, r3
 8006474:	4611      	mov	r1, r2
 8006476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
 8006480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	f04f 0000 	mov.w	r0, #0
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	0159      	lsls	r1, r3, #5
 8006492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006496:	0150      	lsls	r0, r2, #5
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4641      	mov	r1, r8
 800649e:	ebb2 0a01 	subs.w	sl, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064bc:	ebb2 040a 	subs.w	r4, r2, sl
 80064c0:	eb63 050b 	sbc.w	r5, r3, fp
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	00eb      	lsls	r3, r5, #3
 80064ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064d2:	00e2      	lsls	r2, r4, #3
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	4643      	mov	r3, r8
 80064da:	18e3      	adds	r3, r4, r3
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	464b      	mov	r3, r9
 80064e0:	eb45 0303 	adc.w	r3, r5, r3
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064f2:	4629      	mov	r1, r5
 80064f4:	028b      	lsls	r3, r1, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064fc:	4621      	mov	r1, r4
 80064fe:	028a      	lsls	r2, r1, #10
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	61fa      	str	r2, [r7, #28]
 800650c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006510:	f7fa fbc2 	bl	8000c98 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	3301      	adds	r3, #1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800652c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006536:	e002      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800653c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006540:	4618      	mov	r0, r3
 8006542:	3750      	adds	r7, #80	; 0x50
 8006544:	46bd      	mov	sp, r7
 8006546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	00f42400 	.word	0x00f42400
 8006554:	007a1200 	.word	0x007a1200

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_RCC_GetHCLKFreq+0x14>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000010 	.word	0x20000010

08006570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006574:	f7ff fff0 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0a9b      	lsrs	r3, r3, #10
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800eac0 	.word	0x0800eac0

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800659c:	f7ff ffdc 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0b5b      	lsrs	r3, r3, #13
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	0800eac0 	.word	0x0800eac0

080065c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e041      	b.n	8006656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fd f9a6 	bl	8003938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 fd88 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d001      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e044      	b.n	8006702 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <HAL_TIM_Base_Start_IT+0xb0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x6c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d013      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x6c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_TIM_Base_Start_IT+0xb4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x6c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_TIM_Base_Start_IT+0xb8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x6c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <HAL_TIM_Base_Start_IT+0xbc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x6c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_TIM_Base_Start_IT+0xc0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d111      	bne.n	80066f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d010      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	e007      	b.n	8006700 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40014000 	.word	0x40014000

08006724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e041      	b.n	80067ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f839 	bl	80067c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f000 fcd6 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_TIM_PWM_Start+0x24>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	bf14      	ite	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	2300      	moveq	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e022      	b.n	8006842 <HAL_TIM_PWM_Start+0x6a>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d109      	bne.n	8006816 <HAL_TIM_PWM_Start+0x3e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b01      	cmp	r3, #1
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	e015      	b.n	8006842 <HAL_TIM_PWM_Start+0x6a>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d109      	bne.n	8006830 <HAL_TIM_PWM_Start+0x58>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e008      	b.n	8006842 <HAL_TIM_PWM_Start+0x6a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e068      	b.n	800691c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_TIM_PWM_Start+0x82>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006858:	e013      	b.n	8006882 <HAL_TIM_PWM_Start+0xaa>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b04      	cmp	r3, #4
 800685e:	d104      	bne.n	800686a <HAL_TIM_PWM_Start+0x92>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006868:	e00b      	b.n	8006882 <HAL_TIM_PWM_Start+0xaa>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b08      	cmp	r3, #8
 800686e:	d104      	bne.n	800687a <HAL_TIM_PWM_Start+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	e003      	b.n	8006882 <HAL_TIM_PWM_Start+0xaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2201      	movs	r2, #1
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fee8 	bl	8007660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a23      	ldr	r2, [pc, #140]	; (8006924 <HAL_TIM_PWM_Start+0x14c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d107      	bne.n	80068aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <HAL_TIM_PWM_Start+0x14c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d018      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x10e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d013      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x10e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a19      	ldr	r2, [pc, #100]	; (8006928 <HAL_TIM_PWM_Start+0x150>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x10e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_TIM_PWM_Start+0x154>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x10e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a16      	ldr	r2, [pc, #88]	; (8006930 <HAL_TIM_PWM_Start+0x158>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x10e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a14      	ldr	r2, [pc, #80]	; (8006934 <HAL_TIM_PWM_Start+0x15c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d111      	bne.n	800690a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d010      	beq.n	800691a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	e007      	b.n	800691a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000

08006938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e097      	b.n	8006a7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d106      	bne.n	8006966 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fd f84d 	bl	8003a00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f000 fbc1 	bl	8007114 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ba:	f023 0303 	bic.w	r3, r3, #3
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	4313      	orrs	r3, r2
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80069d8:	f023 030c 	bic.w	r3, r3, #12
 80069dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4313      	orrs	r3, r2
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	011a      	lsls	r2, r3, #4
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	031b      	lsls	r3, r3, #12
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006aac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d110      	bne.n	8006ad6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d102      	bne.n	8006ac0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aba:	7b7b      	ldrb	r3, [r7, #13]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d001      	beq.n	8006ac4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e069      	b.n	8006b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad4:	e031      	b.n	8006b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d110      	bne.n	8006afe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d102      	bne.n	8006ae8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ae2:	7b3b      	ldrb	r3, [r7, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d001      	beq.n	8006aec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e055      	b.n	8006b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006afc:	e01d      	b.n	8006b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d108      	bne.n	8006b16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b0a:	7b7b      	ldrb	r3, [r7, #13]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d102      	bne.n	8006b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b10:	7b3b      	ldrb	r3, [r7, #12]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d001      	beq.n	8006b1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e03e      	b.n	8006b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_TIM_Encoder_Start+0xc4>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d008      	beq.n	8006b58 <HAL_TIM_Encoder_Start+0xd4>
 8006b46:	e00f      	b.n	8006b68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fd85 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006b56:	e016      	b.n	8006b86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2104      	movs	r1, #4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fd7d 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006b66:	e00e      	b.n	8006b86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fd75 	bl	8007660 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fd6e 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006b84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d122      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d11b      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0202 	mvn.w	r2, #2
 8006bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa77 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006be8:	e005      	b.n	8006bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa69 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa7a 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d122      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d11b      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0204 	mvn.w	r2, #4
 8006c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2202      	movs	r2, #2
 8006c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa4d 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006c3c:	e005      	b.n	8006c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa3f 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa50 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d122      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d11b      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0208 	mvn.w	r2, #8
 8006c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa23 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006c90:	e005      	b.n	8006c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa15 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa26 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d122      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0210 	mvn.w	r2, #16
 8006cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9f9 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006ce4:	e005      	b.n	8006cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9eb 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f9fc 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0201 	mvn.w	r2, #1
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fb fafa 	bl	8002318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b80      	cmp	r3, #128	; 0x80
 8006d30:	d10e      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d107      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fd78 	bl	8007840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d107      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9c1 	bl	80070fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d10e      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d107      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0220 	mvn.w	r2, #32
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fd42 	bl	800782c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0ae      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	f200 809f 	bhi.w	8006f1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e19 	.word	0x08006e19
 8006de8:	08006f1d 	.word	0x08006f1d
 8006dec:	08006f1d 	.word	0x08006f1d
 8006df0:	08006f1d 	.word	0x08006f1d
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006f1d 	.word	0x08006f1d
 8006dfc:	08006f1d 	.word	0x08006f1d
 8006e00:	08006f1d 	.word	0x08006f1d
 8006e04:	08006e9b 	.word	0x08006e9b
 8006e08:	08006f1d 	.word	0x08006f1d
 8006e0c:	08006f1d 	.word	0x08006f1d
 8006e10:	08006f1d 	.word	0x08006f1d
 8006e14:	08006edb 	.word	0x08006edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f9f8 	bl	8007214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0208 	orr.w	r2, r2, #8
 8006e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0204 	bic.w	r2, r2, #4
 8006e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	619a      	str	r2, [r3, #24]
      break;
 8006e56:	e064      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fa3e 	bl	80072e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6999      	ldr	r1, [r3, #24]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	021a      	lsls	r2, r3, #8
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	619a      	str	r2, [r3, #24]
      break;
 8006e98:	e043      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fa89 	bl	80073b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0208 	orr.w	r2, r2, #8
 8006eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0204 	bic.w	r2, r2, #4
 8006ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69d9      	ldr	r1, [r3, #28]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	61da      	str	r2, [r3, #28]
      break;
 8006ed8:	e023      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fad3 	bl	800748c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	021a      	lsls	r2, r3, #8
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	61da      	str	r2, [r3, #28]
      break;
 8006f1a:	e002      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_TIM_ConfigClockSource+0x1c>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e0b4      	b.n	80070ba <HAL_TIM_ConfigClockSource+0x186>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f88:	d03e      	beq.n	8007008 <HAL_TIM_ConfigClockSource+0xd4>
 8006f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8e:	f200 8087 	bhi.w	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	f000 8086 	beq.w	80070a6 <HAL_TIM_ConfigClockSource+0x172>
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9e:	d87f      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b70      	cmp	r3, #112	; 0x70
 8006fa2:	d01a      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0xa6>
 8006fa4:	2b70      	cmp	r3, #112	; 0x70
 8006fa6:	d87b      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa8:	2b60      	cmp	r3, #96	; 0x60
 8006faa:	d050      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x11a>
 8006fac:	2b60      	cmp	r3, #96	; 0x60
 8006fae:	d877      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b50      	cmp	r3, #80	; 0x50
 8006fb2:	d03c      	beq.n	800702e <HAL_TIM_ConfigClockSource+0xfa>
 8006fb4:	2b50      	cmp	r3, #80	; 0x50
 8006fb6:	d873      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d058      	beq.n	800706e <HAL_TIM_ConfigClockSource+0x13a>
 8006fbc:	2b40      	cmp	r3, #64	; 0x40
 8006fbe:	d86f      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b30      	cmp	r3, #48	; 0x30
 8006fc2:	d064      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x15a>
 8006fc4:	2b30      	cmp	r3, #48	; 0x30
 8006fc6:	d86b      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d060      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x15a>
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d867      	bhi.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d05c      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x15a>
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d05a      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x15a>
 8006fd8:	e062      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6899      	ldr	r1, [r3, #8]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f000 fb19 	bl	8007620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	609a      	str	r2, [r3, #8]
      break;
 8007006:	e04f      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6899      	ldr	r1, [r3, #8]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f000 fb02 	bl	8007620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800702a:	609a      	str	r2, [r3, #8]
      break;
 800702c:	e03c      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6859      	ldr	r1, [r3, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	461a      	mov	r2, r3
 800703c:	f000 fa76 	bl	800752c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2150      	movs	r1, #80	; 0x50
 8007046:	4618      	mov	r0, r3
 8007048:	f000 facf 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 800704c:	e02c      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6859      	ldr	r1, [r3, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	461a      	mov	r2, r3
 800705c:	f000 fa95 	bl	800758a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2160      	movs	r1, #96	; 0x60
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fabf 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 800706c:	e01c      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	461a      	mov	r2, r3
 800707c:	f000 fa56 	bl	800752c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2140      	movs	r1, #64	; 0x40
 8007086:	4618      	mov	r0, r3
 8007088:	f000 faaf 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 800708c:	e00c      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f000 faa6 	bl	80075ea <TIM_ITRx_SetConfig>
      break;
 800709e:	e003      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
      break;
 80070a4:	e000      	b.n	80070a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a34      	ldr	r2, [pc, #208]	; (80071f8 <TIM_Base_SetConfig+0xe4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0x38>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0x38>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a31      	ldr	r2, [pc, #196]	; (80071fc <TIM_Base_SetConfig+0xe8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0x38>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a30      	ldr	r2, [pc, #192]	; (8007200 <TIM_Base_SetConfig+0xec>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0x38>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <TIM_Base_SetConfig+0xf0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d108      	bne.n	800715e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a25      	ldr	r2, [pc, #148]	; (80071f8 <TIM_Base_SetConfig+0xe4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01b      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d017      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a22      	ldr	r2, [pc, #136]	; (80071fc <TIM_Base_SetConfig+0xe8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a21      	ldr	r2, [pc, #132]	; (8007200 <TIM_Base_SetConfig+0xec>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a20      	ldr	r2, [pc, #128]	; (8007204 <TIM_Base_SetConfig+0xf0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <TIM_Base_SetConfig+0xf4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a1e      	ldr	r2, [pc, #120]	; (800720c <TIM_Base_SetConfig+0xf8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_Base_SetConfig+0x8a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a1d      	ldr	r2, [pc, #116]	; (8007210 <TIM_Base_SetConfig+0xfc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d108      	bne.n	80071b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <TIM_Base_SetConfig+0xe4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d103      	bne.n	80071e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	615a      	str	r2, [r3, #20]
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800
 8007204:	40000c00 	.word	0x40000c00
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800

08007214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 0302 	bic.w	r3, r3, #2
 800725c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <TIM_OC1_SetConfig+0xc8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10c      	bne.n	800728a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0308 	bic.w	r3, r3, #8
 8007276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 0304 	bic.w	r3, r3, #4
 8007288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <TIM_OC1_SetConfig+0xc8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d111      	bne.n	80072b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40010000 	.word	0x40010000

080072e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0210 	bic.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0320 	bic.w	r3, r3, #32
 800732a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <TIM_OC2_SetConfig+0xd4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10d      	bne.n	800735c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <TIM_OC2_SetConfig+0xd4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d113      	bne.n	800738c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000

080073b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <TIM_OC3_SetConfig+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10d      	bne.n	8007432 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a14      	ldr	r2, [pc, #80]	; (8007488 <TIM_OC3_SetConfig+0xd0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d113      	bne.n	8007462 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40010000 	.word	0x40010000

0800748c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	031b      	lsls	r3, r3, #12
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <TIM_OC4_SetConfig+0x9c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d109      	bne.n	8007500 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	019b      	lsls	r3, r3, #6
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40010000 	.word	0x40010000

0800752c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0201 	bic.w	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 030a 	bic.w	r3, r3, #10
 8007568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758a:	b480      	push	{r7}
 800758c:	b087      	sub	sp, #28
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f023 0210 	bic.w	r2, r3, #16
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	031b      	lsls	r3, r3, #12
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	f043 0307 	orr.w	r3, r3, #7
 800760c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800763a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	431a      	orrs	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	43db      	mvns	r3, r3
 8007682:	401a      	ands	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e050      	b.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007710:	d013      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a16      	ldr	r2, [pc, #88]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a15      	ldr	r2, [pc, #84]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10c      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40010000 	.word	0x40010000
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40000c00 	.word	0x40000c00
 8007784:	40014000 	.word	0x40014000

08007788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e03d      	b.n	8007820 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e03f      	b.n	80078e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fc f96a 	bl	8003b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	; 0x24
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f997 	bl	8007bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695a      	ldr	r2, [r3, #20]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b08a      	sub	sp, #40	; 0x28
 80078f2:	af02      	add	r7, sp, #8
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	603b      	str	r3, [r7, #0]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b20      	cmp	r3, #32
 800790c:	d17c      	bne.n	8007a08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_UART_Transmit+0x2c>
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e075      	b.n	8007a0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_UART_Transmit+0x3e>
 8007928:	2302      	movs	r3, #2
 800792a:	e06e      	b.n	8007a0a <HAL_UART_Transmit+0x11c>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2221      	movs	r2, #33	; 0x21
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007942:	f7fc fb3b 	bl	8003fbc <HAL_GetTick>
 8007946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795c:	d108      	bne.n	8007970 <HAL_UART_Transmit+0x82>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d104      	bne.n	8007970 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	e003      	b.n	8007978 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007980:	e02a      	b.n	80079d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2200      	movs	r2, #0
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f870 	bl	8007a72 <UART_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e036      	b.n	8007a0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	3302      	adds	r3, #2
 80079b6:	61bb      	str	r3, [r7, #24]
 80079b8:	e007      	b.n	80079ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	3301      	adds	r3, #1
 80079c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1cf      	bne.n	8007982 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2200      	movs	r2, #0
 80079ea:	2140      	movs	r1, #64	; 0x40
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f840 	bl	8007a72 <UART_WaitOnFlagUntilTimeout>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e006      	b.n	8007a0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d11d      	bne.n	8007a68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_UART_Receive_IT+0x26>
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e016      	b.n	8007a6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UART_Receive_IT+0x38>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e00f      	b.n	8007a6a <HAL_UART_Receive_IT+0x58>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f875 	bl	8007b4e <UART_Start_Receive_IT>
 8007a64:	4603      	mov	r3, r0
 8007a66:	e000      	b.n	8007a6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b090      	sub	sp, #64	; 0x40
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a82:	e050      	b.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d04c      	beq.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a92:	f7fc fa93 	bl	8003fbc <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d241      	bcs.n	8007b26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ac2:	637a      	str	r2, [r7, #52]	; 0x34
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3314      	adds	r3, #20
 8007af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af6:	623a      	str	r2, [r7, #32]
 8007af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	69f9      	ldr	r1, [r7, #28]
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e00f      	b.n	8007b46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bf0c      	ite	eq
 8007b36:	2301      	moveq	r3, #1
 8007b38:	2300      	movne	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d09f      	beq.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3740      	adds	r7, #64	; 0x40
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	88fa      	ldrh	r2, [r7, #6]
 8007b66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2222      	movs	r2, #34	; 0x22
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b9a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695a      	ldr	r2, [r3, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0220 	orr.w	r2, r2, #32
 8007bba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bd0:	b0c0      	sub	sp, #256	; 0x100
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	68d9      	ldr	r1, [r3, #12]
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	ea40 0301 	orr.w	r3, r0, r1
 8007bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c24:	f021 010c 	bic.w	r1, r1, #12
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c32:	430b      	orrs	r3, r1
 8007c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c46:	6999      	ldr	r1, [r3, #24]
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	ea40 0301 	orr.w	r3, r0, r1
 8007c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b8f      	ldr	r3, [pc, #572]	; (8007e98 <UART_SetConfig+0x2cc>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d005      	beq.n	8007c6c <UART_SetConfig+0xa0>
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b8d      	ldr	r3, [pc, #564]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d104      	bne.n	8007c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fe fc94 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8007c70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c74:	e003      	b.n	8007c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c76:	f7fe fc7b 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8007c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c88:	f040 810c 	bne.w	8007ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	462b      	mov	r3, r5
 8007ca2:	1891      	adds	r1, r2, r2
 8007ca4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ca6:	415b      	adcs	r3, r3
 8007ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cae:	4621      	mov	r1, r4
 8007cb0:	eb12 0801 	adds.w	r8, r2, r1
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	eb43 0901 	adc.w	r9, r3, r1
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cce:	4690      	mov	r8, r2
 8007cd0:	4699      	mov	r9, r3
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	eb18 0303 	adds.w	r3, r8, r3
 8007cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cdc:	462b      	mov	r3, r5
 8007cde:	eb49 0303 	adc.w	r3, r9, r3
 8007ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	18db      	adds	r3, r3, r3
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8007d00:	4613      	mov	r3, r2
 8007d02:	eb42 0303 	adc.w	r3, r2, r3
 8007d06:	657b      	str	r3, [r7, #84]	; 0x54
 8007d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d10:	f7f8 ffc2 	bl	8000c98 <__aeabi_uldivmod>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4b61      	ldr	r3, [pc, #388]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	011c      	lsls	r4, r3, #4
 8007d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d44:	4641      	mov	r1, r8
 8007d46:	eb12 0a01 	adds.w	sl, r2, r1
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d64:	4692      	mov	sl, r2
 8007d66:	469b      	mov	fp, r3
 8007d68:	4643      	mov	r3, r8
 8007d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8007d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d72:	464b      	mov	r3, r9
 8007d74:	eb4b 0303 	adc.w	r3, fp, r3
 8007d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d90:	460b      	mov	r3, r1
 8007d92:	18db      	adds	r3, r3, r3
 8007d94:	643b      	str	r3, [r7, #64]	; 0x40
 8007d96:	4613      	mov	r3, r2
 8007d98:	eb42 0303 	adc.w	r3, r2, r3
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007da6:	f7f8 ff77 	bl	8000c98 <__aeabi_uldivmod>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	4b3b      	ldr	r3, [pc, #236]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007db2:	fba3 2301 	umull	r2, r3, r3, r1
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2264      	movs	r2, #100	; 0x64
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	1acb      	subs	r3, r1, r3
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007dc6:	4b36      	ldr	r3, [pc, #216]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dd4:	441c      	add	r4, r3
 8007dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8007df0:	415b      	adcs	r3, r3
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007df8:	4641      	mov	r1, r8
 8007dfa:	1851      	adds	r1, r2, r1
 8007dfc:	6339      	str	r1, [r7, #48]	; 0x30
 8007dfe:	4649      	mov	r1, r9
 8007e00:	414b      	adcs	r3, r1
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e10:	4659      	mov	r1, fp
 8007e12:	00cb      	lsls	r3, r1, #3
 8007e14:	4651      	mov	r1, sl
 8007e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	00ca      	lsls	r2, r1, #3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4642      	mov	r2, r8
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	460a      	mov	r2, r1
 8007e30:	eb42 0303 	adc.w	r3, r2, r3
 8007e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	18db      	adds	r3, r3, r3
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e52:	4613      	mov	r3, r2
 8007e54:	eb42 0303 	adc.w	r3, r2, r3
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e62:	f7f8 ff19 	bl	8000c98 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	2164      	movs	r1, #100	; 0x64
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	3332      	adds	r3, #50	; 0x32
 8007e7e:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f003 0207 	and.w	r2, r3, #7
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4422      	add	r2, r4
 8007e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e94:	e106      	b.n	80080a4 <UART_SetConfig+0x4d8>
 8007e96:	bf00      	nop
 8007e98:	40011000 	.word	0x40011000
 8007e9c:	40011400 	.word	0x40011400
 8007ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	1891      	adds	r1, r2, r2
 8007ebc:	6239      	str	r1, [r7, #32]
 8007ebe:	415b      	adcs	r3, r3
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	1854      	adds	r4, r2, r1
 8007eca:	4649      	mov	r1, r9
 8007ecc:	eb43 0501 	adc.w	r5, r3, r1
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	00eb      	lsls	r3, r5, #3
 8007eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ede:	00e2      	lsls	r2, r4, #3
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	461d      	mov	r5, r3
 8007ee4:	4643      	mov	r3, r8
 8007ee6:	18e3      	adds	r3, r4, r3
 8007ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eec:	464b      	mov	r3, r9
 8007eee:	eb45 0303 	adc.w	r3, r5, r3
 8007ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f12:	4629      	mov	r1, r5
 8007f14:	008b      	lsls	r3, r1, #2
 8007f16:	4621      	mov	r1, r4
 8007f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	008a      	lsls	r2, r1, #2
 8007f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f24:	f7f8 feb8 	bl	8000c98 <__aeabi_uldivmod>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4b60      	ldr	r3, [pc, #384]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	011c      	lsls	r4, r3, #4
 8007f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	61b9      	str	r1, [r7, #24]
 8007f50:	415b      	adcs	r3, r3
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f58:	4641      	mov	r1, r8
 8007f5a:	1851      	adds	r1, r2, r1
 8007f5c:	6139      	str	r1, [r7, #16]
 8007f5e:	4649      	mov	r1, r9
 8007f60:	414b      	adcs	r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f70:	4659      	mov	r1, fp
 8007f72:	00cb      	lsls	r3, r1, #3
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	00ca      	lsls	r2, r1, #3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	4642      	mov	r2, r8
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	460a      	mov	r2, r1
 8007f90:	eb42 0303 	adc.w	r3, r2, r3
 8007f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	008b      	lsls	r3, r1, #2
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fba:	4641      	mov	r1, r8
 8007fbc:	008a      	lsls	r2, r1, #2
 8007fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fc2:	f7f8 fe69 	bl	8000c98 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4b38      	ldr	r3, [pc, #224]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007fce:	fba3 2301 	umull	r2, r3, r3, r1
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2264      	movs	r2, #100	; 0x64
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	1acb      	subs	r3, r1, r3
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	3332      	adds	r3, #50	; 0x32
 8007fe0:	4a33      	ldr	r2, [pc, #204]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	095b      	lsrs	r3, r3, #5
 8007fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fec:	441c      	add	r4, r3
 8007fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ff6:	677a      	str	r2, [r7, #116]	; 0x74
 8007ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ffc:	4642      	mov	r2, r8
 8007ffe:	464b      	mov	r3, r9
 8008000:	1891      	adds	r1, r2, r2
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	415b      	adcs	r3, r3
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800800c:	4641      	mov	r1, r8
 800800e:	1851      	adds	r1, r2, r1
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	4649      	mov	r1, r9
 8008014:	414b      	adcs	r3, r1
 8008016:	607b      	str	r3, [r7, #4]
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008024:	4659      	mov	r1, fp
 8008026:	00cb      	lsls	r3, r1, #3
 8008028:	4651      	mov	r1, sl
 800802a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800802e:	4651      	mov	r1, sl
 8008030:	00ca      	lsls	r2, r1, #3
 8008032:	4610      	mov	r0, r2
 8008034:	4619      	mov	r1, r3
 8008036:	4603      	mov	r3, r0
 8008038:	4642      	mov	r2, r8
 800803a:	189b      	adds	r3, r3, r2
 800803c:	66bb      	str	r3, [r7, #104]	; 0x68
 800803e:	464b      	mov	r3, r9
 8008040:	460a      	mov	r2, r1
 8008042:	eb42 0303 	adc.w	r3, r2, r3
 8008046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	663b      	str	r3, [r7, #96]	; 0x60
 8008052:	667a      	str	r2, [r7, #100]	; 0x64
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008060:	4649      	mov	r1, r9
 8008062:	008b      	lsls	r3, r1, #2
 8008064:	4641      	mov	r1, r8
 8008066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800806a:	4641      	mov	r1, r8
 800806c:	008a      	lsls	r2, r1, #2
 800806e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008072:	f7f8 fe11 	bl	8000c98 <__aeabi_uldivmod>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <UART_SetConfig+0x4e4>)
 800807c:	fba3 1302 	umull	r1, r3, r3, r2
 8008080:	095b      	lsrs	r3, r3, #5
 8008082:	2164      	movs	r1, #100	; 0x64
 8008084:	fb01 f303 	mul.w	r3, r1, r3
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	3332      	adds	r3, #50	; 0x32
 800808e:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <UART_SetConfig+0x4e4>)
 8008090:	fba2 2303 	umull	r2, r3, r2, r3
 8008094:	095b      	lsrs	r3, r3, #5
 8008096:	f003 020f 	and.w	r2, r3, #15
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4422      	add	r2, r4
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080aa:	46bd      	mov	sp, r7
 80080ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b0:	51eb851f 	.word	0x51eb851f

080080b4 <malloc>:
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <malloc+0xc>)
 80080b6:	4601      	mov	r1, r0
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	f000 b823 	b.w	8008104 <_malloc_r>
 80080be:	bf00      	nop
 80080c0:	200001e0 	.word	0x200001e0

080080c4 <sbrk_aligned>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4e0e      	ldr	r6, [pc, #56]	; (8008100 <sbrk_aligned+0x3c>)
 80080c8:	460c      	mov	r4, r1
 80080ca:	6831      	ldr	r1, [r6, #0]
 80080cc:	4605      	mov	r5, r0
 80080ce:	b911      	cbnz	r1, 80080d6 <sbrk_aligned+0x12>
 80080d0:	f001 ffa8 	bl	800a024 <_sbrk_r>
 80080d4:	6030      	str	r0, [r6, #0]
 80080d6:	4621      	mov	r1, r4
 80080d8:	4628      	mov	r0, r5
 80080da:	f001 ffa3 	bl	800a024 <_sbrk_r>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d00a      	beq.n	80080f8 <sbrk_aligned+0x34>
 80080e2:	1cc4      	adds	r4, r0, #3
 80080e4:	f024 0403 	bic.w	r4, r4, #3
 80080e8:	42a0      	cmp	r0, r4
 80080ea:	d007      	beq.n	80080fc <sbrk_aligned+0x38>
 80080ec:	1a21      	subs	r1, r4, r0
 80080ee:	4628      	mov	r0, r5
 80080f0:	f001 ff98 	bl	800a024 <_sbrk_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	d101      	bne.n	80080fc <sbrk_aligned+0x38>
 80080f8:	f04f 34ff 	mov.w	r4, #4294967295
 80080fc:	4620      	mov	r0, r4
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	2000059c 	.word	0x2000059c

08008104 <_malloc_r>:
 8008104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008108:	1ccd      	adds	r5, r1, #3
 800810a:	f025 0503 	bic.w	r5, r5, #3
 800810e:	3508      	adds	r5, #8
 8008110:	2d0c      	cmp	r5, #12
 8008112:	bf38      	it	cc
 8008114:	250c      	movcc	r5, #12
 8008116:	2d00      	cmp	r5, #0
 8008118:	4607      	mov	r7, r0
 800811a:	db01      	blt.n	8008120 <_malloc_r+0x1c>
 800811c:	42a9      	cmp	r1, r5
 800811e:	d905      	bls.n	800812c <_malloc_r+0x28>
 8008120:	230c      	movs	r3, #12
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	2600      	movs	r6, #0
 8008126:	4630      	mov	r0, r6
 8008128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800812c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008200 <_malloc_r+0xfc>
 8008130:	f000 f868 	bl	8008204 <__malloc_lock>
 8008134:	f8d8 3000 	ldr.w	r3, [r8]
 8008138:	461c      	mov	r4, r3
 800813a:	bb5c      	cbnz	r4, 8008194 <_malloc_r+0x90>
 800813c:	4629      	mov	r1, r5
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ffc0 	bl	80080c4 <sbrk_aligned>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	4604      	mov	r4, r0
 8008148:	d155      	bne.n	80081f6 <_malloc_r+0xf2>
 800814a:	f8d8 4000 	ldr.w	r4, [r8]
 800814e:	4626      	mov	r6, r4
 8008150:	2e00      	cmp	r6, #0
 8008152:	d145      	bne.n	80081e0 <_malloc_r+0xdc>
 8008154:	2c00      	cmp	r4, #0
 8008156:	d048      	beq.n	80081ea <_malloc_r+0xe6>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	4631      	mov	r1, r6
 800815c:	4638      	mov	r0, r7
 800815e:	eb04 0903 	add.w	r9, r4, r3
 8008162:	f001 ff5f 	bl	800a024 <_sbrk_r>
 8008166:	4581      	cmp	r9, r0
 8008168:	d13f      	bne.n	80081ea <_malloc_r+0xe6>
 800816a:	6821      	ldr	r1, [r4, #0]
 800816c:	1a6d      	subs	r5, r5, r1
 800816e:	4629      	mov	r1, r5
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ffa7 	bl	80080c4 <sbrk_aligned>
 8008176:	3001      	adds	r0, #1
 8008178:	d037      	beq.n	80081ea <_malloc_r+0xe6>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	442b      	add	r3, r5
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	f8d8 3000 	ldr.w	r3, [r8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d038      	beq.n	80081fa <_malloc_r+0xf6>
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	42a2      	cmp	r2, r4
 800818c:	d12b      	bne.n	80081e6 <_malloc_r+0xe2>
 800818e:	2200      	movs	r2, #0
 8008190:	605a      	str	r2, [r3, #4]
 8008192:	e00f      	b.n	80081b4 <_malloc_r+0xb0>
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	1b52      	subs	r2, r2, r5
 8008198:	d41f      	bmi.n	80081da <_malloc_r+0xd6>
 800819a:	2a0b      	cmp	r2, #11
 800819c:	d917      	bls.n	80081ce <_malloc_r+0xca>
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	6025      	str	r5, [r4, #0]
 80081a4:	bf18      	it	ne
 80081a6:	6059      	strne	r1, [r3, #4]
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	bf08      	it	eq
 80081ac:	f8c8 1000 	streq.w	r1, [r8]
 80081b0:	5162      	str	r2, [r4, r5]
 80081b2:	604b      	str	r3, [r1, #4]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f104 060b 	add.w	r6, r4, #11
 80081ba:	f000 f829 	bl	8008210 <__malloc_unlock>
 80081be:	f026 0607 	bic.w	r6, r6, #7
 80081c2:	1d23      	adds	r3, r4, #4
 80081c4:	1af2      	subs	r2, r6, r3
 80081c6:	d0ae      	beq.n	8008126 <_malloc_r+0x22>
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	50a3      	str	r3, [r4, r2]
 80081cc:	e7ab      	b.n	8008126 <_malloc_r+0x22>
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	6862      	ldr	r2, [r4, #4]
 80081d2:	d1dd      	bne.n	8008190 <_malloc_r+0x8c>
 80081d4:	f8c8 2000 	str.w	r2, [r8]
 80081d8:	e7ec      	b.n	80081b4 <_malloc_r+0xb0>
 80081da:	4623      	mov	r3, r4
 80081dc:	6864      	ldr	r4, [r4, #4]
 80081de:	e7ac      	b.n	800813a <_malloc_r+0x36>
 80081e0:	4634      	mov	r4, r6
 80081e2:	6876      	ldr	r6, [r6, #4]
 80081e4:	e7b4      	b.n	8008150 <_malloc_r+0x4c>
 80081e6:	4613      	mov	r3, r2
 80081e8:	e7cc      	b.n	8008184 <_malloc_r+0x80>
 80081ea:	230c      	movs	r3, #12
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	4638      	mov	r0, r7
 80081f0:	f000 f80e 	bl	8008210 <__malloc_unlock>
 80081f4:	e797      	b.n	8008126 <_malloc_r+0x22>
 80081f6:	6025      	str	r5, [r4, #0]
 80081f8:	e7dc      	b.n	80081b4 <_malloc_r+0xb0>
 80081fa:	605b      	str	r3, [r3, #4]
 80081fc:	deff      	udf	#255	; 0xff
 80081fe:	bf00      	nop
 8008200:	20000598 	.word	0x20000598

08008204 <__malloc_lock>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__malloc_lock+0x8>)
 8008206:	f001 bf5a 	b.w	800a0be <__retarget_lock_acquire_recursive>
 800820a:	bf00      	nop
 800820c:	200006e0 	.word	0x200006e0

08008210 <__malloc_unlock>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__malloc_unlock+0x8>)
 8008212:	f001 bf55 	b.w	800a0c0 <__retarget_lock_release_recursive>
 8008216:	bf00      	nop
 8008218:	200006e0 	.word	0x200006e0

0800821c <sulp>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	4604      	mov	r4, r0
 8008220:	460d      	mov	r5, r1
 8008222:	ec45 4b10 	vmov	d0, r4, r5
 8008226:	4616      	mov	r6, r2
 8008228:	f003 fd22 	bl	800bc70 <__ulp>
 800822c:	ec51 0b10 	vmov	r0, r1, d0
 8008230:	b17e      	cbz	r6, 8008252 <sulp+0x36>
 8008232:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008236:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd09      	ble.n	8008252 <sulp+0x36>
 800823e:	051b      	lsls	r3, r3, #20
 8008240:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008244:	2400      	movs	r4, #0
 8008246:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800824a:	4622      	mov	r2, r4
 800824c:	462b      	mov	r3, r5
 800824e:	f7f8 f9db 	bl	8000608 <__aeabi_dmul>
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	0000      	movs	r0, r0
	...

08008258 <_strtod_l>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	ed2d 8b02 	vpush	{d8}
 8008260:	b09b      	sub	sp, #108	; 0x6c
 8008262:	4604      	mov	r4, r0
 8008264:	9213      	str	r2, [sp, #76]	; 0x4c
 8008266:	2200      	movs	r2, #0
 8008268:	9216      	str	r2, [sp, #88]	; 0x58
 800826a:	460d      	mov	r5, r1
 800826c:	f04f 0800 	mov.w	r8, #0
 8008270:	f04f 0900 	mov.w	r9, #0
 8008274:	460a      	mov	r2, r1
 8008276:	9215      	str	r2, [sp, #84]	; 0x54
 8008278:	7811      	ldrb	r1, [r2, #0]
 800827a:	292b      	cmp	r1, #43	; 0x2b
 800827c:	d04c      	beq.n	8008318 <_strtod_l+0xc0>
 800827e:	d83a      	bhi.n	80082f6 <_strtod_l+0x9e>
 8008280:	290d      	cmp	r1, #13
 8008282:	d834      	bhi.n	80082ee <_strtod_l+0x96>
 8008284:	2908      	cmp	r1, #8
 8008286:	d834      	bhi.n	80082f2 <_strtod_l+0x9a>
 8008288:	2900      	cmp	r1, #0
 800828a:	d03d      	beq.n	8008308 <_strtod_l+0xb0>
 800828c:	2200      	movs	r2, #0
 800828e:	920a      	str	r2, [sp, #40]	; 0x28
 8008290:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008292:	7832      	ldrb	r2, [r6, #0]
 8008294:	2a30      	cmp	r2, #48	; 0x30
 8008296:	f040 80b4 	bne.w	8008402 <_strtod_l+0x1aa>
 800829a:	7872      	ldrb	r2, [r6, #1]
 800829c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80082a0:	2a58      	cmp	r2, #88	; 0x58
 80082a2:	d170      	bne.n	8008386 <_strtod_l+0x12e>
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	ab16      	add	r3, sp, #88	; 0x58
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4a8e      	ldr	r2, [pc, #568]	; (80084e8 <_strtod_l+0x290>)
 80082b0:	ab17      	add	r3, sp, #92	; 0x5c
 80082b2:	a915      	add	r1, sp, #84	; 0x54
 80082b4:	4620      	mov	r0, r4
 80082b6:	f002 fe6d 	bl	800af94 <__gethex>
 80082ba:	f010 070f 	ands.w	r7, r0, #15
 80082be:	4605      	mov	r5, r0
 80082c0:	d005      	beq.n	80082ce <_strtod_l+0x76>
 80082c2:	2f06      	cmp	r7, #6
 80082c4:	d12a      	bne.n	800831c <_strtod_l+0xc4>
 80082c6:	3601      	adds	r6, #1
 80082c8:	2300      	movs	r3, #0
 80082ca:	9615      	str	r6, [sp, #84]	; 0x54
 80082cc:	930a      	str	r3, [sp, #40]	; 0x28
 80082ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 857f 	bne.w	8008dd4 <_strtod_l+0xb7c>
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	b1db      	cbz	r3, 8008312 <_strtod_l+0xba>
 80082da:	4642      	mov	r2, r8
 80082dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082e0:	ec43 2b10 	vmov	d0, r2, r3
 80082e4:	b01b      	add	sp, #108	; 0x6c
 80082e6:	ecbd 8b02 	vpop	{d8}
 80082ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ee:	2920      	cmp	r1, #32
 80082f0:	d1cc      	bne.n	800828c <_strtod_l+0x34>
 80082f2:	3201      	adds	r2, #1
 80082f4:	e7bf      	b.n	8008276 <_strtod_l+0x1e>
 80082f6:	292d      	cmp	r1, #45	; 0x2d
 80082f8:	d1c8      	bne.n	800828c <_strtod_l+0x34>
 80082fa:	2101      	movs	r1, #1
 80082fc:	910a      	str	r1, [sp, #40]	; 0x28
 80082fe:	1c51      	adds	r1, r2, #1
 8008300:	9115      	str	r1, [sp, #84]	; 0x54
 8008302:	7852      	ldrb	r2, [r2, #1]
 8008304:	2a00      	cmp	r2, #0
 8008306:	d1c3      	bne.n	8008290 <_strtod_l+0x38>
 8008308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800830a:	9515      	str	r5, [sp, #84]	; 0x54
 800830c:	2b00      	cmp	r3, #0
 800830e:	f040 855f 	bne.w	8008dd0 <_strtod_l+0xb78>
 8008312:	4642      	mov	r2, r8
 8008314:	464b      	mov	r3, r9
 8008316:	e7e3      	b.n	80082e0 <_strtod_l+0x88>
 8008318:	2100      	movs	r1, #0
 800831a:	e7ef      	b.n	80082fc <_strtod_l+0xa4>
 800831c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800831e:	b13a      	cbz	r2, 8008330 <_strtod_l+0xd8>
 8008320:	2135      	movs	r1, #53	; 0x35
 8008322:	a818      	add	r0, sp, #96	; 0x60
 8008324:	f003 fda1 	bl	800be6a <__copybits>
 8008328:	9916      	ldr	r1, [sp, #88]	; 0x58
 800832a:	4620      	mov	r0, r4
 800832c:	f003 f974 	bl	800b618 <_Bfree>
 8008330:	3f01      	subs	r7, #1
 8008332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008334:	2f04      	cmp	r7, #4
 8008336:	d806      	bhi.n	8008346 <_strtod_l+0xee>
 8008338:	e8df f007 	tbb	[pc, r7]
 800833c:	201d0314 	.word	0x201d0314
 8008340:	14          	.byte	0x14
 8008341:	00          	.byte	0x00
 8008342:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008346:	05e9      	lsls	r1, r5, #23
 8008348:	bf48      	it	mi
 800834a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800834e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008352:	0d1b      	lsrs	r3, r3, #20
 8008354:	051b      	lsls	r3, r3, #20
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1b9      	bne.n	80082ce <_strtod_l+0x76>
 800835a:	f001 fe85 	bl	800a068 <__errno>
 800835e:	2322      	movs	r3, #34	; 0x22
 8008360:	6003      	str	r3, [r0, #0]
 8008362:	e7b4      	b.n	80082ce <_strtod_l+0x76>
 8008364:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008368:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800836c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008370:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008374:	e7e7      	b.n	8008346 <_strtod_l+0xee>
 8008376:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80084f0 <_strtod_l+0x298>
 800837a:	e7e4      	b.n	8008346 <_strtod_l+0xee>
 800837c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008380:	f04f 38ff 	mov.w	r8, #4294967295
 8008384:	e7df      	b.n	8008346 <_strtod_l+0xee>
 8008386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	9215      	str	r2, [sp, #84]	; 0x54
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b30      	cmp	r3, #48	; 0x30
 8008390:	d0f9      	beq.n	8008386 <_strtod_l+0x12e>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d09b      	beq.n	80082ce <_strtod_l+0x76>
 8008396:	2301      	movs	r3, #1
 8008398:	f04f 0a00 	mov.w	sl, #0
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083a6:	46d3      	mov	fp, sl
 80083a8:	220a      	movs	r2, #10
 80083aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083ac:	7806      	ldrb	r6, [r0, #0]
 80083ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80083b2:	b2d9      	uxtb	r1, r3
 80083b4:	2909      	cmp	r1, #9
 80083b6:	d926      	bls.n	8008406 <_strtod_l+0x1ae>
 80083b8:	494c      	ldr	r1, [pc, #304]	; (80084ec <_strtod_l+0x294>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	f001 fde8 	bl	8009f90 <strncmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d030      	beq.n	8008426 <_strtod_l+0x1ce>
 80083c4:	2000      	movs	r0, #0
 80083c6:	4632      	mov	r2, r6
 80083c8:	9005      	str	r0, [sp, #20]
 80083ca:	465e      	mov	r6, fp
 80083cc:	4603      	mov	r3, r0
 80083ce:	2a65      	cmp	r2, #101	; 0x65
 80083d0:	d001      	beq.n	80083d6 <_strtod_l+0x17e>
 80083d2:	2a45      	cmp	r2, #69	; 0x45
 80083d4:	d113      	bne.n	80083fe <_strtod_l+0x1a6>
 80083d6:	b91e      	cbnz	r6, 80083e0 <_strtod_l+0x188>
 80083d8:	9a04      	ldr	r2, [sp, #16]
 80083da:	4302      	orrs	r2, r0
 80083dc:	d094      	beq.n	8008308 <_strtod_l+0xb0>
 80083de:	2600      	movs	r6, #0
 80083e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80083e2:	1c6a      	adds	r2, r5, #1
 80083e4:	9215      	str	r2, [sp, #84]	; 0x54
 80083e6:	786a      	ldrb	r2, [r5, #1]
 80083e8:	2a2b      	cmp	r2, #43	; 0x2b
 80083ea:	d074      	beq.n	80084d6 <_strtod_l+0x27e>
 80083ec:	2a2d      	cmp	r2, #45	; 0x2d
 80083ee:	d078      	beq.n	80084e2 <_strtod_l+0x28a>
 80083f0:	f04f 0c00 	mov.w	ip, #0
 80083f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80083f8:	2909      	cmp	r1, #9
 80083fa:	d97f      	bls.n	80084fc <_strtod_l+0x2a4>
 80083fc:	9515      	str	r5, [sp, #84]	; 0x54
 80083fe:	2700      	movs	r7, #0
 8008400:	e09e      	b.n	8008540 <_strtod_l+0x2e8>
 8008402:	2300      	movs	r3, #0
 8008404:	e7c8      	b.n	8008398 <_strtod_l+0x140>
 8008406:	f1bb 0f08 	cmp.w	fp, #8
 800840a:	bfd8      	it	le
 800840c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800840e:	f100 0001 	add.w	r0, r0, #1
 8008412:	bfda      	itte	le
 8008414:	fb02 3301 	mlale	r3, r2, r1, r3
 8008418:	9309      	strle	r3, [sp, #36]	; 0x24
 800841a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800841e:	f10b 0b01 	add.w	fp, fp, #1
 8008422:	9015      	str	r0, [sp, #84]	; 0x54
 8008424:	e7c1      	b.n	80083aa <_strtod_l+0x152>
 8008426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	9215      	str	r2, [sp, #84]	; 0x54
 800842c:	785a      	ldrb	r2, [r3, #1]
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	d037      	beq.n	80084a4 <_strtod_l+0x24c>
 8008434:	9005      	str	r0, [sp, #20]
 8008436:	465e      	mov	r6, fp
 8008438:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800843c:	2b09      	cmp	r3, #9
 800843e:	d912      	bls.n	8008466 <_strtod_l+0x20e>
 8008440:	2301      	movs	r3, #1
 8008442:	e7c4      	b.n	80083ce <_strtod_l+0x176>
 8008444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	9215      	str	r2, [sp, #84]	; 0x54
 800844a:	785a      	ldrb	r2, [r3, #1]
 800844c:	3001      	adds	r0, #1
 800844e:	2a30      	cmp	r2, #48	; 0x30
 8008450:	d0f8      	beq.n	8008444 <_strtod_l+0x1ec>
 8008452:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008456:	2b08      	cmp	r3, #8
 8008458:	f200 84c1 	bhi.w	8008dde <_strtod_l+0xb86>
 800845c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845e:	9005      	str	r0, [sp, #20]
 8008460:	2000      	movs	r0, #0
 8008462:	930b      	str	r3, [sp, #44]	; 0x2c
 8008464:	4606      	mov	r6, r0
 8008466:	3a30      	subs	r2, #48	; 0x30
 8008468:	f100 0301 	add.w	r3, r0, #1
 800846c:	d014      	beq.n	8008498 <_strtod_l+0x240>
 800846e:	9905      	ldr	r1, [sp, #20]
 8008470:	4419      	add	r1, r3
 8008472:	9105      	str	r1, [sp, #20]
 8008474:	4633      	mov	r3, r6
 8008476:	eb00 0c06 	add.w	ip, r0, r6
 800847a:	210a      	movs	r1, #10
 800847c:	4563      	cmp	r3, ip
 800847e:	d113      	bne.n	80084a8 <_strtod_l+0x250>
 8008480:	1833      	adds	r3, r6, r0
 8008482:	2b08      	cmp	r3, #8
 8008484:	f106 0601 	add.w	r6, r6, #1
 8008488:	4406      	add	r6, r0
 800848a:	dc1a      	bgt.n	80084c2 <_strtod_l+0x26a>
 800848c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800848e:	230a      	movs	r3, #10
 8008490:	fb03 2301 	mla	r3, r3, r1, r2
 8008494:	9309      	str	r3, [sp, #36]	; 0x24
 8008496:	2300      	movs	r3, #0
 8008498:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800849a:	1c51      	adds	r1, r2, #1
 800849c:	9115      	str	r1, [sp, #84]	; 0x54
 800849e:	7852      	ldrb	r2, [r2, #1]
 80084a0:	4618      	mov	r0, r3
 80084a2:	e7c9      	b.n	8008438 <_strtod_l+0x1e0>
 80084a4:	4658      	mov	r0, fp
 80084a6:	e7d2      	b.n	800844e <_strtod_l+0x1f6>
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	f103 0301 	add.w	r3, r3, #1
 80084ae:	dc03      	bgt.n	80084b8 <_strtod_l+0x260>
 80084b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80084b2:	434f      	muls	r7, r1
 80084b4:	9709      	str	r7, [sp, #36]	; 0x24
 80084b6:	e7e1      	b.n	800847c <_strtod_l+0x224>
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	bfd8      	it	le
 80084bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80084c0:	e7dc      	b.n	800847c <_strtod_l+0x224>
 80084c2:	2e10      	cmp	r6, #16
 80084c4:	bfdc      	itt	le
 80084c6:	230a      	movle	r3, #10
 80084c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80084cc:	e7e3      	b.n	8008496 <_strtod_l+0x23e>
 80084ce:	2300      	movs	r3, #0
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	2301      	movs	r3, #1
 80084d4:	e780      	b.n	80083d8 <_strtod_l+0x180>
 80084d6:	f04f 0c00 	mov.w	ip, #0
 80084da:	1caa      	adds	r2, r5, #2
 80084dc:	9215      	str	r2, [sp, #84]	; 0x54
 80084de:	78aa      	ldrb	r2, [r5, #2]
 80084e0:	e788      	b.n	80083f4 <_strtod_l+0x19c>
 80084e2:	f04f 0c01 	mov.w	ip, #1
 80084e6:	e7f8      	b.n	80084da <_strtod_l+0x282>
 80084e8:	0800eacc 	.word	0x0800eacc
 80084ec:	0800eac8 	.word	0x0800eac8
 80084f0:	7ff00000 	.word	0x7ff00000
 80084f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084f6:	1c51      	adds	r1, r2, #1
 80084f8:	9115      	str	r1, [sp, #84]	; 0x54
 80084fa:	7852      	ldrb	r2, [r2, #1]
 80084fc:	2a30      	cmp	r2, #48	; 0x30
 80084fe:	d0f9      	beq.n	80084f4 <_strtod_l+0x29c>
 8008500:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008504:	2908      	cmp	r1, #8
 8008506:	f63f af7a 	bhi.w	80083fe <_strtod_l+0x1a6>
 800850a:	3a30      	subs	r2, #48	; 0x30
 800850c:	9208      	str	r2, [sp, #32]
 800850e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008510:	920c      	str	r2, [sp, #48]	; 0x30
 8008512:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008514:	1c57      	adds	r7, r2, #1
 8008516:	9715      	str	r7, [sp, #84]	; 0x54
 8008518:	7852      	ldrb	r2, [r2, #1]
 800851a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800851e:	f1be 0f09 	cmp.w	lr, #9
 8008522:	d938      	bls.n	8008596 <_strtod_l+0x33e>
 8008524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008526:	1a7f      	subs	r7, r7, r1
 8008528:	2f08      	cmp	r7, #8
 800852a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800852e:	dc03      	bgt.n	8008538 <_strtod_l+0x2e0>
 8008530:	9908      	ldr	r1, [sp, #32]
 8008532:	428f      	cmp	r7, r1
 8008534:	bfa8      	it	ge
 8008536:	460f      	movge	r7, r1
 8008538:	f1bc 0f00 	cmp.w	ip, #0
 800853c:	d000      	beq.n	8008540 <_strtod_l+0x2e8>
 800853e:	427f      	negs	r7, r7
 8008540:	2e00      	cmp	r6, #0
 8008542:	d14f      	bne.n	80085e4 <_strtod_l+0x38c>
 8008544:	9904      	ldr	r1, [sp, #16]
 8008546:	4301      	orrs	r1, r0
 8008548:	f47f aec1 	bne.w	80082ce <_strtod_l+0x76>
 800854c:	2b00      	cmp	r3, #0
 800854e:	f47f aedb 	bne.w	8008308 <_strtod_l+0xb0>
 8008552:	2a69      	cmp	r2, #105	; 0x69
 8008554:	d029      	beq.n	80085aa <_strtod_l+0x352>
 8008556:	dc26      	bgt.n	80085a6 <_strtod_l+0x34e>
 8008558:	2a49      	cmp	r2, #73	; 0x49
 800855a:	d026      	beq.n	80085aa <_strtod_l+0x352>
 800855c:	2a4e      	cmp	r2, #78	; 0x4e
 800855e:	f47f aed3 	bne.w	8008308 <_strtod_l+0xb0>
 8008562:	499b      	ldr	r1, [pc, #620]	; (80087d0 <_strtod_l+0x578>)
 8008564:	a815      	add	r0, sp, #84	; 0x54
 8008566:	f002 ff55 	bl	800b414 <__match>
 800856a:	2800      	cmp	r0, #0
 800856c:	f43f aecc 	beq.w	8008308 <_strtod_l+0xb0>
 8008570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b28      	cmp	r3, #40	; 0x28
 8008576:	d12f      	bne.n	80085d8 <_strtod_l+0x380>
 8008578:	4996      	ldr	r1, [pc, #600]	; (80087d4 <_strtod_l+0x57c>)
 800857a:	aa18      	add	r2, sp, #96	; 0x60
 800857c:	a815      	add	r0, sp, #84	; 0x54
 800857e:	f002 ff5d 	bl	800b43c <__hexnan>
 8008582:	2805      	cmp	r0, #5
 8008584:	d128      	bne.n	80085d8 <_strtod_l+0x380>
 8008586:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800858c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008590:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008594:	e69b      	b.n	80082ce <_strtod_l+0x76>
 8008596:	9f08      	ldr	r7, [sp, #32]
 8008598:	210a      	movs	r1, #10
 800859a:	fb01 2107 	mla	r1, r1, r7, r2
 800859e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80085a2:	9208      	str	r2, [sp, #32]
 80085a4:	e7b5      	b.n	8008512 <_strtod_l+0x2ba>
 80085a6:	2a6e      	cmp	r2, #110	; 0x6e
 80085a8:	e7d9      	b.n	800855e <_strtod_l+0x306>
 80085aa:	498b      	ldr	r1, [pc, #556]	; (80087d8 <_strtod_l+0x580>)
 80085ac:	a815      	add	r0, sp, #84	; 0x54
 80085ae:	f002 ff31 	bl	800b414 <__match>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f43f aea8 	beq.w	8008308 <_strtod_l+0xb0>
 80085b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ba:	4988      	ldr	r1, [pc, #544]	; (80087dc <_strtod_l+0x584>)
 80085bc:	3b01      	subs	r3, #1
 80085be:	a815      	add	r0, sp, #84	; 0x54
 80085c0:	9315      	str	r3, [sp, #84]	; 0x54
 80085c2:	f002 ff27 	bl	800b414 <__match>
 80085c6:	b910      	cbnz	r0, 80085ce <_strtod_l+0x376>
 80085c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ca:	3301      	adds	r3, #1
 80085cc:	9315      	str	r3, [sp, #84]	; 0x54
 80085ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80087ec <_strtod_l+0x594>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	e67a      	b.n	80082ce <_strtod_l+0x76>
 80085d8:	4881      	ldr	r0, [pc, #516]	; (80087e0 <_strtod_l+0x588>)
 80085da:	f001 fd81 	bl	800a0e0 <nan>
 80085de:	ec59 8b10 	vmov	r8, r9, d0
 80085e2:	e674      	b.n	80082ce <_strtod_l+0x76>
 80085e4:	9b05      	ldr	r3, [sp, #20]
 80085e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e8:	1afb      	subs	r3, r7, r3
 80085ea:	f1bb 0f00 	cmp.w	fp, #0
 80085ee:	bf08      	it	eq
 80085f0:	46b3      	moveq	fp, r6
 80085f2:	2e10      	cmp	r6, #16
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	4635      	mov	r5, r6
 80085f8:	bfa8      	it	ge
 80085fa:	2510      	movge	r5, #16
 80085fc:	f7f7 ff8a 	bl	8000514 <__aeabi_ui2d>
 8008600:	2e09      	cmp	r6, #9
 8008602:	4680      	mov	r8, r0
 8008604:	4689      	mov	r9, r1
 8008606:	dd13      	ble.n	8008630 <_strtod_l+0x3d8>
 8008608:	4b76      	ldr	r3, [pc, #472]	; (80087e4 <_strtod_l+0x58c>)
 800860a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800860e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008612:	f7f7 fff9 	bl	8000608 <__aeabi_dmul>
 8008616:	4680      	mov	r8, r0
 8008618:	4650      	mov	r0, sl
 800861a:	4689      	mov	r9, r1
 800861c:	f7f7 ff7a 	bl	8000514 <__aeabi_ui2d>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 fe38 	bl	800029c <__adddf3>
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	2e0f      	cmp	r6, #15
 8008632:	dc38      	bgt.n	80086a6 <_strtod_l+0x44e>
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f43f ae49 	beq.w	80082ce <_strtod_l+0x76>
 800863c:	dd24      	ble.n	8008688 <_strtod_l+0x430>
 800863e:	2b16      	cmp	r3, #22
 8008640:	dc0b      	bgt.n	800865a <_strtod_l+0x402>
 8008642:	4968      	ldr	r1, [pc, #416]	; (80087e4 <_strtod_l+0x58c>)
 8008644:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	f7f7 ffda 	bl	8000608 <__aeabi_dmul>
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	e639      	b.n	80082ce <_strtod_l+0x76>
 800865a:	9a08      	ldr	r2, [sp, #32]
 800865c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008660:	4293      	cmp	r3, r2
 8008662:	db20      	blt.n	80086a6 <_strtod_l+0x44e>
 8008664:	4c5f      	ldr	r4, [pc, #380]	; (80087e4 <_strtod_l+0x58c>)
 8008666:	f1c6 060f 	rsb	r6, r6, #15
 800866a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800866e:	4642      	mov	r2, r8
 8008670:	464b      	mov	r3, r9
 8008672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008676:	f7f7 ffc7 	bl	8000608 <__aeabi_dmul>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	1b9e      	subs	r6, r3, r6
 800867e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008682:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008686:	e7e3      	b.n	8008650 <_strtod_l+0x3f8>
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	3316      	adds	r3, #22
 800868c:	db0b      	blt.n	80086a6 <_strtod_l+0x44e>
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	1bdf      	subs	r7, r3, r7
 8008692:	4b54      	ldr	r3, [pc, #336]	; (80087e4 <_strtod_l+0x58c>)
 8008694:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f8 f8dc 	bl	800085c <__aeabi_ddiv>
 80086a4:	e7d6      	b.n	8008654 <_strtod_l+0x3fc>
 80086a6:	9b08      	ldr	r3, [sp, #32]
 80086a8:	1b75      	subs	r5, r6, r5
 80086aa:	441d      	add	r5, r3
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	dd70      	ble.n	8008792 <_strtod_l+0x53a>
 80086b0:	f015 030f 	ands.w	r3, r5, #15
 80086b4:	d00a      	beq.n	80086cc <_strtod_l+0x474>
 80086b6:	494b      	ldr	r1, [pc, #300]	; (80087e4 <_strtod_l+0x58c>)
 80086b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c4:	f7f7 ffa0 	bl	8000608 <__aeabi_dmul>
 80086c8:	4680      	mov	r8, r0
 80086ca:	4689      	mov	r9, r1
 80086cc:	f035 050f 	bics.w	r5, r5, #15
 80086d0:	d04d      	beq.n	800876e <_strtod_l+0x516>
 80086d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80086d6:	dd22      	ble.n	800871e <_strtod_l+0x4c6>
 80086d8:	2500      	movs	r5, #0
 80086da:	46ab      	mov	fp, r5
 80086dc:	9509      	str	r5, [sp, #36]	; 0x24
 80086de:	9505      	str	r5, [sp, #20]
 80086e0:	2322      	movs	r3, #34	; 0x22
 80086e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80087ec <_strtod_l+0x594>
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	f04f 0800 	mov.w	r8, #0
 80086ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f43f aded 	beq.w	80082ce <_strtod_l+0x76>
 80086f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086f6:	4620      	mov	r0, r4
 80086f8:	f002 ff8e 	bl	800b618 <_Bfree>
 80086fc:	9905      	ldr	r1, [sp, #20]
 80086fe:	4620      	mov	r0, r4
 8008700:	f002 ff8a 	bl	800b618 <_Bfree>
 8008704:	4659      	mov	r1, fp
 8008706:	4620      	mov	r0, r4
 8008708:	f002 ff86 	bl	800b618 <_Bfree>
 800870c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800870e:	4620      	mov	r0, r4
 8008710:	f002 ff82 	bl	800b618 <_Bfree>
 8008714:	4629      	mov	r1, r5
 8008716:	4620      	mov	r0, r4
 8008718:	f002 ff7e 	bl	800b618 <_Bfree>
 800871c:	e5d7      	b.n	80082ce <_strtod_l+0x76>
 800871e:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <_strtod_l+0x590>)
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	112d      	asrs	r5, r5, #4
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	469a      	mov	sl, r3
 800872c:	2d01      	cmp	r5, #1
 800872e:	dc21      	bgt.n	8008774 <_strtod_l+0x51c>
 8008730:	b10b      	cbz	r3, 8008736 <_strtod_l+0x4de>
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	492c      	ldr	r1, [pc, #176]	; (80087e8 <_strtod_l+0x590>)
 8008738:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800873c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	4b27      	ldr	r3, [pc, #156]	; (80087ec <_strtod_l+0x594>)
 800874e:	460a      	mov	r2, r1
 8008750:	400b      	ands	r3, r1
 8008752:	4927      	ldr	r1, [pc, #156]	; (80087f0 <_strtod_l+0x598>)
 8008754:	428b      	cmp	r3, r1
 8008756:	4680      	mov	r8, r0
 8008758:	d8be      	bhi.n	80086d8 <_strtod_l+0x480>
 800875a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800875e:	428b      	cmp	r3, r1
 8008760:	bf86      	itte	hi
 8008762:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80087f4 <_strtod_l+0x59c>
 8008766:	f04f 38ff 	movhi.w	r8, #4294967295
 800876a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800876e:	2300      	movs	r3, #0
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	e07b      	b.n	800886c <_strtod_l+0x614>
 8008774:	07ea      	lsls	r2, r5, #31
 8008776:	d505      	bpl.n	8008784 <_strtod_l+0x52c>
 8008778:	9b04      	ldr	r3, [sp, #16]
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f7 ff43 	bl	8000608 <__aeabi_dmul>
 8008782:	2301      	movs	r3, #1
 8008784:	9a04      	ldr	r2, [sp, #16]
 8008786:	3208      	adds	r2, #8
 8008788:	f10a 0a01 	add.w	sl, sl, #1
 800878c:	106d      	asrs	r5, r5, #1
 800878e:	9204      	str	r2, [sp, #16]
 8008790:	e7cc      	b.n	800872c <_strtod_l+0x4d4>
 8008792:	d0ec      	beq.n	800876e <_strtod_l+0x516>
 8008794:	426d      	negs	r5, r5
 8008796:	f015 020f 	ands.w	r2, r5, #15
 800879a:	d00a      	beq.n	80087b2 <_strtod_l+0x55a>
 800879c:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <_strtod_l+0x58c>)
 800879e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f8 f857 	bl	800085c <__aeabi_ddiv>
 80087ae:	4680      	mov	r8, r0
 80087b0:	4689      	mov	r9, r1
 80087b2:	112d      	asrs	r5, r5, #4
 80087b4:	d0db      	beq.n	800876e <_strtod_l+0x516>
 80087b6:	2d1f      	cmp	r5, #31
 80087b8:	dd1e      	ble.n	80087f8 <_strtod_l+0x5a0>
 80087ba:	2500      	movs	r5, #0
 80087bc:	46ab      	mov	fp, r5
 80087be:	9509      	str	r5, [sp, #36]	; 0x24
 80087c0:	9505      	str	r5, [sp, #20]
 80087c2:	2322      	movs	r3, #34	; 0x22
 80087c4:	f04f 0800 	mov.w	r8, #0
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	e78d      	b.n	80086ec <_strtod_l+0x494>
 80087d0:	0800eb2d 	.word	0x0800eb2d
 80087d4:	0800eae0 	.word	0x0800eae0
 80087d8:	0800eb25 	.word	0x0800eb25
 80087dc:	0800eba0 	.word	0x0800eba0
 80087e0:	0800eb9c 	.word	0x0800eb9c
 80087e4:	0800ed10 	.word	0x0800ed10
 80087e8:	0800ece8 	.word	0x0800ece8
 80087ec:	7ff00000 	.word	0x7ff00000
 80087f0:	7ca00000 	.word	0x7ca00000
 80087f4:	7fefffff 	.word	0x7fefffff
 80087f8:	f015 0310 	ands.w	r3, r5, #16
 80087fc:	bf18      	it	ne
 80087fe:	236a      	movne	r3, #106	; 0x6a
 8008800:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008ba4 <_strtod_l+0x94c>
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	4640      	mov	r0, r8
 8008808:	4649      	mov	r1, r9
 800880a:	2300      	movs	r3, #0
 800880c:	07ea      	lsls	r2, r5, #31
 800880e:	d504      	bpl.n	800881a <_strtod_l+0x5c2>
 8008810:	e9da 2300 	ldrd	r2, r3, [sl]
 8008814:	f7f7 fef8 	bl	8000608 <__aeabi_dmul>
 8008818:	2301      	movs	r3, #1
 800881a:	106d      	asrs	r5, r5, #1
 800881c:	f10a 0a08 	add.w	sl, sl, #8
 8008820:	d1f4      	bne.n	800880c <_strtod_l+0x5b4>
 8008822:	b10b      	cbz	r3, 8008828 <_strtod_l+0x5d0>
 8008824:	4680      	mov	r8, r0
 8008826:	4689      	mov	r9, r1
 8008828:	9b04      	ldr	r3, [sp, #16]
 800882a:	b1bb      	cbz	r3, 800885c <_strtod_l+0x604>
 800882c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008830:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008834:	2b00      	cmp	r3, #0
 8008836:	4649      	mov	r1, r9
 8008838:	dd10      	ble.n	800885c <_strtod_l+0x604>
 800883a:	2b1f      	cmp	r3, #31
 800883c:	f340 811e 	ble.w	8008a7c <_strtod_l+0x824>
 8008840:	2b34      	cmp	r3, #52	; 0x34
 8008842:	bfde      	ittt	le
 8008844:	f04f 33ff 	movle.w	r3, #4294967295
 8008848:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800884c:	4093      	lslle	r3, r2
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	bfcc      	ite	gt
 8008854:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008858:	ea03 0901 	andle.w	r9, r3, r1
 800885c:	2200      	movs	r2, #0
 800885e:	2300      	movs	r3, #0
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f8 f938 	bl	8000ad8 <__aeabi_dcmpeq>
 8008868:	2800      	cmp	r0, #0
 800886a:	d1a6      	bne.n	80087ba <_strtod_l+0x562>
 800886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008872:	4633      	mov	r3, r6
 8008874:	465a      	mov	r2, fp
 8008876:	4620      	mov	r0, r4
 8008878:	f002 ff36 	bl	800b6e8 <__s2b>
 800887c:	9009      	str	r0, [sp, #36]	; 0x24
 800887e:	2800      	cmp	r0, #0
 8008880:	f43f af2a 	beq.w	80086d8 <_strtod_l+0x480>
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	9b05      	ldr	r3, [sp, #20]
 8008888:	2a00      	cmp	r2, #0
 800888a:	eba3 0307 	sub.w	r3, r3, r7
 800888e:	bfa8      	it	ge
 8008890:	2300      	movge	r3, #0
 8008892:	930c      	str	r3, [sp, #48]	; 0x30
 8008894:	2500      	movs	r5, #0
 8008896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800889a:	9312      	str	r3, [sp, #72]	; 0x48
 800889c:	46ab      	mov	fp, r5
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	4620      	mov	r0, r4
 80088a2:	6859      	ldr	r1, [r3, #4]
 80088a4:	f002 fe78 	bl	800b598 <_Balloc>
 80088a8:	9005      	str	r0, [sp, #20]
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f43f af18 	beq.w	80086e0 <_strtod_l+0x488>
 80088b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	3202      	adds	r2, #2
 80088b6:	f103 010c 	add.w	r1, r3, #12
 80088ba:	0092      	lsls	r2, r2, #2
 80088bc:	300c      	adds	r0, #12
 80088be:	f001 fc00 	bl	800a0c2 <memcpy>
 80088c2:	ec49 8b10 	vmov	d0, r8, r9
 80088c6:	aa18      	add	r2, sp, #96	; 0x60
 80088c8:	a917      	add	r1, sp, #92	; 0x5c
 80088ca:	4620      	mov	r0, r4
 80088cc:	f003 fa40 	bl	800bd50 <__d2b>
 80088d0:	ec49 8b18 	vmov	d8, r8, r9
 80088d4:	9016      	str	r0, [sp, #88]	; 0x58
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f af02 	beq.w	80086e0 <_strtod_l+0x488>
 80088dc:	2101      	movs	r1, #1
 80088de:	4620      	mov	r0, r4
 80088e0:	f002 ff9a 	bl	800b818 <__i2b>
 80088e4:	4683      	mov	fp, r0
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f aefa 	beq.w	80086e0 <_strtod_l+0x488>
 80088ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80088ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	bfab      	itete	ge
 80088f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80088f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80088f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80088fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80088fe:	bfac      	ite	ge
 8008900:	eb06 0a03 	addge.w	sl, r6, r3
 8008904:	1b9f      	sublt	r7, r3, r6
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	1af6      	subs	r6, r6, r3
 800890a:	4416      	add	r6, r2
 800890c:	4ba0      	ldr	r3, [pc, #640]	; (8008b90 <_strtod_l+0x938>)
 800890e:	3e01      	subs	r6, #1
 8008910:	429e      	cmp	r6, r3
 8008912:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008916:	f280 80c4 	bge.w	8008aa2 <_strtod_l+0x84a>
 800891a:	1b9b      	subs	r3, r3, r6
 800891c:	2b1f      	cmp	r3, #31
 800891e:	eba2 0203 	sub.w	r2, r2, r3
 8008922:	f04f 0101 	mov.w	r1, #1
 8008926:	f300 80b0 	bgt.w	8008a8a <_strtod_l+0x832>
 800892a:	fa01 f303 	lsl.w	r3, r1, r3
 800892e:	930e      	str	r3, [sp, #56]	; 0x38
 8008930:	2300      	movs	r3, #0
 8008932:	930d      	str	r3, [sp, #52]	; 0x34
 8008934:	eb0a 0602 	add.w	r6, sl, r2
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	45b2      	cmp	sl, r6
 800893c:	4417      	add	r7, r2
 800893e:	441f      	add	r7, r3
 8008940:	4653      	mov	r3, sl
 8008942:	bfa8      	it	ge
 8008944:	4633      	movge	r3, r6
 8008946:	42bb      	cmp	r3, r7
 8008948:	bfa8      	it	ge
 800894a:	463b      	movge	r3, r7
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfc2      	ittt	gt
 8008950:	1af6      	subgt	r6, r6, r3
 8008952:	1aff      	subgt	r7, r7, r3
 8008954:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd17      	ble.n	800898e <_strtod_l+0x736>
 800895e:	4659      	mov	r1, fp
 8008960:	461a      	mov	r2, r3
 8008962:	4620      	mov	r0, r4
 8008964:	f003 f818 	bl	800b998 <__pow5mult>
 8008968:	4683      	mov	fp, r0
 800896a:	2800      	cmp	r0, #0
 800896c:	f43f aeb8 	beq.w	80086e0 <_strtod_l+0x488>
 8008970:	4601      	mov	r1, r0
 8008972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008974:	4620      	mov	r0, r4
 8008976:	f002 ff65 	bl	800b844 <__multiply>
 800897a:	900b      	str	r0, [sp, #44]	; 0x2c
 800897c:	2800      	cmp	r0, #0
 800897e:	f43f aeaf 	beq.w	80086e0 <_strtod_l+0x488>
 8008982:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008984:	4620      	mov	r0, r4
 8008986:	f002 fe47 	bl	800b618 <_Bfree>
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	9316      	str	r3, [sp, #88]	; 0x58
 800898e:	2e00      	cmp	r6, #0
 8008990:	f300 808c 	bgt.w	8008aac <_strtod_l+0x854>
 8008994:	9b08      	ldr	r3, [sp, #32]
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd08      	ble.n	80089ac <_strtod_l+0x754>
 800899a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800899c:	9905      	ldr	r1, [sp, #20]
 800899e:	4620      	mov	r0, r4
 80089a0:	f002 fffa 	bl	800b998 <__pow5mult>
 80089a4:	9005      	str	r0, [sp, #20]
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f43f ae9a 	beq.w	80086e0 <_strtod_l+0x488>
 80089ac:	2f00      	cmp	r7, #0
 80089ae:	dd08      	ble.n	80089c2 <_strtod_l+0x76a>
 80089b0:	9905      	ldr	r1, [sp, #20]
 80089b2:	463a      	mov	r2, r7
 80089b4:	4620      	mov	r0, r4
 80089b6:	f003 f849 	bl	800ba4c <__lshift>
 80089ba:	9005      	str	r0, [sp, #20]
 80089bc:	2800      	cmp	r0, #0
 80089be:	f43f ae8f 	beq.w	80086e0 <_strtod_l+0x488>
 80089c2:	f1ba 0f00 	cmp.w	sl, #0
 80089c6:	dd08      	ble.n	80089da <_strtod_l+0x782>
 80089c8:	4659      	mov	r1, fp
 80089ca:	4652      	mov	r2, sl
 80089cc:	4620      	mov	r0, r4
 80089ce:	f003 f83d 	bl	800ba4c <__lshift>
 80089d2:	4683      	mov	fp, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f43f ae83 	beq.w	80086e0 <_strtod_l+0x488>
 80089da:	9a05      	ldr	r2, [sp, #20]
 80089dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089de:	4620      	mov	r0, r4
 80089e0:	f003 f8bc 	bl	800bb5c <__mdiff>
 80089e4:	4605      	mov	r5, r0
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f43f ae7a 	beq.w	80086e0 <_strtod_l+0x488>
 80089ec:	68c3      	ldr	r3, [r0, #12]
 80089ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80089f0:	2300      	movs	r3, #0
 80089f2:	60c3      	str	r3, [r0, #12]
 80089f4:	4659      	mov	r1, fp
 80089f6:	f003 f895 	bl	800bb24 <__mcmp>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	da60      	bge.n	8008ac0 <_strtod_l+0x868>
 80089fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a00:	ea53 0308 	orrs.w	r3, r3, r8
 8008a04:	f040 8084 	bne.w	8008b10 <_strtod_l+0x8b8>
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d17f      	bne.n	8008b10 <_strtod_l+0x8b8>
 8008a10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a14:	0d1b      	lsrs	r3, r3, #20
 8008a16:	051b      	lsls	r3, r3, #20
 8008a18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a1c:	d978      	bls.n	8008b10 <_strtod_l+0x8b8>
 8008a1e:	696b      	ldr	r3, [r5, #20]
 8008a20:	b913      	cbnz	r3, 8008a28 <_strtod_l+0x7d0>
 8008a22:	692b      	ldr	r3, [r5, #16]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	dd73      	ble.n	8008b10 <_strtod_l+0x8b8>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f003 f80d 	bl	800ba4c <__lshift>
 8008a32:	4659      	mov	r1, fp
 8008a34:	4605      	mov	r5, r0
 8008a36:	f003 f875 	bl	800bb24 <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	dd68      	ble.n	8008b10 <_strtod_l+0x8b8>
 8008a3e:	9904      	ldr	r1, [sp, #16]
 8008a40:	4a54      	ldr	r2, [pc, #336]	; (8008b94 <_strtod_l+0x93c>)
 8008a42:	464b      	mov	r3, r9
 8008a44:	2900      	cmp	r1, #0
 8008a46:	f000 8084 	beq.w	8008b52 <_strtod_l+0x8fa>
 8008a4a:	ea02 0109 	and.w	r1, r2, r9
 8008a4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a52:	dc7e      	bgt.n	8008b52 <_strtod_l+0x8fa>
 8008a54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a58:	f77f aeb3 	ble.w	80087c2 <_strtod_l+0x56a>
 8008a5c:	4b4e      	ldr	r3, [pc, #312]	; (8008b98 <_strtod_l+0x940>)
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4649      	mov	r1, r9
 8008a62:	2200      	movs	r2, #0
 8008a64:	f7f7 fdd0 	bl	8000608 <__aeabi_dmul>
 8008a68:	4b4a      	ldr	r3, [pc, #296]	; (8008b94 <_strtod_l+0x93c>)
 8008a6a:	400b      	ands	r3, r1
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4689      	mov	r9, r1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f ae3f 	bne.w	80086f4 <_strtod_l+0x49c>
 8008a76:	2322      	movs	r3, #34	; 0x22
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	e63b      	b.n	80086f4 <_strtod_l+0x49c>
 8008a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	ea03 0808 	and.w	r8, r3, r8
 8008a88:	e6e8      	b.n	800885c <_strtod_l+0x604>
 8008a8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008a8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008a92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008a96:	36e2      	adds	r6, #226	; 0xe2
 8008a98:	fa01 f306 	lsl.w	r3, r1, r6
 8008a9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008aa0:	e748      	b.n	8008934 <_strtod_l+0x6dc>
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008aaa:	e743      	b.n	8008934 <_strtod_l+0x6dc>
 8008aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008aae:	4632      	mov	r2, r6
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f002 ffcb 	bl	800ba4c <__lshift>
 8008ab6:	9016      	str	r0, [sp, #88]	; 0x58
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f47f af6b 	bne.w	8008994 <_strtod_l+0x73c>
 8008abe:	e60f      	b.n	80086e0 <_strtod_l+0x488>
 8008ac0:	46ca      	mov	sl, r9
 8008ac2:	d171      	bne.n	8008ba8 <_strtod_l+0x950>
 8008ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ac6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aca:	b352      	cbz	r2, 8008b22 <_strtod_l+0x8ca>
 8008acc:	4a33      	ldr	r2, [pc, #204]	; (8008b9c <_strtod_l+0x944>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d12a      	bne.n	8008b28 <_strtod_l+0x8d0>
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	b1fb      	cbz	r3, 8008b18 <_strtod_l+0x8c0>
 8008ad8:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <_strtod_l+0x93c>)
 8008ada:	ea09 0303 	and.w	r3, r9, r3
 8008ade:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	d81a      	bhi.n	8008b1e <_strtod_l+0x8c6>
 8008ae8:	0d1b      	lsrs	r3, r3, #20
 8008aea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	4299      	cmp	r1, r3
 8008af4:	d118      	bne.n	8008b28 <_strtod_l+0x8d0>
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <_strtod_l+0x948>)
 8008af8:	459a      	cmp	sl, r3
 8008afa:	d102      	bne.n	8008b02 <_strtod_l+0x8aa>
 8008afc:	3101      	adds	r1, #1
 8008afe:	f43f adef 	beq.w	80086e0 <_strtod_l+0x488>
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <_strtod_l+0x93c>)
 8008b04:	ea0a 0303 	and.w	r3, sl, r3
 8008b08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b0c:	f04f 0800 	mov.w	r8, #0
 8008b10:	9b04      	ldr	r3, [sp, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1a2      	bne.n	8008a5c <_strtod_l+0x804>
 8008b16:	e5ed      	b.n	80086f4 <_strtod_l+0x49c>
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	e7e9      	b.n	8008af2 <_strtod_l+0x89a>
 8008b1e:	4613      	mov	r3, r2
 8008b20:	e7e7      	b.n	8008af2 <_strtod_l+0x89a>
 8008b22:	ea53 0308 	orrs.w	r3, r3, r8
 8008b26:	d08a      	beq.n	8008a3e <_strtod_l+0x7e6>
 8008b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b2a:	b1e3      	cbz	r3, 8008b66 <_strtod_l+0x90e>
 8008b2c:	ea13 0f0a 	tst.w	r3, sl
 8008b30:	d0ee      	beq.n	8008b10 <_strtod_l+0x8b8>
 8008b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b34:	9a04      	ldr	r2, [sp, #16]
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	b1c3      	cbz	r3, 8008b6e <_strtod_l+0x916>
 8008b3c:	f7ff fb6e 	bl	800821c <sulp>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	ec51 0b18 	vmov	r0, r1, d8
 8008b48:	f7f7 fba8 	bl	800029c <__adddf3>
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4689      	mov	r9, r1
 8008b50:	e7de      	b.n	8008b10 <_strtod_l+0x8b8>
 8008b52:	4013      	ands	r3, r2
 8008b54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b60:	f04f 38ff 	mov.w	r8, #4294967295
 8008b64:	e7d4      	b.n	8008b10 <_strtod_l+0x8b8>
 8008b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b68:	ea13 0f08 	tst.w	r3, r8
 8008b6c:	e7e0      	b.n	8008b30 <_strtod_l+0x8d8>
 8008b6e:	f7ff fb55 	bl	800821c <sulp>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	ec51 0b18 	vmov	r0, r1, d8
 8008b7a:	f7f7 fb8d 	bl	8000298 <__aeabi_dsub>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2300      	movs	r3, #0
 8008b82:	4680      	mov	r8, r0
 8008b84:	4689      	mov	r9, r1
 8008b86:	f7f7 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0c0      	beq.n	8008b10 <_strtod_l+0x8b8>
 8008b8e:	e618      	b.n	80087c2 <_strtod_l+0x56a>
 8008b90:	fffffc02 	.word	0xfffffc02
 8008b94:	7ff00000 	.word	0x7ff00000
 8008b98:	39500000 	.word	0x39500000
 8008b9c:	000fffff 	.word	0x000fffff
 8008ba0:	7fefffff 	.word	0x7fefffff
 8008ba4:	0800eaf8 	.word	0x0800eaf8
 8008ba8:	4659      	mov	r1, fp
 8008baa:	4628      	mov	r0, r5
 8008bac:	f003 f92a 	bl	800be04 <__ratio>
 8008bb0:	ec57 6b10 	vmov	r6, r7, d0
 8008bb4:	ee10 0a10 	vmov	r0, s0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 ff9e 	bl	8000b00 <__aeabi_dcmple>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d071      	beq.n	8008cac <_strtod_l+0xa54>
 8008bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d17c      	bne.n	8008cc8 <_strtod_l+0xa70>
 8008bce:	f1b8 0f00 	cmp.w	r8, #0
 8008bd2:	d15a      	bne.n	8008c8a <_strtod_l+0xa32>
 8008bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d15d      	bne.n	8008c98 <_strtod_l+0xa40>
 8008bdc:	4b90      	ldr	r3, [pc, #576]	; (8008e20 <_strtod_l+0xbc8>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 ff82 	bl	8000aec <__aeabi_dcmplt>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d15c      	bne.n	8008ca6 <_strtod_l+0xa4e>
 8008bec:	4630      	mov	r0, r6
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4b8c      	ldr	r3, [pc, #560]	; (8008e24 <_strtod_l+0xbcc>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 fd08 	bl	8000608 <__aeabi_dmul>
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c00:	9606      	str	r6, [sp, #24]
 8008c02:	9307      	str	r3, [sp, #28]
 8008c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c0c:	4b86      	ldr	r3, [pc, #536]	; (8008e28 <_strtod_l+0xbd0>)
 8008c0e:	ea0a 0303 	and.w	r3, sl, r3
 8008c12:	930d      	str	r3, [sp, #52]	; 0x34
 8008c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c16:	4b85      	ldr	r3, [pc, #532]	; (8008e2c <_strtod_l+0xbd4>)
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	f040 8090 	bne.w	8008d3e <_strtod_l+0xae6>
 8008c1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c22:	ec49 8b10 	vmov	d0, r8, r9
 8008c26:	f003 f823 	bl	800bc70 <__ulp>
 8008c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c2e:	ec51 0b10 	vmov	r0, r1, d0
 8008c32:	f7f7 fce9 	bl	8000608 <__aeabi_dmul>
 8008c36:	4642      	mov	r2, r8
 8008c38:	464b      	mov	r3, r9
 8008c3a:	f7f7 fb2f 	bl	800029c <__adddf3>
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4979      	ldr	r1, [pc, #484]	; (8008e28 <_strtod_l+0xbd0>)
 8008c42:	4a7b      	ldr	r2, [pc, #492]	; (8008e30 <_strtod_l+0xbd8>)
 8008c44:	4019      	ands	r1, r3
 8008c46:	4291      	cmp	r1, r2
 8008c48:	4680      	mov	r8, r0
 8008c4a:	d944      	bls.n	8008cd6 <_strtod_l+0xa7e>
 8008c4c:	ee18 2a90 	vmov	r2, s17
 8008c50:	4b78      	ldr	r3, [pc, #480]	; (8008e34 <_strtod_l+0xbdc>)
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d104      	bne.n	8008c60 <_strtod_l+0xa08>
 8008c56:	ee18 3a10 	vmov	r3, s16
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f43f ad40 	beq.w	80086e0 <_strtod_l+0x488>
 8008c60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008e34 <_strtod_l+0xbdc>
 8008c64:	f04f 38ff 	mov.w	r8, #4294967295
 8008c68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f002 fcd4 	bl	800b618 <_Bfree>
 8008c70:	9905      	ldr	r1, [sp, #20]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f002 fcd0 	bl	800b618 <_Bfree>
 8008c78:	4659      	mov	r1, fp
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f002 fccc 	bl	800b618 <_Bfree>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4620      	mov	r0, r4
 8008c84:	f002 fcc8 	bl	800b618 <_Bfree>
 8008c88:	e609      	b.n	800889e <_strtod_l+0x646>
 8008c8a:	f1b8 0f01 	cmp.w	r8, #1
 8008c8e:	d103      	bne.n	8008c98 <_strtod_l+0xa40>
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	f43f ad95 	beq.w	80087c2 <_strtod_l+0x56a>
 8008c98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008df0 <_strtod_l+0xb98>
 8008c9c:	4f60      	ldr	r7, [pc, #384]	; (8008e20 <_strtod_l+0xbc8>)
 8008c9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	e7ae      	b.n	8008c04 <_strtod_l+0x9ac>
 8008ca6:	4f5f      	ldr	r7, [pc, #380]	; (8008e24 <_strtod_l+0xbcc>)
 8008ca8:	2600      	movs	r6, #0
 8008caa:	e7a7      	b.n	8008bfc <_strtod_l+0x9a4>
 8008cac:	4b5d      	ldr	r3, [pc, #372]	; (8008e24 <_strtod_l+0xbcc>)
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7f7 fca8 	bl	8000608 <__aeabi_dmul>
 8008cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d09c      	beq.n	8008bfc <_strtod_l+0x9a4>
 8008cc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cc6:	e79d      	b.n	8008c04 <_strtod_l+0x9ac>
 8008cc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008df8 <_strtod_l+0xba0>
 8008ccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cd0:	ec57 6b17 	vmov	r6, r7, d7
 8008cd4:	e796      	b.n	8008c04 <_strtod_l+0x9ac>
 8008cd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	46ca      	mov	sl, r9
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1c2      	bne.n	8008c68 <_strtod_l+0xa10>
 8008ce2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ce8:	0d1b      	lsrs	r3, r3, #20
 8008cea:	051b      	lsls	r3, r3, #20
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d1bb      	bne.n	8008c68 <_strtod_l+0xa10>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 ffe8 	bl	8000cc8 <__aeabi_d2lz>
 8008cf8:	f7f7 fc58 	bl	80005ac <__aeabi_l2d>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fac8 	bl	8000298 <__aeabi_dsub>
 8008d08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d0e:	ea43 0308 	orr.w	r3, r3, r8
 8008d12:	4313      	orrs	r3, r2
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	d054      	beq.n	8008dc4 <_strtod_l+0xb6c>
 8008d1a:	a339      	add	r3, pc, #228	; (adr r3, 8008e00 <_strtod_l+0xba8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fee4 	bl	8000aec <__aeabi_dcmplt>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	f47f ace5 	bne.w	80086f4 <_strtod_l+0x49c>
 8008d2a:	a337      	add	r3, pc, #220	; (adr r3, 8008e08 <_strtod_l+0xbb0>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d095      	beq.n	8008c68 <_strtod_l+0xa10>
 8008d3c:	e4da      	b.n	80086f4 <_strtod_l+0x49c>
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	b333      	cbz	r3, 8008d90 <_strtod_l+0xb38>
 8008d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d48:	d822      	bhi.n	8008d90 <_strtod_l+0xb38>
 8008d4a:	a331      	add	r3, pc, #196	; (adr r3, 8008e10 <_strtod_l+0xbb8>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 fed4 	bl	8000b00 <__aeabi_dcmple>
 8008d58:	b1a0      	cbz	r0, 8008d84 <_strtod_l+0xb2c>
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7f7 ff2b 	bl	8000bb8 <__aeabi_d2uiz>
 8008d62:	2801      	cmp	r0, #1
 8008d64:	bf38      	it	cc
 8008d66:	2001      	movcc	r0, #1
 8008d68:	f7f7 fbd4 	bl	8000514 <__aeabi_ui2d>
 8008d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6e:	4606      	mov	r6, r0
 8008d70:	460f      	mov	r7, r1
 8008d72:	bb23      	cbnz	r3, 8008dbe <_strtod_l+0xb66>
 8008d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d78:	9010      	str	r0, [sp, #64]	; 0x40
 8008d7a:	9311      	str	r3, [sp, #68]	; 0x44
 8008d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d94:	eeb0 0a48 	vmov.f32	s0, s16
 8008d98:	eef0 0a68 	vmov.f32	s1, s17
 8008d9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008da0:	f002 ff66 	bl	800bc70 <__ulp>
 8008da4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008da8:	ec53 2b10 	vmov	r2, r3, d0
 8008dac:	f7f7 fc2c 	bl	8000608 <__aeabi_dmul>
 8008db0:	ec53 2b18 	vmov	r2, r3, d8
 8008db4:	f7f7 fa72 	bl	800029c <__adddf3>
 8008db8:	4680      	mov	r8, r0
 8008dba:	4689      	mov	r9, r1
 8008dbc:	e78d      	b.n	8008cda <_strtod_l+0xa82>
 8008dbe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008dc2:	e7db      	b.n	8008d7c <_strtod_l+0xb24>
 8008dc4:	a314      	add	r3, pc, #80	; (adr r3, 8008e18 <_strtod_l+0xbc0>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fe8f 	bl	8000aec <__aeabi_dcmplt>
 8008dce:	e7b3      	b.n	8008d38 <_strtod_l+0xae0>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	f7ff ba7c 	b.w	80082d6 <_strtod_l+0x7e>
 8008dde:	2a65      	cmp	r2, #101	; 0x65
 8008de0:	f43f ab75 	beq.w	80084ce <_strtod_l+0x276>
 8008de4:	2a45      	cmp	r2, #69	; 0x45
 8008de6:	f43f ab72 	beq.w	80084ce <_strtod_l+0x276>
 8008dea:	2301      	movs	r3, #1
 8008dec:	f7ff bbaa 	b.w	8008544 <_strtod_l+0x2ec>
 8008df0:	00000000 	.word	0x00000000
 8008df4:	bff00000 	.word	0xbff00000
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	94a03595 	.word	0x94a03595
 8008e04:	3fdfffff 	.word	0x3fdfffff
 8008e08:	35afe535 	.word	0x35afe535
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	ffc00000 	.word	0xffc00000
 8008e14:	41dfffff 	.word	0x41dfffff
 8008e18:	94a03595 	.word	0x94a03595
 8008e1c:	3fcfffff 	.word	0x3fcfffff
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	3fe00000 	.word	0x3fe00000
 8008e28:	7ff00000 	.word	0x7ff00000
 8008e2c:	7fe00000 	.word	0x7fe00000
 8008e30:	7c9fffff 	.word	0x7c9fffff
 8008e34:	7fefffff 	.word	0x7fefffff

08008e38 <_strtod_r>:
 8008e38:	4b01      	ldr	r3, [pc, #4]	; (8008e40 <_strtod_r+0x8>)
 8008e3a:	f7ff ba0d 	b.w	8008258 <_strtod_l>
 8008e3e:	bf00      	nop
 8008e40:	20000028 	.word	0x20000028

08008e44 <__cvt>:
 8008e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	ec55 4b10 	vmov	r4, r5, d0
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	460e      	mov	r6, r1
 8008e50:	4619      	mov	r1, r3
 8008e52:	462b      	mov	r3, r5
 8008e54:	bfbb      	ittet	lt
 8008e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e5a:	461d      	movlt	r5, r3
 8008e5c:	2300      	movge	r3, #0
 8008e5e:	232d      	movlt	r3, #45	; 0x2d
 8008e60:	700b      	strb	r3, [r1, #0]
 8008e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e68:	4691      	mov	r9, r2
 8008e6a:	f023 0820 	bic.w	r8, r3, #32
 8008e6e:	bfbc      	itt	lt
 8008e70:	4622      	movlt	r2, r4
 8008e72:	4614      	movlt	r4, r2
 8008e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e78:	d005      	beq.n	8008e86 <__cvt+0x42>
 8008e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e7e:	d100      	bne.n	8008e82 <__cvt+0x3e>
 8008e80:	3601      	adds	r6, #1
 8008e82:	2102      	movs	r1, #2
 8008e84:	e000      	b.n	8008e88 <__cvt+0x44>
 8008e86:	2103      	movs	r1, #3
 8008e88:	ab03      	add	r3, sp, #12
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	ab02      	add	r3, sp, #8
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	ec45 4b10 	vmov	d0, r4, r5
 8008e94:	4653      	mov	r3, sl
 8008e96:	4632      	mov	r2, r6
 8008e98:	f001 f9d6 	bl	800a248 <_dtoa_r>
 8008e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	d102      	bne.n	8008eaa <__cvt+0x66>
 8008ea4:	f019 0f01 	tst.w	r9, #1
 8008ea8:	d022      	beq.n	8008ef0 <__cvt+0xac>
 8008eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008eae:	eb07 0906 	add.w	r9, r7, r6
 8008eb2:	d110      	bne.n	8008ed6 <__cvt+0x92>
 8008eb4:	783b      	ldrb	r3, [r7, #0]
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	d10a      	bne.n	8008ed0 <__cvt+0x8c>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	f7f7 fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ec6:	b918      	cbnz	r0, 8008ed0 <__cvt+0x8c>
 8008ec8:	f1c6 0601 	rsb	r6, r6, #1
 8008ecc:	f8ca 6000 	str.w	r6, [sl]
 8008ed0:	f8da 3000 	ldr.w	r3, [sl]
 8008ed4:	4499      	add	r9, r3
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4620      	mov	r0, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	f7f7 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ee2:	b108      	cbz	r0, 8008ee8 <__cvt+0xa4>
 8008ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ee8:	2230      	movs	r2, #48	; 0x30
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	454b      	cmp	r3, r9
 8008eee:	d307      	bcc.n	8008f00 <__cvt+0xbc>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ef4:	1bdb      	subs	r3, r3, r7
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	b004      	add	sp, #16
 8008efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f00:	1c59      	adds	r1, r3, #1
 8008f02:	9103      	str	r1, [sp, #12]
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e7f0      	b.n	8008eea <__cvt+0xa6>

08008f08 <__exponent>:
 8008f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	bfb8      	it	lt
 8008f10:	4249      	neglt	r1, r1
 8008f12:	f803 2b02 	strb.w	r2, [r3], #2
 8008f16:	bfb4      	ite	lt
 8008f18:	222d      	movlt	r2, #45	; 0x2d
 8008f1a:	222b      	movge	r2, #43	; 0x2b
 8008f1c:	2909      	cmp	r1, #9
 8008f1e:	7042      	strb	r2, [r0, #1]
 8008f20:	dd2a      	ble.n	8008f78 <__exponent+0x70>
 8008f22:	f10d 0207 	add.w	r2, sp, #7
 8008f26:	4617      	mov	r7, r2
 8008f28:	260a      	movs	r6, #10
 8008f2a:	4694      	mov	ip, r2
 8008f2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f30:	fb06 1415 	mls	r4, r6, r5, r1
 8008f34:	3430      	adds	r4, #48	; 0x30
 8008f36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	2c63      	cmp	r4, #99	; 0x63
 8008f3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f42:	4629      	mov	r1, r5
 8008f44:	dcf1      	bgt.n	8008f2a <__exponent+0x22>
 8008f46:	3130      	adds	r1, #48	; 0x30
 8008f48:	f1ac 0402 	sub.w	r4, ip, #2
 8008f4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f50:	1c41      	adds	r1, r0, #1
 8008f52:	4622      	mov	r2, r4
 8008f54:	42ba      	cmp	r2, r7
 8008f56:	d30a      	bcc.n	8008f6e <__exponent+0x66>
 8008f58:	f10d 0209 	add.w	r2, sp, #9
 8008f5c:	eba2 020c 	sub.w	r2, r2, ip
 8008f60:	42bc      	cmp	r4, r7
 8008f62:	bf88      	it	hi
 8008f64:	2200      	movhi	r2, #0
 8008f66:	4413      	add	r3, r2
 8008f68:	1a18      	subs	r0, r3, r0
 8008f6a:	b003      	add	sp, #12
 8008f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f76:	e7ed      	b.n	8008f54 <__exponent+0x4c>
 8008f78:	2330      	movs	r3, #48	; 0x30
 8008f7a:	3130      	adds	r1, #48	; 0x30
 8008f7c:	7083      	strb	r3, [r0, #2]
 8008f7e:	70c1      	strb	r1, [r0, #3]
 8008f80:	1d03      	adds	r3, r0, #4
 8008f82:	e7f1      	b.n	8008f68 <__exponent+0x60>

08008f84 <_printf_float>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	ed2d 8b02 	vpush	{d8}
 8008f8c:	b08d      	sub	sp, #52	; 0x34
 8008f8e:	460c      	mov	r4, r1
 8008f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f94:	4616      	mov	r6, r2
 8008f96:	461f      	mov	r7, r3
 8008f98:	4605      	mov	r5, r0
 8008f9a:	f001 f80b 	bl	8009fb4 <_localeconv_r>
 8008f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	f7f7 f96c 	bl	8000280 <strlen>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930a      	str	r3, [sp, #40]	; 0x28
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	f103 0208 	add.w	r2, r3, #8
 8008fc2:	f8c8 2000 	str.w	r2, [r8]
 8008fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fd4:	ee08 0a10 	vmov	s16, r0
 8008fd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fe0:	4b9e      	ldr	r3, [pc, #632]	; (800925c <_printf_float+0x2d8>)
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	f7f7 fda9 	bl	8000b3c <__aeabi_dcmpun>
 8008fea:	bb88      	cbnz	r0, 8009050 <_printf_float+0xcc>
 8008fec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff0:	4b9a      	ldr	r3, [pc, #616]	; (800925c <_printf_float+0x2d8>)
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	f7f7 fd83 	bl	8000b00 <__aeabi_dcmple>
 8008ffa:	bb48      	cbnz	r0, 8009050 <_printf_float+0xcc>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 fd72 	bl	8000aec <__aeabi_dcmplt>
 8009008:	b110      	cbz	r0, 8009010 <_printf_float+0x8c>
 800900a:	232d      	movs	r3, #45	; 0x2d
 800900c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009010:	4a93      	ldr	r2, [pc, #588]	; (8009260 <_printf_float+0x2dc>)
 8009012:	4b94      	ldr	r3, [pc, #592]	; (8009264 <_printf_float+0x2e0>)
 8009014:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009018:	bf94      	ite	ls
 800901a:	4690      	movls	r8, r2
 800901c:	4698      	movhi	r8, r3
 800901e:	2303      	movs	r3, #3
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	f023 0304 	bic.w	r3, r3, #4
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	f04f 0900 	mov.w	r9, #0
 800902e:	9700      	str	r7, [sp, #0]
 8009030:	4633      	mov	r3, r6
 8009032:	aa0b      	add	r2, sp, #44	; 0x2c
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f9da 	bl	80093f0 <_printf_common>
 800903c:	3001      	adds	r0, #1
 800903e:	f040 8090 	bne.w	8009162 <_printf_float+0x1de>
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	b00d      	add	sp, #52	; 0x34
 8009048:	ecbd 8b02 	vpop	{d8}
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd70 	bl	8000b3c <__aeabi_dcmpun>
 800905c:	b140      	cbz	r0, 8009070 <_printf_float+0xec>
 800905e:	464b      	mov	r3, r9
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbc      	itt	lt
 8009064:	232d      	movlt	r3, #45	; 0x2d
 8009066:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800906a:	4a7f      	ldr	r2, [pc, #508]	; (8009268 <_printf_float+0x2e4>)
 800906c:	4b7f      	ldr	r3, [pc, #508]	; (800926c <_printf_float+0x2e8>)
 800906e:	e7d1      	b.n	8009014 <_printf_float+0x90>
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009076:	9206      	str	r2, [sp, #24]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	d13f      	bne.n	80090fc <_printf_float+0x178>
 800907c:	2306      	movs	r3, #6
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	6861      	ldr	r1, [r4, #4]
 8009084:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009088:	2300      	movs	r3, #0
 800908a:	9303      	str	r3, [sp, #12]
 800908c:	ab0a      	add	r3, sp, #40	; 0x28
 800908e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009092:	ab09      	add	r3, sp, #36	; 0x24
 8009094:	ec49 8b10 	vmov	d0, r8, r9
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090a0:	4628      	mov	r0, r5
 80090a2:	f7ff fecf 	bl	8008e44 <__cvt>
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090aa:	2b47      	cmp	r3, #71	; 0x47
 80090ac:	4680      	mov	r8, r0
 80090ae:	d108      	bne.n	80090c2 <_printf_float+0x13e>
 80090b0:	1cc8      	adds	r0, r1, #3
 80090b2:	db02      	blt.n	80090ba <_printf_float+0x136>
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	4299      	cmp	r1, r3
 80090b8:	dd41      	ble.n	800913e <_printf_float+0x1ba>
 80090ba:	f1ab 0302 	sub.w	r3, fp, #2
 80090be:	fa5f fb83 	uxtb.w	fp, r3
 80090c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090c6:	d820      	bhi.n	800910a <_printf_float+0x186>
 80090c8:	3901      	subs	r1, #1
 80090ca:	465a      	mov	r2, fp
 80090cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090d0:	9109      	str	r1, [sp, #36]	; 0x24
 80090d2:	f7ff ff19 	bl	8008f08 <__exponent>
 80090d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d8:	1813      	adds	r3, r2, r0
 80090da:	2a01      	cmp	r2, #1
 80090dc:	4681      	mov	r9, r0
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	dc02      	bgt.n	80090e8 <_printf_float+0x164>
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	07d2      	lsls	r2, r2, #31
 80090e6:	d501      	bpl.n	80090ec <_printf_float+0x168>
 80090e8:	3301      	adds	r3, #1
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d09c      	beq.n	800902e <_printf_float+0xaa>
 80090f4:	232d      	movs	r3, #45	; 0x2d
 80090f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fa:	e798      	b.n	800902e <_printf_float+0xaa>
 80090fc:	9a06      	ldr	r2, [sp, #24]
 80090fe:	2a47      	cmp	r2, #71	; 0x47
 8009100:	d1be      	bne.n	8009080 <_printf_float+0xfc>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1bc      	bne.n	8009080 <_printf_float+0xfc>
 8009106:	2301      	movs	r3, #1
 8009108:	e7b9      	b.n	800907e <_printf_float+0xfa>
 800910a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800910e:	d118      	bne.n	8009142 <_printf_float+0x1be>
 8009110:	2900      	cmp	r1, #0
 8009112:	6863      	ldr	r3, [r4, #4]
 8009114:	dd0b      	ble.n	800912e <_printf_float+0x1aa>
 8009116:	6121      	str	r1, [r4, #16]
 8009118:	b913      	cbnz	r3, 8009120 <_printf_float+0x19c>
 800911a:	6822      	ldr	r2, [r4, #0]
 800911c:	07d0      	lsls	r0, r2, #31
 800911e:	d502      	bpl.n	8009126 <_printf_float+0x1a2>
 8009120:	3301      	adds	r3, #1
 8009122:	440b      	add	r3, r1
 8009124:	6123      	str	r3, [r4, #16]
 8009126:	65a1      	str	r1, [r4, #88]	; 0x58
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	e7de      	b.n	80090ec <_printf_float+0x168>
 800912e:	b913      	cbnz	r3, 8009136 <_printf_float+0x1b2>
 8009130:	6822      	ldr	r2, [r4, #0]
 8009132:	07d2      	lsls	r2, r2, #31
 8009134:	d501      	bpl.n	800913a <_printf_float+0x1b6>
 8009136:	3302      	adds	r3, #2
 8009138:	e7f4      	b.n	8009124 <_printf_float+0x1a0>
 800913a:	2301      	movs	r3, #1
 800913c:	e7f2      	b.n	8009124 <_printf_float+0x1a0>
 800913e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009144:	4299      	cmp	r1, r3
 8009146:	db05      	blt.n	8009154 <_printf_float+0x1d0>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	6121      	str	r1, [r4, #16]
 800914c:	07d8      	lsls	r0, r3, #31
 800914e:	d5ea      	bpl.n	8009126 <_printf_float+0x1a2>
 8009150:	1c4b      	adds	r3, r1, #1
 8009152:	e7e7      	b.n	8009124 <_printf_float+0x1a0>
 8009154:	2900      	cmp	r1, #0
 8009156:	bfd4      	ite	le
 8009158:	f1c1 0202 	rsble	r2, r1, #2
 800915c:	2201      	movgt	r2, #1
 800915e:	4413      	add	r3, r2
 8009160:	e7e0      	b.n	8009124 <_printf_float+0x1a0>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	055a      	lsls	r2, r3, #21
 8009166:	d407      	bmi.n	8009178 <_printf_float+0x1f4>
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	4642      	mov	r2, r8
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	d12c      	bne.n	80091d0 <_printf_float+0x24c>
 8009176:	e764      	b.n	8009042 <_printf_float+0xbe>
 8009178:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800917c:	f240 80e0 	bls.w	8009340 <_printf_float+0x3bc>
 8009180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	f7f7 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800918c:	2800      	cmp	r0, #0
 800918e:	d034      	beq.n	80091fa <_printf_float+0x276>
 8009190:	4a37      	ldr	r2, [pc, #220]	; (8009270 <_printf_float+0x2ec>)
 8009192:	2301      	movs	r3, #1
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	f43f af51 	beq.w	8009042 <_printf_float+0xbe>
 80091a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091a4:	429a      	cmp	r2, r3
 80091a6:	db02      	blt.n	80091ae <_printf_float+0x22a>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07d8      	lsls	r0, r3, #31
 80091ac:	d510      	bpl.n	80091d0 <_printf_float+0x24c>
 80091ae:	ee18 3a10 	vmov	r3, s16
 80091b2:	4652      	mov	r2, sl
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	f43f af41 	beq.w	8009042 <_printf_float+0xbe>
 80091c0:	f04f 0800 	mov.w	r8, #0
 80091c4:	f104 091a 	add.w	r9, r4, #26
 80091c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4543      	cmp	r3, r8
 80091ce:	dc09      	bgt.n	80091e4 <_printf_float+0x260>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	079b      	lsls	r3, r3, #30
 80091d4:	f100 8107 	bmi.w	80093e6 <_printf_float+0x462>
 80091d8:	68e0      	ldr	r0, [r4, #12]
 80091da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091dc:	4298      	cmp	r0, r3
 80091de:	bfb8      	it	lt
 80091e0:	4618      	movlt	r0, r3
 80091e2:	e730      	b.n	8009046 <_printf_float+0xc2>
 80091e4:	2301      	movs	r3, #1
 80091e6:	464a      	mov	r2, r9
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f af27 	beq.w	8009042 <_printf_float+0xbe>
 80091f4:	f108 0801 	add.w	r8, r8, #1
 80091f8:	e7e6      	b.n	80091c8 <_printf_float+0x244>
 80091fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dc39      	bgt.n	8009274 <_printf_float+0x2f0>
 8009200:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <_printf_float+0x2ec>)
 8009202:	2301      	movs	r3, #1
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	f43f af19 	beq.w	8009042 <_printf_float+0xbe>
 8009210:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009214:	4313      	orrs	r3, r2
 8009216:	d102      	bne.n	800921e <_printf_float+0x29a>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	d5d8      	bpl.n	80091d0 <_printf_float+0x24c>
 800921e:	ee18 3a10 	vmov	r3, s16
 8009222:	4652      	mov	r2, sl
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f af09 	beq.w	8009042 <_printf_float+0xbe>
 8009230:	f04f 0900 	mov.w	r9, #0
 8009234:	f104 0a1a 	add.w	sl, r4, #26
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	425b      	negs	r3, r3
 800923c:	454b      	cmp	r3, r9
 800923e:	dc01      	bgt.n	8009244 <_printf_float+0x2c0>
 8009240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009242:	e792      	b.n	800916a <_printf_float+0x1e6>
 8009244:	2301      	movs	r3, #1
 8009246:	4652      	mov	r2, sl
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	f43f aef7 	beq.w	8009042 <_printf_float+0xbe>
 8009254:	f109 0901 	add.w	r9, r9, #1
 8009258:	e7ee      	b.n	8009238 <_printf_float+0x2b4>
 800925a:	bf00      	nop
 800925c:	7fefffff 	.word	0x7fefffff
 8009260:	0800eb20 	.word	0x0800eb20
 8009264:	0800eb24 	.word	0x0800eb24
 8009268:	0800eb28 	.word	0x0800eb28
 800926c:	0800eb2c 	.word	0x0800eb2c
 8009270:	0800eb30 	.word	0x0800eb30
 8009274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009278:	429a      	cmp	r2, r3
 800927a:	bfa8      	it	ge
 800927c:	461a      	movge	r2, r3
 800927e:	2a00      	cmp	r2, #0
 8009280:	4691      	mov	r9, r2
 8009282:	dc37      	bgt.n	80092f4 <_printf_float+0x370>
 8009284:	f04f 0b00 	mov.w	fp, #0
 8009288:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800928c:	f104 021a 	add.w	r2, r4, #26
 8009290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009292:	9305      	str	r3, [sp, #20]
 8009294:	eba3 0309 	sub.w	r3, r3, r9
 8009298:	455b      	cmp	r3, fp
 800929a:	dc33      	bgt.n	8009304 <_printf_float+0x380>
 800929c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a0:	429a      	cmp	r2, r3
 80092a2:	db3b      	blt.n	800931c <_printf_float+0x398>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	07da      	lsls	r2, r3, #31
 80092a8:	d438      	bmi.n	800931c <_printf_float+0x398>
 80092aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092ae:	eba2 0903 	sub.w	r9, r2, r3
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	1ad2      	subs	r2, r2, r3
 80092b6:	4591      	cmp	r9, r2
 80092b8:	bfa8      	it	ge
 80092ba:	4691      	movge	r9, r2
 80092bc:	f1b9 0f00 	cmp.w	r9, #0
 80092c0:	dc35      	bgt.n	800932e <_printf_float+0x3aa>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ca:	f104 0a1a 	add.w	sl, r4, #26
 80092ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	eba3 0309 	sub.w	r3, r3, r9
 80092d8:	4543      	cmp	r3, r8
 80092da:	f77f af79 	ble.w	80091d0 <_printf_float+0x24c>
 80092de:	2301      	movs	r3, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f aeaa 	beq.w	8009042 <_printf_float+0xbe>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	e7ec      	b.n	80092ce <_printf_float+0x34a>
 80092f4:	4613      	mov	r3, r2
 80092f6:	4631      	mov	r1, r6
 80092f8:	4642      	mov	r2, r8
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	d1c0      	bne.n	8009284 <_printf_float+0x300>
 8009302:	e69e      	b.n	8009042 <_printf_float+0xbe>
 8009304:	2301      	movs	r3, #1
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	9205      	str	r2, [sp, #20]
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f ae97 	beq.w	8009042 <_printf_float+0xbe>
 8009314:	9a05      	ldr	r2, [sp, #20]
 8009316:	f10b 0b01 	add.w	fp, fp, #1
 800931a:	e7b9      	b.n	8009290 <_printf_float+0x30c>
 800931c:	ee18 3a10 	vmov	r3, s16
 8009320:	4652      	mov	r2, sl
 8009322:	4631      	mov	r1, r6
 8009324:	4628      	mov	r0, r5
 8009326:	47b8      	blx	r7
 8009328:	3001      	adds	r0, #1
 800932a:	d1be      	bne.n	80092aa <_printf_float+0x326>
 800932c:	e689      	b.n	8009042 <_printf_float+0xbe>
 800932e:	9a05      	ldr	r2, [sp, #20]
 8009330:	464b      	mov	r3, r9
 8009332:	4442      	add	r2, r8
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	d1c1      	bne.n	80092c2 <_printf_float+0x33e>
 800933e:	e680      	b.n	8009042 <_printf_float+0xbe>
 8009340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009342:	2a01      	cmp	r2, #1
 8009344:	dc01      	bgt.n	800934a <_printf_float+0x3c6>
 8009346:	07db      	lsls	r3, r3, #31
 8009348:	d53a      	bpl.n	80093c0 <_printf_float+0x43c>
 800934a:	2301      	movs	r3, #1
 800934c:	4642      	mov	r2, r8
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	47b8      	blx	r7
 8009354:	3001      	adds	r0, #1
 8009356:	f43f ae74 	beq.w	8009042 <_printf_float+0xbe>
 800935a:	ee18 3a10 	vmov	r3, s16
 800935e:	4652      	mov	r2, sl
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f ae6b 	beq.w	8009042 <_printf_float+0xbe>
 800936c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009378:	f7f7 fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800937c:	b9d8      	cbnz	r0, 80093b6 <_printf_float+0x432>
 800937e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009382:	f108 0201 	add.w	r2, r8, #1
 8009386:	4631      	mov	r1, r6
 8009388:	4628      	mov	r0, r5
 800938a:	47b8      	blx	r7
 800938c:	3001      	adds	r0, #1
 800938e:	d10e      	bne.n	80093ae <_printf_float+0x42a>
 8009390:	e657      	b.n	8009042 <_printf_float+0xbe>
 8009392:	2301      	movs	r3, #1
 8009394:	4652      	mov	r2, sl
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f ae50 	beq.w	8009042 <_printf_float+0xbe>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a8:	3b01      	subs	r3, #1
 80093aa:	4543      	cmp	r3, r8
 80093ac:	dcf1      	bgt.n	8009392 <_printf_float+0x40e>
 80093ae:	464b      	mov	r3, r9
 80093b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093b4:	e6da      	b.n	800916c <_printf_float+0x1e8>
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	f104 0a1a 	add.w	sl, r4, #26
 80093be:	e7f2      	b.n	80093a6 <_printf_float+0x422>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4642      	mov	r2, r8
 80093c4:	e7df      	b.n	8009386 <_printf_float+0x402>
 80093c6:	2301      	movs	r3, #1
 80093c8:	464a      	mov	r2, r9
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f ae36 	beq.w	8009042 <_printf_float+0xbe>
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093de:	1a5b      	subs	r3, r3, r1
 80093e0:	4543      	cmp	r3, r8
 80093e2:	dcf0      	bgt.n	80093c6 <_printf_float+0x442>
 80093e4:	e6f8      	b.n	80091d8 <_printf_float+0x254>
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	f104 0919 	add.w	r9, r4, #25
 80093ee:	e7f4      	b.n	80093da <_printf_float+0x456>

080093f0 <_printf_common>:
 80093f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	4616      	mov	r6, r2
 80093f6:	4699      	mov	r9, r3
 80093f8:	688a      	ldr	r2, [r1, #8]
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009400:	4293      	cmp	r3, r2
 8009402:	bfb8      	it	lt
 8009404:	4613      	movlt	r3, r2
 8009406:	6033      	str	r3, [r6, #0]
 8009408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800940c:	4607      	mov	r7, r0
 800940e:	460c      	mov	r4, r1
 8009410:	b10a      	cbz	r2, 8009416 <_printf_common+0x26>
 8009412:	3301      	adds	r3, #1
 8009414:	6033      	str	r3, [r6, #0]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	0699      	lsls	r1, r3, #26
 800941a:	bf42      	ittt	mi
 800941c:	6833      	ldrmi	r3, [r6, #0]
 800941e:	3302      	addmi	r3, #2
 8009420:	6033      	strmi	r3, [r6, #0]
 8009422:	6825      	ldr	r5, [r4, #0]
 8009424:	f015 0506 	ands.w	r5, r5, #6
 8009428:	d106      	bne.n	8009438 <_printf_common+0x48>
 800942a:	f104 0a19 	add.w	sl, r4, #25
 800942e:	68e3      	ldr	r3, [r4, #12]
 8009430:	6832      	ldr	r2, [r6, #0]
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	42ab      	cmp	r3, r5
 8009436:	dc26      	bgt.n	8009486 <_printf_common+0x96>
 8009438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800943c:	1e13      	subs	r3, r2, #0
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	bf18      	it	ne
 8009442:	2301      	movne	r3, #1
 8009444:	0692      	lsls	r2, r2, #26
 8009446:	d42b      	bmi.n	80094a0 <_printf_common+0xb0>
 8009448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800944c:	4649      	mov	r1, r9
 800944e:	4638      	mov	r0, r7
 8009450:	47c0      	blx	r8
 8009452:	3001      	adds	r0, #1
 8009454:	d01e      	beq.n	8009494 <_printf_common+0xa4>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	6922      	ldr	r2, [r4, #16]
 800945a:	f003 0306 	and.w	r3, r3, #6
 800945e:	2b04      	cmp	r3, #4
 8009460:	bf02      	ittt	eq
 8009462:	68e5      	ldreq	r5, [r4, #12]
 8009464:	6833      	ldreq	r3, [r6, #0]
 8009466:	1aed      	subeq	r5, r5, r3
 8009468:	68a3      	ldr	r3, [r4, #8]
 800946a:	bf0c      	ite	eq
 800946c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009470:	2500      	movne	r5, #0
 8009472:	4293      	cmp	r3, r2
 8009474:	bfc4      	itt	gt
 8009476:	1a9b      	subgt	r3, r3, r2
 8009478:	18ed      	addgt	r5, r5, r3
 800947a:	2600      	movs	r6, #0
 800947c:	341a      	adds	r4, #26
 800947e:	42b5      	cmp	r5, r6
 8009480:	d11a      	bne.n	80094b8 <_printf_common+0xc8>
 8009482:	2000      	movs	r0, #0
 8009484:	e008      	b.n	8009498 <_printf_common+0xa8>
 8009486:	2301      	movs	r3, #1
 8009488:	4652      	mov	r2, sl
 800948a:	4649      	mov	r1, r9
 800948c:	4638      	mov	r0, r7
 800948e:	47c0      	blx	r8
 8009490:	3001      	adds	r0, #1
 8009492:	d103      	bne.n	800949c <_printf_common+0xac>
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949c:	3501      	adds	r5, #1
 800949e:	e7c6      	b.n	800942e <_printf_common+0x3e>
 80094a0:	18e1      	adds	r1, r4, r3
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	2030      	movs	r0, #48	; 0x30
 80094a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094aa:	4422      	add	r2, r4
 80094ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094b4:	3302      	adds	r3, #2
 80094b6:	e7c7      	b.n	8009448 <_printf_common+0x58>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4622      	mov	r2, r4
 80094bc:	4649      	mov	r1, r9
 80094be:	4638      	mov	r0, r7
 80094c0:	47c0      	blx	r8
 80094c2:	3001      	adds	r0, #1
 80094c4:	d0e6      	beq.n	8009494 <_printf_common+0xa4>
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7d9      	b.n	800947e <_printf_common+0x8e>
	...

080094cc <_printf_i>:
 80094cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	7e0f      	ldrb	r7, [r1, #24]
 80094d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094d4:	2f78      	cmp	r7, #120	; 0x78
 80094d6:	4691      	mov	r9, r2
 80094d8:	4680      	mov	r8, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	469a      	mov	sl, r3
 80094de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094e2:	d807      	bhi.n	80094f4 <_printf_i+0x28>
 80094e4:	2f62      	cmp	r7, #98	; 0x62
 80094e6:	d80a      	bhi.n	80094fe <_printf_i+0x32>
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	f000 80d4 	beq.w	8009696 <_printf_i+0x1ca>
 80094ee:	2f58      	cmp	r7, #88	; 0x58
 80094f0:	f000 80c0 	beq.w	8009674 <_printf_i+0x1a8>
 80094f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094fc:	e03a      	b.n	8009574 <_printf_i+0xa8>
 80094fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009502:	2b15      	cmp	r3, #21
 8009504:	d8f6      	bhi.n	80094f4 <_printf_i+0x28>
 8009506:	a101      	add	r1, pc, #4	; (adr r1, 800950c <_printf_i+0x40>)
 8009508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800950c:	08009565 	.word	0x08009565
 8009510:	08009579 	.word	0x08009579
 8009514:	080094f5 	.word	0x080094f5
 8009518:	080094f5 	.word	0x080094f5
 800951c:	080094f5 	.word	0x080094f5
 8009520:	080094f5 	.word	0x080094f5
 8009524:	08009579 	.word	0x08009579
 8009528:	080094f5 	.word	0x080094f5
 800952c:	080094f5 	.word	0x080094f5
 8009530:	080094f5 	.word	0x080094f5
 8009534:	080094f5 	.word	0x080094f5
 8009538:	0800967d 	.word	0x0800967d
 800953c:	080095a5 	.word	0x080095a5
 8009540:	08009637 	.word	0x08009637
 8009544:	080094f5 	.word	0x080094f5
 8009548:	080094f5 	.word	0x080094f5
 800954c:	0800969f 	.word	0x0800969f
 8009550:	080094f5 	.word	0x080094f5
 8009554:	080095a5 	.word	0x080095a5
 8009558:	080094f5 	.word	0x080094f5
 800955c:	080094f5 	.word	0x080094f5
 8009560:	0800963f 	.word	0x0800963f
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	1d1a      	adds	r2, r3, #4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	602a      	str	r2, [r5, #0]
 800956c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009574:	2301      	movs	r3, #1
 8009576:	e09f      	b.n	80096b8 <_printf_i+0x1ec>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	0607      	lsls	r7, r0, #24
 800957e:	f103 0104 	add.w	r1, r3, #4
 8009582:	6029      	str	r1, [r5, #0]
 8009584:	d501      	bpl.n	800958a <_printf_i+0xbe>
 8009586:	681e      	ldr	r6, [r3, #0]
 8009588:	e003      	b.n	8009592 <_printf_i+0xc6>
 800958a:	0646      	lsls	r6, r0, #25
 800958c:	d5fb      	bpl.n	8009586 <_printf_i+0xba>
 800958e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009592:	2e00      	cmp	r6, #0
 8009594:	da03      	bge.n	800959e <_printf_i+0xd2>
 8009596:	232d      	movs	r3, #45	; 0x2d
 8009598:	4276      	negs	r6, r6
 800959a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800959e:	485a      	ldr	r0, [pc, #360]	; (8009708 <_printf_i+0x23c>)
 80095a0:	230a      	movs	r3, #10
 80095a2:	e012      	b.n	80095ca <_printf_i+0xfe>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	1d19      	adds	r1, r3, #4
 80095aa:	6029      	str	r1, [r5, #0]
 80095ac:	0605      	lsls	r5, r0, #24
 80095ae:	d501      	bpl.n	80095b4 <_printf_i+0xe8>
 80095b0:	681e      	ldr	r6, [r3, #0]
 80095b2:	e002      	b.n	80095ba <_printf_i+0xee>
 80095b4:	0641      	lsls	r1, r0, #25
 80095b6:	d5fb      	bpl.n	80095b0 <_printf_i+0xe4>
 80095b8:	881e      	ldrh	r6, [r3, #0]
 80095ba:	4853      	ldr	r0, [pc, #332]	; (8009708 <_printf_i+0x23c>)
 80095bc:	2f6f      	cmp	r7, #111	; 0x6f
 80095be:	bf0c      	ite	eq
 80095c0:	2308      	moveq	r3, #8
 80095c2:	230a      	movne	r3, #10
 80095c4:	2100      	movs	r1, #0
 80095c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ca:	6865      	ldr	r5, [r4, #4]
 80095cc:	60a5      	str	r5, [r4, #8]
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	bfa2      	ittt	ge
 80095d2:	6821      	ldrge	r1, [r4, #0]
 80095d4:	f021 0104 	bicge.w	r1, r1, #4
 80095d8:	6021      	strge	r1, [r4, #0]
 80095da:	b90e      	cbnz	r6, 80095e0 <_printf_i+0x114>
 80095dc:	2d00      	cmp	r5, #0
 80095de:	d04b      	beq.n	8009678 <_printf_i+0x1ac>
 80095e0:	4615      	mov	r5, r2
 80095e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80095e6:	fb03 6711 	mls	r7, r3, r1, r6
 80095ea:	5dc7      	ldrb	r7, [r0, r7]
 80095ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095f0:	4637      	mov	r7, r6
 80095f2:	42bb      	cmp	r3, r7
 80095f4:	460e      	mov	r6, r1
 80095f6:	d9f4      	bls.n	80095e2 <_printf_i+0x116>
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d10b      	bne.n	8009614 <_printf_i+0x148>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	07de      	lsls	r6, r3, #31
 8009600:	d508      	bpl.n	8009614 <_printf_i+0x148>
 8009602:	6923      	ldr	r3, [r4, #16]
 8009604:	6861      	ldr	r1, [r4, #4]
 8009606:	4299      	cmp	r1, r3
 8009608:	bfde      	ittt	le
 800960a:	2330      	movle	r3, #48	; 0x30
 800960c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009614:	1b52      	subs	r2, r2, r5
 8009616:	6122      	str	r2, [r4, #16]
 8009618:	f8cd a000 	str.w	sl, [sp]
 800961c:	464b      	mov	r3, r9
 800961e:	aa03      	add	r2, sp, #12
 8009620:	4621      	mov	r1, r4
 8009622:	4640      	mov	r0, r8
 8009624:	f7ff fee4 	bl	80093f0 <_printf_common>
 8009628:	3001      	adds	r0, #1
 800962a:	d14a      	bne.n	80096c2 <_printf_i+0x1f6>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b004      	add	sp, #16
 8009632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	f043 0320 	orr.w	r3, r3, #32
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	4833      	ldr	r0, [pc, #204]	; (800970c <_printf_i+0x240>)
 8009640:	2778      	movs	r7, #120	; 0x78
 8009642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	6829      	ldr	r1, [r5, #0]
 800964a:	061f      	lsls	r7, r3, #24
 800964c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009650:	d402      	bmi.n	8009658 <_printf_i+0x18c>
 8009652:	065f      	lsls	r7, r3, #25
 8009654:	bf48      	it	mi
 8009656:	b2b6      	uxthmi	r6, r6
 8009658:	07df      	lsls	r7, r3, #31
 800965a:	bf48      	it	mi
 800965c:	f043 0320 	orrmi.w	r3, r3, #32
 8009660:	6029      	str	r1, [r5, #0]
 8009662:	bf48      	it	mi
 8009664:	6023      	strmi	r3, [r4, #0]
 8009666:	b91e      	cbnz	r6, 8009670 <_printf_i+0x1a4>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f023 0320 	bic.w	r3, r3, #32
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	2310      	movs	r3, #16
 8009672:	e7a7      	b.n	80095c4 <_printf_i+0xf8>
 8009674:	4824      	ldr	r0, [pc, #144]	; (8009708 <_printf_i+0x23c>)
 8009676:	e7e4      	b.n	8009642 <_printf_i+0x176>
 8009678:	4615      	mov	r5, r2
 800967a:	e7bd      	b.n	80095f8 <_printf_i+0x12c>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	6826      	ldr	r6, [r4, #0]
 8009680:	6961      	ldr	r1, [r4, #20]
 8009682:	1d18      	adds	r0, r3, #4
 8009684:	6028      	str	r0, [r5, #0]
 8009686:	0635      	lsls	r5, r6, #24
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	d501      	bpl.n	8009690 <_printf_i+0x1c4>
 800968c:	6019      	str	r1, [r3, #0]
 800968e:	e002      	b.n	8009696 <_printf_i+0x1ca>
 8009690:	0670      	lsls	r0, r6, #25
 8009692:	d5fb      	bpl.n	800968c <_printf_i+0x1c0>
 8009694:	8019      	strh	r1, [r3, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	4615      	mov	r5, r2
 800969c:	e7bc      	b.n	8009618 <_printf_i+0x14c>
 800969e:	682b      	ldr	r3, [r5, #0]
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	602a      	str	r2, [r5, #0]
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	6862      	ldr	r2, [r4, #4]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4628      	mov	r0, r5
 80096ac:	f7f6 fd98 	bl	80001e0 <memchr>
 80096b0:	b108      	cbz	r0, 80096b6 <_printf_i+0x1ea>
 80096b2:	1b40      	subs	r0, r0, r5
 80096b4:	6060      	str	r0, [r4, #4]
 80096b6:	6863      	ldr	r3, [r4, #4]
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	2300      	movs	r3, #0
 80096bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c0:	e7aa      	b.n	8009618 <_printf_i+0x14c>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d0ad      	beq.n	800962c <_printf_i+0x160>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	079b      	lsls	r3, r3, #30
 80096d4:	d413      	bmi.n	80096fe <_printf_i+0x232>
 80096d6:	68e0      	ldr	r0, [r4, #12]
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	4298      	cmp	r0, r3
 80096dc:	bfb8      	it	lt
 80096de:	4618      	movlt	r0, r3
 80096e0:	e7a6      	b.n	8009630 <_printf_i+0x164>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4632      	mov	r2, r6
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d09d      	beq.n	800962c <_printf_i+0x160>
 80096f0:	3501      	adds	r5, #1
 80096f2:	68e3      	ldr	r3, [r4, #12]
 80096f4:	9903      	ldr	r1, [sp, #12]
 80096f6:	1a5b      	subs	r3, r3, r1
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	dcf2      	bgt.n	80096e2 <_printf_i+0x216>
 80096fc:	e7eb      	b.n	80096d6 <_printf_i+0x20a>
 80096fe:	2500      	movs	r5, #0
 8009700:	f104 0619 	add.w	r6, r4, #25
 8009704:	e7f5      	b.n	80096f2 <_printf_i+0x226>
 8009706:	bf00      	nop
 8009708:	0800eb32 	.word	0x0800eb32
 800970c:	0800eb43 	.word	0x0800eb43

08009710 <_scanf_float>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	b087      	sub	sp, #28
 8009716:	4617      	mov	r7, r2
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	688b      	ldr	r3, [r1, #8]
 800971c:	1e5a      	subs	r2, r3, #1
 800971e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009722:	bf83      	ittte	hi
 8009724:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009728:	195b      	addhi	r3, r3, r5
 800972a:	9302      	strhi	r3, [sp, #8]
 800972c:	2300      	movls	r3, #0
 800972e:	bf86      	itte	hi
 8009730:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009734:	608b      	strhi	r3, [r1, #8]
 8009736:	9302      	strls	r3, [sp, #8]
 8009738:	680b      	ldr	r3, [r1, #0]
 800973a:	468b      	mov	fp, r1
 800973c:	2500      	movs	r5, #0
 800973e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009742:	f84b 3b1c 	str.w	r3, [fp], #28
 8009746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800974a:	4680      	mov	r8, r0
 800974c:	460c      	mov	r4, r1
 800974e:	465e      	mov	r6, fp
 8009750:	46aa      	mov	sl, r5
 8009752:	46a9      	mov	r9, r5
 8009754:	9501      	str	r5, [sp, #4]
 8009756:	68a2      	ldr	r2, [r4, #8]
 8009758:	b152      	cbz	r2, 8009770 <_scanf_float+0x60>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b4e      	cmp	r3, #78	; 0x4e
 8009760:	d864      	bhi.n	800982c <_scanf_float+0x11c>
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d83c      	bhi.n	80097e0 <_scanf_float+0xd0>
 8009766:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800976a:	b2c8      	uxtb	r0, r1
 800976c:	280e      	cmp	r0, #14
 800976e:	d93a      	bls.n	80097e6 <_scanf_float+0xd6>
 8009770:	f1b9 0f00 	cmp.w	r9, #0
 8009774:	d003      	beq.n	800977e <_scanf_float+0x6e>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009782:	f1ba 0f01 	cmp.w	sl, #1
 8009786:	f200 8113 	bhi.w	80099b0 <_scanf_float+0x2a0>
 800978a:	455e      	cmp	r6, fp
 800978c:	f200 8105 	bhi.w	800999a <_scanf_float+0x28a>
 8009790:	2501      	movs	r5, #1
 8009792:	4628      	mov	r0, r5
 8009794:	b007      	add	sp, #28
 8009796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800979e:	2a0d      	cmp	r2, #13
 80097a0:	d8e6      	bhi.n	8009770 <_scanf_float+0x60>
 80097a2:	a101      	add	r1, pc, #4	; (adr r1, 80097a8 <_scanf_float+0x98>)
 80097a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097a8:	080098e7 	.word	0x080098e7
 80097ac:	08009771 	.word	0x08009771
 80097b0:	08009771 	.word	0x08009771
 80097b4:	08009771 	.word	0x08009771
 80097b8:	08009947 	.word	0x08009947
 80097bc:	0800991f 	.word	0x0800991f
 80097c0:	08009771 	.word	0x08009771
 80097c4:	08009771 	.word	0x08009771
 80097c8:	080098f5 	.word	0x080098f5
 80097cc:	08009771 	.word	0x08009771
 80097d0:	08009771 	.word	0x08009771
 80097d4:	08009771 	.word	0x08009771
 80097d8:	08009771 	.word	0x08009771
 80097dc:	080098ad 	.word	0x080098ad
 80097e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80097e4:	e7db      	b.n	800979e <_scanf_float+0x8e>
 80097e6:	290e      	cmp	r1, #14
 80097e8:	d8c2      	bhi.n	8009770 <_scanf_float+0x60>
 80097ea:	a001      	add	r0, pc, #4	; (adr r0, 80097f0 <_scanf_float+0xe0>)
 80097ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097f0:	0800989f 	.word	0x0800989f
 80097f4:	08009771 	.word	0x08009771
 80097f8:	0800989f 	.word	0x0800989f
 80097fc:	08009933 	.word	0x08009933
 8009800:	08009771 	.word	0x08009771
 8009804:	0800984d 	.word	0x0800984d
 8009808:	08009889 	.word	0x08009889
 800980c:	08009889 	.word	0x08009889
 8009810:	08009889 	.word	0x08009889
 8009814:	08009889 	.word	0x08009889
 8009818:	08009889 	.word	0x08009889
 800981c:	08009889 	.word	0x08009889
 8009820:	08009889 	.word	0x08009889
 8009824:	08009889 	.word	0x08009889
 8009828:	08009889 	.word	0x08009889
 800982c:	2b6e      	cmp	r3, #110	; 0x6e
 800982e:	d809      	bhi.n	8009844 <_scanf_float+0x134>
 8009830:	2b60      	cmp	r3, #96	; 0x60
 8009832:	d8b2      	bhi.n	800979a <_scanf_float+0x8a>
 8009834:	2b54      	cmp	r3, #84	; 0x54
 8009836:	d077      	beq.n	8009928 <_scanf_float+0x218>
 8009838:	2b59      	cmp	r3, #89	; 0x59
 800983a:	d199      	bne.n	8009770 <_scanf_float+0x60>
 800983c:	2d07      	cmp	r5, #7
 800983e:	d197      	bne.n	8009770 <_scanf_float+0x60>
 8009840:	2508      	movs	r5, #8
 8009842:	e029      	b.n	8009898 <_scanf_float+0x188>
 8009844:	2b74      	cmp	r3, #116	; 0x74
 8009846:	d06f      	beq.n	8009928 <_scanf_float+0x218>
 8009848:	2b79      	cmp	r3, #121	; 0x79
 800984a:	e7f6      	b.n	800983a <_scanf_float+0x12a>
 800984c:	6821      	ldr	r1, [r4, #0]
 800984e:	05c8      	lsls	r0, r1, #23
 8009850:	d51a      	bpl.n	8009888 <_scanf_float+0x178>
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009858:	6021      	str	r1, [r4, #0]
 800985a:	f109 0901 	add.w	r9, r9, #1
 800985e:	b11b      	cbz	r3, 8009868 <_scanf_float+0x158>
 8009860:	3b01      	subs	r3, #1
 8009862:	3201      	adds	r2, #1
 8009864:	9302      	str	r3, [sp, #8]
 8009866:	60a2      	str	r2, [r4, #8]
 8009868:	68a3      	ldr	r3, [r4, #8]
 800986a:	3b01      	subs	r3, #1
 800986c:	60a3      	str	r3, [r4, #8]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	3301      	adds	r3, #1
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3b01      	subs	r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	607b      	str	r3, [r7, #4]
 800987c:	f340 8084 	ble.w	8009988 <_scanf_float+0x278>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	603b      	str	r3, [r7, #0]
 8009886:	e766      	b.n	8009756 <_scanf_float+0x46>
 8009888:	eb1a 0f05 	cmn.w	sl, r5
 800988c:	f47f af70 	bne.w	8009770 <_scanf_float+0x60>
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009896:	6022      	str	r2, [r4, #0]
 8009898:	f806 3b01 	strb.w	r3, [r6], #1
 800989c:	e7e4      	b.n	8009868 <_scanf_float+0x158>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	0610      	lsls	r0, r2, #24
 80098a2:	f57f af65 	bpl.w	8009770 <_scanf_float+0x60>
 80098a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098aa:	e7f4      	b.n	8009896 <_scanf_float+0x186>
 80098ac:	f1ba 0f00 	cmp.w	sl, #0
 80098b0:	d10e      	bne.n	80098d0 <_scanf_float+0x1c0>
 80098b2:	f1b9 0f00 	cmp.w	r9, #0
 80098b6:	d10e      	bne.n	80098d6 <_scanf_float+0x1c6>
 80098b8:	6822      	ldr	r2, [r4, #0]
 80098ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098c2:	d108      	bne.n	80098d6 <_scanf_float+0x1c6>
 80098c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098c8:	6022      	str	r2, [r4, #0]
 80098ca:	f04f 0a01 	mov.w	sl, #1
 80098ce:	e7e3      	b.n	8009898 <_scanf_float+0x188>
 80098d0:	f1ba 0f02 	cmp.w	sl, #2
 80098d4:	d055      	beq.n	8009982 <_scanf_float+0x272>
 80098d6:	2d01      	cmp	r5, #1
 80098d8:	d002      	beq.n	80098e0 <_scanf_float+0x1d0>
 80098da:	2d04      	cmp	r5, #4
 80098dc:	f47f af48 	bne.w	8009770 <_scanf_float+0x60>
 80098e0:	3501      	adds	r5, #1
 80098e2:	b2ed      	uxtb	r5, r5
 80098e4:	e7d8      	b.n	8009898 <_scanf_float+0x188>
 80098e6:	f1ba 0f01 	cmp.w	sl, #1
 80098ea:	f47f af41 	bne.w	8009770 <_scanf_float+0x60>
 80098ee:	f04f 0a02 	mov.w	sl, #2
 80098f2:	e7d1      	b.n	8009898 <_scanf_float+0x188>
 80098f4:	b97d      	cbnz	r5, 8009916 <_scanf_float+0x206>
 80098f6:	f1b9 0f00 	cmp.w	r9, #0
 80098fa:	f47f af3c 	bne.w	8009776 <_scanf_float+0x66>
 80098fe:	6822      	ldr	r2, [r4, #0]
 8009900:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009904:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009908:	f47f af39 	bne.w	800977e <_scanf_float+0x6e>
 800990c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009910:	6022      	str	r2, [r4, #0]
 8009912:	2501      	movs	r5, #1
 8009914:	e7c0      	b.n	8009898 <_scanf_float+0x188>
 8009916:	2d03      	cmp	r5, #3
 8009918:	d0e2      	beq.n	80098e0 <_scanf_float+0x1d0>
 800991a:	2d05      	cmp	r5, #5
 800991c:	e7de      	b.n	80098dc <_scanf_float+0x1cc>
 800991e:	2d02      	cmp	r5, #2
 8009920:	f47f af26 	bne.w	8009770 <_scanf_float+0x60>
 8009924:	2503      	movs	r5, #3
 8009926:	e7b7      	b.n	8009898 <_scanf_float+0x188>
 8009928:	2d06      	cmp	r5, #6
 800992a:	f47f af21 	bne.w	8009770 <_scanf_float+0x60>
 800992e:	2507      	movs	r5, #7
 8009930:	e7b2      	b.n	8009898 <_scanf_float+0x188>
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	0591      	lsls	r1, r2, #22
 8009936:	f57f af1b 	bpl.w	8009770 <_scanf_float+0x60>
 800993a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800993e:	6022      	str	r2, [r4, #0]
 8009940:	f8cd 9004 	str.w	r9, [sp, #4]
 8009944:	e7a8      	b.n	8009898 <_scanf_float+0x188>
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800994c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009950:	d006      	beq.n	8009960 <_scanf_float+0x250>
 8009952:	0550      	lsls	r0, r2, #21
 8009954:	f57f af0c 	bpl.w	8009770 <_scanf_float+0x60>
 8009958:	f1b9 0f00 	cmp.w	r9, #0
 800995c:	f43f af0f 	beq.w	800977e <_scanf_float+0x6e>
 8009960:	0591      	lsls	r1, r2, #22
 8009962:	bf58      	it	pl
 8009964:	9901      	ldrpl	r1, [sp, #4]
 8009966:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800996a:	bf58      	it	pl
 800996c:	eba9 0101 	subpl.w	r1, r9, r1
 8009970:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009974:	bf58      	it	pl
 8009976:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	f04f 0900 	mov.w	r9, #0
 8009980:	e78a      	b.n	8009898 <_scanf_float+0x188>
 8009982:	f04f 0a03 	mov.w	sl, #3
 8009986:	e787      	b.n	8009898 <_scanf_float+0x188>
 8009988:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800998c:	4639      	mov	r1, r7
 800998e:	4640      	mov	r0, r8
 8009990:	4798      	blx	r3
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f aedf 	beq.w	8009756 <_scanf_float+0x46>
 8009998:	e6ea      	b.n	8009770 <_scanf_float+0x60>
 800999a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800999e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099a2:	463a      	mov	r2, r7
 80099a4:	4640      	mov	r0, r8
 80099a6:	4798      	blx	r3
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	6123      	str	r3, [r4, #16]
 80099ae:	e6ec      	b.n	800978a <_scanf_float+0x7a>
 80099b0:	1e6b      	subs	r3, r5, #1
 80099b2:	2b06      	cmp	r3, #6
 80099b4:	d825      	bhi.n	8009a02 <_scanf_float+0x2f2>
 80099b6:	2d02      	cmp	r5, #2
 80099b8:	d836      	bhi.n	8009a28 <_scanf_float+0x318>
 80099ba:	455e      	cmp	r6, fp
 80099bc:	f67f aee8 	bls.w	8009790 <_scanf_float+0x80>
 80099c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c8:	463a      	mov	r2, r7
 80099ca:	4640      	mov	r0, r8
 80099cc:	4798      	blx	r3
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	e7f1      	b.n	80099ba <_scanf_float+0x2aa>
 80099d6:	9802      	ldr	r0, [sp, #8]
 80099d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80099e0:	9002      	str	r0, [sp, #8]
 80099e2:	463a      	mov	r2, r7
 80099e4:	4640      	mov	r0, r8
 80099e6:	4798      	blx	r3
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099f2:	fa5f fa8a 	uxtb.w	sl, sl
 80099f6:	f1ba 0f02 	cmp.w	sl, #2
 80099fa:	d1ec      	bne.n	80099d6 <_scanf_float+0x2c6>
 80099fc:	3d03      	subs	r5, #3
 80099fe:	b2ed      	uxtb	r5, r5
 8009a00:	1b76      	subs	r6, r6, r5
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	05da      	lsls	r2, r3, #23
 8009a06:	d52f      	bpl.n	8009a68 <_scanf_float+0x358>
 8009a08:	055b      	lsls	r3, r3, #21
 8009a0a:	d510      	bpl.n	8009a2e <_scanf_float+0x31e>
 8009a0c:	455e      	cmp	r6, fp
 8009a0e:	f67f aebf 	bls.w	8009790 <_scanf_float+0x80>
 8009a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a1a:	463a      	mov	r2, r7
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	4798      	blx	r3
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	6123      	str	r3, [r4, #16]
 8009a26:	e7f1      	b.n	8009a0c <_scanf_float+0x2fc>
 8009a28:	46aa      	mov	sl, r5
 8009a2a:	9602      	str	r6, [sp, #8]
 8009a2c:	e7df      	b.n	80099ee <_scanf_float+0x2de>
 8009a2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	2965      	cmp	r1, #101	; 0x65
 8009a36:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	d00c      	beq.n	8009a5c <_scanf_float+0x34c>
 8009a42:	2945      	cmp	r1, #69	; 0x45
 8009a44:	d00a      	beq.n	8009a5c <_scanf_float+0x34c>
 8009a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4798      	blx	r3
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	1eb5      	subs	r5, r6, #2
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a60:	463a      	mov	r2, r7
 8009a62:	4640      	mov	r0, r8
 8009a64:	4798      	blx	r3
 8009a66:	462e      	mov	r6, r5
 8009a68:	6825      	ldr	r5, [r4, #0]
 8009a6a:	f015 0510 	ands.w	r5, r5, #16
 8009a6e:	d158      	bne.n	8009b22 <_scanf_float+0x412>
 8009a70:	7035      	strb	r5, [r6, #0]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a7c:	d11c      	bne.n	8009ab8 <_scanf_float+0x3a8>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	454b      	cmp	r3, r9
 8009a82:	eba3 0209 	sub.w	r2, r3, r9
 8009a86:	d124      	bne.n	8009ad2 <_scanf_float+0x3c2>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4659      	mov	r1, fp
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7ff f9d3 	bl	8008e38 <_strtod_r>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f011 0f02 	tst.w	r1, #2
 8009a9c:	ec57 6b10 	vmov	r6, r7, d0
 8009aa0:	f103 0204 	add.w	r2, r3, #4
 8009aa4:	d020      	beq.n	8009ae8 <_scanf_float+0x3d8>
 8009aa6:	9903      	ldr	r1, [sp, #12]
 8009aa8:	600a      	str	r2, [r1, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	e9c3 6700 	strd	r6, r7, [r3]
 8009ab0:	68e3      	ldr	r3, [r4, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60e3      	str	r3, [r4, #12]
 8009ab6:	e66c      	b.n	8009792 <_scanf_float+0x82>
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0e4      	beq.n	8009a88 <_scanf_float+0x378>
 8009abe:	9905      	ldr	r1, [sp, #20]
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f002 fa96 	bl	800bff8 <_strtol_r>
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	9e05      	ldr	r6, [sp, #20]
 8009ad0:	1ac2      	subs	r2, r0, r3
 8009ad2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ad6:	429e      	cmp	r6, r3
 8009ad8:	bf28      	it	cs
 8009ada:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ade:	4912      	ldr	r1, [pc, #72]	; (8009b28 <_scanf_float+0x418>)
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 f955 	bl	8009d90 <siprintf>
 8009ae6:	e7cf      	b.n	8009a88 <_scanf_float+0x378>
 8009ae8:	f011 0f04 	tst.w	r1, #4
 8009aec:	9903      	ldr	r1, [sp, #12]
 8009aee:	600a      	str	r2, [r1, #0]
 8009af0:	d1db      	bne.n	8009aaa <_scanf_float+0x39a>
 8009af2:	f8d3 8000 	ldr.w	r8, [r3]
 8009af6:	ee10 2a10 	vmov	r2, s0
 8009afa:	ee10 0a10 	vmov	r0, s0
 8009afe:	463b      	mov	r3, r7
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f7 f81b 	bl	8000b3c <__aeabi_dcmpun>
 8009b06:	b128      	cbz	r0, 8009b14 <_scanf_float+0x404>
 8009b08:	4808      	ldr	r0, [pc, #32]	; (8009b2c <_scanf_float+0x41c>)
 8009b0a:	f000 faf1 	bl	800a0f0 <nanf>
 8009b0e:	ed88 0a00 	vstr	s0, [r8]
 8009b12:	e7cd      	b.n	8009ab0 <_scanf_float+0x3a0>
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f7 f86e 	bl	8000bf8 <__aeabi_d2f>
 8009b1c:	f8c8 0000 	str.w	r0, [r8]
 8009b20:	e7c6      	b.n	8009ab0 <_scanf_float+0x3a0>
 8009b22:	2500      	movs	r5, #0
 8009b24:	e635      	b.n	8009792 <_scanf_float+0x82>
 8009b26:	bf00      	nop
 8009b28:	0800eb54 	.word	0x0800eb54
 8009b2c:	0800eb9c 	.word	0x0800eb9c

08009b30 <std>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
 8009b36:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3e:	6083      	str	r3, [r0, #8]
 8009b40:	8181      	strh	r1, [r0, #12]
 8009b42:	6643      	str	r3, [r0, #100]	; 0x64
 8009b44:	81c2      	strh	r2, [r0, #14]
 8009b46:	6183      	str	r3, [r0, #24]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f000 fa17 	bl	8009f80 <memset>
 8009b52:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <std+0x58>)
 8009b54:	6263      	str	r3, [r4, #36]	; 0x24
 8009b56:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <std+0x5c>)
 8009b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <std+0x60>)
 8009b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <std+0x64>)
 8009b60:	6323      	str	r3, [r4, #48]	; 0x30
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <std+0x68>)
 8009b64:	6224      	str	r4, [r4, #32]
 8009b66:	429c      	cmp	r4, r3
 8009b68:	d006      	beq.n	8009b78 <std+0x48>
 8009b6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b6e:	4294      	cmp	r4, r2
 8009b70:	d002      	beq.n	8009b78 <std+0x48>
 8009b72:	33d0      	adds	r3, #208	; 0xd0
 8009b74:	429c      	cmp	r4, r3
 8009b76:	d105      	bne.n	8009b84 <std+0x54>
 8009b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b80:	f000 ba9c 	b.w	800a0bc <__retarget_lock_init_recursive>
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	08009dd1 	.word	0x08009dd1
 8009b8c:	08009df3 	.word	0x08009df3
 8009b90:	08009e2b 	.word	0x08009e2b
 8009b94:	08009e4f 	.word	0x08009e4f
 8009b98:	200005a0 	.word	0x200005a0

08009b9c <stdio_exit_handler>:
 8009b9c:	4a02      	ldr	r2, [pc, #8]	; (8009ba8 <stdio_exit_handler+0xc>)
 8009b9e:	4903      	ldr	r1, [pc, #12]	; (8009bac <stdio_exit_handler+0x10>)
 8009ba0:	4803      	ldr	r0, [pc, #12]	; (8009bb0 <stdio_exit_handler+0x14>)
 8009ba2:	f000 b869 	b.w	8009c78 <_fwalk_sglue>
 8009ba6:	bf00      	nop
 8009ba8:	2000001c 	.word	0x2000001c
 8009bac:	0800c65d 	.word	0x0800c65d
 8009bb0:	20000194 	.word	0x20000194

08009bb4 <cleanup_stdio>:
 8009bb4:	6841      	ldr	r1, [r0, #4]
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <cleanup_stdio+0x34>)
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	d001      	beq.n	8009bc4 <cleanup_stdio+0x10>
 8009bc0:	f002 fd4c 	bl	800c65c <_fflush_r>
 8009bc4:	68a1      	ldr	r1, [r4, #8]
 8009bc6:	4b09      	ldr	r3, [pc, #36]	; (8009bec <cleanup_stdio+0x38>)
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	d002      	beq.n	8009bd2 <cleanup_stdio+0x1e>
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f002 fd45 	bl	800c65c <_fflush_r>
 8009bd2:	68e1      	ldr	r1, [r4, #12]
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <cleanup_stdio+0x3c>)
 8009bd6:	4299      	cmp	r1, r3
 8009bd8:	d004      	beq.n	8009be4 <cleanup_stdio+0x30>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be0:	f002 bd3c 	b.w	800c65c <_fflush_r>
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	bf00      	nop
 8009be8:	200005a0 	.word	0x200005a0
 8009bec:	20000608 	.word	0x20000608
 8009bf0:	20000670 	.word	0x20000670

08009bf4 <global_stdio_init.part.0>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <global_stdio_init.part.0+0x30>)
 8009bf8:	4c0b      	ldr	r4, [pc, #44]	; (8009c28 <global_stdio_init.part.0+0x34>)
 8009bfa:	4a0c      	ldr	r2, [pc, #48]	; (8009c2c <global_stdio_init.part.0+0x38>)
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	2200      	movs	r2, #0
 8009c02:	2104      	movs	r1, #4
 8009c04:	f7ff ff94 	bl	8009b30 <std>
 8009c08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	2109      	movs	r1, #9
 8009c10:	f7ff ff8e 	bl	8009b30 <std>
 8009c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c18:	2202      	movs	r2, #2
 8009c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1e:	2112      	movs	r1, #18
 8009c20:	f7ff bf86 	b.w	8009b30 <std>
 8009c24:	200006d8 	.word	0x200006d8
 8009c28:	200005a0 	.word	0x200005a0
 8009c2c:	08009b9d 	.word	0x08009b9d

08009c30 <__sfp_lock_acquire>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__sfp_lock_acquire+0x8>)
 8009c32:	f000 ba44 	b.w	800a0be <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	200006e1 	.word	0x200006e1

08009c3c <__sfp_lock_release>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__sfp_lock_release+0x8>)
 8009c3e:	f000 ba3f 	b.w	800a0c0 <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	200006e1 	.word	0x200006e1

08009c48 <__sinit>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	f7ff fff0 	bl	8009c30 <__sfp_lock_acquire>
 8009c50:	6a23      	ldr	r3, [r4, #32]
 8009c52:	b11b      	cbz	r3, 8009c5c <__sinit+0x14>
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f7ff bff0 	b.w	8009c3c <__sfp_lock_release>
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <__sinit+0x28>)
 8009c5e:	6223      	str	r3, [r4, #32]
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <__sinit+0x2c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f5      	bne.n	8009c54 <__sinit+0xc>
 8009c68:	f7ff ffc4 	bl	8009bf4 <global_stdio_init.part.0>
 8009c6c:	e7f2      	b.n	8009c54 <__sinit+0xc>
 8009c6e:	bf00      	nop
 8009c70:	08009bb5 	.word	0x08009bb5
 8009c74:	200006d8 	.word	0x200006d8

08009c78 <_fwalk_sglue>:
 8009c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	4688      	mov	r8, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	2600      	movs	r6, #0
 8009c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c88:	f1b9 0901 	subs.w	r9, r9, #1
 8009c8c:	d505      	bpl.n	8009c9a <_fwalk_sglue+0x22>
 8009c8e:	6824      	ldr	r4, [r4, #0]
 8009c90:	2c00      	cmp	r4, #0
 8009c92:	d1f7      	bne.n	8009c84 <_fwalk_sglue+0xc>
 8009c94:	4630      	mov	r0, r6
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d907      	bls.n	8009cb0 <_fwalk_sglue+0x38>
 8009ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	d003      	beq.n	8009cb0 <_fwalk_sglue+0x38>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c0      	blx	r8
 8009cae:	4306      	orrs	r6, r0
 8009cb0:	3568      	adds	r5, #104	; 0x68
 8009cb2:	e7e9      	b.n	8009c88 <_fwalk_sglue+0x10>

08009cb4 <iprintf>:
 8009cb4:	b40f      	push	{r0, r1, r2, r3}
 8009cb6:	b507      	push	{r0, r1, r2, lr}
 8009cb8:	4906      	ldr	r1, [pc, #24]	; (8009cd4 <iprintf+0x20>)
 8009cba:	ab04      	add	r3, sp, #16
 8009cbc:	6808      	ldr	r0, [r1, #0]
 8009cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc2:	6881      	ldr	r1, [r0, #8]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f002 fb29 	bl	800c31c <_vfiprintf_r>
 8009cca:	b003      	add	sp, #12
 8009ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd0:	b004      	add	sp, #16
 8009cd2:	4770      	bx	lr
 8009cd4:	200001e0 	.word	0x200001e0

08009cd8 <_puts_r>:
 8009cd8:	6a03      	ldr	r3, [r0, #32]
 8009cda:	b570      	push	{r4, r5, r6, lr}
 8009cdc:	6884      	ldr	r4, [r0, #8]
 8009cde:	4605      	mov	r5, r0
 8009ce0:	460e      	mov	r6, r1
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <_puts_r+0x10>
 8009ce4:	f7ff ffb0 	bl	8009c48 <__sinit>
 8009ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d405      	bmi.n	8009cfa <_puts_r+0x22>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	0598      	lsls	r0, r3, #22
 8009cf2:	d402      	bmi.n	8009cfa <_puts_r+0x22>
 8009cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cf6:	f000 f9e2 	bl	800a0be <__retarget_lock_acquire_recursive>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	0719      	lsls	r1, r3, #28
 8009cfe:	d513      	bpl.n	8009d28 <_puts_r+0x50>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	b18b      	cbz	r3, 8009d28 <_puts_r+0x50>
 8009d04:	3e01      	subs	r6, #1
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	60a3      	str	r3, [r4, #8]
 8009d10:	b9e9      	cbnz	r1, 8009d4e <_puts_r+0x76>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da2e      	bge.n	8009d74 <_puts_r+0x9c>
 8009d16:	4622      	mov	r2, r4
 8009d18:	210a      	movs	r1, #10
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 f89b 	bl	8009e56 <__swbuf_r>
 8009d20:	3001      	adds	r0, #1
 8009d22:	d007      	beq.n	8009d34 <_puts_r+0x5c>
 8009d24:	250a      	movs	r5, #10
 8009d26:	e007      	b.n	8009d38 <_puts_r+0x60>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f8d0 	bl	8009ed0 <__swsetup_r>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d0e7      	beq.n	8009d04 <_puts_r+0x2c>
 8009d34:	f04f 35ff 	mov.w	r5, #4294967295
 8009d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_puts_r+0x72>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	059b      	lsls	r3, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_puts_r+0x72>
 8009d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d46:	f000 f9bb 	bl	800a0c0 <__retarget_lock_release_recursive>
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	bd70      	pop	{r4, r5, r6, pc}
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	da04      	bge.n	8009d5c <_puts_r+0x84>
 8009d52:	69a2      	ldr	r2, [r4, #24]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	dc06      	bgt.n	8009d66 <_puts_r+0x8e>
 8009d58:	290a      	cmp	r1, #10
 8009d5a:	d004      	beq.n	8009d66 <_puts_r+0x8e>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	7019      	strb	r1, [r3, #0]
 8009d64:	e7cf      	b.n	8009d06 <_puts_r+0x2e>
 8009d66:	4622      	mov	r2, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 f874 	bl	8009e56 <__swbuf_r>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d1c9      	bne.n	8009d06 <_puts_r+0x2e>
 8009d72:	e7df      	b.n	8009d34 <_puts_r+0x5c>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	250a      	movs	r5, #10
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	6022      	str	r2, [r4, #0]
 8009d7c:	701d      	strb	r5, [r3, #0]
 8009d7e:	e7db      	b.n	8009d38 <_puts_r+0x60>

08009d80 <puts>:
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <puts+0xc>)
 8009d82:	4601      	mov	r1, r0
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	f7ff bfa7 	b.w	8009cd8 <_puts_r>
 8009d8a:	bf00      	nop
 8009d8c:	200001e0 	.word	0x200001e0

08009d90 <siprintf>:
 8009d90:	b40e      	push	{r1, r2, r3}
 8009d92:	b500      	push	{lr}
 8009d94:	b09c      	sub	sp, #112	; 0x70
 8009d96:	ab1d      	add	r3, sp, #116	; 0x74
 8009d98:	9002      	str	r0, [sp, #8]
 8009d9a:	9006      	str	r0, [sp, #24]
 8009d9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009da0:	4809      	ldr	r0, [pc, #36]	; (8009dc8 <siprintf+0x38>)
 8009da2:	9107      	str	r1, [sp, #28]
 8009da4:	9104      	str	r1, [sp, #16]
 8009da6:	4909      	ldr	r1, [pc, #36]	; (8009dcc <siprintf+0x3c>)
 8009da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	6800      	ldr	r0, [r0, #0]
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	a902      	add	r1, sp, #8
 8009db4:	f002 f98a 	bl	800c0cc <_svfiprintf_r>
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	b01c      	add	sp, #112	; 0x70
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b003      	add	sp, #12
 8009dc6:	4770      	bx	lr
 8009dc8:	200001e0 	.word	0x200001e0
 8009dcc:	ffff0208 	.word	0xffff0208

08009dd0 <__sread>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd8:	f000 f912 	bl	800a000 <_read_r>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	bfab      	itete	ge
 8009de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009de2:	89a3      	ldrhlt	r3, [r4, #12]
 8009de4:	181b      	addge	r3, r3, r0
 8009de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dea:	bfac      	ite	ge
 8009dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dee:	81a3      	strhlt	r3, [r4, #12]
 8009df0:	bd10      	pop	{r4, pc}

08009df2 <__swrite>:
 8009df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	461f      	mov	r7, r3
 8009df8:	898b      	ldrh	r3, [r1, #12]
 8009dfa:	05db      	lsls	r3, r3, #23
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	4616      	mov	r6, r2
 8009e02:	d505      	bpl.n	8009e10 <__swrite+0x1e>
 8009e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e08:	2302      	movs	r3, #2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f000 f8e6 	bl	8009fdc <_lseek_r>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	463b      	mov	r3, r7
 8009e20:	4628      	mov	r0, r5
 8009e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e26:	f000 b90d 	b.w	800a044 <_write_r>

08009e2a <__sseek>:
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e32:	f000 f8d3 	bl	8009fdc <_lseek_r>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	bf15      	itete	ne
 8009e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e46:	81a3      	strheq	r3, [r4, #12]
 8009e48:	bf18      	it	ne
 8009e4a:	81a3      	strhne	r3, [r4, #12]
 8009e4c:	bd10      	pop	{r4, pc}

08009e4e <__sclose>:
 8009e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e52:	f000 b8b3 	b.w	8009fbc <_close_r>

08009e56 <__swbuf_r>:
 8009e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e58:	460e      	mov	r6, r1
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	b118      	cbz	r0, 8009e68 <__swbuf_r+0x12>
 8009e60:	6a03      	ldr	r3, [r0, #32]
 8009e62:	b90b      	cbnz	r3, 8009e68 <__swbuf_r+0x12>
 8009e64:	f7ff fef0 	bl	8009c48 <__sinit>
 8009e68:	69a3      	ldr	r3, [r4, #24]
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	071a      	lsls	r2, r3, #28
 8009e70:	d525      	bpl.n	8009ebe <__swbuf_r+0x68>
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	b31b      	cbz	r3, 8009ebe <__swbuf_r+0x68>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	6922      	ldr	r2, [r4, #16]
 8009e7a:	1a98      	subs	r0, r3, r2
 8009e7c:	6963      	ldr	r3, [r4, #20]
 8009e7e:	b2f6      	uxtb	r6, r6
 8009e80:	4283      	cmp	r3, r0
 8009e82:	4637      	mov	r7, r6
 8009e84:	dc04      	bgt.n	8009e90 <__swbuf_r+0x3a>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f002 fbe7 	bl	800c65c <_fflush_r>
 8009e8e:	b9e0      	cbnz	r0, 8009eca <__swbuf_r+0x74>
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	701e      	strb	r6, [r3, #0]
 8009e9e:	6962      	ldr	r2, [r4, #20]
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d004      	beq.n	8009eb0 <__swbuf_r+0x5a>
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	07db      	lsls	r3, r3, #31
 8009eaa:	d506      	bpl.n	8009eba <__swbuf_r+0x64>
 8009eac:	2e0a      	cmp	r6, #10
 8009eae:	d104      	bne.n	8009eba <__swbuf_r+0x64>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f002 fbd2 	bl	800c65c <_fflush_r>
 8009eb8:	b938      	cbnz	r0, 8009eca <__swbuf_r+0x74>
 8009eba:	4638      	mov	r0, r7
 8009ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f805 	bl	8009ed0 <__swsetup_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0d5      	beq.n	8009e76 <__swbuf_r+0x20>
 8009eca:	f04f 37ff 	mov.w	r7, #4294967295
 8009ece:	e7f4      	b.n	8009eba <__swbuf_r+0x64>

08009ed0 <__swsetup_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4b2a      	ldr	r3, [pc, #168]	; (8009f7c <__swsetup_r+0xac>)
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	460c      	mov	r4, r1
 8009eda:	b118      	cbz	r0, 8009ee4 <__swsetup_r+0x14>
 8009edc:	6a03      	ldr	r3, [r0, #32]
 8009ede:	b90b      	cbnz	r3, 8009ee4 <__swsetup_r+0x14>
 8009ee0:	f7ff feb2 	bl	8009c48 <__sinit>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eea:	0718      	lsls	r0, r3, #28
 8009eec:	d422      	bmi.n	8009f34 <__swsetup_r+0x64>
 8009eee:	06d9      	lsls	r1, r3, #27
 8009ef0:	d407      	bmi.n	8009f02 <__swsetup_r+0x32>
 8009ef2:	2309      	movs	r3, #9
 8009ef4:	602b      	str	r3, [r5, #0]
 8009ef6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	e034      	b.n	8009f6c <__swsetup_r+0x9c>
 8009f02:	0758      	lsls	r0, r3, #29
 8009f04:	d512      	bpl.n	8009f2c <__swsetup_r+0x5c>
 8009f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f08:	b141      	cbz	r1, 8009f1c <__swsetup_r+0x4c>
 8009f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	d002      	beq.n	8009f18 <__swsetup_r+0x48>
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 ff8a 	bl	800ae2c <_free_r>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	2300      	movs	r3, #0
 8009f26:	6063      	str	r3, [r4, #4]
 8009f28:	6923      	ldr	r3, [r4, #16]
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f043 0308 	orr.w	r3, r3, #8
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b94b      	cbnz	r3, 8009f4c <__swsetup_r+0x7c>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f42:	d003      	beq.n	8009f4c <__swsetup_r+0x7c>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f002 fbe8 	bl	800c71c <__smakebuf_r>
 8009f4c:	89a0      	ldrh	r0, [r4, #12]
 8009f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f52:	f010 0301 	ands.w	r3, r0, #1
 8009f56:	d00a      	beq.n	8009f6e <__swsetup_r+0x9e>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60a3      	str	r3, [r4, #8]
 8009f5c:	6963      	ldr	r3, [r4, #20]
 8009f5e:	425b      	negs	r3, r3
 8009f60:	61a3      	str	r3, [r4, #24]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	b943      	cbnz	r3, 8009f78 <__swsetup_r+0xa8>
 8009f66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f6a:	d1c4      	bne.n	8009ef6 <__swsetup_r+0x26>
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	0781      	lsls	r1, r0, #30
 8009f70:	bf58      	it	pl
 8009f72:	6963      	ldrpl	r3, [r4, #20]
 8009f74:	60a3      	str	r3, [r4, #8]
 8009f76:	e7f4      	b.n	8009f62 <__swsetup_r+0x92>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e7f7      	b.n	8009f6c <__swsetup_r+0x9c>
 8009f7c:	200001e0 	.word	0x200001e0

08009f80 <memset>:
 8009f80:	4402      	add	r2, r0
 8009f82:	4603      	mov	r3, r0
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d100      	bne.n	8009f8a <memset+0xa>
 8009f88:	4770      	bx	lr
 8009f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f8e:	e7f9      	b.n	8009f84 <memset+0x4>

08009f90 <strncmp>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	b16a      	cbz	r2, 8009fb0 <strncmp+0x20>
 8009f94:	3901      	subs	r1, #1
 8009f96:	1884      	adds	r4, r0, r2
 8009f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d103      	bne.n	8009fac <strncmp+0x1c>
 8009fa4:	42a0      	cmp	r0, r4
 8009fa6:	d001      	beq.n	8009fac <strncmp+0x1c>
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d1f5      	bne.n	8009f98 <strncmp+0x8>
 8009fac:	1ad0      	subs	r0, r2, r3
 8009fae:	bd10      	pop	{r4, pc}
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	e7fc      	b.n	8009fae <strncmp+0x1e>

08009fb4 <_localeconv_r>:
 8009fb4:	4800      	ldr	r0, [pc, #0]	; (8009fb8 <_localeconv_r+0x4>)
 8009fb6:	4770      	bx	lr
 8009fb8:	20000118 	.word	0x20000118

08009fbc <_close_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d06      	ldr	r5, [pc, #24]	; (8009fd8 <_close_r+0x1c>)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	602b      	str	r3, [r5, #0]
 8009fc8:	f7f9 feeb 	bl	8003da2 <_close>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_close_r+0x1a>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_close_r+0x1a>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	200006dc 	.word	0x200006dc

08009fdc <_lseek_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d07      	ldr	r5, [pc, #28]	; (8009ffc <_lseek_r+0x20>)
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7f9 ff00 	bl	8003df0 <_lseek>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_lseek_r+0x1e>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_lseek_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	200006dc 	.word	0x200006dc

0800a000 <_read_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d07      	ldr	r5, [pc, #28]	; (800a020 <_read_r+0x20>)
 800a004:	4604      	mov	r4, r0
 800a006:	4608      	mov	r0, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f7f9 fe8e 	bl	8003d30 <_read>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_read_r+0x1e>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_read_r+0x1e>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200006dc 	.word	0x200006dc

0800a024 <_sbrk_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	; (800a040 <_sbrk_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f9 feec 	bl	8003e0c <_sbrk>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_sbrk_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_sbrk_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	200006dc 	.word	0x200006dc

0800a044 <_write_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	; (800a064 <_write_r+0x20>)
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	602a      	str	r2, [r5, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f7f9 fe89 	bl	8003d6a <_write>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_write_r+0x1e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_write_r+0x1e>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	200006dc 	.word	0x200006dc

0800a068 <__errno>:
 800a068:	4b01      	ldr	r3, [pc, #4]	; (800a070 <__errno+0x8>)
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	200001e0 	.word	0x200001e0

0800a074 <__libc_init_array>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4d0d      	ldr	r5, [pc, #52]	; (800a0ac <__libc_init_array+0x38>)
 800a078:	4c0d      	ldr	r4, [pc, #52]	; (800a0b0 <__libc_init_array+0x3c>)
 800a07a:	1b64      	subs	r4, r4, r5
 800a07c:	10a4      	asrs	r4, r4, #2
 800a07e:	2600      	movs	r6, #0
 800a080:	42a6      	cmp	r6, r4
 800a082:	d109      	bne.n	800a098 <__libc_init_array+0x24>
 800a084:	4d0b      	ldr	r5, [pc, #44]	; (800a0b4 <__libc_init_array+0x40>)
 800a086:	4c0c      	ldr	r4, [pc, #48]	; (800a0b8 <__libc_init_array+0x44>)
 800a088:	f004 fbce 	bl	800e828 <_init>
 800a08c:	1b64      	subs	r4, r4, r5
 800a08e:	10a4      	asrs	r4, r4, #2
 800a090:	2600      	movs	r6, #0
 800a092:	42a6      	cmp	r6, r4
 800a094:	d105      	bne.n	800a0a2 <__libc_init_array+0x2e>
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09c:	4798      	blx	r3
 800a09e:	3601      	adds	r6, #1
 800a0a0:	e7ee      	b.n	800a080 <__libc_init_array+0xc>
 800a0a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a6:	4798      	blx	r3
 800a0a8:	3601      	adds	r6, #1
 800a0aa:	e7f2      	b.n	800a092 <__libc_init_array+0x1e>
 800a0ac:	0800f108 	.word	0x0800f108
 800a0b0:	0800f108 	.word	0x0800f108
 800a0b4:	0800f108 	.word	0x0800f108
 800a0b8:	0800f10c 	.word	0x0800f10c

0800a0bc <__retarget_lock_init_recursive>:
 800a0bc:	4770      	bx	lr

0800a0be <__retarget_lock_acquire_recursive>:
 800a0be:	4770      	bx	lr

0800a0c0 <__retarget_lock_release_recursive>:
 800a0c0:	4770      	bx	lr

0800a0c2 <memcpy>:
 800a0c2:	440a      	add	r2, r1
 800a0c4:	4291      	cmp	r1, r2
 800a0c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0ca:	d100      	bne.n	800a0ce <memcpy+0xc>
 800a0cc:	4770      	bx	lr
 800a0ce:	b510      	push	{r4, lr}
 800a0d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0d8:	4291      	cmp	r1, r2
 800a0da:	d1f9      	bne.n	800a0d0 <memcpy+0xe>
 800a0dc:	bd10      	pop	{r4, pc}
	...

0800a0e0 <nan>:
 800a0e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0e8 <nan+0x8>
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	7ff80000 	.word	0x7ff80000

0800a0f0 <nanf>:
 800a0f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0f8 <nanf+0x8>
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	7fc00000 	.word	0x7fc00000

0800a0fc <__assert_func>:
 800a0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0fe:	4614      	mov	r4, r2
 800a100:	461a      	mov	r2, r3
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <__assert_func+0x2c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4605      	mov	r5, r0
 800a108:	68d8      	ldr	r0, [r3, #12]
 800a10a:	b14c      	cbz	r4, 800a120 <__assert_func+0x24>
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <__assert_func+0x30>)
 800a10e:	9100      	str	r1, [sp, #0]
 800a110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a114:	4906      	ldr	r1, [pc, #24]	; (800a130 <__assert_func+0x34>)
 800a116:	462b      	mov	r3, r5
 800a118:	f002 fac8 	bl	800c6ac <fiprintf>
 800a11c:	f002 fb76 	bl	800c80c <abort>
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <__assert_func+0x38>)
 800a122:	461c      	mov	r4, r3
 800a124:	e7f3      	b.n	800a10e <__assert_func+0x12>
 800a126:	bf00      	nop
 800a128:	200001e0 	.word	0x200001e0
 800a12c:	0800eb61 	.word	0x0800eb61
 800a130:	0800eb6e 	.word	0x0800eb6e
 800a134:	0800eb9c 	.word	0x0800eb9c

0800a138 <quorem>:
 800a138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	6903      	ldr	r3, [r0, #16]
 800a13e:	690c      	ldr	r4, [r1, #16]
 800a140:	42a3      	cmp	r3, r4
 800a142:	4607      	mov	r7, r0
 800a144:	db7e      	blt.n	800a244 <quorem+0x10c>
 800a146:	3c01      	subs	r4, #1
 800a148:	f101 0814 	add.w	r8, r1, #20
 800a14c:	f100 0514 	add.w	r5, r0, #20
 800a150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a15a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a15e:	3301      	adds	r3, #1
 800a160:	429a      	cmp	r2, r3
 800a162:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a166:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a16a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a16e:	d331      	bcc.n	800a1d4 <quorem+0x9c>
 800a170:	f04f 0e00 	mov.w	lr, #0
 800a174:	4640      	mov	r0, r8
 800a176:	46ac      	mov	ip, r5
 800a178:	46f2      	mov	sl, lr
 800a17a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a17e:	b293      	uxth	r3, r2
 800a180:	fb06 e303 	mla	r3, r6, r3, lr
 800a184:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a188:	0c1a      	lsrs	r2, r3, #16
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	ebaa 0303 	sub.w	r3, sl, r3
 800a190:	f8dc a000 	ldr.w	sl, [ip]
 800a194:	fa13 f38a 	uxtah	r3, r3, sl
 800a198:	fb06 220e 	mla	r2, r6, lr, r2
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1a4:	b292      	uxth	r2, r2
 800a1a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ae:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1b2:	4581      	cmp	r9, r0
 800a1b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1b8:	f84c 3b04 	str.w	r3, [ip], #4
 800a1bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1c0:	d2db      	bcs.n	800a17a <quorem+0x42>
 800a1c2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1c6:	b92b      	cbnz	r3, 800a1d4 <quorem+0x9c>
 800a1c8:	9b01      	ldr	r3, [sp, #4]
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	d32c      	bcc.n	800a22c <quorem+0xf4>
 800a1d2:	613c      	str	r4, [r7, #16]
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	f001 fca5 	bl	800bb24 <__mcmp>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	db22      	blt.n	800a224 <quorem+0xec>
 800a1de:	3601      	adds	r6, #1
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1e8:	f8d1 c000 	ldr.w	ip, [r1]
 800a1ec:	b293      	uxth	r3, r2
 800a1ee:	1ac3      	subs	r3, r0, r3
 800a1f0:	0c12      	lsrs	r2, r2, #16
 800a1f2:	fa13 f38c 	uxtah	r3, r3, ip
 800a1f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a1fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a204:	45c1      	cmp	r9, r8
 800a206:	f841 3b04 	str.w	r3, [r1], #4
 800a20a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a20e:	d2e9      	bcs.n	800a1e4 <quorem+0xac>
 800a210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a214:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a218:	b922      	cbnz	r2, 800a224 <quorem+0xec>
 800a21a:	3b04      	subs	r3, #4
 800a21c:	429d      	cmp	r5, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	d30a      	bcc.n	800a238 <quorem+0x100>
 800a222:	613c      	str	r4, [r7, #16]
 800a224:	4630      	mov	r0, r6
 800a226:	b003      	add	sp, #12
 800a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	3b04      	subs	r3, #4
 800a230:	2a00      	cmp	r2, #0
 800a232:	d1ce      	bne.n	800a1d2 <quorem+0x9a>
 800a234:	3c01      	subs	r4, #1
 800a236:	e7c9      	b.n	800a1cc <quorem+0x94>
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	3b04      	subs	r3, #4
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d1f0      	bne.n	800a222 <quorem+0xea>
 800a240:	3c01      	subs	r4, #1
 800a242:	e7eb      	b.n	800a21c <quorem+0xe4>
 800a244:	2000      	movs	r0, #0
 800a246:	e7ee      	b.n	800a226 <quorem+0xee>

0800a248 <_dtoa_r>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	ed2d 8b04 	vpush	{d8-d9}
 800a250:	69c5      	ldr	r5, [r0, #28]
 800a252:	b093      	sub	sp, #76	; 0x4c
 800a254:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a258:	ec57 6b10 	vmov	r6, r7, d0
 800a25c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a260:	9107      	str	r1, [sp, #28]
 800a262:	4604      	mov	r4, r0
 800a264:	920a      	str	r2, [sp, #40]	; 0x28
 800a266:	930d      	str	r3, [sp, #52]	; 0x34
 800a268:	b975      	cbnz	r5, 800a288 <_dtoa_r+0x40>
 800a26a:	2010      	movs	r0, #16
 800a26c:	f7fd ff22 	bl	80080b4 <malloc>
 800a270:	4602      	mov	r2, r0
 800a272:	61e0      	str	r0, [r4, #28]
 800a274:	b920      	cbnz	r0, 800a280 <_dtoa_r+0x38>
 800a276:	4bae      	ldr	r3, [pc, #696]	; (800a530 <_dtoa_r+0x2e8>)
 800a278:	21ef      	movs	r1, #239	; 0xef
 800a27a:	48ae      	ldr	r0, [pc, #696]	; (800a534 <_dtoa_r+0x2ec>)
 800a27c:	f7ff ff3e 	bl	800a0fc <__assert_func>
 800a280:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a284:	6005      	str	r5, [r0, #0]
 800a286:	60c5      	str	r5, [r0, #12]
 800a288:	69e3      	ldr	r3, [r4, #28]
 800a28a:	6819      	ldr	r1, [r3, #0]
 800a28c:	b151      	cbz	r1, 800a2a4 <_dtoa_r+0x5c>
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	604a      	str	r2, [r1, #4]
 800a292:	2301      	movs	r3, #1
 800a294:	4093      	lsls	r3, r2
 800a296:	608b      	str	r3, [r1, #8]
 800a298:	4620      	mov	r0, r4
 800a29a:	f001 f9bd 	bl	800b618 <_Bfree>
 800a29e:	69e3      	ldr	r3, [r4, #28]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	1e3b      	subs	r3, r7, #0
 800a2a6:	bfbb      	ittet	lt
 800a2a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2ac:	9303      	strlt	r3, [sp, #12]
 800a2ae:	2300      	movge	r3, #0
 800a2b0:	2201      	movlt	r2, #1
 800a2b2:	bfac      	ite	ge
 800a2b4:	f8c8 3000 	strge.w	r3, [r8]
 800a2b8:	f8c8 2000 	strlt.w	r2, [r8]
 800a2bc:	4b9e      	ldr	r3, [pc, #632]	; (800a538 <_dtoa_r+0x2f0>)
 800a2be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a2c2:	ea33 0308 	bics.w	r3, r3, r8
 800a2c6:	d11b      	bne.n	800a300 <_dtoa_r+0xb8>
 800a2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a2d4:	4333      	orrs	r3, r6
 800a2d6:	f000 8593 	beq.w	800ae00 <_dtoa_r+0xbb8>
 800a2da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2dc:	b963      	cbnz	r3, 800a2f8 <_dtoa_r+0xb0>
 800a2de:	4b97      	ldr	r3, [pc, #604]	; (800a53c <_dtoa_r+0x2f4>)
 800a2e0:	e027      	b.n	800a332 <_dtoa_r+0xea>
 800a2e2:	4b97      	ldr	r3, [pc, #604]	; (800a540 <_dtoa_r+0x2f8>)
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	9800      	ldr	r0, [sp, #0]
 800a2ee:	b013      	add	sp, #76	; 0x4c
 800a2f0:	ecbd 8b04 	vpop	{d8-d9}
 800a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f8:	4b90      	ldr	r3, [pc, #576]	; (800a53c <_dtoa_r+0x2f4>)
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	3303      	adds	r3, #3
 800a2fe:	e7f3      	b.n	800a2e8 <_dtoa_r+0xa0>
 800a300:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a304:	2200      	movs	r2, #0
 800a306:	ec51 0b17 	vmov	r0, r1, d7
 800a30a:	eeb0 8a47 	vmov.f32	s16, s14
 800a30e:	eef0 8a67 	vmov.f32	s17, s15
 800a312:	2300      	movs	r3, #0
 800a314:	f7f6 fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a318:	4681      	mov	r9, r0
 800a31a:	b160      	cbz	r0, 800a336 <_dtoa_r+0xee>
 800a31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a31e:	2301      	movs	r3, #1
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8568 	beq.w	800adfa <_dtoa_r+0xbb2>
 800a32a:	4b86      	ldr	r3, [pc, #536]	; (800a544 <_dtoa_r+0x2fc>)
 800a32c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	3b01      	subs	r3, #1
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	e7da      	b.n	800a2ec <_dtoa_r+0xa4>
 800a336:	aa10      	add	r2, sp, #64	; 0x40
 800a338:	a911      	add	r1, sp, #68	; 0x44
 800a33a:	4620      	mov	r0, r4
 800a33c:	eeb0 0a48 	vmov.f32	s0, s16
 800a340:	eef0 0a68 	vmov.f32	s1, s17
 800a344:	f001 fd04 	bl	800bd50 <__d2b>
 800a348:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a34c:	4682      	mov	sl, r0
 800a34e:	2d00      	cmp	r5, #0
 800a350:	d07f      	beq.n	800a452 <_dtoa_r+0x20a>
 800a352:	ee18 3a90 	vmov	r3, s17
 800a356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a35a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a35e:	ec51 0b18 	vmov	r0, r1, d8
 800a362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a36a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a36e:	4619      	mov	r1, r3
 800a370:	2200      	movs	r2, #0
 800a372:	4b75      	ldr	r3, [pc, #468]	; (800a548 <_dtoa_r+0x300>)
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	a367      	add	r3, pc, #412	; (adr r3, 800a518 <_dtoa_r+0x2d0>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f6 f943 	bl	8000608 <__aeabi_dmul>
 800a382:	a367      	add	r3, pc, #412	; (adr r3, 800a520 <_dtoa_r+0x2d8>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f5 ff88 	bl	800029c <__adddf3>
 800a38c:	4606      	mov	r6, r0
 800a38e:	4628      	mov	r0, r5
 800a390:	460f      	mov	r7, r1
 800a392:	f7f6 f8cf 	bl	8000534 <__aeabi_i2d>
 800a396:	a364      	add	r3, pc, #400	; (adr r3, 800a528 <_dtoa_r+0x2e0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f6 f934 	bl	8000608 <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f5 ff78 	bl	800029c <__adddf3>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	f7f6 fbda 	bl	8000b68 <__aeabi_d2iz>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4683      	mov	fp, r0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f6 fb95 	bl	8000aec <__aeabi_dcmplt>
 800a3c2:	b148      	cbz	r0, 800a3d8 <_dtoa_r+0x190>
 800a3c4:	4658      	mov	r0, fp
 800a3c6:	f7f6 f8b5 	bl	8000534 <__aeabi_i2d>
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	f7f6 fb83 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3d2:	b908      	cbnz	r0, 800a3d8 <_dtoa_r+0x190>
 800a3d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3d8:	f1bb 0f16 	cmp.w	fp, #22
 800a3dc:	d857      	bhi.n	800a48e <_dtoa_r+0x246>
 800a3de:	4b5b      	ldr	r3, [pc, #364]	; (800a54c <_dtoa_r+0x304>)
 800a3e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	ec51 0b18 	vmov	r0, r1, d8
 800a3ec:	f7f6 fb7e 	bl	8000aec <__aeabi_dcmplt>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d04e      	beq.n	800a492 <_dtoa_r+0x24a>
 800a3f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3fe:	1b5b      	subs	r3, r3, r5
 800a400:	1e5a      	subs	r2, r3, #1
 800a402:	bf45      	ittet	mi
 800a404:	f1c3 0301 	rsbmi	r3, r3, #1
 800a408:	9305      	strmi	r3, [sp, #20]
 800a40a:	2300      	movpl	r3, #0
 800a40c:	2300      	movmi	r3, #0
 800a40e:	9206      	str	r2, [sp, #24]
 800a410:	bf54      	ite	pl
 800a412:	9305      	strpl	r3, [sp, #20]
 800a414:	9306      	strmi	r3, [sp, #24]
 800a416:	f1bb 0f00 	cmp.w	fp, #0
 800a41a:	db3c      	blt.n	800a496 <_dtoa_r+0x24e>
 800a41c:	9b06      	ldr	r3, [sp, #24]
 800a41e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a422:	445b      	add	r3, fp
 800a424:	9306      	str	r3, [sp, #24]
 800a426:	2300      	movs	r3, #0
 800a428:	9308      	str	r3, [sp, #32]
 800a42a:	9b07      	ldr	r3, [sp, #28]
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d868      	bhi.n	800a502 <_dtoa_r+0x2ba>
 800a430:	2b05      	cmp	r3, #5
 800a432:	bfc4      	itt	gt
 800a434:	3b04      	subgt	r3, #4
 800a436:	9307      	strgt	r3, [sp, #28]
 800a438:	9b07      	ldr	r3, [sp, #28]
 800a43a:	f1a3 0302 	sub.w	r3, r3, #2
 800a43e:	bfcc      	ite	gt
 800a440:	2500      	movgt	r5, #0
 800a442:	2501      	movle	r5, #1
 800a444:	2b03      	cmp	r3, #3
 800a446:	f200 8085 	bhi.w	800a554 <_dtoa_r+0x30c>
 800a44a:	e8df f003 	tbb	[pc, r3]
 800a44e:	3b2e      	.short	0x3b2e
 800a450:	5839      	.short	0x5839
 800a452:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a456:	441d      	add	r5, r3
 800a458:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	bfc1      	itttt	gt
 800a460:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a464:	fa08 f803 	lslgt.w	r8, r8, r3
 800a468:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a46c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a470:	bfd6      	itet	le
 800a472:	f1c3 0320 	rsble	r3, r3, #32
 800a476:	ea48 0003 	orrgt.w	r0, r8, r3
 800a47a:	fa06 f003 	lslle.w	r0, r6, r3
 800a47e:	f7f6 f849 	bl	8000514 <__aeabi_ui2d>
 800a482:	2201      	movs	r2, #1
 800a484:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a488:	3d01      	subs	r5, #1
 800a48a:	920e      	str	r2, [sp, #56]	; 0x38
 800a48c:	e76f      	b.n	800a36e <_dtoa_r+0x126>
 800a48e:	2301      	movs	r3, #1
 800a490:	e7b3      	b.n	800a3fa <_dtoa_r+0x1b2>
 800a492:	900c      	str	r0, [sp, #48]	; 0x30
 800a494:	e7b2      	b.n	800a3fc <_dtoa_r+0x1b4>
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	eba3 030b 	sub.w	r3, r3, fp
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	f1cb 0300 	rsb	r3, fp, #0
 800a4a2:	9308      	str	r3, [sp, #32]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4a8:	e7bf      	b.n	800a42a <_dtoa_r+0x1e2>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dc52      	bgt.n	800a55a <_dtoa_r+0x312>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a4be:	e00b      	b.n	800a4d8 <_dtoa_r+0x290>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e7f3      	b.n	800a4ac <_dtoa_r+0x264>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ca:	445b      	add	r3, fp
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	bfb8      	it	lt
 800a4d6:	2301      	movlt	r3, #1
 800a4d8:	69e0      	ldr	r0, [r4, #28]
 800a4da:	2100      	movs	r1, #0
 800a4dc:	2204      	movs	r2, #4
 800a4de:	f102 0614 	add.w	r6, r2, #20
 800a4e2:	429e      	cmp	r6, r3
 800a4e4:	d93d      	bls.n	800a562 <_dtoa_r+0x31a>
 800a4e6:	6041      	str	r1, [r0, #4]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f001 f855 	bl	800b598 <_Balloc>
 800a4ee:	9000      	str	r0, [sp, #0]
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d139      	bne.n	800a568 <_dtoa_r+0x320>
 800a4f4:	4b16      	ldr	r3, [pc, #88]	; (800a550 <_dtoa_r+0x308>)
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a4fc:	e6bd      	b.n	800a27a <_dtoa_r+0x32>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7e1      	b.n	800a4c6 <_dtoa_r+0x27e>
 800a502:	2501      	movs	r5, #1
 800a504:	2300      	movs	r3, #0
 800a506:	9307      	str	r3, [sp, #28]
 800a508:	9509      	str	r5, [sp, #36]	; 0x24
 800a50a:	f04f 33ff 	mov.w	r3, #4294967295
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	2200      	movs	r2, #0
 800a514:	2312      	movs	r3, #18
 800a516:	e7d1      	b.n	800a4bc <_dtoa_r+0x274>
 800a518:	636f4361 	.word	0x636f4361
 800a51c:	3fd287a7 	.word	0x3fd287a7
 800a520:	8b60c8b3 	.word	0x8b60c8b3
 800a524:	3fc68a28 	.word	0x3fc68a28
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	0800ebaa 	.word	0x0800ebaa
 800a534:	0800ebc1 	.word	0x0800ebc1
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	0800eba6 	.word	0x0800eba6
 800a540:	0800eb9d 	.word	0x0800eb9d
 800a544:	0800eb31 	.word	0x0800eb31
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	0800ed10 	.word	0x0800ed10
 800a550:	0800ec19 	.word	0x0800ec19
 800a554:	2301      	movs	r3, #1
 800a556:	9309      	str	r3, [sp, #36]	; 0x24
 800a558:	e7d7      	b.n	800a50a <_dtoa_r+0x2c2>
 800a55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	e7ba      	b.n	800a4d8 <_dtoa_r+0x290>
 800a562:	3101      	adds	r1, #1
 800a564:	0052      	lsls	r2, r2, #1
 800a566:	e7ba      	b.n	800a4de <_dtoa_r+0x296>
 800a568:	69e3      	ldr	r3, [r4, #28]
 800a56a:	9a00      	ldr	r2, [sp, #0]
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	2b0e      	cmp	r3, #14
 800a572:	f200 80a8 	bhi.w	800a6c6 <_dtoa_r+0x47e>
 800a576:	2d00      	cmp	r5, #0
 800a578:	f000 80a5 	beq.w	800a6c6 <_dtoa_r+0x47e>
 800a57c:	f1bb 0f00 	cmp.w	fp, #0
 800a580:	dd38      	ble.n	800a5f4 <_dtoa_r+0x3ac>
 800a582:	4bc0      	ldr	r3, [pc, #768]	; (800a884 <_dtoa_r+0x63c>)
 800a584:	f00b 020f 	and.w	r2, fp, #15
 800a588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a58c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a590:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a594:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a598:	d019      	beq.n	800a5ce <_dtoa_r+0x386>
 800a59a:	4bbb      	ldr	r3, [pc, #748]	; (800a888 <_dtoa_r+0x640>)
 800a59c:	ec51 0b18 	vmov	r0, r1, d8
 800a5a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5a4:	f7f6 f95a 	bl	800085c <__aeabi_ddiv>
 800a5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ac:	f008 080f 	and.w	r8, r8, #15
 800a5b0:	2503      	movs	r5, #3
 800a5b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a888 <_dtoa_r+0x640>
 800a5b6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ba:	d10a      	bne.n	800a5d2 <_dtoa_r+0x38a>
 800a5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	f7f6 f94a 	bl	800085c <__aeabi_ddiv>
 800a5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5cc:	e02b      	b.n	800a626 <_dtoa_r+0x3de>
 800a5ce:	2502      	movs	r5, #2
 800a5d0:	e7ef      	b.n	800a5b2 <_dtoa_r+0x36a>
 800a5d2:	f018 0f01 	tst.w	r8, #1
 800a5d6:	d008      	beq.n	800a5ea <_dtoa_r+0x3a2>
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a5e0:	f7f6 f812 	bl	8000608 <__aeabi_dmul>
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a5ee:	f109 0908 	add.w	r9, r9, #8
 800a5f2:	e7e0      	b.n	800a5b6 <_dtoa_r+0x36e>
 800a5f4:	f000 809f 	beq.w	800a736 <_dtoa_r+0x4ee>
 800a5f8:	f1cb 0600 	rsb	r6, fp, #0
 800a5fc:	4ba1      	ldr	r3, [pc, #644]	; (800a884 <_dtoa_r+0x63c>)
 800a5fe:	4fa2      	ldr	r7, [pc, #648]	; (800a888 <_dtoa_r+0x640>)
 800a600:	f006 020f 	and.w	r2, r6, #15
 800a604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	ec51 0b18 	vmov	r0, r1, d8
 800a610:	f7f5 fffa 	bl	8000608 <__aeabi_dmul>
 800a614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a618:	1136      	asrs	r6, r6, #4
 800a61a:	2300      	movs	r3, #0
 800a61c:	2502      	movs	r5, #2
 800a61e:	2e00      	cmp	r6, #0
 800a620:	d17e      	bne.n	800a720 <_dtoa_r+0x4d8>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1d0      	bne.n	800a5c8 <_dtoa_r+0x380>
 800a626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a628:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8084 	beq.w	800a73a <_dtoa_r+0x4f2>
 800a632:	4b96      	ldr	r3, [pc, #600]	; (800a88c <_dtoa_r+0x644>)
 800a634:	2200      	movs	r2, #0
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f6 fa57 	bl	8000aec <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d07b      	beq.n	800a73a <_dtoa_r+0x4f2>
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d078      	beq.n	800a73a <_dtoa_r+0x4f2>
 800a648:	9b01      	ldr	r3, [sp, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dd39      	ble.n	800a6c2 <_dtoa_r+0x47a>
 800a64e:	4b90      	ldr	r3, [pc, #576]	; (800a890 <_dtoa_r+0x648>)
 800a650:	2200      	movs	r2, #0
 800a652:	4640      	mov	r0, r8
 800a654:	4649      	mov	r1, r9
 800a656:	f7f5 ffd7 	bl	8000608 <__aeabi_dmul>
 800a65a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a65e:	9e01      	ldr	r6, [sp, #4]
 800a660:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a664:	3501      	adds	r5, #1
 800a666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7f5 ff62 	bl	8000534 <__aeabi_i2d>
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	f7f5 ffc8 	bl	8000608 <__aeabi_dmul>
 800a678:	4b86      	ldr	r3, [pc, #536]	; (800a894 <_dtoa_r+0x64c>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	f7f5 fe0e 	bl	800029c <__adddf3>
 800a680:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a688:	9303      	str	r3, [sp, #12]
 800a68a:	2e00      	cmp	r6, #0
 800a68c:	d158      	bne.n	800a740 <_dtoa_r+0x4f8>
 800a68e:	4b82      	ldr	r3, [pc, #520]	; (800a898 <_dtoa_r+0x650>)
 800a690:	2200      	movs	r2, #0
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f5 fdff 	bl	8000298 <__aeabi_dsub>
 800a69a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a69e:	4680      	mov	r8, r0
 800a6a0:	4689      	mov	r9, r1
 800a6a2:	f7f6 fa41 	bl	8000b28 <__aeabi_dcmpgt>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f040 8296 	bne.w	800abd8 <_dtoa_r+0x990>
 800a6ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	f7f6 fa18 	bl	8000aec <__aeabi_dcmplt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 8289 	bne.w	800abd4 <_dtoa_r+0x98c>
 800a6c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f2c0 814e 	blt.w	800a96a <_dtoa_r+0x722>
 800a6ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a6d2:	f300 814a 	bgt.w	800a96a <_dtoa_r+0x722>
 800a6d6:	4b6b      	ldr	r3, [pc, #428]	; (800a884 <_dtoa_r+0x63c>)
 800a6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f280 80dc 	bge.w	800a8a0 <_dtoa_r+0x658>
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f300 80d8 	bgt.w	800a8a0 <_dtoa_r+0x658>
 800a6f0:	f040 826f 	bne.w	800abd2 <_dtoa_r+0x98a>
 800a6f4:	4b68      	ldr	r3, [pc, #416]	; (800a898 <_dtoa_r+0x650>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f5 ff84 	bl	8000608 <__aeabi_dmul>
 800a700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a704:	f7f6 fa06 	bl	8000b14 <__aeabi_dcmpge>
 800a708:	9e04      	ldr	r6, [sp, #16]
 800a70a:	4637      	mov	r7, r6
 800a70c:	2800      	cmp	r0, #0
 800a70e:	f040 8245 	bne.w	800ab9c <_dtoa_r+0x954>
 800a712:	9d00      	ldr	r5, [sp, #0]
 800a714:	2331      	movs	r3, #49	; 0x31
 800a716:	f805 3b01 	strb.w	r3, [r5], #1
 800a71a:	f10b 0b01 	add.w	fp, fp, #1
 800a71e:	e241      	b.n	800aba4 <_dtoa_r+0x95c>
 800a720:	07f2      	lsls	r2, r6, #31
 800a722:	d505      	bpl.n	800a730 <_dtoa_r+0x4e8>
 800a724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a728:	f7f5 ff6e 	bl	8000608 <__aeabi_dmul>
 800a72c:	3501      	adds	r5, #1
 800a72e:	2301      	movs	r3, #1
 800a730:	1076      	asrs	r6, r6, #1
 800a732:	3708      	adds	r7, #8
 800a734:	e773      	b.n	800a61e <_dtoa_r+0x3d6>
 800a736:	2502      	movs	r5, #2
 800a738:	e775      	b.n	800a626 <_dtoa_r+0x3de>
 800a73a:	9e04      	ldr	r6, [sp, #16]
 800a73c:	465f      	mov	r7, fp
 800a73e:	e792      	b.n	800a666 <_dtoa_r+0x41e>
 800a740:	9900      	ldr	r1, [sp, #0]
 800a742:	4b50      	ldr	r3, [pc, #320]	; (800a884 <_dtoa_r+0x63c>)
 800a744:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a748:	4431      	add	r1, r6
 800a74a:	9102      	str	r1, [sp, #8]
 800a74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a74e:	eeb0 9a47 	vmov.f32	s18, s14
 800a752:	eef0 9a67 	vmov.f32	s19, s15
 800a756:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a75a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a75e:	2900      	cmp	r1, #0
 800a760:	d044      	beq.n	800a7ec <_dtoa_r+0x5a4>
 800a762:	494e      	ldr	r1, [pc, #312]	; (800a89c <_dtoa_r+0x654>)
 800a764:	2000      	movs	r0, #0
 800a766:	f7f6 f879 	bl	800085c <__aeabi_ddiv>
 800a76a:	ec53 2b19 	vmov	r2, r3, d9
 800a76e:	f7f5 fd93 	bl	8000298 <__aeabi_dsub>
 800a772:	9d00      	ldr	r5, [sp, #0]
 800a774:	ec41 0b19 	vmov	d9, r0, r1
 800a778:	4649      	mov	r1, r9
 800a77a:	4640      	mov	r0, r8
 800a77c:	f7f6 f9f4 	bl	8000b68 <__aeabi_d2iz>
 800a780:	4606      	mov	r6, r0
 800a782:	f7f5 fed7 	bl	8000534 <__aeabi_i2d>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f5 fd83 	bl	8000298 <__aeabi_dsub>
 800a792:	3630      	adds	r6, #48	; 0x30
 800a794:	f805 6b01 	strb.w	r6, [r5], #1
 800a798:	ec53 2b19 	vmov	r2, r3, d9
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	f7f6 f9a4 	bl	8000aec <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d164      	bne.n	800a872 <_dtoa_r+0x62a>
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	4937      	ldr	r1, [pc, #220]	; (800a88c <_dtoa_r+0x644>)
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f7f5 fd72 	bl	8000298 <__aeabi_dsub>
 800a7b4:	ec53 2b19 	vmov	r2, r3, d9
 800a7b8:	f7f6 f998 	bl	8000aec <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 80b6 	bne.w	800a92e <_dtoa_r+0x6e6>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	f43f af7c 	beq.w	800a6c2 <_dtoa_r+0x47a>
 800a7ca:	4b31      	ldr	r3, [pc, #196]	; (800a890 <_dtoa_r+0x648>)
 800a7cc:	ec51 0b19 	vmov	r0, r1, d9
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 ff19 	bl	8000608 <__aeabi_dmul>
 800a7d6:	4b2e      	ldr	r3, [pc, #184]	; (800a890 <_dtoa_r+0x648>)
 800a7d8:	ec41 0b19 	vmov	d9, r0, r1
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	f7f5 ff11 	bl	8000608 <__aeabi_dmul>
 800a7e6:	4680      	mov	r8, r0
 800a7e8:	4689      	mov	r9, r1
 800a7ea:	e7c5      	b.n	800a778 <_dtoa_r+0x530>
 800a7ec:	ec51 0b17 	vmov	r0, r1, d7
 800a7f0:	f7f5 ff0a 	bl	8000608 <__aeabi_dmul>
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	9d00      	ldr	r5, [sp, #0]
 800a7f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7fa:	ec41 0b19 	vmov	d9, r0, r1
 800a7fe:	4649      	mov	r1, r9
 800a800:	4640      	mov	r0, r8
 800a802:	f7f6 f9b1 	bl	8000b68 <__aeabi_d2iz>
 800a806:	4606      	mov	r6, r0
 800a808:	f7f5 fe94 	bl	8000534 <__aeabi_i2d>
 800a80c:	3630      	adds	r6, #48	; 0x30
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 fd3f 	bl	8000298 <__aeabi_dsub>
 800a81a:	f805 6b01 	strb.w	r6, [r5], #1
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	429d      	cmp	r5, r3
 800a822:	4680      	mov	r8, r0
 800a824:	4689      	mov	r9, r1
 800a826:	f04f 0200 	mov.w	r2, #0
 800a82a:	d124      	bne.n	800a876 <_dtoa_r+0x62e>
 800a82c:	4b1b      	ldr	r3, [pc, #108]	; (800a89c <_dtoa_r+0x654>)
 800a82e:	ec51 0b19 	vmov	r0, r1, d9
 800a832:	f7f5 fd33 	bl	800029c <__adddf3>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f6 f973 	bl	8000b28 <__aeabi_dcmpgt>
 800a842:	2800      	cmp	r0, #0
 800a844:	d173      	bne.n	800a92e <_dtoa_r+0x6e6>
 800a846:	ec53 2b19 	vmov	r2, r3, d9
 800a84a:	4914      	ldr	r1, [pc, #80]	; (800a89c <_dtoa_r+0x654>)
 800a84c:	2000      	movs	r0, #0
 800a84e:	f7f5 fd23 	bl	8000298 <__aeabi_dsub>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f6 f947 	bl	8000aec <__aeabi_dcmplt>
 800a85e:	2800      	cmp	r0, #0
 800a860:	f43f af2f 	beq.w	800a6c2 <_dtoa_r+0x47a>
 800a864:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a866:	1e6b      	subs	r3, r5, #1
 800a868:	930f      	str	r3, [sp, #60]	; 0x3c
 800a86a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a86e:	2b30      	cmp	r3, #48	; 0x30
 800a870:	d0f8      	beq.n	800a864 <_dtoa_r+0x61c>
 800a872:	46bb      	mov	fp, r7
 800a874:	e04a      	b.n	800a90c <_dtoa_r+0x6c4>
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <_dtoa_r+0x648>)
 800a878:	f7f5 fec6 	bl	8000608 <__aeabi_dmul>
 800a87c:	4680      	mov	r8, r0
 800a87e:	4689      	mov	r9, r1
 800a880:	e7bd      	b.n	800a7fe <_dtoa_r+0x5b6>
 800a882:	bf00      	nop
 800a884:	0800ed10 	.word	0x0800ed10
 800a888:	0800ece8 	.word	0x0800ece8
 800a88c:	3ff00000 	.word	0x3ff00000
 800a890:	40240000 	.word	0x40240000
 800a894:	401c0000 	.word	0x401c0000
 800a898:	40140000 	.word	0x40140000
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8a4:	9d00      	ldr	r5, [sp, #0]
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f5 ffd5 	bl	800085c <__aeabi_ddiv>
 800a8b2:	f7f6 f959 	bl	8000b68 <__aeabi_d2iz>
 800a8b6:	9001      	str	r0, [sp, #4]
 800a8b8:	f7f5 fe3c 	bl	8000534 <__aeabi_i2d>
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	f7f5 fea2 	bl	8000608 <__aeabi_dmul>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f5 fce4 	bl	8000298 <__aeabi_dsub>
 800a8d0:	9e01      	ldr	r6, [sp, #4]
 800a8d2:	9f04      	ldr	r7, [sp, #16]
 800a8d4:	3630      	adds	r6, #48	; 0x30
 800a8d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a8da:	9e00      	ldr	r6, [sp, #0]
 800a8dc:	1bae      	subs	r6, r5, r6
 800a8de:	42b7      	cmp	r7, r6
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	d134      	bne.n	800a950 <_dtoa_r+0x708>
 800a8e6:	f7f5 fcd9 	bl	800029c <__adddf3>
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	f7f6 f919 	bl	8000b28 <__aeabi_dcmpgt>
 800a8f6:	b9c8      	cbnz	r0, 800a92c <_dtoa_r+0x6e4>
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f6 f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 800a904:	b110      	cbz	r0, 800a90c <_dtoa_r+0x6c4>
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	07db      	lsls	r3, r3, #31
 800a90a:	d40f      	bmi.n	800a92c <_dtoa_r+0x6e4>
 800a90c:	4651      	mov	r1, sl
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fe82 	bl	800b618 <_Bfree>
 800a914:	2300      	movs	r3, #0
 800a916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a918:	702b      	strb	r3, [r5, #0]
 800a91a:	f10b 0301 	add.w	r3, fp, #1
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a922:	2b00      	cmp	r3, #0
 800a924:	f43f ace2 	beq.w	800a2ec <_dtoa_r+0xa4>
 800a928:	601d      	str	r5, [r3, #0]
 800a92a:	e4df      	b.n	800a2ec <_dtoa_r+0xa4>
 800a92c:	465f      	mov	r7, fp
 800a92e:	462b      	mov	r3, r5
 800a930:	461d      	mov	r5, r3
 800a932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a936:	2a39      	cmp	r2, #57	; 0x39
 800a938:	d106      	bne.n	800a948 <_dtoa_r+0x700>
 800a93a:	9a00      	ldr	r2, [sp, #0]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d1f7      	bne.n	800a930 <_dtoa_r+0x6e8>
 800a940:	9900      	ldr	r1, [sp, #0]
 800a942:	2230      	movs	r2, #48	; 0x30
 800a944:	3701      	adds	r7, #1
 800a946:	700a      	strb	r2, [r1, #0]
 800a948:	781a      	ldrb	r2, [r3, #0]
 800a94a:	3201      	adds	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e790      	b.n	800a872 <_dtoa_r+0x62a>
 800a950:	4ba3      	ldr	r3, [pc, #652]	; (800abe0 <_dtoa_r+0x998>)
 800a952:	2200      	movs	r2, #0
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	4606      	mov	r6, r0
 800a95e:	460f      	mov	r7, r1
 800a960:	f7f6 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800a964:	2800      	cmp	r0, #0
 800a966:	d09e      	beq.n	800a8a6 <_dtoa_r+0x65e>
 800a968:	e7d0      	b.n	800a90c <_dtoa_r+0x6c4>
 800a96a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a96c:	2a00      	cmp	r2, #0
 800a96e:	f000 80ca 	beq.w	800ab06 <_dtoa_r+0x8be>
 800a972:	9a07      	ldr	r2, [sp, #28]
 800a974:	2a01      	cmp	r2, #1
 800a976:	f300 80ad 	bgt.w	800aad4 <_dtoa_r+0x88c>
 800a97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	f000 80a5 	beq.w	800aacc <_dtoa_r+0x884>
 800a982:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a986:	9e08      	ldr	r6, [sp, #32]
 800a988:	9d05      	ldr	r5, [sp, #20]
 800a98a:	9a05      	ldr	r2, [sp, #20]
 800a98c:	441a      	add	r2, r3
 800a98e:	9205      	str	r2, [sp, #20]
 800a990:	9a06      	ldr	r2, [sp, #24]
 800a992:	2101      	movs	r1, #1
 800a994:	441a      	add	r2, r3
 800a996:	4620      	mov	r0, r4
 800a998:	9206      	str	r2, [sp, #24]
 800a99a:	f000 ff3d 	bl	800b818 <__i2b>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	b165      	cbz	r5, 800a9bc <_dtoa_r+0x774>
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dd09      	ble.n	800a9bc <_dtoa_r+0x774>
 800a9a8:	42ab      	cmp	r3, r5
 800a9aa:	9a05      	ldr	r2, [sp, #20]
 800a9ac:	bfa8      	it	ge
 800a9ae:	462b      	movge	r3, r5
 800a9b0:	1ad2      	subs	r2, r2, r3
 800a9b2:	9205      	str	r2, [sp, #20]
 800a9b4:	9a06      	ldr	r2, [sp, #24]
 800a9b6:	1aed      	subs	r5, r5, r3
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	9306      	str	r3, [sp, #24]
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	b1f3      	cbz	r3, 800a9fe <_dtoa_r+0x7b6>
 800a9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80a3 	beq.w	800ab0e <_dtoa_r+0x8c6>
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	dd10      	ble.n	800a9ee <_dtoa_r+0x7a6>
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 ffe1 	bl	800b998 <__pow5mult>
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	4601      	mov	r1, r0
 800a9da:	4607      	mov	r7, r0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 ff31 	bl	800b844 <__multiply>
 800a9e2:	4651      	mov	r1, sl
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 fe16 	bl	800b618 <_Bfree>
 800a9ec:	46c2      	mov	sl, r8
 800a9ee:	9b08      	ldr	r3, [sp, #32]
 800a9f0:	1b9a      	subs	r2, r3, r6
 800a9f2:	d004      	beq.n	800a9fe <_dtoa_r+0x7b6>
 800a9f4:	4651      	mov	r1, sl
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 ffce 	bl	800b998 <__pow5mult>
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 ff09 	bl	800b818 <__i2b>
 800aa06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	f340 8081 	ble.w	800ab12 <_dtoa_r+0x8ca>
 800aa10:	461a      	mov	r2, r3
 800aa12:	4601      	mov	r1, r0
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 ffbf 	bl	800b998 <__pow5mult>
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	4606      	mov	r6, r0
 800aa20:	dd7a      	ble.n	800ab18 <_dtoa_r+0x8d0>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	6933      	ldr	r3, [r6, #16]
 800aa28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa2c:	6918      	ldr	r0, [r3, #16]
 800aa2e:	f000 fea5 	bl	800b77c <__hi0bits>
 800aa32:	f1c0 0020 	rsb	r0, r0, #32
 800aa36:	9b06      	ldr	r3, [sp, #24]
 800aa38:	4418      	add	r0, r3
 800aa3a:	f010 001f 	ands.w	r0, r0, #31
 800aa3e:	f000 8094 	beq.w	800ab6a <_dtoa_r+0x922>
 800aa42:	f1c0 0320 	rsb	r3, r0, #32
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	f340 8085 	ble.w	800ab56 <_dtoa_r+0x90e>
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	f1c0 001c 	rsb	r0, r0, #28
 800aa52:	4403      	add	r3, r0
 800aa54:	9305      	str	r3, [sp, #20]
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	4403      	add	r3, r0
 800aa5a:	4405      	add	r5, r0
 800aa5c:	9306      	str	r3, [sp, #24]
 800aa5e:	9b05      	ldr	r3, [sp, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	dd05      	ble.n	800aa70 <_dtoa_r+0x828>
 800aa64:	4651      	mov	r1, sl
 800aa66:	461a      	mov	r2, r3
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 ffef 	bl	800ba4c <__lshift>
 800aa6e:	4682      	mov	sl, r0
 800aa70:	9b06      	ldr	r3, [sp, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x83a>
 800aa76:	4631      	mov	r1, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 ffe6 	bl	800ba4c <__lshift>
 800aa80:	4606      	mov	r6, r0
 800aa82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d072      	beq.n	800ab6e <_dtoa_r+0x926>
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4650      	mov	r0, sl
 800aa8c:	f001 f84a 	bl	800bb24 <__mcmp>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	da6c      	bge.n	800ab6e <_dtoa_r+0x926>
 800aa94:	2300      	movs	r3, #0
 800aa96:	4651      	mov	r1, sl
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fdde 	bl	800b65c <__multadd>
 800aaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaa6:	4682      	mov	sl, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 81b0 	beq.w	800ae0e <_dtoa_r+0xbc6>
 800aaae:	2300      	movs	r3, #0
 800aab0:	4639      	mov	r1, r7
 800aab2:	220a      	movs	r2, #10
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fdd1 	bl	800b65c <__multadd>
 800aaba:	9b01      	ldr	r3, [sp, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	4607      	mov	r7, r0
 800aac0:	f300 8096 	bgt.w	800abf0 <_dtoa_r+0x9a8>
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc59      	bgt.n	800ab7e <_dtoa_r+0x936>
 800aaca:	e091      	b.n	800abf0 <_dtoa_r+0x9a8>
 800aacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aad2:	e758      	b.n	800a986 <_dtoa_r+0x73e>
 800aad4:	9b04      	ldr	r3, [sp, #16]
 800aad6:	1e5e      	subs	r6, r3, #1
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	42b3      	cmp	r3, r6
 800aadc:	bfbf      	itttt	lt
 800aade:	9b08      	ldrlt	r3, [sp, #32]
 800aae0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aae2:	9608      	strlt	r6, [sp, #32]
 800aae4:	1af3      	sublt	r3, r6, r3
 800aae6:	bfb4      	ite	lt
 800aae8:	18d2      	addlt	r2, r2, r3
 800aaea:	1b9e      	subge	r6, r3, r6
 800aaec:	9b04      	ldr	r3, [sp, #16]
 800aaee:	bfbc      	itt	lt
 800aaf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aaf2:	2600      	movlt	r6, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb7      	itett	lt
 800aaf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aafc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ab00:	1a9d      	sublt	r5, r3, r2
 800ab02:	2300      	movlt	r3, #0
 800ab04:	e741      	b.n	800a98a <_dtoa_r+0x742>
 800ab06:	9e08      	ldr	r6, [sp, #32]
 800ab08:	9d05      	ldr	r5, [sp, #20]
 800ab0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab0c:	e748      	b.n	800a9a0 <_dtoa_r+0x758>
 800ab0e:	9a08      	ldr	r2, [sp, #32]
 800ab10:	e770      	b.n	800a9f4 <_dtoa_r+0x7ac>
 800ab12:	9b07      	ldr	r3, [sp, #28]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	dc19      	bgt.n	800ab4c <_dtoa_r+0x904>
 800ab18:	9b02      	ldr	r3, [sp, #8]
 800ab1a:	b9bb      	cbnz	r3, 800ab4c <_dtoa_r+0x904>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab22:	b99b      	cbnz	r3, 800ab4c <_dtoa_r+0x904>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2a:	0d1b      	lsrs	r3, r3, #20
 800ab2c:	051b      	lsls	r3, r3, #20
 800ab2e:	b183      	cbz	r3, 800ab52 <_dtoa_r+0x90a>
 800ab30:	9b05      	ldr	r3, [sp, #20]
 800ab32:	3301      	adds	r3, #1
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	f04f 0801 	mov.w	r8, #1
 800ab40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f af6f 	bne.w	800aa26 <_dtoa_r+0x7de>
 800ab48:	2001      	movs	r0, #1
 800ab4a:	e774      	b.n	800aa36 <_dtoa_r+0x7ee>
 800ab4c:	f04f 0800 	mov.w	r8, #0
 800ab50:	e7f6      	b.n	800ab40 <_dtoa_r+0x8f8>
 800ab52:	4698      	mov	r8, r3
 800ab54:	e7f4      	b.n	800ab40 <_dtoa_r+0x8f8>
 800ab56:	d082      	beq.n	800aa5e <_dtoa_r+0x816>
 800ab58:	9a05      	ldr	r2, [sp, #20]
 800ab5a:	331c      	adds	r3, #28
 800ab5c:	441a      	add	r2, r3
 800ab5e:	9205      	str	r2, [sp, #20]
 800ab60:	9a06      	ldr	r2, [sp, #24]
 800ab62:	441a      	add	r2, r3
 800ab64:	441d      	add	r5, r3
 800ab66:	9206      	str	r2, [sp, #24]
 800ab68:	e779      	b.n	800aa5e <_dtoa_r+0x816>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	e7f4      	b.n	800ab58 <_dtoa_r+0x910>
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dc37      	bgt.n	800abe4 <_dtoa_r+0x99c>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	dd34      	ble.n	800abe4 <_dtoa_r+0x99c>
 800ab7a:	9b04      	ldr	r3, [sp, #16]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	b963      	cbnz	r3, 800ab9c <_dtoa_r+0x954>
 800ab82:	4631      	mov	r1, r6
 800ab84:	2205      	movs	r2, #5
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 fd68 	bl	800b65c <__multadd>
 800ab8c:	4601      	mov	r1, r0
 800ab8e:	4606      	mov	r6, r0
 800ab90:	4650      	mov	r0, sl
 800ab92:	f000 ffc7 	bl	800bb24 <__mcmp>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f73f adbb 	bgt.w	800a712 <_dtoa_r+0x4ca>
 800ab9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9e:	9d00      	ldr	r5, [sp, #0]
 800aba0:	ea6f 0b03 	mvn.w	fp, r3
 800aba4:	f04f 0800 	mov.w	r8, #0
 800aba8:	4631      	mov	r1, r6
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fd34 	bl	800b618 <_Bfree>
 800abb0:	2f00      	cmp	r7, #0
 800abb2:	f43f aeab 	beq.w	800a90c <_dtoa_r+0x6c4>
 800abb6:	f1b8 0f00 	cmp.w	r8, #0
 800abba:	d005      	beq.n	800abc8 <_dtoa_r+0x980>
 800abbc:	45b8      	cmp	r8, r7
 800abbe:	d003      	beq.n	800abc8 <_dtoa_r+0x980>
 800abc0:	4641      	mov	r1, r8
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fd28 	bl	800b618 <_Bfree>
 800abc8:	4639      	mov	r1, r7
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 fd24 	bl	800b618 <_Bfree>
 800abd0:	e69c      	b.n	800a90c <_dtoa_r+0x6c4>
 800abd2:	2600      	movs	r6, #0
 800abd4:	4637      	mov	r7, r6
 800abd6:	e7e1      	b.n	800ab9c <_dtoa_r+0x954>
 800abd8:	46bb      	mov	fp, r7
 800abda:	4637      	mov	r7, r6
 800abdc:	e599      	b.n	800a712 <_dtoa_r+0x4ca>
 800abde:	bf00      	nop
 800abe0:	40240000 	.word	0x40240000
 800abe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 80c8 	beq.w	800ad7c <_dtoa_r+0xb34>
 800abec:	9b04      	ldr	r3, [sp, #16]
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	dd05      	ble.n	800ac00 <_dtoa_r+0x9b8>
 800abf4:	4639      	mov	r1, r7
 800abf6:	462a      	mov	r2, r5
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 ff27 	bl	800ba4c <__lshift>
 800abfe:	4607      	mov	r7, r0
 800ac00:	f1b8 0f00 	cmp.w	r8, #0
 800ac04:	d05b      	beq.n	800acbe <_dtoa_r+0xa76>
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fcc5 	bl	800b598 <_Balloc>
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b928      	cbnz	r0, 800ac1e <_dtoa_r+0x9d6>
 800ac12:	4b83      	ldr	r3, [pc, #524]	; (800ae20 <_dtoa_r+0xbd8>)
 800ac14:	4602      	mov	r2, r0
 800ac16:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ac1a:	f7ff bb2e 	b.w	800a27a <_dtoa_r+0x32>
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	3202      	adds	r2, #2
 800ac22:	0092      	lsls	r2, r2, #2
 800ac24:	f107 010c 	add.w	r1, r7, #12
 800ac28:	300c      	adds	r0, #12
 800ac2a:	f7ff fa4a 	bl	800a0c2 <memcpy>
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4629      	mov	r1, r5
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 ff0a 	bl	800ba4c <__lshift>
 800ac38:	9b00      	ldr	r3, [sp, #0]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac42:	4413      	add	r3, r2
 800ac44:	9308      	str	r3, [sp, #32]
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	46b8      	mov	r8, r7
 800ac4e:	9306      	str	r3, [sp, #24]
 800ac50:	4607      	mov	r7, r0
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	4631      	mov	r1, r6
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4650      	mov	r0, sl
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	f7ff fa6c 	bl	800a138 <quorem>
 800ac60:	4641      	mov	r1, r8
 800ac62:	9002      	str	r0, [sp, #8]
 800ac64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac68:	4650      	mov	r0, sl
 800ac6a:	f000 ff5b 	bl	800bb24 <__mcmp>
 800ac6e:	463a      	mov	r2, r7
 800ac70:	9005      	str	r0, [sp, #20]
 800ac72:	4631      	mov	r1, r6
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 ff71 	bl	800bb5c <__mdiff>
 800ac7a:	68c2      	ldr	r2, [r0, #12]
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	bb02      	cbnz	r2, 800acc2 <_dtoa_r+0xa7a>
 800ac80:	4601      	mov	r1, r0
 800ac82:	4650      	mov	r0, sl
 800ac84:	f000 ff4e 	bl	800bb24 <__mcmp>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac90:	f000 fcc2 	bl	800b618 <_Bfree>
 800ac94:	9b07      	ldr	r3, [sp, #28]
 800ac96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac98:	9d04      	ldr	r5, [sp, #16]
 800ac9a:	ea43 0102 	orr.w	r1, r3, r2
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	4319      	orrs	r1, r3
 800aca2:	d110      	bne.n	800acc6 <_dtoa_r+0xa7e>
 800aca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aca8:	d029      	beq.n	800acfe <_dtoa_r+0xab6>
 800acaa:	9b05      	ldr	r3, [sp, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	dd02      	ble.n	800acb6 <_dtoa_r+0xa6e>
 800acb0:	9b02      	ldr	r3, [sp, #8]
 800acb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	f883 9000 	strb.w	r9, [r3]
 800acbc:	e774      	b.n	800aba8 <_dtoa_r+0x960>
 800acbe:	4638      	mov	r0, r7
 800acc0:	e7ba      	b.n	800ac38 <_dtoa_r+0x9f0>
 800acc2:	2201      	movs	r2, #1
 800acc4:	e7e1      	b.n	800ac8a <_dtoa_r+0xa42>
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	db04      	blt.n	800acd6 <_dtoa_r+0xa8e>
 800accc:	9907      	ldr	r1, [sp, #28]
 800acce:	430b      	orrs	r3, r1
 800acd0:	9906      	ldr	r1, [sp, #24]
 800acd2:	430b      	orrs	r3, r1
 800acd4:	d120      	bne.n	800ad18 <_dtoa_r+0xad0>
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	dded      	ble.n	800acb6 <_dtoa_r+0xa6e>
 800acda:	4651      	mov	r1, sl
 800acdc:	2201      	movs	r2, #1
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 feb4 	bl	800ba4c <__lshift>
 800ace4:	4631      	mov	r1, r6
 800ace6:	4682      	mov	sl, r0
 800ace8:	f000 ff1c 	bl	800bb24 <__mcmp>
 800acec:	2800      	cmp	r0, #0
 800acee:	dc03      	bgt.n	800acf8 <_dtoa_r+0xab0>
 800acf0:	d1e1      	bne.n	800acb6 <_dtoa_r+0xa6e>
 800acf2:	f019 0f01 	tst.w	r9, #1
 800acf6:	d0de      	beq.n	800acb6 <_dtoa_r+0xa6e>
 800acf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800acfc:	d1d8      	bne.n	800acb0 <_dtoa_r+0xa68>
 800acfe:	9a01      	ldr	r2, [sp, #4]
 800ad00:	2339      	movs	r3, #57	; 0x39
 800ad02:	7013      	strb	r3, [r2, #0]
 800ad04:	462b      	mov	r3, r5
 800ad06:	461d      	mov	r5, r3
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad0e:	2a39      	cmp	r2, #57	; 0x39
 800ad10:	d06c      	beq.n	800adec <_dtoa_r+0xba4>
 800ad12:	3201      	adds	r2, #1
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e747      	b.n	800aba8 <_dtoa_r+0x960>
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	dd07      	ble.n	800ad2c <_dtoa_r+0xae4>
 800ad1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad20:	d0ed      	beq.n	800acfe <_dtoa_r+0xab6>
 800ad22:	9a01      	ldr	r2, [sp, #4]
 800ad24:	f109 0301 	add.w	r3, r9, #1
 800ad28:	7013      	strb	r3, [r2, #0]
 800ad2a:	e73d      	b.n	800aba8 <_dtoa_r+0x960>
 800ad2c:	9b04      	ldr	r3, [sp, #16]
 800ad2e:	9a08      	ldr	r2, [sp, #32]
 800ad30:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d043      	beq.n	800adc0 <_dtoa_r+0xb78>
 800ad38:	4651      	mov	r1, sl
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fc8c 	bl	800b65c <__multadd>
 800ad44:	45b8      	cmp	r8, r7
 800ad46:	4682      	mov	sl, r0
 800ad48:	f04f 0300 	mov.w	r3, #0
 800ad4c:	f04f 020a 	mov.w	r2, #10
 800ad50:	4641      	mov	r1, r8
 800ad52:	4620      	mov	r0, r4
 800ad54:	d107      	bne.n	800ad66 <_dtoa_r+0xb1e>
 800ad56:	f000 fc81 	bl	800b65c <__multadd>
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	3301      	adds	r3, #1
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	e775      	b.n	800ac52 <_dtoa_r+0xa0a>
 800ad66:	f000 fc79 	bl	800b65c <__multadd>
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	2300      	movs	r3, #0
 800ad70:	220a      	movs	r2, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 fc72 	bl	800b65c <__multadd>
 800ad78:	4607      	mov	r7, r0
 800ad7a:	e7f0      	b.n	800ad5e <_dtoa_r+0xb16>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	9d00      	ldr	r5, [sp, #0]
 800ad82:	4631      	mov	r1, r6
 800ad84:	4650      	mov	r0, sl
 800ad86:	f7ff f9d7 	bl	800a138 <quorem>
 800ad8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad8e:	9b00      	ldr	r3, [sp, #0]
 800ad90:	f805 9b01 	strb.w	r9, [r5], #1
 800ad94:	1aea      	subs	r2, r5, r3
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	dd07      	ble.n	800adac <_dtoa_r+0xb64>
 800ad9c:	4651      	mov	r1, sl
 800ad9e:	2300      	movs	r3, #0
 800ada0:	220a      	movs	r2, #10
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fc5a 	bl	800b65c <__multadd>
 800ada8:	4682      	mov	sl, r0
 800adaa:	e7ea      	b.n	800ad82 <_dtoa_r+0xb3a>
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bfc8      	it	gt
 800adb2:	461d      	movgt	r5, r3
 800adb4:	9b00      	ldr	r3, [sp, #0]
 800adb6:	bfd8      	it	le
 800adb8:	2501      	movle	r5, #1
 800adba:	441d      	add	r5, r3
 800adbc:	f04f 0800 	mov.w	r8, #0
 800adc0:	4651      	mov	r1, sl
 800adc2:	2201      	movs	r2, #1
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 fe41 	bl	800ba4c <__lshift>
 800adca:	4631      	mov	r1, r6
 800adcc:	4682      	mov	sl, r0
 800adce:	f000 fea9 	bl	800bb24 <__mcmp>
 800add2:	2800      	cmp	r0, #0
 800add4:	dc96      	bgt.n	800ad04 <_dtoa_r+0xabc>
 800add6:	d102      	bne.n	800adde <_dtoa_r+0xb96>
 800add8:	f019 0f01 	tst.w	r9, #1
 800addc:	d192      	bne.n	800ad04 <_dtoa_r+0xabc>
 800adde:	462b      	mov	r3, r5
 800ade0:	461d      	mov	r5, r3
 800ade2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ade6:	2a30      	cmp	r2, #48	; 0x30
 800ade8:	d0fa      	beq.n	800ade0 <_dtoa_r+0xb98>
 800adea:	e6dd      	b.n	800aba8 <_dtoa_r+0x960>
 800adec:	9a00      	ldr	r2, [sp, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d189      	bne.n	800ad06 <_dtoa_r+0xabe>
 800adf2:	f10b 0b01 	add.w	fp, fp, #1
 800adf6:	2331      	movs	r3, #49	; 0x31
 800adf8:	e796      	b.n	800ad28 <_dtoa_r+0xae0>
 800adfa:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <_dtoa_r+0xbdc>)
 800adfc:	f7ff ba99 	b.w	800a332 <_dtoa_r+0xea>
 800ae00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f47f aa6d 	bne.w	800a2e2 <_dtoa_r+0x9a>
 800ae08:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <_dtoa_r+0xbe0>)
 800ae0a:	f7ff ba92 	b.w	800a332 <_dtoa_r+0xea>
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dcb5      	bgt.n	800ad80 <_dtoa_r+0xb38>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	f73f aeb1 	bgt.w	800ab7e <_dtoa_r+0x936>
 800ae1c:	e7b0      	b.n	800ad80 <_dtoa_r+0xb38>
 800ae1e:	bf00      	nop
 800ae20:	0800ec19 	.word	0x0800ec19
 800ae24:	0800eb30 	.word	0x0800eb30
 800ae28:	0800eb9d 	.word	0x0800eb9d

0800ae2c <_free_r>:
 800ae2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d044      	beq.n	800aebc <_free_r+0x90>
 800ae32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae36:	9001      	str	r0, [sp, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae3e:	bfb8      	it	lt
 800ae40:	18e4      	addlt	r4, r4, r3
 800ae42:	f7fd f9df 	bl	8008204 <__malloc_lock>
 800ae46:	4a1e      	ldr	r2, [pc, #120]	; (800aec0 <_free_r+0x94>)
 800ae48:	9801      	ldr	r0, [sp, #4]
 800ae4a:	6813      	ldr	r3, [r2, #0]
 800ae4c:	b933      	cbnz	r3, 800ae5c <_free_r+0x30>
 800ae4e:	6063      	str	r3, [r4, #4]
 800ae50:	6014      	str	r4, [r2, #0]
 800ae52:	b003      	add	sp, #12
 800ae54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae58:	f7fd b9da 	b.w	8008210 <__malloc_unlock>
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	d908      	bls.n	800ae72 <_free_r+0x46>
 800ae60:	6825      	ldr	r5, [r4, #0]
 800ae62:	1961      	adds	r1, r4, r5
 800ae64:	428b      	cmp	r3, r1
 800ae66:	bf01      	itttt	eq
 800ae68:	6819      	ldreq	r1, [r3, #0]
 800ae6a:	685b      	ldreq	r3, [r3, #4]
 800ae6c:	1949      	addeq	r1, r1, r5
 800ae6e:	6021      	streq	r1, [r4, #0]
 800ae70:	e7ed      	b.n	800ae4e <_free_r+0x22>
 800ae72:	461a      	mov	r2, r3
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	b10b      	cbz	r3, 800ae7c <_free_r+0x50>
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	d9fa      	bls.n	800ae72 <_free_r+0x46>
 800ae7c:	6811      	ldr	r1, [r2, #0]
 800ae7e:	1855      	adds	r5, r2, r1
 800ae80:	42a5      	cmp	r5, r4
 800ae82:	d10b      	bne.n	800ae9c <_free_r+0x70>
 800ae84:	6824      	ldr	r4, [r4, #0]
 800ae86:	4421      	add	r1, r4
 800ae88:	1854      	adds	r4, r2, r1
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	6011      	str	r1, [r2, #0]
 800ae8e:	d1e0      	bne.n	800ae52 <_free_r+0x26>
 800ae90:	681c      	ldr	r4, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	6053      	str	r3, [r2, #4]
 800ae96:	440c      	add	r4, r1
 800ae98:	6014      	str	r4, [r2, #0]
 800ae9a:	e7da      	b.n	800ae52 <_free_r+0x26>
 800ae9c:	d902      	bls.n	800aea4 <_free_r+0x78>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	e7d6      	b.n	800ae52 <_free_r+0x26>
 800aea4:	6825      	ldr	r5, [r4, #0]
 800aea6:	1961      	adds	r1, r4, r5
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	bf04      	itt	eq
 800aeac:	6819      	ldreq	r1, [r3, #0]
 800aeae:	685b      	ldreq	r3, [r3, #4]
 800aeb0:	6063      	str	r3, [r4, #4]
 800aeb2:	bf04      	itt	eq
 800aeb4:	1949      	addeq	r1, r1, r5
 800aeb6:	6021      	streq	r1, [r4, #0]
 800aeb8:	6054      	str	r4, [r2, #4]
 800aeba:	e7ca      	b.n	800ae52 <_free_r+0x26>
 800aebc:	b003      	add	sp, #12
 800aebe:	bd30      	pop	{r4, r5, pc}
 800aec0:	20000598 	.word	0x20000598

0800aec4 <rshift>:
 800aec4:	6903      	ldr	r3, [r0, #16]
 800aec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aece:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aed2:	f100 0414 	add.w	r4, r0, #20
 800aed6:	dd45      	ble.n	800af64 <rshift+0xa0>
 800aed8:	f011 011f 	ands.w	r1, r1, #31
 800aedc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aee4:	d10c      	bne.n	800af00 <rshift+0x3c>
 800aee6:	f100 0710 	add.w	r7, r0, #16
 800aeea:	4629      	mov	r1, r5
 800aeec:	42b1      	cmp	r1, r6
 800aeee:	d334      	bcc.n	800af5a <rshift+0x96>
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	1eea      	subs	r2, r5, #3
 800aef6:	4296      	cmp	r6, r2
 800aef8:	bf38      	it	cc
 800aefa:	2300      	movcc	r3, #0
 800aefc:	4423      	add	r3, r4
 800aefe:	e015      	b.n	800af2c <rshift+0x68>
 800af00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af04:	f1c1 0820 	rsb	r8, r1, #32
 800af08:	40cf      	lsrs	r7, r1
 800af0a:	f105 0e04 	add.w	lr, r5, #4
 800af0e:	46a1      	mov	r9, r4
 800af10:	4576      	cmp	r6, lr
 800af12:	46f4      	mov	ip, lr
 800af14:	d815      	bhi.n	800af42 <rshift+0x7e>
 800af16:	1a9a      	subs	r2, r3, r2
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	3a04      	subs	r2, #4
 800af1c:	3501      	adds	r5, #1
 800af1e:	42ae      	cmp	r6, r5
 800af20:	bf38      	it	cc
 800af22:	2200      	movcc	r2, #0
 800af24:	18a3      	adds	r3, r4, r2
 800af26:	50a7      	str	r7, [r4, r2]
 800af28:	b107      	cbz	r7, 800af2c <rshift+0x68>
 800af2a:	3304      	adds	r3, #4
 800af2c:	1b1a      	subs	r2, r3, r4
 800af2e:	42a3      	cmp	r3, r4
 800af30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af34:	bf08      	it	eq
 800af36:	2300      	moveq	r3, #0
 800af38:	6102      	str	r2, [r0, #16]
 800af3a:	bf08      	it	eq
 800af3c:	6143      	streq	r3, [r0, #20]
 800af3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af42:	f8dc c000 	ldr.w	ip, [ip]
 800af46:	fa0c fc08 	lsl.w	ip, ip, r8
 800af4a:	ea4c 0707 	orr.w	r7, ip, r7
 800af4e:	f849 7b04 	str.w	r7, [r9], #4
 800af52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af56:	40cf      	lsrs	r7, r1
 800af58:	e7da      	b.n	800af10 <rshift+0x4c>
 800af5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800af5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800af62:	e7c3      	b.n	800aeec <rshift+0x28>
 800af64:	4623      	mov	r3, r4
 800af66:	e7e1      	b.n	800af2c <rshift+0x68>

0800af68 <__hexdig_fun>:
 800af68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af6c:	2b09      	cmp	r3, #9
 800af6e:	d802      	bhi.n	800af76 <__hexdig_fun+0xe>
 800af70:	3820      	subs	r0, #32
 800af72:	b2c0      	uxtb	r0, r0
 800af74:	4770      	bx	lr
 800af76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d801      	bhi.n	800af82 <__hexdig_fun+0x1a>
 800af7e:	3847      	subs	r0, #71	; 0x47
 800af80:	e7f7      	b.n	800af72 <__hexdig_fun+0xa>
 800af82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af86:	2b05      	cmp	r3, #5
 800af88:	d801      	bhi.n	800af8e <__hexdig_fun+0x26>
 800af8a:	3827      	subs	r0, #39	; 0x27
 800af8c:	e7f1      	b.n	800af72 <__hexdig_fun+0xa>
 800af8e:	2000      	movs	r0, #0
 800af90:	4770      	bx	lr
	...

0800af94 <__gethex>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	4617      	mov	r7, r2
 800af9a:	680a      	ldr	r2, [r1, #0]
 800af9c:	b085      	sub	sp, #20
 800af9e:	f102 0b02 	add.w	fp, r2, #2
 800afa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800afa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afaa:	4681      	mov	r9, r0
 800afac:	468a      	mov	sl, r1
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	32fe      	adds	r2, #254	; 0xfe
 800afb2:	eb02 030b 	add.w	r3, r2, fp
 800afb6:	46d8      	mov	r8, fp
 800afb8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	2830      	cmp	r0, #48	; 0x30
 800afc0:	d0f7      	beq.n	800afb2 <__gethex+0x1e>
 800afc2:	f7ff ffd1 	bl	800af68 <__hexdig_fun>
 800afc6:	4604      	mov	r4, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	d138      	bne.n	800b03e <__gethex+0xaa>
 800afcc:	49a7      	ldr	r1, [pc, #668]	; (800b26c <__gethex+0x2d8>)
 800afce:	2201      	movs	r2, #1
 800afd0:	4640      	mov	r0, r8
 800afd2:	f7fe ffdd 	bl	8009f90 <strncmp>
 800afd6:	4606      	mov	r6, r0
 800afd8:	2800      	cmp	r0, #0
 800afda:	d169      	bne.n	800b0b0 <__gethex+0x11c>
 800afdc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800afe0:	465d      	mov	r5, fp
 800afe2:	f7ff ffc1 	bl	800af68 <__hexdig_fun>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d064      	beq.n	800b0b4 <__gethex+0x120>
 800afea:	465a      	mov	r2, fp
 800afec:	7810      	ldrb	r0, [r2, #0]
 800afee:	2830      	cmp	r0, #48	; 0x30
 800aff0:	4690      	mov	r8, r2
 800aff2:	f102 0201 	add.w	r2, r2, #1
 800aff6:	d0f9      	beq.n	800afec <__gethex+0x58>
 800aff8:	f7ff ffb6 	bl	800af68 <__hexdig_fun>
 800affc:	2301      	movs	r3, #1
 800affe:	fab0 f480 	clz	r4, r0
 800b002:	0964      	lsrs	r4, r4, #5
 800b004:	465e      	mov	r6, fp
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	4642      	mov	r2, r8
 800b00a:	4615      	mov	r5, r2
 800b00c:	3201      	adds	r2, #1
 800b00e:	7828      	ldrb	r0, [r5, #0]
 800b010:	f7ff ffaa 	bl	800af68 <__hexdig_fun>
 800b014:	2800      	cmp	r0, #0
 800b016:	d1f8      	bne.n	800b00a <__gethex+0x76>
 800b018:	4994      	ldr	r1, [pc, #592]	; (800b26c <__gethex+0x2d8>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	4628      	mov	r0, r5
 800b01e:	f7fe ffb7 	bl	8009f90 <strncmp>
 800b022:	b978      	cbnz	r0, 800b044 <__gethex+0xb0>
 800b024:	b946      	cbnz	r6, 800b038 <__gethex+0xa4>
 800b026:	1c6e      	adds	r6, r5, #1
 800b028:	4632      	mov	r2, r6
 800b02a:	4615      	mov	r5, r2
 800b02c:	3201      	adds	r2, #1
 800b02e:	7828      	ldrb	r0, [r5, #0]
 800b030:	f7ff ff9a 	bl	800af68 <__hexdig_fun>
 800b034:	2800      	cmp	r0, #0
 800b036:	d1f8      	bne.n	800b02a <__gethex+0x96>
 800b038:	1b73      	subs	r3, r6, r5
 800b03a:	009e      	lsls	r6, r3, #2
 800b03c:	e004      	b.n	800b048 <__gethex+0xb4>
 800b03e:	2400      	movs	r4, #0
 800b040:	4626      	mov	r6, r4
 800b042:	e7e1      	b.n	800b008 <__gethex+0x74>
 800b044:	2e00      	cmp	r6, #0
 800b046:	d1f7      	bne.n	800b038 <__gethex+0xa4>
 800b048:	782b      	ldrb	r3, [r5, #0]
 800b04a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b04e:	2b50      	cmp	r3, #80	; 0x50
 800b050:	d13d      	bne.n	800b0ce <__gethex+0x13a>
 800b052:	786b      	ldrb	r3, [r5, #1]
 800b054:	2b2b      	cmp	r3, #43	; 0x2b
 800b056:	d02f      	beq.n	800b0b8 <__gethex+0x124>
 800b058:	2b2d      	cmp	r3, #45	; 0x2d
 800b05a:	d031      	beq.n	800b0c0 <__gethex+0x12c>
 800b05c:	1c69      	adds	r1, r5, #1
 800b05e:	f04f 0b00 	mov.w	fp, #0
 800b062:	7808      	ldrb	r0, [r1, #0]
 800b064:	f7ff ff80 	bl	800af68 <__hexdig_fun>
 800b068:	1e42      	subs	r2, r0, #1
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	2a18      	cmp	r2, #24
 800b06e:	d82e      	bhi.n	800b0ce <__gethex+0x13a>
 800b070:	f1a0 0210 	sub.w	r2, r0, #16
 800b074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b078:	f7ff ff76 	bl	800af68 <__hexdig_fun>
 800b07c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b080:	fa5f fc8c 	uxtb.w	ip, ip
 800b084:	f1bc 0f18 	cmp.w	ip, #24
 800b088:	d91d      	bls.n	800b0c6 <__gethex+0x132>
 800b08a:	f1bb 0f00 	cmp.w	fp, #0
 800b08e:	d000      	beq.n	800b092 <__gethex+0xfe>
 800b090:	4252      	negs	r2, r2
 800b092:	4416      	add	r6, r2
 800b094:	f8ca 1000 	str.w	r1, [sl]
 800b098:	b1dc      	cbz	r4, 800b0d2 <__gethex+0x13e>
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bf14      	ite	ne
 800b0a0:	f04f 0800 	movne.w	r8, #0
 800b0a4:	f04f 0806 	moveq.w	r8, #6
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	b005      	add	sp, #20
 800b0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b0:	4645      	mov	r5, r8
 800b0b2:	4626      	mov	r6, r4
 800b0b4:	2401      	movs	r4, #1
 800b0b6:	e7c7      	b.n	800b048 <__gethex+0xb4>
 800b0b8:	f04f 0b00 	mov.w	fp, #0
 800b0bc:	1ca9      	adds	r1, r5, #2
 800b0be:	e7d0      	b.n	800b062 <__gethex+0xce>
 800b0c0:	f04f 0b01 	mov.w	fp, #1
 800b0c4:	e7fa      	b.n	800b0bc <__gethex+0x128>
 800b0c6:	230a      	movs	r3, #10
 800b0c8:	fb03 0002 	mla	r0, r3, r2, r0
 800b0cc:	e7d0      	b.n	800b070 <__gethex+0xdc>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	e7e0      	b.n	800b094 <__gethex+0x100>
 800b0d2:	eba5 0308 	sub.w	r3, r5, r8
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	4621      	mov	r1, r4
 800b0da:	2b07      	cmp	r3, #7
 800b0dc:	dc0a      	bgt.n	800b0f4 <__gethex+0x160>
 800b0de:	4648      	mov	r0, r9
 800b0e0:	f000 fa5a 	bl	800b598 <_Balloc>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	b940      	cbnz	r0, 800b0fa <__gethex+0x166>
 800b0e8:	4b61      	ldr	r3, [pc, #388]	; (800b270 <__gethex+0x2dc>)
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	21e4      	movs	r1, #228	; 0xe4
 800b0ee:	4861      	ldr	r0, [pc, #388]	; (800b274 <__gethex+0x2e0>)
 800b0f0:	f7ff f804 	bl	800a0fc <__assert_func>
 800b0f4:	3101      	adds	r1, #1
 800b0f6:	105b      	asrs	r3, r3, #1
 800b0f8:	e7ef      	b.n	800b0da <__gethex+0x146>
 800b0fa:	f100 0a14 	add.w	sl, r0, #20
 800b0fe:	2300      	movs	r3, #0
 800b100:	495a      	ldr	r1, [pc, #360]	; (800b26c <__gethex+0x2d8>)
 800b102:	f8cd a004 	str.w	sl, [sp, #4]
 800b106:	469b      	mov	fp, r3
 800b108:	45a8      	cmp	r8, r5
 800b10a:	d342      	bcc.n	800b192 <__gethex+0x1fe>
 800b10c:	9801      	ldr	r0, [sp, #4]
 800b10e:	f840 bb04 	str.w	fp, [r0], #4
 800b112:	eba0 000a 	sub.w	r0, r0, sl
 800b116:	1080      	asrs	r0, r0, #2
 800b118:	6120      	str	r0, [r4, #16]
 800b11a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b11e:	4658      	mov	r0, fp
 800b120:	f000 fb2c 	bl	800b77c <__hi0bits>
 800b124:	683d      	ldr	r5, [r7, #0]
 800b126:	eba8 0000 	sub.w	r0, r8, r0
 800b12a:	42a8      	cmp	r0, r5
 800b12c:	dd59      	ble.n	800b1e2 <__gethex+0x24e>
 800b12e:	eba0 0805 	sub.w	r8, r0, r5
 800b132:	4641      	mov	r1, r8
 800b134:	4620      	mov	r0, r4
 800b136:	f000 febb 	bl	800beb0 <__any_on>
 800b13a:	4683      	mov	fp, r0
 800b13c:	b1b8      	cbz	r0, 800b16e <__gethex+0x1da>
 800b13e:	f108 33ff 	add.w	r3, r8, #4294967295
 800b142:	1159      	asrs	r1, r3, #5
 800b144:	f003 021f 	and.w	r2, r3, #31
 800b148:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b14c:	f04f 0b01 	mov.w	fp, #1
 800b150:	fa0b f202 	lsl.w	r2, fp, r2
 800b154:	420a      	tst	r2, r1
 800b156:	d00a      	beq.n	800b16e <__gethex+0x1da>
 800b158:	455b      	cmp	r3, fp
 800b15a:	dd06      	ble.n	800b16a <__gethex+0x1d6>
 800b15c:	f1a8 0102 	sub.w	r1, r8, #2
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fea5 	bl	800beb0 <__any_on>
 800b166:	2800      	cmp	r0, #0
 800b168:	d138      	bne.n	800b1dc <__gethex+0x248>
 800b16a:	f04f 0b02 	mov.w	fp, #2
 800b16e:	4641      	mov	r1, r8
 800b170:	4620      	mov	r0, r4
 800b172:	f7ff fea7 	bl	800aec4 <rshift>
 800b176:	4446      	add	r6, r8
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	42b3      	cmp	r3, r6
 800b17c:	da41      	bge.n	800b202 <__gethex+0x26e>
 800b17e:	4621      	mov	r1, r4
 800b180:	4648      	mov	r0, r9
 800b182:	f000 fa49 	bl	800b618 <_Bfree>
 800b186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b188:	2300      	movs	r3, #0
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b190:	e78a      	b.n	800b0a8 <__gethex+0x114>
 800b192:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b196:	2a2e      	cmp	r2, #46	; 0x2e
 800b198:	d014      	beq.n	800b1c4 <__gethex+0x230>
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d106      	bne.n	800b1ac <__gethex+0x218>
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	f843 bb04 	str.w	fp, [r3], #4
 800b1a4:	f04f 0b00 	mov.w	fp, #0
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	465b      	mov	r3, fp
 800b1ac:	7828      	ldrb	r0, [r5, #0]
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	f7ff feda 	bl	800af68 <__hexdig_fun>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	f000 000f 	and.w	r0, r0, #15
 800b1ba:	4098      	lsls	r0, r3
 800b1bc:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	e7a1      	b.n	800b108 <__gethex+0x174>
 800b1c4:	45a8      	cmp	r8, r5
 800b1c6:	d8e8      	bhi.n	800b19a <__gethex+0x206>
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	f7fe fedf 	bl	8009f90 <strncmp>
 800b1d2:	4926      	ldr	r1, [pc, #152]	; (800b26c <__gethex+0x2d8>)
 800b1d4:	9b03      	ldr	r3, [sp, #12]
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d1df      	bne.n	800b19a <__gethex+0x206>
 800b1da:	e795      	b.n	800b108 <__gethex+0x174>
 800b1dc:	f04f 0b03 	mov.w	fp, #3
 800b1e0:	e7c5      	b.n	800b16e <__gethex+0x1da>
 800b1e2:	da0b      	bge.n	800b1fc <__gethex+0x268>
 800b1e4:	eba5 0800 	sub.w	r8, r5, r0
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f000 fc2d 	bl	800ba4c <__lshift>
 800b1f2:	eba6 0608 	sub.w	r6, r6, r8
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	f100 0a14 	add.w	sl, r0, #20
 800b1fc:	f04f 0b00 	mov.w	fp, #0
 800b200:	e7ba      	b.n	800b178 <__gethex+0x1e4>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	42b3      	cmp	r3, r6
 800b206:	dd73      	ble.n	800b2f0 <__gethex+0x35c>
 800b208:	1b9e      	subs	r6, r3, r6
 800b20a:	42b5      	cmp	r5, r6
 800b20c:	dc34      	bgt.n	800b278 <__gethex+0x2e4>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d023      	beq.n	800b25c <__gethex+0x2c8>
 800b214:	2b03      	cmp	r3, #3
 800b216:	d025      	beq.n	800b264 <__gethex+0x2d0>
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d115      	bne.n	800b248 <__gethex+0x2b4>
 800b21c:	42b5      	cmp	r5, r6
 800b21e:	d113      	bne.n	800b248 <__gethex+0x2b4>
 800b220:	2d01      	cmp	r5, #1
 800b222:	d10b      	bne.n	800b23c <__gethex+0x2a8>
 800b224:	9a02      	ldr	r2, [sp, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	2301      	movs	r3, #1
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	f8ca 3000 	str.w	r3, [sl]
 800b232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b234:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b238:	601c      	str	r4, [r3, #0]
 800b23a:	e735      	b.n	800b0a8 <__gethex+0x114>
 800b23c:	1e69      	subs	r1, r5, #1
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 fe36 	bl	800beb0 <__any_on>
 800b244:	2800      	cmp	r0, #0
 800b246:	d1ed      	bne.n	800b224 <__gethex+0x290>
 800b248:	4621      	mov	r1, r4
 800b24a:	4648      	mov	r0, r9
 800b24c:	f000 f9e4 	bl	800b618 <_Bfree>
 800b250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b252:	2300      	movs	r3, #0
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b25a:	e725      	b.n	800b0a8 <__gethex+0x114>
 800b25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f2      	bne.n	800b248 <__gethex+0x2b4>
 800b262:	e7df      	b.n	800b224 <__gethex+0x290>
 800b264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1dc      	bne.n	800b224 <__gethex+0x290>
 800b26a:	e7ed      	b.n	800b248 <__gethex+0x2b4>
 800b26c:	0800eac8 	.word	0x0800eac8
 800b270:	0800ec19 	.word	0x0800ec19
 800b274:	0800ec2a 	.word	0x0800ec2a
 800b278:	f106 38ff 	add.w	r8, r6, #4294967295
 800b27c:	f1bb 0f00 	cmp.w	fp, #0
 800b280:	d133      	bne.n	800b2ea <__gethex+0x356>
 800b282:	f1b8 0f00 	cmp.w	r8, #0
 800b286:	d004      	beq.n	800b292 <__gethex+0x2fe>
 800b288:	4641      	mov	r1, r8
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fe10 	bl	800beb0 <__any_on>
 800b290:	4683      	mov	fp, r0
 800b292:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b296:	2301      	movs	r3, #1
 800b298:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b29c:	f008 081f 	and.w	r8, r8, #31
 800b2a0:	fa03 f308 	lsl.w	r3, r3, r8
 800b2a4:	4213      	tst	r3, r2
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	bf18      	it	ne
 800b2ac:	f04b 0b02 	orrne.w	fp, fp, #2
 800b2b0:	1bad      	subs	r5, r5, r6
 800b2b2:	f7ff fe07 	bl	800aec4 <rshift>
 800b2b6:	687e      	ldr	r6, [r7, #4]
 800b2b8:	f04f 0802 	mov.w	r8, #2
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	d04a      	beq.n	800b358 <__gethex+0x3c4>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d016      	beq.n	800b2f6 <__gethex+0x362>
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d018      	beq.n	800b2fe <__gethex+0x36a>
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d109      	bne.n	800b2e4 <__gethex+0x350>
 800b2d0:	f01b 0f02 	tst.w	fp, #2
 800b2d4:	d006      	beq.n	800b2e4 <__gethex+0x350>
 800b2d6:	f8da 3000 	ldr.w	r3, [sl]
 800b2da:	ea4b 0b03 	orr.w	fp, fp, r3
 800b2de:	f01b 0f01 	tst.w	fp, #1
 800b2e2:	d10f      	bne.n	800b304 <__gethex+0x370>
 800b2e4:	f048 0810 	orr.w	r8, r8, #16
 800b2e8:	e036      	b.n	800b358 <__gethex+0x3c4>
 800b2ea:	f04f 0b01 	mov.w	fp, #1
 800b2ee:	e7d0      	b.n	800b292 <__gethex+0x2fe>
 800b2f0:	f04f 0801 	mov.w	r8, #1
 800b2f4:	e7e2      	b.n	800b2bc <__gethex+0x328>
 800b2f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2f8:	f1c3 0301 	rsb	r3, r3, #1
 800b2fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0ef      	beq.n	800b2e4 <__gethex+0x350>
 800b304:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b308:	f104 0214 	add.w	r2, r4, #20
 800b30c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b316:	2300      	movs	r3, #0
 800b318:	4694      	mov	ip, r2
 800b31a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b31e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b322:	d01e      	beq.n	800b362 <__gethex+0x3ce>
 800b324:	3101      	adds	r1, #1
 800b326:	f8cc 1000 	str.w	r1, [ip]
 800b32a:	f1b8 0f02 	cmp.w	r8, #2
 800b32e:	f104 0214 	add.w	r2, r4, #20
 800b332:	d13d      	bne.n	800b3b0 <__gethex+0x41c>
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	3b01      	subs	r3, #1
 800b338:	42ab      	cmp	r3, r5
 800b33a:	d10b      	bne.n	800b354 <__gethex+0x3c0>
 800b33c:	1169      	asrs	r1, r5, #5
 800b33e:	2301      	movs	r3, #1
 800b340:	f005 051f 	and.w	r5, r5, #31
 800b344:	fa03 f505 	lsl.w	r5, r3, r5
 800b348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b34c:	421d      	tst	r5, r3
 800b34e:	bf18      	it	ne
 800b350:	f04f 0801 	movne.w	r8, #1
 800b354:	f048 0820 	orr.w	r8, r8, #32
 800b358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b35a:	601c      	str	r4, [r3, #0]
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	601e      	str	r6, [r3, #0]
 800b360:	e6a2      	b.n	800b0a8 <__gethex+0x114>
 800b362:	4290      	cmp	r0, r2
 800b364:	f842 3c04 	str.w	r3, [r2, #-4]
 800b368:	d8d6      	bhi.n	800b318 <__gethex+0x384>
 800b36a:	68a2      	ldr	r2, [r4, #8]
 800b36c:	4593      	cmp	fp, r2
 800b36e:	db17      	blt.n	800b3a0 <__gethex+0x40c>
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	4648      	mov	r0, r9
 800b374:	3101      	adds	r1, #1
 800b376:	f000 f90f 	bl	800b598 <_Balloc>
 800b37a:	4682      	mov	sl, r0
 800b37c:	b918      	cbnz	r0, 800b386 <__gethex+0x3f2>
 800b37e:	4b1b      	ldr	r3, [pc, #108]	; (800b3ec <__gethex+0x458>)
 800b380:	4602      	mov	r2, r0
 800b382:	2184      	movs	r1, #132	; 0x84
 800b384:	e6b3      	b.n	800b0ee <__gethex+0x15a>
 800b386:	6922      	ldr	r2, [r4, #16]
 800b388:	3202      	adds	r2, #2
 800b38a:	f104 010c 	add.w	r1, r4, #12
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	300c      	adds	r0, #12
 800b392:	f7fe fe96 	bl	800a0c2 <memcpy>
 800b396:	4621      	mov	r1, r4
 800b398:	4648      	mov	r0, r9
 800b39a:	f000 f93d 	bl	800b618 <_Bfree>
 800b39e:	4654      	mov	r4, sl
 800b3a0:	6922      	ldr	r2, [r4, #16]
 800b3a2:	1c51      	adds	r1, r2, #1
 800b3a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3a8:	6121      	str	r1, [r4, #16]
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	6151      	str	r1, [r2, #20]
 800b3ae:	e7bc      	b.n	800b32a <__gethex+0x396>
 800b3b0:	6921      	ldr	r1, [r4, #16]
 800b3b2:	4559      	cmp	r1, fp
 800b3b4:	dd0b      	ble.n	800b3ce <__gethex+0x43a>
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff fd83 	bl	800aec4 <rshift>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3601      	adds	r6, #1
 800b3c2:	42b3      	cmp	r3, r6
 800b3c4:	f6ff aedb 	blt.w	800b17e <__gethex+0x1ea>
 800b3c8:	f04f 0801 	mov.w	r8, #1
 800b3cc:	e7c2      	b.n	800b354 <__gethex+0x3c0>
 800b3ce:	f015 051f 	ands.w	r5, r5, #31
 800b3d2:	d0f9      	beq.n	800b3c8 <__gethex+0x434>
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	441a      	add	r2, r3
 800b3d8:	f1c5 0520 	rsb	r5, r5, #32
 800b3dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b3e0:	f000 f9cc 	bl	800b77c <__hi0bits>
 800b3e4:	42a8      	cmp	r0, r5
 800b3e6:	dbe6      	blt.n	800b3b6 <__gethex+0x422>
 800b3e8:	e7ee      	b.n	800b3c8 <__gethex+0x434>
 800b3ea:	bf00      	nop
 800b3ec:	0800ec19 	.word	0x0800ec19

0800b3f0 <L_shift>:
 800b3f0:	f1c2 0208 	rsb	r2, r2, #8
 800b3f4:	0092      	lsls	r2, r2, #2
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	f1c2 0620 	rsb	r6, r2, #32
 800b3fc:	6843      	ldr	r3, [r0, #4]
 800b3fe:	6804      	ldr	r4, [r0, #0]
 800b400:	fa03 f506 	lsl.w	r5, r3, r6
 800b404:	432c      	orrs	r4, r5
 800b406:	40d3      	lsrs	r3, r2
 800b408:	6004      	str	r4, [r0, #0]
 800b40a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b40e:	4288      	cmp	r0, r1
 800b410:	d3f4      	bcc.n	800b3fc <L_shift+0xc>
 800b412:	bd70      	pop	{r4, r5, r6, pc}

0800b414 <__match>:
 800b414:	b530      	push	{r4, r5, lr}
 800b416:	6803      	ldr	r3, [r0, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b41e:	b914      	cbnz	r4, 800b426 <__match+0x12>
 800b420:	6003      	str	r3, [r0, #0]
 800b422:	2001      	movs	r0, #1
 800b424:	bd30      	pop	{r4, r5, pc}
 800b426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b42e:	2d19      	cmp	r5, #25
 800b430:	bf98      	it	ls
 800b432:	3220      	addls	r2, #32
 800b434:	42a2      	cmp	r2, r4
 800b436:	d0f0      	beq.n	800b41a <__match+0x6>
 800b438:	2000      	movs	r0, #0
 800b43a:	e7f3      	b.n	800b424 <__match+0x10>

0800b43c <__hexnan>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	680b      	ldr	r3, [r1, #0]
 800b442:	6801      	ldr	r1, [r0, #0]
 800b444:	115e      	asrs	r6, r3, #5
 800b446:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b44a:	f013 031f 	ands.w	r3, r3, #31
 800b44e:	b087      	sub	sp, #28
 800b450:	bf18      	it	ne
 800b452:	3604      	addne	r6, #4
 800b454:	2500      	movs	r5, #0
 800b456:	1f37      	subs	r7, r6, #4
 800b458:	4682      	mov	sl, r0
 800b45a:	4690      	mov	r8, r2
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b462:	46b9      	mov	r9, r7
 800b464:	463c      	mov	r4, r7
 800b466:	9502      	str	r5, [sp, #8]
 800b468:	46ab      	mov	fp, r5
 800b46a:	784a      	ldrb	r2, [r1, #1]
 800b46c:	1c4b      	adds	r3, r1, #1
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	b342      	cbz	r2, 800b4c4 <__hexnan+0x88>
 800b472:	4610      	mov	r0, r2
 800b474:	9105      	str	r1, [sp, #20]
 800b476:	9204      	str	r2, [sp, #16]
 800b478:	f7ff fd76 	bl	800af68 <__hexdig_fun>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d14f      	bne.n	800b520 <__hexnan+0xe4>
 800b480:	9a04      	ldr	r2, [sp, #16]
 800b482:	9905      	ldr	r1, [sp, #20]
 800b484:	2a20      	cmp	r2, #32
 800b486:	d818      	bhi.n	800b4ba <__hexnan+0x7e>
 800b488:	9b02      	ldr	r3, [sp, #8]
 800b48a:	459b      	cmp	fp, r3
 800b48c:	dd13      	ble.n	800b4b6 <__hexnan+0x7a>
 800b48e:	454c      	cmp	r4, r9
 800b490:	d206      	bcs.n	800b4a0 <__hexnan+0x64>
 800b492:	2d07      	cmp	r5, #7
 800b494:	dc04      	bgt.n	800b4a0 <__hexnan+0x64>
 800b496:	462a      	mov	r2, r5
 800b498:	4649      	mov	r1, r9
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7ff ffa8 	bl	800b3f0 <L_shift>
 800b4a0:	4544      	cmp	r4, r8
 800b4a2:	d950      	bls.n	800b546 <__hexnan+0x10a>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f1a4 0904 	sub.w	r9, r4, #4
 800b4aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4ae:	f8cd b008 	str.w	fp, [sp, #8]
 800b4b2:	464c      	mov	r4, r9
 800b4b4:	461d      	mov	r5, r3
 800b4b6:	9903      	ldr	r1, [sp, #12]
 800b4b8:	e7d7      	b.n	800b46a <__hexnan+0x2e>
 800b4ba:	2a29      	cmp	r2, #41	; 0x29
 800b4bc:	d155      	bne.n	800b56a <__hexnan+0x12e>
 800b4be:	3102      	adds	r1, #2
 800b4c0:	f8ca 1000 	str.w	r1, [sl]
 800b4c4:	f1bb 0f00 	cmp.w	fp, #0
 800b4c8:	d04f      	beq.n	800b56a <__hexnan+0x12e>
 800b4ca:	454c      	cmp	r4, r9
 800b4cc:	d206      	bcs.n	800b4dc <__hexnan+0xa0>
 800b4ce:	2d07      	cmp	r5, #7
 800b4d0:	dc04      	bgt.n	800b4dc <__hexnan+0xa0>
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7ff ff8a 	bl	800b3f0 <L_shift>
 800b4dc:	4544      	cmp	r4, r8
 800b4de:	d934      	bls.n	800b54a <__hexnan+0x10e>
 800b4e0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4e4:	4623      	mov	r3, r4
 800b4e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ee:	429f      	cmp	r7, r3
 800b4f0:	d2f9      	bcs.n	800b4e6 <__hexnan+0xaa>
 800b4f2:	1b3b      	subs	r3, r7, r4
 800b4f4:	f023 0303 	bic.w	r3, r3, #3
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	3e03      	subs	r6, #3
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	42a6      	cmp	r6, r4
 800b500:	bf38      	it	cc
 800b502:	2304      	movcc	r3, #4
 800b504:	4443      	add	r3, r8
 800b506:	2200      	movs	r2, #0
 800b508:	f843 2b04 	str.w	r2, [r3], #4
 800b50c:	429f      	cmp	r7, r3
 800b50e:	d2fb      	bcs.n	800b508 <__hexnan+0xcc>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	b91b      	cbnz	r3, 800b51c <__hexnan+0xe0>
 800b514:	4547      	cmp	r7, r8
 800b516:	d126      	bne.n	800b566 <__hexnan+0x12a>
 800b518:	2301      	movs	r3, #1
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	2005      	movs	r0, #5
 800b51e:	e025      	b.n	800b56c <__hexnan+0x130>
 800b520:	3501      	adds	r5, #1
 800b522:	2d08      	cmp	r5, #8
 800b524:	f10b 0b01 	add.w	fp, fp, #1
 800b528:	dd06      	ble.n	800b538 <__hexnan+0xfc>
 800b52a:	4544      	cmp	r4, r8
 800b52c:	d9c3      	bls.n	800b4b6 <__hexnan+0x7a>
 800b52e:	2300      	movs	r3, #0
 800b530:	f844 3c04 	str.w	r3, [r4, #-4]
 800b534:	2501      	movs	r5, #1
 800b536:	3c04      	subs	r4, #4
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	f000 000f 	and.w	r0, r0, #15
 800b53e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b542:	6020      	str	r0, [r4, #0]
 800b544:	e7b7      	b.n	800b4b6 <__hexnan+0x7a>
 800b546:	2508      	movs	r5, #8
 800b548:	e7b5      	b.n	800b4b6 <__hexnan+0x7a>
 800b54a:	9b01      	ldr	r3, [sp, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0df      	beq.n	800b510 <__hexnan+0xd4>
 800b550:	f1c3 0320 	rsb	r3, r3, #32
 800b554:	f04f 32ff 	mov.w	r2, #4294967295
 800b558:	40da      	lsrs	r2, r3
 800b55a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b55e:	4013      	ands	r3, r2
 800b560:	f846 3c04 	str.w	r3, [r6, #-4]
 800b564:	e7d4      	b.n	800b510 <__hexnan+0xd4>
 800b566:	3f04      	subs	r7, #4
 800b568:	e7d2      	b.n	800b510 <__hexnan+0xd4>
 800b56a:	2004      	movs	r0, #4
 800b56c:	b007      	add	sp, #28
 800b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b572 <__ascii_mbtowc>:
 800b572:	b082      	sub	sp, #8
 800b574:	b901      	cbnz	r1, 800b578 <__ascii_mbtowc+0x6>
 800b576:	a901      	add	r1, sp, #4
 800b578:	b142      	cbz	r2, 800b58c <__ascii_mbtowc+0x1a>
 800b57a:	b14b      	cbz	r3, 800b590 <__ascii_mbtowc+0x1e>
 800b57c:	7813      	ldrb	r3, [r2, #0]
 800b57e:	600b      	str	r3, [r1, #0]
 800b580:	7812      	ldrb	r2, [r2, #0]
 800b582:	1e10      	subs	r0, r2, #0
 800b584:	bf18      	it	ne
 800b586:	2001      	movne	r0, #1
 800b588:	b002      	add	sp, #8
 800b58a:	4770      	bx	lr
 800b58c:	4610      	mov	r0, r2
 800b58e:	e7fb      	b.n	800b588 <__ascii_mbtowc+0x16>
 800b590:	f06f 0001 	mvn.w	r0, #1
 800b594:	e7f8      	b.n	800b588 <__ascii_mbtowc+0x16>
	...

0800b598 <_Balloc>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	69c6      	ldr	r6, [r0, #28]
 800b59c:	4604      	mov	r4, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	b976      	cbnz	r6, 800b5c0 <_Balloc+0x28>
 800b5a2:	2010      	movs	r0, #16
 800b5a4:	f7fc fd86 	bl	80080b4 <malloc>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	61e0      	str	r0, [r4, #28]
 800b5ac:	b920      	cbnz	r0, 800b5b8 <_Balloc+0x20>
 800b5ae:	4b18      	ldr	r3, [pc, #96]	; (800b610 <_Balloc+0x78>)
 800b5b0:	4818      	ldr	r0, [pc, #96]	; (800b614 <_Balloc+0x7c>)
 800b5b2:	216b      	movs	r1, #107	; 0x6b
 800b5b4:	f7fe fda2 	bl	800a0fc <__assert_func>
 800b5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5bc:	6006      	str	r6, [r0, #0]
 800b5be:	60c6      	str	r6, [r0, #12]
 800b5c0:	69e6      	ldr	r6, [r4, #28]
 800b5c2:	68f3      	ldr	r3, [r6, #12]
 800b5c4:	b183      	cbz	r3, 800b5e8 <_Balloc+0x50>
 800b5c6:	69e3      	ldr	r3, [r4, #28]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ce:	b9b8      	cbnz	r0, 800b600 <_Balloc+0x68>
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5d6:	1d72      	adds	r2, r6, #5
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 f91d 	bl	800c81a <_calloc_r>
 800b5e0:	b160      	cbz	r0, 800b5fc <_Balloc+0x64>
 800b5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5e6:	e00e      	b.n	800b606 <_Balloc+0x6e>
 800b5e8:	2221      	movs	r2, #33	; 0x21
 800b5ea:	2104      	movs	r1, #4
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f001 f914 	bl	800c81a <_calloc_r>
 800b5f2:	69e3      	ldr	r3, [r4, #28]
 800b5f4:	60f0      	str	r0, [r6, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e4      	bne.n	800b5c6 <_Balloc+0x2e>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	6802      	ldr	r2, [r0, #0]
 800b602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b606:	2300      	movs	r3, #0
 800b608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b60c:	e7f7      	b.n	800b5fe <_Balloc+0x66>
 800b60e:	bf00      	nop
 800b610:	0800ebaa 	.word	0x0800ebaa
 800b614:	0800ec8a 	.word	0x0800ec8a

0800b618 <_Bfree>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	69c6      	ldr	r6, [r0, #28]
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	b976      	cbnz	r6, 800b640 <_Bfree+0x28>
 800b622:	2010      	movs	r0, #16
 800b624:	f7fc fd46 	bl	80080b4 <malloc>
 800b628:	4602      	mov	r2, r0
 800b62a:	61e8      	str	r0, [r5, #28]
 800b62c:	b920      	cbnz	r0, 800b638 <_Bfree+0x20>
 800b62e:	4b09      	ldr	r3, [pc, #36]	; (800b654 <_Bfree+0x3c>)
 800b630:	4809      	ldr	r0, [pc, #36]	; (800b658 <_Bfree+0x40>)
 800b632:	218f      	movs	r1, #143	; 0x8f
 800b634:	f7fe fd62 	bl	800a0fc <__assert_func>
 800b638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b63c:	6006      	str	r6, [r0, #0]
 800b63e:	60c6      	str	r6, [r0, #12]
 800b640:	b13c      	cbz	r4, 800b652 <_Bfree+0x3a>
 800b642:	69eb      	ldr	r3, [r5, #28]
 800b644:	6862      	ldr	r2, [r4, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b64c:	6021      	str	r1, [r4, #0]
 800b64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	0800ebaa 	.word	0x0800ebaa
 800b658:	0800ec8a 	.word	0x0800ec8a

0800b65c <__multadd>:
 800b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b660:	690d      	ldr	r5, [r1, #16]
 800b662:	4607      	mov	r7, r0
 800b664:	460c      	mov	r4, r1
 800b666:	461e      	mov	r6, r3
 800b668:	f101 0c14 	add.w	ip, r1, #20
 800b66c:	2000      	movs	r0, #0
 800b66e:	f8dc 3000 	ldr.w	r3, [ip]
 800b672:	b299      	uxth	r1, r3
 800b674:	fb02 6101 	mla	r1, r2, r1, r6
 800b678:	0c1e      	lsrs	r6, r3, #16
 800b67a:	0c0b      	lsrs	r3, r1, #16
 800b67c:	fb02 3306 	mla	r3, r2, r6, r3
 800b680:	b289      	uxth	r1, r1
 800b682:	3001      	adds	r0, #1
 800b684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b688:	4285      	cmp	r5, r0
 800b68a:	f84c 1b04 	str.w	r1, [ip], #4
 800b68e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b692:	dcec      	bgt.n	800b66e <__multadd+0x12>
 800b694:	b30e      	cbz	r6, 800b6da <__multadd+0x7e>
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	42ab      	cmp	r3, r5
 800b69a:	dc19      	bgt.n	800b6d0 <__multadd+0x74>
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	4638      	mov	r0, r7
 800b6a0:	3101      	adds	r1, #1
 800b6a2:	f7ff ff79 	bl	800b598 <_Balloc>
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	b928      	cbnz	r0, 800b6b6 <__multadd+0x5a>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4b0c      	ldr	r3, [pc, #48]	; (800b6e0 <__multadd+0x84>)
 800b6ae:	480d      	ldr	r0, [pc, #52]	; (800b6e4 <__multadd+0x88>)
 800b6b0:	21ba      	movs	r1, #186	; 0xba
 800b6b2:	f7fe fd23 	bl	800a0fc <__assert_func>
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	3202      	adds	r2, #2
 800b6ba:	f104 010c 	add.w	r1, r4, #12
 800b6be:	0092      	lsls	r2, r2, #2
 800b6c0:	300c      	adds	r0, #12
 800b6c2:	f7fe fcfe 	bl	800a0c2 <memcpy>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7ff ffa5 	bl	800b618 <_Bfree>
 800b6ce:	4644      	mov	r4, r8
 800b6d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	615e      	str	r6, [r3, #20]
 800b6d8:	6125      	str	r5, [r4, #16]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	0800ec19 	.word	0x0800ec19
 800b6e4:	0800ec8a 	.word	0x0800ec8a

0800b6e8 <__s2b>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	4615      	mov	r5, r2
 800b6f0:	461f      	mov	r7, r3
 800b6f2:	2209      	movs	r2, #9
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	2201      	movs	r2, #1
 800b700:	429a      	cmp	r2, r3
 800b702:	db09      	blt.n	800b718 <__s2b+0x30>
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff ff47 	bl	800b598 <_Balloc>
 800b70a:	b940      	cbnz	r0, 800b71e <__s2b+0x36>
 800b70c:	4602      	mov	r2, r0
 800b70e:	4b19      	ldr	r3, [pc, #100]	; (800b774 <__s2b+0x8c>)
 800b710:	4819      	ldr	r0, [pc, #100]	; (800b778 <__s2b+0x90>)
 800b712:	21d3      	movs	r1, #211	; 0xd3
 800b714:	f7fe fcf2 	bl	800a0fc <__assert_func>
 800b718:	0052      	lsls	r2, r2, #1
 800b71a:	3101      	adds	r1, #1
 800b71c:	e7f0      	b.n	800b700 <__s2b+0x18>
 800b71e:	9b08      	ldr	r3, [sp, #32]
 800b720:	6143      	str	r3, [r0, #20]
 800b722:	2d09      	cmp	r5, #9
 800b724:	f04f 0301 	mov.w	r3, #1
 800b728:	6103      	str	r3, [r0, #16]
 800b72a:	dd16      	ble.n	800b75a <__s2b+0x72>
 800b72c:	f104 0909 	add.w	r9, r4, #9
 800b730:	46c8      	mov	r8, r9
 800b732:	442c      	add	r4, r5
 800b734:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b738:	4601      	mov	r1, r0
 800b73a:	3b30      	subs	r3, #48	; 0x30
 800b73c:	220a      	movs	r2, #10
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff ff8c 	bl	800b65c <__multadd>
 800b744:	45a0      	cmp	r8, r4
 800b746:	d1f5      	bne.n	800b734 <__s2b+0x4c>
 800b748:	f1a5 0408 	sub.w	r4, r5, #8
 800b74c:	444c      	add	r4, r9
 800b74e:	1b2d      	subs	r5, r5, r4
 800b750:	1963      	adds	r3, r4, r5
 800b752:	42bb      	cmp	r3, r7
 800b754:	db04      	blt.n	800b760 <__s2b+0x78>
 800b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75a:	340a      	adds	r4, #10
 800b75c:	2509      	movs	r5, #9
 800b75e:	e7f6      	b.n	800b74e <__s2b+0x66>
 800b760:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b764:	4601      	mov	r1, r0
 800b766:	3b30      	subs	r3, #48	; 0x30
 800b768:	220a      	movs	r2, #10
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7ff ff76 	bl	800b65c <__multadd>
 800b770:	e7ee      	b.n	800b750 <__s2b+0x68>
 800b772:	bf00      	nop
 800b774:	0800ec19 	.word	0x0800ec19
 800b778:	0800ec8a 	.word	0x0800ec8a

0800b77c <__hi0bits>:
 800b77c:	0c03      	lsrs	r3, r0, #16
 800b77e:	041b      	lsls	r3, r3, #16
 800b780:	b9d3      	cbnz	r3, 800b7b8 <__hi0bits+0x3c>
 800b782:	0400      	lsls	r0, r0, #16
 800b784:	2310      	movs	r3, #16
 800b786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b78a:	bf04      	itt	eq
 800b78c:	0200      	lsleq	r0, r0, #8
 800b78e:	3308      	addeq	r3, #8
 800b790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b794:	bf04      	itt	eq
 800b796:	0100      	lsleq	r0, r0, #4
 800b798:	3304      	addeq	r3, #4
 800b79a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b79e:	bf04      	itt	eq
 800b7a0:	0080      	lsleq	r0, r0, #2
 800b7a2:	3302      	addeq	r3, #2
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	db05      	blt.n	800b7b4 <__hi0bits+0x38>
 800b7a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7ac:	f103 0301 	add.w	r3, r3, #1
 800b7b0:	bf08      	it	eq
 800b7b2:	2320      	moveq	r3, #32
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	4770      	bx	lr
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e7e4      	b.n	800b786 <__hi0bits+0xa>

0800b7bc <__lo0bits>:
 800b7bc:	6803      	ldr	r3, [r0, #0]
 800b7be:	f013 0207 	ands.w	r2, r3, #7
 800b7c2:	d00c      	beq.n	800b7de <__lo0bits+0x22>
 800b7c4:	07d9      	lsls	r1, r3, #31
 800b7c6:	d422      	bmi.n	800b80e <__lo0bits+0x52>
 800b7c8:	079a      	lsls	r2, r3, #30
 800b7ca:	bf49      	itett	mi
 800b7cc:	085b      	lsrmi	r3, r3, #1
 800b7ce:	089b      	lsrpl	r3, r3, #2
 800b7d0:	6003      	strmi	r3, [r0, #0]
 800b7d2:	2201      	movmi	r2, #1
 800b7d4:	bf5c      	itt	pl
 800b7d6:	6003      	strpl	r3, [r0, #0]
 800b7d8:	2202      	movpl	r2, #2
 800b7da:	4610      	mov	r0, r2
 800b7dc:	4770      	bx	lr
 800b7de:	b299      	uxth	r1, r3
 800b7e0:	b909      	cbnz	r1, 800b7e6 <__lo0bits+0x2a>
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	2210      	movs	r2, #16
 800b7e6:	b2d9      	uxtb	r1, r3
 800b7e8:	b909      	cbnz	r1, 800b7ee <__lo0bits+0x32>
 800b7ea:	3208      	adds	r2, #8
 800b7ec:	0a1b      	lsrs	r3, r3, #8
 800b7ee:	0719      	lsls	r1, r3, #28
 800b7f0:	bf04      	itt	eq
 800b7f2:	091b      	lsreq	r3, r3, #4
 800b7f4:	3204      	addeq	r2, #4
 800b7f6:	0799      	lsls	r1, r3, #30
 800b7f8:	bf04      	itt	eq
 800b7fa:	089b      	lsreq	r3, r3, #2
 800b7fc:	3202      	addeq	r2, #2
 800b7fe:	07d9      	lsls	r1, r3, #31
 800b800:	d403      	bmi.n	800b80a <__lo0bits+0x4e>
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	f102 0201 	add.w	r2, r2, #1
 800b808:	d003      	beq.n	800b812 <__lo0bits+0x56>
 800b80a:	6003      	str	r3, [r0, #0]
 800b80c:	e7e5      	b.n	800b7da <__lo0bits+0x1e>
 800b80e:	2200      	movs	r2, #0
 800b810:	e7e3      	b.n	800b7da <__lo0bits+0x1e>
 800b812:	2220      	movs	r2, #32
 800b814:	e7e1      	b.n	800b7da <__lo0bits+0x1e>
	...

0800b818 <__i2b>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	460c      	mov	r4, r1
 800b81c:	2101      	movs	r1, #1
 800b81e:	f7ff febb 	bl	800b598 <_Balloc>
 800b822:	4602      	mov	r2, r0
 800b824:	b928      	cbnz	r0, 800b832 <__i2b+0x1a>
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <__i2b+0x24>)
 800b828:	4805      	ldr	r0, [pc, #20]	; (800b840 <__i2b+0x28>)
 800b82a:	f240 1145 	movw	r1, #325	; 0x145
 800b82e:	f7fe fc65 	bl	800a0fc <__assert_func>
 800b832:	2301      	movs	r3, #1
 800b834:	6144      	str	r4, [r0, #20]
 800b836:	6103      	str	r3, [r0, #16]
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	0800ec19 	.word	0x0800ec19
 800b840:	0800ec8a 	.word	0x0800ec8a

0800b844 <__multiply>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4691      	mov	r9, r2
 800b84a:	690a      	ldr	r2, [r1, #16]
 800b84c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b850:	429a      	cmp	r2, r3
 800b852:	bfb8      	it	lt
 800b854:	460b      	movlt	r3, r1
 800b856:	460c      	mov	r4, r1
 800b858:	bfbc      	itt	lt
 800b85a:	464c      	movlt	r4, r9
 800b85c:	4699      	movlt	r9, r3
 800b85e:	6927      	ldr	r7, [r4, #16]
 800b860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	6861      	ldr	r1, [r4, #4]
 800b868:	eb07 060a 	add.w	r6, r7, sl
 800b86c:	42b3      	cmp	r3, r6
 800b86e:	b085      	sub	sp, #20
 800b870:	bfb8      	it	lt
 800b872:	3101      	addlt	r1, #1
 800b874:	f7ff fe90 	bl	800b598 <_Balloc>
 800b878:	b930      	cbnz	r0, 800b888 <__multiply+0x44>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4b44      	ldr	r3, [pc, #272]	; (800b990 <__multiply+0x14c>)
 800b87e:	4845      	ldr	r0, [pc, #276]	; (800b994 <__multiply+0x150>)
 800b880:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b884:	f7fe fc3a 	bl	800a0fc <__assert_func>
 800b888:	f100 0514 	add.w	r5, r0, #20
 800b88c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b890:	462b      	mov	r3, r5
 800b892:	2200      	movs	r2, #0
 800b894:	4543      	cmp	r3, r8
 800b896:	d321      	bcc.n	800b8dc <__multiply+0x98>
 800b898:	f104 0314 	add.w	r3, r4, #20
 800b89c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8a0:	f109 0314 	add.w	r3, r9, #20
 800b8a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	1b3a      	subs	r2, r7, r4
 800b8ac:	3a15      	subs	r2, #21
 800b8ae:	f022 0203 	bic.w	r2, r2, #3
 800b8b2:	3204      	adds	r2, #4
 800b8b4:	f104 0115 	add.w	r1, r4, #21
 800b8b8:	428f      	cmp	r7, r1
 800b8ba:	bf38      	it	cc
 800b8bc:	2204      	movcc	r2, #4
 800b8be:	9201      	str	r2, [sp, #4]
 800b8c0:	9a02      	ldr	r2, [sp, #8]
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d80c      	bhi.n	800b8e2 <__multiply+0x9e>
 800b8c8:	2e00      	cmp	r6, #0
 800b8ca:	dd03      	ble.n	800b8d4 <__multiply+0x90>
 800b8cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d05b      	beq.n	800b98c <__multiply+0x148>
 800b8d4:	6106      	str	r6, [r0, #16]
 800b8d6:	b005      	add	sp, #20
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	f843 2b04 	str.w	r2, [r3], #4
 800b8e0:	e7d8      	b.n	800b894 <__multiply+0x50>
 800b8e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8e6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ea:	d024      	beq.n	800b936 <__multiply+0xf2>
 800b8ec:	f104 0e14 	add.w	lr, r4, #20
 800b8f0:	46a9      	mov	r9, r5
 800b8f2:	f04f 0c00 	mov.w	ip, #0
 800b8f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8fa:	f8d9 1000 	ldr.w	r1, [r9]
 800b8fe:	fa1f fb82 	uxth.w	fp, r2
 800b902:	b289      	uxth	r1, r1
 800b904:	fb0a 110b 	mla	r1, sl, fp, r1
 800b908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b90c:	f8d9 2000 	ldr.w	r2, [r9]
 800b910:	4461      	add	r1, ip
 800b912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b916:	fb0a c20b 	mla	r2, sl, fp, ip
 800b91a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b91e:	b289      	uxth	r1, r1
 800b920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b924:	4577      	cmp	r7, lr
 800b926:	f849 1b04 	str.w	r1, [r9], #4
 800b92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b92e:	d8e2      	bhi.n	800b8f6 <__multiply+0xb2>
 800b930:	9a01      	ldr	r2, [sp, #4]
 800b932:	f845 c002 	str.w	ip, [r5, r2]
 800b936:	9a03      	ldr	r2, [sp, #12]
 800b938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b93c:	3304      	adds	r3, #4
 800b93e:	f1b9 0f00 	cmp.w	r9, #0
 800b942:	d021      	beq.n	800b988 <__multiply+0x144>
 800b944:	6829      	ldr	r1, [r5, #0]
 800b946:	f104 0c14 	add.w	ip, r4, #20
 800b94a:	46ae      	mov	lr, r5
 800b94c:	f04f 0a00 	mov.w	sl, #0
 800b950:	f8bc b000 	ldrh.w	fp, [ip]
 800b954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b958:	fb09 220b 	mla	r2, r9, fp, r2
 800b95c:	4452      	add	r2, sl
 800b95e:	b289      	uxth	r1, r1
 800b960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b964:	f84e 1b04 	str.w	r1, [lr], #4
 800b968:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b970:	f8be 1000 	ldrh.w	r1, [lr]
 800b974:	fb09 110a 	mla	r1, r9, sl, r1
 800b978:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b97c:	4567      	cmp	r7, ip
 800b97e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b982:	d8e5      	bhi.n	800b950 <__multiply+0x10c>
 800b984:	9a01      	ldr	r2, [sp, #4]
 800b986:	50a9      	str	r1, [r5, r2]
 800b988:	3504      	adds	r5, #4
 800b98a:	e799      	b.n	800b8c0 <__multiply+0x7c>
 800b98c:	3e01      	subs	r6, #1
 800b98e:	e79b      	b.n	800b8c8 <__multiply+0x84>
 800b990:	0800ec19 	.word	0x0800ec19
 800b994:	0800ec8a 	.word	0x0800ec8a

0800b998 <__pow5mult>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	4615      	mov	r5, r2
 800b99e:	f012 0203 	ands.w	r2, r2, #3
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	d007      	beq.n	800b9b8 <__pow5mult+0x20>
 800b9a8:	4c25      	ldr	r4, [pc, #148]	; (800ba40 <__pow5mult+0xa8>)
 800b9aa:	3a01      	subs	r2, #1
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9b2:	f7ff fe53 	bl	800b65c <__multadd>
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	10ad      	asrs	r5, r5, #2
 800b9ba:	d03d      	beq.n	800ba38 <__pow5mult+0xa0>
 800b9bc:	69f4      	ldr	r4, [r6, #28]
 800b9be:	b97c      	cbnz	r4, 800b9e0 <__pow5mult+0x48>
 800b9c0:	2010      	movs	r0, #16
 800b9c2:	f7fc fb77 	bl	80080b4 <malloc>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	61f0      	str	r0, [r6, #28]
 800b9ca:	b928      	cbnz	r0, 800b9d8 <__pow5mult+0x40>
 800b9cc:	4b1d      	ldr	r3, [pc, #116]	; (800ba44 <__pow5mult+0xac>)
 800b9ce:	481e      	ldr	r0, [pc, #120]	; (800ba48 <__pow5mult+0xb0>)
 800b9d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b9d4:	f7fe fb92 	bl	800a0fc <__assert_func>
 800b9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9dc:	6004      	str	r4, [r0, #0]
 800b9de:	60c4      	str	r4, [r0, #12]
 800b9e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9e8:	b94c      	cbnz	r4, 800b9fe <__pow5mult+0x66>
 800b9ea:	f240 2171 	movw	r1, #625	; 0x271
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7ff ff12 	bl	800b818 <__i2b>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	f04f 0900 	mov.w	r9, #0
 800ba02:	07eb      	lsls	r3, r5, #31
 800ba04:	d50a      	bpl.n	800ba1c <__pow5mult+0x84>
 800ba06:	4639      	mov	r1, r7
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ff1a 	bl	800b844 <__multiply>
 800ba10:	4639      	mov	r1, r7
 800ba12:	4680      	mov	r8, r0
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff fdff 	bl	800b618 <_Bfree>
 800ba1a:	4647      	mov	r7, r8
 800ba1c:	106d      	asrs	r5, r5, #1
 800ba1e:	d00b      	beq.n	800ba38 <__pow5mult+0xa0>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	b938      	cbnz	r0, 800ba34 <__pow5mult+0x9c>
 800ba24:	4622      	mov	r2, r4
 800ba26:	4621      	mov	r1, r4
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ff0b 	bl	800b844 <__multiply>
 800ba2e:	6020      	str	r0, [r4, #0]
 800ba30:	f8c0 9000 	str.w	r9, [r0]
 800ba34:	4604      	mov	r4, r0
 800ba36:	e7e4      	b.n	800ba02 <__pow5mult+0x6a>
 800ba38:	4638      	mov	r0, r7
 800ba3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3e:	bf00      	nop
 800ba40:	0800edd8 	.word	0x0800edd8
 800ba44:	0800ebaa 	.word	0x0800ebaa
 800ba48:	0800ec8a 	.word	0x0800ec8a

0800ba4c <__lshift>:
 800ba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	6849      	ldr	r1, [r1, #4]
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	4691      	mov	r9, r2
 800ba60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba64:	f108 0601 	add.w	r6, r8, #1
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	db0b      	blt.n	800ba84 <__lshift+0x38>
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff fd93 	bl	800b598 <_Balloc>
 800ba72:	4605      	mov	r5, r0
 800ba74:	b948      	cbnz	r0, 800ba8a <__lshift+0x3e>
 800ba76:	4602      	mov	r2, r0
 800ba78:	4b28      	ldr	r3, [pc, #160]	; (800bb1c <__lshift+0xd0>)
 800ba7a:	4829      	ldr	r0, [pc, #164]	; (800bb20 <__lshift+0xd4>)
 800ba7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ba80:	f7fe fb3c 	bl	800a0fc <__assert_func>
 800ba84:	3101      	adds	r1, #1
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	e7ee      	b.n	800ba68 <__lshift+0x1c>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f100 0114 	add.w	r1, r0, #20
 800ba90:	f100 0210 	add.w	r2, r0, #16
 800ba94:	4618      	mov	r0, r3
 800ba96:	4553      	cmp	r3, sl
 800ba98:	db33      	blt.n	800bb02 <__lshift+0xb6>
 800ba9a:	6920      	ldr	r0, [r4, #16]
 800ba9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baa0:	f104 0314 	add.w	r3, r4, #20
 800baa4:	f019 091f 	ands.w	r9, r9, #31
 800baa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bab0:	d02b      	beq.n	800bb0a <__lshift+0xbe>
 800bab2:	f1c9 0e20 	rsb	lr, r9, #32
 800bab6:	468a      	mov	sl, r1
 800bab8:	2200      	movs	r2, #0
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	fa00 f009 	lsl.w	r0, r0, r9
 800bac0:	4310      	orrs	r0, r2
 800bac2:	f84a 0b04 	str.w	r0, [sl], #4
 800bac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baca:	459c      	cmp	ip, r3
 800bacc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bad0:	d8f3      	bhi.n	800baba <__lshift+0x6e>
 800bad2:	ebac 0304 	sub.w	r3, ip, r4
 800bad6:	3b15      	subs	r3, #21
 800bad8:	f023 0303 	bic.w	r3, r3, #3
 800badc:	3304      	adds	r3, #4
 800bade:	f104 0015 	add.w	r0, r4, #21
 800bae2:	4584      	cmp	ip, r0
 800bae4:	bf38      	it	cc
 800bae6:	2304      	movcc	r3, #4
 800bae8:	50ca      	str	r2, [r1, r3]
 800baea:	b10a      	cbz	r2, 800baf0 <__lshift+0xa4>
 800baec:	f108 0602 	add.w	r6, r8, #2
 800baf0:	3e01      	subs	r6, #1
 800baf2:	4638      	mov	r0, r7
 800baf4:	612e      	str	r6, [r5, #16]
 800baf6:	4621      	mov	r1, r4
 800baf8:	f7ff fd8e 	bl	800b618 <_Bfree>
 800bafc:	4628      	mov	r0, r5
 800bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb02:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb06:	3301      	adds	r3, #1
 800bb08:	e7c5      	b.n	800ba96 <__lshift+0x4a>
 800bb0a:	3904      	subs	r1, #4
 800bb0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb10:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb14:	459c      	cmp	ip, r3
 800bb16:	d8f9      	bhi.n	800bb0c <__lshift+0xc0>
 800bb18:	e7ea      	b.n	800baf0 <__lshift+0xa4>
 800bb1a:	bf00      	nop
 800bb1c:	0800ec19 	.word	0x0800ec19
 800bb20:	0800ec8a 	.word	0x0800ec8a

0800bb24 <__mcmp>:
 800bb24:	b530      	push	{r4, r5, lr}
 800bb26:	6902      	ldr	r2, [r0, #16]
 800bb28:	690c      	ldr	r4, [r1, #16]
 800bb2a:	1b12      	subs	r2, r2, r4
 800bb2c:	d10e      	bne.n	800bb4c <__mcmp+0x28>
 800bb2e:	f100 0314 	add.w	r3, r0, #20
 800bb32:	3114      	adds	r1, #20
 800bb34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb44:	42a5      	cmp	r5, r4
 800bb46:	d003      	beq.n	800bb50 <__mcmp+0x2c>
 800bb48:	d305      	bcc.n	800bb56 <__mcmp+0x32>
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	bd30      	pop	{r4, r5, pc}
 800bb50:	4283      	cmp	r3, r0
 800bb52:	d3f3      	bcc.n	800bb3c <__mcmp+0x18>
 800bb54:	e7fa      	b.n	800bb4c <__mcmp+0x28>
 800bb56:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5a:	e7f7      	b.n	800bb4c <__mcmp+0x28>

0800bb5c <__mdiff>:
 800bb5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	4606      	mov	r6, r0
 800bb64:	4611      	mov	r1, r2
 800bb66:	4620      	mov	r0, r4
 800bb68:	4690      	mov	r8, r2
 800bb6a:	f7ff ffdb 	bl	800bb24 <__mcmp>
 800bb6e:	1e05      	subs	r5, r0, #0
 800bb70:	d110      	bne.n	800bb94 <__mdiff+0x38>
 800bb72:	4629      	mov	r1, r5
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff fd0f 	bl	800b598 <_Balloc>
 800bb7a:	b930      	cbnz	r0, 800bb8a <__mdiff+0x2e>
 800bb7c:	4b3a      	ldr	r3, [pc, #232]	; (800bc68 <__mdiff+0x10c>)
 800bb7e:	4602      	mov	r2, r0
 800bb80:	f240 2137 	movw	r1, #567	; 0x237
 800bb84:	4839      	ldr	r0, [pc, #228]	; (800bc6c <__mdiff+0x110>)
 800bb86:	f7fe fab9 	bl	800a0fc <__assert_func>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	bfa4      	itt	ge
 800bb96:	4643      	movge	r3, r8
 800bb98:	46a0      	movge	r8, r4
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bba0:	bfa6      	itte	ge
 800bba2:	461c      	movge	r4, r3
 800bba4:	2500      	movge	r5, #0
 800bba6:	2501      	movlt	r5, #1
 800bba8:	f7ff fcf6 	bl	800b598 <_Balloc>
 800bbac:	b920      	cbnz	r0, 800bbb8 <__mdiff+0x5c>
 800bbae:	4b2e      	ldr	r3, [pc, #184]	; (800bc68 <__mdiff+0x10c>)
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	f240 2145 	movw	r1, #581	; 0x245
 800bbb6:	e7e5      	b.n	800bb84 <__mdiff+0x28>
 800bbb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbbc:	6926      	ldr	r6, [r4, #16]
 800bbbe:	60c5      	str	r5, [r0, #12]
 800bbc0:	f104 0914 	add.w	r9, r4, #20
 800bbc4:	f108 0514 	add.w	r5, r8, #20
 800bbc8:	f100 0e14 	add.w	lr, r0, #20
 800bbcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbd4:	f108 0210 	add.w	r2, r8, #16
 800bbd8:	46f2      	mov	sl, lr
 800bbda:	2100      	movs	r1, #0
 800bbdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbe4:	fa11 f88b 	uxtah	r8, r1, fp
 800bbe8:	b299      	uxth	r1, r3
 800bbea:	0c1b      	lsrs	r3, r3, #16
 800bbec:	eba8 0801 	sub.w	r8, r8, r1
 800bbf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbf4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbf8:	fa1f f888 	uxth.w	r8, r8
 800bbfc:	1419      	asrs	r1, r3, #16
 800bbfe:	454e      	cmp	r6, r9
 800bc00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc04:	f84a 3b04 	str.w	r3, [sl], #4
 800bc08:	d8e8      	bhi.n	800bbdc <__mdiff+0x80>
 800bc0a:	1b33      	subs	r3, r6, r4
 800bc0c:	3b15      	subs	r3, #21
 800bc0e:	f023 0303 	bic.w	r3, r3, #3
 800bc12:	3304      	adds	r3, #4
 800bc14:	3415      	adds	r4, #21
 800bc16:	42a6      	cmp	r6, r4
 800bc18:	bf38      	it	cc
 800bc1a:	2304      	movcc	r3, #4
 800bc1c:	441d      	add	r5, r3
 800bc1e:	4473      	add	r3, lr
 800bc20:	469e      	mov	lr, r3
 800bc22:	462e      	mov	r6, r5
 800bc24:	4566      	cmp	r6, ip
 800bc26:	d30e      	bcc.n	800bc46 <__mdiff+0xea>
 800bc28:	f10c 0203 	add.w	r2, ip, #3
 800bc2c:	1b52      	subs	r2, r2, r5
 800bc2e:	f022 0203 	bic.w	r2, r2, #3
 800bc32:	3d03      	subs	r5, #3
 800bc34:	45ac      	cmp	ip, r5
 800bc36:	bf38      	it	cc
 800bc38:	2200      	movcc	r2, #0
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc40:	b17a      	cbz	r2, 800bc62 <__mdiff+0x106>
 800bc42:	6107      	str	r7, [r0, #16]
 800bc44:	e7a4      	b.n	800bb90 <__mdiff+0x34>
 800bc46:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc4a:	fa11 f288 	uxtah	r2, r1, r8
 800bc4e:	1414      	asrs	r4, r2, #16
 800bc50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc54:	b292      	uxth	r2, r2
 800bc56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc5a:	f84e 2b04 	str.w	r2, [lr], #4
 800bc5e:	1421      	asrs	r1, r4, #16
 800bc60:	e7e0      	b.n	800bc24 <__mdiff+0xc8>
 800bc62:	3f01      	subs	r7, #1
 800bc64:	e7ea      	b.n	800bc3c <__mdiff+0xe0>
 800bc66:	bf00      	nop
 800bc68:	0800ec19 	.word	0x0800ec19
 800bc6c:	0800ec8a 	.word	0x0800ec8a

0800bc70 <__ulp>:
 800bc70:	b082      	sub	sp, #8
 800bc72:	ed8d 0b00 	vstr	d0, [sp]
 800bc76:	9a01      	ldr	r2, [sp, #4]
 800bc78:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <__ulp+0x48>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dc08      	bgt.n	800bc96 <__ulp+0x26>
 800bc84:	425b      	negs	r3, r3
 800bc86:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc8e:	da04      	bge.n	800bc9a <__ulp+0x2a>
 800bc90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc94:	4113      	asrs	r3, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	e008      	b.n	800bcac <__ulp+0x3c>
 800bc9a:	f1a2 0314 	sub.w	r3, r2, #20
 800bc9e:	2b1e      	cmp	r3, #30
 800bca0:	bfda      	itte	le
 800bca2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bca6:	40da      	lsrle	r2, r3
 800bca8:	2201      	movgt	r2, #1
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	ec41 0b10 	vmov	d0, r0, r1
 800bcb4:	b002      	add	sp, #8
 800bcb6:	4770      	bx	lr
 800bcb8:	7ff00000 	.word	0x7ff00000

0800bcbc <__b2d>:
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	6906      	ldr	r6, [r0, #16]
 800bcc2:	f100 0814 	add.w	r8, r0, #20
 800bcc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcca:	1f37      	subs	r7, r6, #4
 800bccc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	f7ff fd53 	bl	800b77c <__hi0bits>
 800bcd6:	f1c0 0320 	rsb	r3, r0, #32
 800bcda:	280a      	cmp	r0, #10
 800bcdc:	600b      	str	r3, [r1, #0]
 800bcde:	491b      	ldr	r1, [pc, #108]	; (800bd4c <__b2d+0x90>)
 800bce0:	dc15      	bgt.n	800bd0e <__b2d+0x52>
 800bce2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bce6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bcea:	45b8      	cmp	r8, r7
 800bcec:	ea43 0501 	orr.w	r5, r3, r1
 800bcf0:	bf34      	ite	cc
 800bcf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcf6:	2300      	movcs	r3, #0
 800bcf8:	3015      	adds	r0, #21
 800bcfa:	fa02 f000 	lsl.w	r0, r2, r0
 800bcfe:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd02:	4303      	orrs	r3, r0
 800bd04:	461c      	mov	r4, r3
 800bd06:	ec45 4b10 	vmov	d0, r4, r5
 800bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0e:	45b8      	cmp	r8, r7
 800bd10:	bf3a      	itte	cc
 800bd12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd16:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd1a:	2300      	movcs	r3, #0
 800bd1c:	380b      	subs	r0, #11
 800bd1e:	d012      	beq.n	800bd46 <__b2d+0x8a>
 800bd20:	f1c0 0120 	rsb	r1, r0, #32
 800bd24:	fa23 f401 	lsr.w	r4, r3, r1
 800bd28:	4082      	lsls	r2, r0
 800bd2a:	4322      	orrs	r2, r4
 800bd2c:	4547      	cmp	r7, r8
 800bd2e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bd32:	bf8c      	ite	hi
 800bd34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd38:	2200      	movls	r2, #0
 800bd3a:	4083      	lsls	r3, r0
 800bd3c:	40ca      	lsrs	r2, r1
 800bd3e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd42:	4313      	orrs	r3, r2
 800bd44:	e7de      	b.n	800bd04 <__b2d+0x48>
 800bd46:	ea42 0501 	orr.w	r5, r2, r1
 800bd4a:	e7db      	b.n	800bd04 <__b2d+0x48>
 800bd4c:	3ff00000 	.word	0x3ff00000

0800bd50 <__d2b>:
 800bd50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd54:	460f      	mov	r7, r1
 800bd56:	2101      	movs	r1, #1
 800bd58:	ec59 8b10 	vmov	r8, r9, d0
 800bd5c:	4616      	mov	r6, r2
 800bd5e:	f7ff fc1b 	bl	800b598 <_Balloc>
 800bd62:	4604      	mov	r4, r0
 800bd64:	b930      	cbnz	r0, 800bd74 <__d2b+0x24>
 800bd66:	4602      	mov	r2, r0
 800bd68:	4b24      	ldr	r3, [pc, #144]	; (800bdfc <__d2b+0xac>)
 800bd6a:	4825      	ldr	r0, [pc, #148]	; (800be00 <__d2b+0xb0>)
 800bd6c:	f240 310f 	movw	r1, #783	; 0x30f
 800bd70:	f7fe f9c4 	bl	800a0fc <__assert_func>
 800bd74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd7c:	bb2d      	cbnz	r5, 800bdca <__d2b+0x7a>
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	f1b8 0300 	subs.w	r3, r8, #0
 800bd84:	d026      	beq.n	800bdd4 <__d2b+0x84>
 800bd86:	4668      	mov	r0, sp
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	f7ff fd17 	bl	800b7bc <__lo0bits>
 800bd8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd92:	b1e8      	cbz	r0, 800bdd0 <__d2b+0x80>
 800bd94:	f1c0 0320 	rsb	r3, r0, #32
 800bd98:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	40c2      	lsrs	r2, r0
 800bda0:	6163      	str	r3, [r4, #20]
 800bda2:	9201      	str	r2, [sp, #4]
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	61a3      	str	r3, [r4, #24]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf14      	ite	ne
 800bdac:	2202      	movne	r2, #2
 800bdae:	2201      	moveq	r2, #1
 800bdb0:	6122      	str	r2, [r4, #16]
 800bdb2:	b1bd      	cbz	r5, 800bde4 <__d2b+0x94>
 800bdb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdb8:	4405      	add	r5, r0
 800bdba:	603d      	str	r5, [r7, #0]
 800bdbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bdc0:	6030      	str	r0, [r6, #0]
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdce:	e7d6      	b.n	800bd7e <__d2b+0x2e>
 800bdd0:	6161      	str	r1, [r4, #20]
 800bdd2:	e7e7      	b.n	800bda4 <__d2b+0x54>
 800bdd4:	a801      	add	r0, sp, #4
 800bdd6:	f7ff fcf1 	bl	800b7bc <__lo0bits>
 800bdda:	9b01      	ldr	r3, [sp, #4]
 800bddc:	6163      	str	r3, [r4, #20]
 800bdde:	3020      	adds	r0, #32
 800bde0:	2201      	movs	r2, #1
 800bde2:	e7e5      	b.n	800bdb0 <__d2b+0x60>
 800bde4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bde8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdec:	6038      	str	r0, [r7, #0]
 800bdee:	6918      	ldr	r0, [r3, #16]
 800bdf0:	f7ff fcc4 	bl	800b77c <__hi0bits>
 800bdf4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdf8:	e7e2      	b.n	800bdc0 <__d2b+0x70>
 800bdfa:	bf00      	nop
 800bdfc:	0800ec19 	.word	0x0800ec19
 800be00:	0800ec8a 	.word	0x0800ec8a

0800be04 <__ratio>:
 800be04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4688      	mov	r8, r1
 800be0a:	4669      	mov	r1, sp
 800be0c:	4681      	mov	r9, r0
 800be0e:	f7ff ff55 	bl	800bcbc <__b2d>
 800be12:	a901      	add	r1, sp, #4
 800be14:	4640      	mov	r0, r8
 800be16:	ec55 4b10 	vmov	r4, r5, d0
 800be1a:	f7ff ff4f 	bl	800bcbc <__b2d>
 800be1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be26:	eba3 0c02 	sub.w	ip, r3, r2
 800be2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be2e:	1a9b      	subs	r3, r3, r2
 800be30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be34:	ec51 0b10 	vmov	r0, r1, d0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfd6      	itet	le
 800be3c:	460a      	movle	r2, r1
 800be3e:	462a      	movgt	r2, r5
 800be40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be44:	468b      	mov	fp, r1
 800be46:	462f      	mov	r7, r5
 800be48:	bfd4      	ite	le
 800be4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be52:	4620      	mov	r0, r4
 800be54:	ee10 2a10 	vmov	r2, s0
 800be58:	465b      	mov	r3, fp
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fcfe 	bl	800085c <__aeabi_ddiv>
 800be60:	ec41 0b10 	vmov	d0, r0, r1
 800be64:	b003      	add	sp, #12
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be6a <__copybits>:
 800be6a:	3901      	subs	r1, #1
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	1149      	asrs	r1, r1, #5
 800be70:	6914      	ldr	r4, [r2, #16]
 800be72:	3101      	adds	r1, #1
 800be74:	f102 0314 	add.w	r3, r2, #20
 800be78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be80:	1f05      	subs	r5, r0, #4
 800be82:	42a3      	cmp	r3, r4
 800be84:	d30c      	bcc.n	800bea0 <__copybits+0x36>
 800be86:	1aa3      	subs	r3, r4, r2
 800be88:	3b11      	subs	r3, #17
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	3211      	adds	r2, #17
 800be90:	42a2      	cmp	r2, r4
 800be92:	bf88      	it	hi
 800be94:	2300      	movhi	r3, #0
 800be96:	4418      	add	r0, r3
 800be98:	2300      	movs	r3, #0
 800be9a:	4288      	cmp	r0, r1
 800be9c:	d305      	bcc.n	800beaa <__copybits+0x40>
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bea4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bea8:	e7eb      	b.n	800be82 <__copybits+0x18>
 800beaa:	f840 3b04 	str.w	r3, [r0], #4
 800beae:	e7f4      	b.n	800be9a <__copybits+0x30>

0800beb0 <__any_on>:
 800beb0:	f100 0214 	add.w	r2, r0, #20
 800beb4:	6900      	ldr	r0, [r0, #16]
 800beb6:	114b      	asrs	r3, r1, #5
 800beb8:	4298      	cmp	r0, r3
 800beba:	b510      	push	{r4, lr}
 800bebc:	db11      	blt.n	800bee2 <__any_on+0x32>
 800bebe:	dd0a      	ble.n	800bed6 <__any_on+0x26>
 800bec0:	f011 011f 	ands.w	r1, r1, #31
 800bec4:	d007      	beq.n	800bed6 <__any_on+0x26>
 800bec6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beca:	fa24 f001 	lsr.w	r0, r4, r1
 800bece:	fa00 f101 	lsl.w	r1, r0, r1
 800bed2:	428c      	cmp	r4, r1
 800bed4:	d10b      	bne.n	800beee <__any_on+0x3e>
 800bed6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800beda:	4293      	cmp	r3, r2
 800bedc:	d803      	bhi.n	800bee6 <__any_on+0x36>
 800bede:	2000      	movs	r0, #0
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	4603      	mov	r3, r0
 800bee4:	e7f7      	b.n	800bed6 <__any_on+0x26>
 800bee6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beea:	2900      	cmp	r1, #0
 800beec:	d0f5      	beq.n	800beda <__any_on+0x2a>
 800beee:	2001      	movs	r0, #1
 800bef0:	e7f6      	b.n	800bee0 <__any_on+0x30>
	...

0800bef4 <_strtol_l.constprop.0>:
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befa:	d001      	beq.n	800bf00 <_strtol_l.constprop.0+0xc>
 800befc:	2b24      	cmp	r3, #36	; 0x24
 800befe:	d906      	bls.n	800bf0e <_strtol_l.constprop.0+0x1a>
 800bf00:	f7fe f8b2 	bl	800a068 <__errno>
 800bf04:	2316      	movs	r3, #22
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bff4 <_strtol_l.constprop.0+0x100>
 800bf12:	460d      	mov	r5, r1
 800bf14:	462e      	mov	r6, r5
 800bf16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf1e:	f017 0708 	ands.w	r7, r7, #8
 800bf22:	d1f7      	bne.n	800bf14 <_strtol_l.constprop.0+0x20>
 800bf24:	2c2d      	cmp	r4, #45	; 0x2d
 800bf26:	d132      	bne.n	800bf8e <_strtol_l.constprop.0+0x9a>
 800bf28:	782c      	ldrb	r4, [r5, #0]
 800bf2a:	2701      	movs	r7, #1
 800bf2c:	1cb5      	adds	r5, r6, #2
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d05b      	beq.n	800bfea <_strtol_l.constprop.0+0xf6>
 800bf32:	2b10      	cmp	r3, #16
 800bf34:	d109      	bne.n	800bf4a <_strtol_l.constprop.0+0x56>
 800bf36:	2c30      	cmp	r4, #48	; 0x30
 800bf38:	d107      	bne.n	800bf4a <_strtol_l.constprop.0+0x56>
 800bf3a:	782c      	ldrb	r4, [r5, #0]
 800bf3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf40:	2c58      	cmp	r4, #88	; 0x58
 800bf42:	d14d      	bne.n	800bfe0 <_strtol_l.constprop.0+0xec>
 800bf44:	786c      	ldrb	r4, [r5, #1]
 800bf46:	2310      	movs	r3, #16
 800bf48:	3502      	adds	r5, #2
 800bf4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf52:	f04f 0e00 	mov.w	lr, #0
 800bf56:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf5a:	4676      	mov	r6, lr
 800bf5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf64:	f1bc 0f09 	cmp.w	ip, #9
 800bf68:	d816      	bhi.n	800bf98 <_strtol_l.constprop.0+0xa4>
 800bf6a:	4664      	mov	r4, ip
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	dd24      	ble.n	800bfba <_strtol_l.constprop.0+0xc6>
 800bf70:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf74:	d008      	beq.n	800bf88 <_strtol_l.constprop.0+0x94>
 800bf76:	45b1      	cmp	r9, r6
 800bf78:	d31c      	bcc.n	800bfb4 <_strtol_l.constprop.0+0xc0>
 800bf7a:	d101      	bne.n	800bf80 <_strtol_l.constprop.0+0x8c>
 800bf7c:	45a2      	cmp	sl, r4
 800bf7e:	db19      	blt.n	800bfb4 <_strtol_l.constprop.0+0xc0>
 800bf80:	fb06 4603 	mla	r6, r6, r3, r4
 800bf84:	f04f 0e01 	mov.w	lr, #1
 800bf88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf8c:	e7e8      	b.n	800bf60 <_strtol_l.constprop.0+0x6c>
 800bf8e:	2c2b      	cmp	r4, #43	; 0x2b
 800bf90:	bf04      	itt	eq
 800bf92:	782c      	ldrbeq	r4, [r5, #0]
 800bf94:	1cb5      	addeq	r5, r6, #2
 800bf96:	e7ca      	b.n	800bf2e <_strtol_l.constprop.0+0x3a>
 800bf98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf9c:	f1bc 0f19 	cmp.w	ip, #25
 800bfa0:	d801      	bhi.n	800bfa6 <_strtol_l.constprop.0+0xb2>
 800bfa2:	3c37      	subs	r4, #55	; 0x37
 800bfa4:	e7e2      	b.n	800bf6c <_strtol_l.constprop.0+0x78>
 800bfa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfaa:	f1bc 0f19 	cmp.w	ip, #25
 800bfae:	d804      	bhi.n	800bfba <_strtol_l.constprop.0+0xc6>
 800bfb0:	3c57      	subs	r4, #87	; 0x57
 800bfb2:	e7db      	b.n	800bf6c <_strtol_l.constprop.0+0x78>
 800bfb4:	f04f 3eff 	mov.w	lr, #4294967295
 800bfb8:	e7e6      	b.n	800bf88 <_strtol_l.constprop.0+0x94>
 800bfba:	f1be 3fff 	cmp.w	lr, #4294967295
 800bfbe:	d105      	bne.n	800bfcc <_strtol_l.constprop.0+0xd8>
 800bfc0:	2322      	movs	r3, #34	; 0x22
 800bfc2:	6003      	str	r3, [r0, #0]
 800bfc4:	4646      	mov	r6, r8
 800bfc6:	b942      	cbnz	r2, 800bfda <_strtol_l.constprop.0+0xe6>
 800bfc8:	4630      	mov	r0, r6
 800bfca:	e79e      	b.n	800bf0a <_strtol_l.constprop.0+0x16>
 800bfcc:	b107      	cbz	r7, 800bfd0 <_strtol_l.constprop.0+0xdc>
 800bfce:	4276      	negs	r6, r6
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	d0f9      	beq.n	800bfc8 <_strtol_l.constprop.0+0xd4>
 800bfd4:	f1be 0f00 	cmp.w	lr, #0
 800bfd8:	d000      	beq.n	800bfdc <_strtol_l.constprop.0+0xe8>
 800bfda:	1e69      	subs	r1, r5, #1
 800bfdc:	6011      	str	r1, [r2, #0]
 800bfde:	e7f3      	b.n	800bfc8 <_strtol_l.constprop.0+0xd4>
 800bfe0:	2430      	movs	r4, #48	; 0x30
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1b1      	bne.n	800bf4a <_strtol_l.constprop.0+0x56>
 800bfe6:	2308      	movs	r3, #8
 800bfe8:	e7af      	b.n	800bf4a <_strtol_l.constprop.0+0x56>
 800bfea:	2c30      	cmp	r4, #48	; 0x30
 800bfec:	d0a5      	beq.n	800bf3a <_strtol_l.constprop.0+0x46>
 800bfee:	230a      	movs	r3, #10
 800bff0:	e7ab      	b.n	800bf4a <_strtol_l.constprop.0+0x56>
 800bff2:	bf00      	nop
 800bff4:	0800ede5 	.word	0x0800ede5

0800bff8 <_strtol_r>:
 800bff8:	f7ff bf7c 	b.w	800bef4 <_strtol_l.constprop.0>

0800bffc <__ascii_wctomb>:
 800bffc:	b149      	cbz	r1, 800c012 <__ascii_wctomb+0x16>
 800bffe:	2aff      	cmp	r2, #255	; 0xff
 800c000:	bf85      	ittet	hi
 800c002:	238a      	movhi	r3, #138	; 0x8a
 800c004:	6003      	strhi	r3, [r0, #0]
 800c006:	700a      	strbls	r2, [r1, #0]
 800c008:	f04f 30ff 	movhi.w	r0, #4294967295
 800c00c:	bf98      	it	ls
 800c00e:	2001      	movls	r0, #1
 800c010:	4770      	bx	lr
 800c012:	4608      	mov	r0, r1
 800c014:	4770      	bx	lr

0800c016 <__ssputs_r>:
 800c016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c01a:	688e      	ldr	r6, [r1, #8]
 800c01c:	461f      	mov	r7, r3
 800c01e:	42be      	cmp	r6, r7
 800c020:	680b      	ldr	r3, [r1, #0]
 800c022:	4682      	mov	sl, r0
 800c024:	460c      	mov	r4, r1
 800c026:	4690      	mov	r8, r2
 800c028:	d82c      	bhi.n	800c084 <__ssputs_r+0x6e>
 800c02a:	898a      	ldrh	r2, [r1, #12]
 800c02c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c030:	d026      	beq.n	800c080 <__ssputs_r+0x6a>
 800c032:	6965      	ldr	r5, [r4, #20]
 800c034:	6909      	ldr	r1, [r1, #16]
 800c036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03a:	eba3 0901 	sub.w	r9, r3, r1
 800c03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c042:	1c7b      	adds	r3, r7, #1
 800c044:	444b      	add	r3, r9
 800c046:	106d      	asrs	r5, r5, #1
 800c048:	429d      	cmp	r5, r3
 800c04a:	bf38      	it	cc
 800c04c:	461d      	movcc	r5, r3
 800c04e:	0553      	lsls	r3, r2, #21
 800c050:	d527      	bpl.n	800c0a2 <__ssputs_r+0x8c>
 800c052:	4629      	mov	r1, r5
 800c054:	f7fc f856 	bl	8008104 <_malloc_r>
 800c058:	4606      	mov	r6, r0
 800c05a:	b360      	cbz	r0, 800c0b6 <__ssputs_r+0xa0>
 800c05c:	6921      	ldr	r1, [r4, #16]
 800c05e:	464a      	mov	r2, r9
 800c060:	f7fe f82f 	bl	800a0c2 <memcpy>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	6126      	str	r6, [r4, #16]
 800c072:	6165      	str	r5, [r4, #20]
 800c074:	444e      	add	r6, r9
 800c076:	eba5 0509 	sub.w	r5, r5, r9
 800c07a:	6026      	str	r6, [r4, #0]
 800c07c:	60a5      	str	r5, [r4, #8]
 800c07e:	463e      	mov	r6, r7
 800c080:	42be      	cmp	r6, r7
 800c082:	d900      	bls.n	800c086 <__ssputs_r+0x70>
 800c084:	463e      	mov	r6, r7
 800c086:	6820      	ldr	r0, [r4, #0]
 800c088:	4632      	mov	r2, r6
 800c08a:	4641      	mov	r1, r8
 800c08c:	f000 fb82 	bl	800c794 <memmove>
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	1b9b      	subs	r3, r3, r6
 800c094:	60a3      	str	r3, [r4, #8]
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	4433      	add	r3, r6
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	2000      	movs	r0, #0
 800c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a2:	462a      	mov	r2, r5
 800c0a4:	f000 fbcf 	bl	800c846 <_realloc_r>
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d1e0      	bne.n	800c070 <__ssputs_r+0x5a>
 800c0ae:	6921      	ldr	r1, [r4, #16]
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	f7fe febb 	bl	800ae2c <_free_r>
 800c0b6:	230c      	movs	r3, #12
 800c0b8:	f8ca 3000 	str.w	r3, [sl]
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	e7e9      	b.n	800c09e <__ssputs_r+0x88>
	...

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d50e      	bpl.n	800c0fe <_svfiprintf_r+0x32>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b963      	cbnz	r3, 800c0fe <_svfiprintf_r+0x32>
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	f7fc f80d 	bl	8008104 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b920      	cbnz	r0, 800c0fa <_svfiprintf_r+0x2e>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e0d0      	b.n	800c29c <_svfiprintf_r+0x1d0>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	; 0x30
 800c10e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2b4 <_svfiprintf_r+0x1e8>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x5c>
 800c124:	2a25      	cmp	r2, #37	; 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x50>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7a>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6e 	bl	800c016 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80a9 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80a1 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c166:	931a      	str	r3, [sp, #104]	; 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	4850      	ldr	r0, [pc, #320]	; (800c2b4 <_svfiprintf_r+0x1e8>)
 800c172:	f7f4 f835 	bl	80001e0 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xe6>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	; 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	; 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xf6>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	; 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94d      	bls.n	800c248 <_svfiprintf_r+0x17c>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x110>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x110>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0x9c>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d10c      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e6:	d134      	bne.n	800c252 <_svfiprintf_r+0x186>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfb8      	it	lt
 800c1f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2c4 <_svfiprintf_r+0x1f8>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f3 ffeb 	bl	80001e0 <memchr>
 800c20a:	b138      	cbz	r0, 800c21c <_svfiprintf_r+0x150>
 800c20c:	9b04      	ldr	r3, [sp, #16]
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	2240      	movs	r2, #64	; 0x40
 800c214:	4082      	lsls	r2, r0
 800c216:	4313      	orrs	r3, r2
 800c218:	3401      	adds	r4, #1
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	4825      	ldr	r0, [pc, #148]	; (800c2b8 <_svfiprintf_r+0x1ec>)
 800c222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c226:	2206      	movs	r2, #6
 800c228:	f7f3 ffda 	bl	80001e0 <memchr>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d038      	beq.n	800c2a2 <_svfiprintf_r+0x1d6>
 800c230:	4b22      	ldr	r3, [pc, #136]	; (800c2bc <_svfiprintf_r+0x1f0>)
 800c232:	bb1b      	cbnz	r3, 800c27c <_svfiprintf_r+0x1b0>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	3307      	adds	r3, #7
 800c238:	f023 0307 	bic.w	r3, r3, #7
 800c23c:	3308      	adds	r3, #8
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c242:	4433      	add	r3, r6
 800c244:	9309      	str	r3, [sp, #36]	; 0x24
 800c246:	e768      	b.n	800c11a <_svfiprintf_r+0x4e>
 800c248:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24c:	460c      	mov	r4, r1
 800c24e:	2001      	movs	r0, #1
 800c250:	e7a6      	b.n	800c1a0 <_svfiprintf_r+0xd4>
 800c252:	2300      	movs	r3, #0
 800c254:	3401      	adds	r4, #1
 800c256:	9305      	str	r3, [sp, #20]
 800c258:	4619      	mov	r1, r3
 800c25a:	f04f 0c0a 	mov.w	ip, #10
 800c25e:	4620      	mov	r0, r4
 800c260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c264:	3a30      	subs	r2, #48	; 0x30
 800c266:	2a09      	cmp	r2, #9
 800c268:	d903      	bls.n	800c272 <_svfiprintf_r+0x1a6>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0c6      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c26e:	9105      	str	r1, [sp, #20]
 800c270:	e7c4      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c272:	fb0c 2101 	mla	r1, ip, r1, r2
 800c276:	4604      	mov	r4, r0
 800c278:	2301      	movs	r3, #1
 800c27a:	e7f0      	b.n	800c25e <_svfiprintf_r+0x192>
 800c27c:	ab03      	add	r3, sp, #12
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	462a      	mov	r2, r5
 800c282:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c284:	a904      	add	r1, sp, #16
 800c286:	4638      	mov	r0, r7
 800c288:	f7fc fe7c 	bl	8008f84 <_printf_float>
 800c28c:	1c42      	adds	r2, r0, #1
 800c28e:	4606      	mov	r6, r0
 800c290:	d1d6      	bne.n	800c240 <_svfiprintf_r+0x174>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	065b      	lsls	r3, r3, #25
 800c296:	f53f af2d 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29c:	b01d      	add	sp, #116	; 0x74
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	ab03      	add	r3, sp, #12
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c2aa:	a904      	add	r1, sp, #16
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7fd f90d 	bl	80094cc <_printf_i>
 800c2b2:	e7eb      	b.n	800c28c <_svfiprintf_r+0x1c0>
 800c2b4:	0800eee5 	.word	0x0800eee5
 800c2b8:	0800eeef 	.word	0x0800eeef
 800c2bc:	08008f85 	.word	0x08008f85
 800c2c0:	0800c017 	.word	0x0800c017
 800c2c4:	0800eeeb 	.word	0x0800eeeb

0800c2c8 <__sfputc_r>:
 800c2c8:	6893      	ldr	r3, [r2, #8]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	b410      	push	{r4}
 800c2d0:	6093      	str	r3, [r2, #8]
 800c2d2:	da08      	bge.n	800c2e6 <__sfputc_r+0x1e>
 800c2d4:	6994      	ldr	r4, [r2, #24]
 800c2d6:	42a3      	cmp	r3, r4
 800c2d8:	db01      	blt.n	800c2de <__sfputc_r+0x16>
 800c2da:	290a      	cmp	r1, #10
 800c2dc:	d103      	bne.n	800c2e6 <__sfputc_r+0x1e>
 800c2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e2:	f7fd bdb8 	b.w	8009e56 <__swbuf_r>
 800c2e6:	6813      	ldr	r3, [r2, #0]
 800c2e8:	1c58      	adds	r0, r3, #1
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	7019      	strb	r1, [r3, #0]
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <__sfputs_r>:
 800c2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	18d5      	adds	r5, r2, r3
 800c300:	42ac      	cmp	r4, r5
 800c302:	d101      	bne.n	800c308 <__sfputs_r+0x12>
 800c304:	2000      	movs	r0, #0
 800c306:	e007      	b.n	800c318 <__sfputs_r+0x22>
 800c308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30c:	463a      	mov	r2, r7
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ffda 	bl	800c2c8 <__sfputc_r>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d1f3      	bne.n	800c300 <__sfputs_r+0xa>
 800c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c31c <_vfiprintf_r>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	460d      	mov	r5, r1
 800c322:	b09d      	sub	sp, #116	; 0x74
 800c324:	4614      	mov	r4, r2
 800c326:	4698      	mov	r8, r3
 800c328:	4606      	mov	r6, r0
 800c32a:	b118      	cbz	r0, 800c334 <_vfiprintf_r+0x18>
 800c32c:	6a03      	ldr	r3, [r0, #32]
 800c32e:	b90b      	cbnz	r3, 800c334 <_vfiprintf_r+0x18>
 800c330:	f7fd fc8a 	bl	8009c48 <__sinit>
 800c334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c336:	07d9      	lsls	r1, r3, #31
 800c338:	d405      	bmi.n	800c346 <_vfiprintf_r+0x2a>
 800c33a:	89ab      	ldrh	r3, [r5, #12]
 800c33c:	059a      	lsls	r2, r3, #22
 800c33e:	d402      	bmi.n	800c346 <_vfiprintf_r+0x2a>
 800c340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c342:	f7fd febc 	bl	800a0be <__retarget_lock_acquire_recursive>
 800c346:	89ab      	ldrh	r3, [r5, #12]
 800c348:	071b      	lsls	r3, r3, #28
 800c34a:	d501      	bpl.n	800c350 <_vfiprintf_r+0x34>
 800c34c:	692b      	ldr	r3, [r5, #16]
 800c34e:	b99b      	cbnz	r3, 800c378 <_vfiprintf_r+0x5c>
 800c350:	4629      	mov	r1, r5
 800c352:	4630      	mov	r0, r6
 800c354:	f7fd fdbc 	bl	8009ed0 <__swsetup_r>
 800c358:	b170      	cbz	r0, 800c378 <_vfiprintf_r+0x5c>
 800c35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c35c:	07dc      	lsls	r4, r3, #31
 800c35e:	d504      	bpl.n	800c36a <_vfiprintf_r+0x4e>
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
 800c364:	b01d      	add	sp, #116	; 0x74
 800c366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36a:	89ab      	ldrh	r3, [r5, #12]
 800c36c:	0598      	lsls	r0, r3, #22
 800c36e:	d4f7      	bmi.n	800c360 <_vfiprintf_r+0x44>
 800c370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c372:	f7fd fea5 	bl	800a0c0 <__retarget_lock_release_recursive>
 800c376:	e7f3      	b.n	800c360 <_vfiprintf_r+0x44>
 800c378:	2300      	movs	r3, #0
 800c37a:	9309      	str	r3, [sp, #36]	; 0x24
 800c37c:	2320      	movs	r3, #32
 800c37e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c382:	f8cd 800c 	str.w	r8, [sp, #12]
 800c386:	2330      	movs	r3, #48	; 0x30
 800c388:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c53c <_vfiprintf_r+0x220>
 800c38c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c390:	f04f 0901 	mov.w	r9, #1
 800c394:	4623      	mov	r3, r4
 800c396:	469a      	mov	sl, r3
 800c398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c39c:	b10a      	cbz	r2, 800c3a2 <_vfiprintf_r+0x86>
 800c39e:	2a25      	cmp	r2, #37	; 0x25
 800c3a0:	d1f9      	bne.n	800c396 <_vfiprintf_r+0x7a>
 800c3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3a6:	d00b      	beq.n	800c3c0 <_vfiprintf_r+0xa4>
 800c3a8:	465b      	mov	r3, fp
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f7ff ffa1 	bl	800c2f6 <__sfputs_r>
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	f000 80a9 	beq.w	800c50c <_vfiprintf_r+0x1f0>
 800c3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3bc:	445a      	add	r2, fp
 800c3be:	9209      	str	r2, [sp, #36]	; 0x24
 800c3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 80a1 	beq.w	800c50c <_vfiprintf_r+0x1f0>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3d4:	f10a 0a01 	add.w	sl, sl, #1
 800c3d8:	9304      	str	r3, [sp, #16]
 800c3da:	9307      	str	r3, [sp, #28]
 800c3dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c3e2:	4654      	mov	r4, sl
 800c3e4:	2205      	movs	r2, #5
 800c3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ea:	4854      	ldr	r0, [pc, #336]	; (800c53c <_vfiprintf_r+0x220>)
 800c3ec:	f7f3 fef8 	bl	80001e0 <memchr>
 800c3f0:	9a04      	ldr	r2, [sp, #16]
 800c3f2:	b9d8      	cbnz	r0, 800c42c <_vfiprintf_r+0x110>
 800c3f4:	06d1      	lsls	r1, r2, #27
 800c3f6:	bf44      	itt	mi
 800c3f8:	2320      	movmi	r3, #32
 800c3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3fe:	0713      	lsls	r3, r2, #28
 800c400:	bf44      	itt	mi
 800c402:	232b      	movmi	r3, #43	; 0x2b
 800c404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c408:	f89a 3000 	ldrb.w	r3, [sl]
 800c40c:	2b2a      	cmp	r3, #42	; 0x2a
 800c40e:	d015      	beq.n	800c43c <_vfiprintf_r+0x120>
 800c410:	9a07      	ldr	r2, [sp, #28]
 800c412:	4654      	mov	r4, sl
 800c414:	2000      	movs	r0, #0
 800c416:	f04f 0c0a 	mov.w	ip, #10
 800c41a:	4621      	mov	r1, r4
 800c41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c420:	3b30      	subs	r3, #48	; 0x30
 800c422:	2b09      	cmp	r3, #9
 800c424:	d94d      	bls.n	800c4c2 <_vfiprintf_r+0x1a6>
 800c426:	b1b0      	cbz	r0, 800c456 <_vfiprintf_r+0x13a>
 800c428:	9207      	str	r2, [sp, #28]
 800c42a:	e014      	b.n	800c456 <_vfiprintf_r+0x13a>
 800c42c:	eba0 0308 	sub.w	r3, r0, r8
 800c430:	fa09 f303 	lsl.w	r3, r9, r3
 800c434:	4313      	orrs	r3, r2
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	46a2      	mov	sl, r4
 800c43a:	e7d2      	b.n	800c3e2 <_vfiprintf_r+0xc6>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	1d19      	adds	r1, r3, #4
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	9103      	str	r1, [sp, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	bfbb      	ittet	lt
 800c448:	425b      	neglt	r3, r3
 800c44a:	f042 0202 	orrlt.w	r2, r2, #2
 800c44e:	9307      	strge	r3, [sp, #28]
 800c450:	9307      	strlt	r3, [sp, #28]
 800c452:	bfb8      	it	lt
 800c454:	9204      	strlt	r2, [sp, #16]
 800c456:	7823      	ldrb	r3, [r4, #0]
 800c458:	2b2e      	cmp	r3, #46	; 0x2e
 800c45a:	d10c      	bne.n	800c476 <_vfiprintf_r+0x15a>
 800c45c:	7863      	ldrb	r3, [r4, #1]
 800c45e:	2b2a      	cmp	r3, #42	; 0x2a
 800c460:	d134      	bne.n	800c4cc <_vfiprintf_r+0x1b0>
 800c462:	9b03      	ldr	r3, [sp, #12]
 800c464:	1d1a      	adds	r2, r3, #4
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	9203      	str	r2, [sp, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bfb8      	it	lt
 800c46e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c472:	3402      	adds	r4, #2
 800c474:	9305      	str	r3, [sp, #20]
 800c476:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c54c <_vfiprintf_r+0x230>
 800c47a:	7821      	ldrb	r1, [r4, #0]
 800c47c:	2203      	movs	r2, #3
 800c47e:	4650      	mov	r0, sl
 800c480:	f7f3 feae 	bl	80001e0 <memchr>
 800c484:	b138      	cbz	r0, 800c496 <_vfiprintf_r+0x17a>
 800c486:	9b04      	ldr	r3, [sp, #16]
 800c488:	eba0 000a 	sub.w	r0, r0, sl
 800c48c:	2240      	movs	r2, #64	; 0x40
 800c48e:	4082      	lsls	r2, r0
 800c490:	4313      	orrs	r3, r2
 800c492:	3401      	adds	r4, #1
 800c494:	9304      	str	r3, [sp, #16]
 800c496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c49a:	4829      	ldr	r0, [pc, #164]	; (800c540 <_vfiprintf_r+0x224>)
 800c49c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4a0:	2206      	movs	r2, #6
 800c4a2:	f7f3 fe9d 	bl	80001e0 <memchr>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d03f      	beq.n	800c52a <_vfiprintf_r+0x20e>
 800c4aa:	4b26      	ldr	r3, [pc, #152]	; (800c544 <_vfiprintf_r+0x228>)
 800c4ac:	bb1b      	cbnz	r3, 800c4f6 <_vfiprintf_r+0x1da>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	3307      	adds	r3, #7
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	9303      	str	r3, [sp, #12]
 800c4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4bc:	443b      	add	r3, r7
 800c4be:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c0:	e768      	b.n	800c394 <_vfiprintf_r+0x78>
 800c4c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	e7a6      	b.n	800c41a <_vfiprintf_r+0xfe>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	3401      	adds	r4, #1
 800c4d0:	9305      	str	r3, [sp, #20]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	f04f 0c0a 	mov.w	ip, #10
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4de:	3a30      	subs	r2, #48	; 0x30
 800c4e0:	2a09      	cmp	r2, #9
 800c4e2:	d903      	bls.n	800c4ec <_vfiprintf_r+0x1d0>
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0c6      	beq.n	800c476 <_vfiprintf_r+0x15a>
 800c4e8:	9105      	str	r1, [sp, #20]
 800c4ea:	e7c4      	b.n	800c476 <_vfiprintf_r+0x15a>
 800c4ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e7f0      	b.n	800c4d8 <_vfiprintf_r+0x1bc>
 800c4f6:	ab03      	add	r3, sp, #12
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <_vfiprintf_r+0x22c>)
 800c4fe:	a904      	add	r1, sp, #16
 800c500:	4630      	mov	r0, r6
 800c502:	f7fc fd3f 	bl	8008f84 <_printf_float>
 800c506:	4607      	mov	r7, r0
 800c508:	1c78      	adds	r0, r7, #1
 800c50a:	d1d6      	bne.n	800c4ba <_vfiprintf_r+0x19e>
 800c50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c50e:	07d9      	lsls	r1, r3, #31
 800c510:	d405      	bmi.n	800c51e <_vfiprintf_r+0x202>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	059a      	lsls	r2, r3, #22
 800c516:	d402      	bmi.n	800c51e <_vfiprintf_r+0x202>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f7fd fdd1 	bl	800a0c0 <__retarget_lock_release_recursive>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	065b      	lsls	r3, r3, #25
 800c522:	f53f af1d 	bmi.w	800c360 <_vfiprintf_r+0x44>
 800c526:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c528:	e71c      	b.n	800c364 <_vfiprintf_r+0x48>
 800c52a:	ab03      	add	r3, sp, #12
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	462a      	mov	r2, r5
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <_vfiprintf_r+0x22c>)
 800c532:	a904      	add	r1, sp, #16
 800c534:	4630      	mov	r0, r6
 800c536:	f7fc ffc9 	bl	80094cc <_printf_i>
 800c53a:	e7e4      	b.n	800c506 <_vfiprintf_r+0x1ea>
 800c53c:	0800eee5 	.word	0x0800eee5
 800c540:	0800eeef 	.word	0x0800eeef
 800c544:	08008f85 	.word	0x08008f85
 800c548:	0800c2f7 	.word	0x0800c2f7
 800c54c:	0800eeeb 	.word	0x0800eeeb

0800c550 <__sflush_r>:
 800c550:	898a      	ldrh	r2, [r1, #12]
 800c552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c556:	4605      	mov	r5, r0
 800c558:	0710      	lsls	r0, r2, #28
 800c55a:	460c      	mov	r4, r1
 800c55c:	d458      	bmi.n	800c610 <__sflush_r+0xc0>
 800c55e:	684b      	ldr	r3, [r1, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	dc05      	bgt.n	800c570 <__sflush_r+0x20>
 800c564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c566:	2b00      	cmp	r3, #0
 800c568:	dc02      	bgt.n	800c570 <__sflush_r+0x20>
 800c56a:	2000      	movs	r0, #0
 800c56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c572:	2e00      	cmp	r6, #0
 800c574:	d0f9      	beq.n	800c56a <__sflush_r+0x1a>
 800c576:	2300      	movs	r3, #0
 800c578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c57c:	682f      	ldr	r7, [r5, #0]
 800c57e:	6a21      	ldr	r1, [r4, #32]
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	d032      	beq.n	800c5ea <__sflush_r+0x9a>
 800c584:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	075a      	lsls	r2, r3, #29
 800c58a:	d505      	bpl.n	800c598 <__sflush_r+0x48>
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	1ac0      	subs	r0, r0, r3
 800c590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c592:	b10b      	cbz	r3, 800c598 <__sflush_r+0x48>
 800c594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c596:	1ac0      	subs	r0, r0, r3
 800c598:	2300      	movs	r3, #0
 800c59a:	4602      	mov	r2, r0
 800c59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c59e:	6a21      	ldr	r1, [r4, #32]
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	47b0      	blx	r6
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	d106      	bne.n	800c5b8 <__sflush_r+0x68>
 800c5aa:	6829      	ldr	r1, [r5, #0]
 800c5ac:	291d      	cmp	r1, #29
 800c5ae:	d82b      	bhi.n	800c608 <__sflush_r+0xb8>
 800c5b0:	4a29      	ldr	r2, [pc, #164]	; (800c658 <__sflush_r+0x108>)
 800c5b2:	410a      	asrs	r2, r1
 800c5b4:	07d6      	lsls	r6, r2, #31
 800c5b6:	d427      	bmi.n	800c608 <__sflush_r+0xb8>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	6062      	str	r2, [r4, #4]
 800c5bc:	04d9      	lsls	r1, r3, #19
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	6022      	str	r2, [r4, #0]
 800c5c2:	d504      	bpl.n	800c5ce <__sflush_r+0x7e>
 800c5c4:	1c42      	adds	r2, r0, #1
 800c5c6:	d101      	bne.n	800c5cc <__sflush_r+0x7c>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b903      	cbnz	r3, 800c5ce <__sflush_r+0x7e>
 800c5cc:	6560      	str	r0, [r4, #84]	; 0x54
 800c5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d0:	602f      	str	r7, [r5, #0]
 800c5d2:	2900      	cmp	r1, #0
 800c5d4:	d0c9      	beq.n	800c56a <__sflush_r+0x1a>
 800c5d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5da:	4299      	cmp	r1, r3
 800c5dc:	d002      	beq.n	800c5e4 <__sflush_r+0x94>
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f7fe fc24 	bl	800ae2c <_free_r>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	6360      	str	r0, [r4, #52]	; 0x34
 800c5e8:	e7c0      	b.n	800c56c <__sflush_r+0x1c>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b0      	blx	r6
 800c5f0:	1c41      	adds	r1, r0, #1
 800c5f2:	d1c8      	bne.n	800c586 <__sflush_r+0x36>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0c5      	beq.n	800c586 <__sflush_r+0x36>
 800c5fa:	2b1d      	cmp	r3, #29
 800c5fc:	d001      	beq.n	800c602 <__sflush_r+0xb2>
 800c5fe:	2b16      	cmp	r3, #22
 800c600:	d101      	bne.n	800c606 <__sflush_r+0xb6>
 800c602:	602f      	str	r7, [r5, #0]
 800c604:	e7b1      	b.n	800c56a <__sflush_r+0x1a>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60c:	81a3      	strh	r3, [r4, #12]
 800c60e:	e7ad      	b.n	800c56c <__sflush_r+0x1c>
 800c610:	690f      	ldr	r7, [r1, #16]
 800c612:	2f00      	cmp	r7, #0
 800c614:	d0a9      	beq.n	800c56a <__sflush_r+0x1a>
 800c616:	0793      	lsls	r3, r2, #30
 800c618:	680e      	ldr	r6, [r1, #0]
 800c61a:	bf08      	it	eq
 800c61c:	694b      	ldreq	r3, [r1, #20]
 800c61e:	600f      	str	r7, [r1, #0]
 800c620:	bf18      	it	ne
 800c622:	2300      	movne	r3, #0
 800c624:	eba6 0807 	sub.w	r8, r6, r7
 800c628:	608b      	str	r3, [r1, #8]
 800c62a:	f1b8 0f00 	cmp.w	r8, #0
 800c62e:	dd9c      	ble.n	800c56a <__sflush_r+0x1a>
 800c630:	6a21      	ldr	r1, [r4, #32]
 800c632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c634:	4643      	mov	r3, r8
 800c636:	463a      	mov	r2, r7
 800c638:	4628      	mov	r0, r5
 800c63a:	47b0      	blx	r6
 800c63c:	2800      	cmp	r0, #0
 800c63e:	dc06      	bgt.n	800c64e <__sflush_r+0xfe>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	e78e      	b.n	800c56c <__sflush_r+0x1c>
 800c64e:	4407      	add	r7, r0
 800c650:	eba8 0800 	sub.w	r8, r8, r0
 800c654:	e7e9      	b.n	800c62a <__sflush_r+0xda>
 800c656:	bf00      	nop
 800c658:	dfbffffe 	.word	0xdfbffffe

0800c65c <_fflush_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	690b      	ldr	r3, [r1, #16]
 800c660:	4605      	mov	r5, r0
 800c662:	460c      	mov	r4, r1
 800c664:	b913      	cbnz	r3, 800c66c <_fflush_r+0x10>
 800c666:	2500      	movs	r5, #0
 800c668:	4628      	mov	r0, r5
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	b118      	cbz	r0, 800c676 <_fflush_r+0x1a>
 800c66e:	6a03      	ldr	r3, [r0, #32]
 800c670:	b90b      	cbnz	r3, 800c676 <_fflush_r+0x1a>
 800c672:	f7fd fae9 	bl	8009c48 <__sinit>
 800c676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0f3      	beq.n	800c666 <_fflush_r+0xa>
 800c67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c680:	07d0      	lsls	r0, r2, #31
 800c682:	d404      	bmi.n	800c68e <_fflush_r+0x32>
 800c684:	0599      	lsls	r1, r3, #22
 800c686:	d402      	bmi.n	800c68e <_fflush_r+0x32>
 800c688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c68a:	f7fd fd18 	bl	800a0be <__retarget_lock_acquire_recursive>
 800c68e:	4628      	mov	r0, r5
 800c690:	4621      	mov	r1, r4
 800c692:	f7ff ff5d 	bl	800c550 <__sflush_r>
 800c696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c698:	07da      	lsls	r2, r3, #31
 800c69a:	4605      	mov	r5, r0
 800c69c:	d4e4      	bmi.n	800c668 <_fflush_r+0xc>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	059b      	lsls	r3, r3, #22
 800c6a2:	d4e1      	bmi.n	800c668 <_fflush_r+0xc>
 800c6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6a6:	f7fd fd0b 	bl	800a0c0 <__retarget_lock_release_recursive>
 800c6aa:	e7dd      	b.n	800c668 <_fflush_r+0xc>

0800c6ac <fiprintf>:
 800c6ac:	b40e      	push	{r1, r2, r3}
 800c6ae:	b503      	push	{r0, r1, lr}
 800c6b0:	4601      	mov	r1, r0
 800c6b2:	ab03      	add	r3, sp, #12
 800c6b4:	4805      	ldr	r0, [pc, #20]	; (800c6cc <fiprintf+0x20>)
 800c6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ba:	6800      	ldr	r0, [r0, #0]
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	f7ff fe2d 	bl	800c31c <_vfiprintf_r>
 800c6c2:	b002      	add	sp, #8
 800c6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c8:	b003      	add	sp, #12
 800c6ca:	4770      	bx	lr
 800c6cc:	200001e0 	.word	0x200001e0

0800c6d0 <__swhatbuf_r>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	b096      	sub	sp, #88	; 0x58
 800c6dc:	4615      	mov	r5, r2
 800c6de:	461e      	mov	r6, r3
 800c6e0:	da0d      	bge.n	800c6fe <__swhatbuf_r+0x2e>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c6e8:	f04f 0100 	mov.w	r1, #0
 800c6ec:	bf0c      	ite	eq
 800c6ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c6f2:	2340      	movne	r3, #64	; 0x40
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	6031      	str	r1, [r6, #0]
 800c6f8:	602b      	str	r3, [r5, #0]
 800c6fa:	b016      	add	sp, #88	; 0x58
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	466a      	mov	r2, sp
 800c700:	f000 f862 	bl	800c7c8 <_fstat_r>
 800c704:	2800      	cmp	r0, #0
 800c706:	dbec      	blt.n	800c6e2 <__swhatbuf_r+0x12>
 800c708:	9901      	ldr	r1, [sp, #4]
 800c70a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c70e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c712:	4259      	negs	r1, r3
 800c714:	4159      	adcs	r1, r3
 800c716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c71a:	e7eb      	b.n	800c6f4 <__swhatbuf_r+0x24>

0800c71c <__smakebuf_r>:
 800c71c:	898b      	ldrh	r3, [r1, #12]
 800c71e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c720:	079d      	lsls	r5, r3, #30
 800c722:	4606      	mov	r6, r0
 800c724:	460c      	mov	r4, r1
 800c726:	d507      	bpl.n	800c738 <__smakebuf_r+0x1c>
 800c728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	2301      	movs	r3, #1
 800c732:	6163      	str	r3, [r4, #20]
 800c734:	b002      	add	sp, #8
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	ab01      	add	r3, sp, #4
 800c73a:	466a      	mov	r2, sp
 800c73c:	f7ff ffc8 	bl	800c6d0 <__swhatbuf_r>
 800c740:	9900      	ldr	r1, [sp, #0]
 800c742:	4605      	mov	r5, r0
 800c744:	4630      	mov	r0, r6
 800c746:	f7fb fcdd 	bl	8008104 <_malloc_r>
 800c74a:	b948      	cbnz	r0, 800c760 <__smakebuf_r+0x44>
 800c74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c750:	059a      	lsls	r2, r3, #22
 800c752:	d4ef      	bmi.n	800c734 <__smakebuf_r+0x18>
 800c754:	f023 0303 	bic.w	r3, r3, #3
 800c758:	f043 0302 	orr.w	r3, r3, #2
 800c75c:	81a3      	strh	r3, [r4, #12]
 800c75e:	e7e3      	b.n	800c728 <__smakebuf_r+0xc>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	6020      	str	r0, [r4, #0]
 800c764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c768:	81a3      	strh	r3, [r4, #12]
 800c76a:	9b00      	ldr	r3, [sp, #0]
 800c76c:	6163      	str	r3, [r4, #20]
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	6120      	str	r0, [r4, #16]
 800c772:	b15b      	cbz	r3, 800c78c <__smakebuf_r+0x70>
 800c774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c778:	4630      	mov	r0, r6
 800c77a:	f000 f837 	bl	800c7ec <_isatty_r>
 800c77e:	b128      	cbz	r0, 800c78c <__smakebuf_r+0x70>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	f043 0301 	orr.w	r3, r3, #1
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	431d      	orrs	r5, r3
 800c790:	81a5      	strh	r5, [r4, #12]
 800c792:	e7cf      	b.n	800c734 <__smakebuf_r+0x18>

0800c794 <memmove>:
 800c794:	4288      	cmp	r0, r1
 800c796:	b510      	push	{r4, lr}
 800c798:	eb01 0402 	add.w	r4, r1, r2
 800c79c:	d902      	bls.n	800c7a4 <memmove+0x10>
 800c79e:	4284      	cmp	r4, r0
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	d807      	bhi.n	800c7b4 <memmove+0x20>
 800c7a4:	1e43      	subs	r3, r0, #1
 800c7a6:	42a1      	cmp	r1, r4
 800c7a8:	d008      	beq.n	800c7bc <memmove+0x28>
 800c7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7b2:	e7f8      	b.n	800c7a6 <memmove+0x12>
 800c7b4:	4402      	add	r2, r0
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	428a      	cmp	r2, r1
 800c7ba:	d100      	bne.n	800c7be <memmove+0x2a>
 800c7bc:	bd10      	pop	{r4, pc}
 800c7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7c6:	e7f7      	b.n	800c7b8 <memmove+0x24>

0800c7c8 <_fstat_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	; (800c7e8 <_fstat_r+0x20>)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	f7f7 faf0 	bl	8003dba <_fstat>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	d102      	bne.n	800c7e4 <_fstat_r+0x1c>
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	b103      	cbz	r3, 800c7e4 <_fstat_r+0x1c>
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	200006dc 	.word	0x200006dc

0800c7ec <_isatty_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d06      	ldr	r5, [pc, #24]	; (800c808 <_isatty_r+0x1c>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f7 faef 	bl	8003dda <_isatty>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_isatty_r+0x1a>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_isatty_r+0x1a>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	200006dc 	.word	0x200006dc

0800c80c <abort>:
 800c80c:	b508      	push	{r3, lr}
 800c80e:	2006      	movs	r0, #6
 800c810:	f000 f870 	bl	800c8f4 <raise>
 800c814:	2001      	movs	r0, #1
 800c816:	f7f7 fa81 	bl	8003d1c <_exit>

0800c81a <_calloc_r>:
 800c81a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c81c:	fba1 2402 	umull	r2, r4, r1, r2
 800c820:	b94c      	cbnz	r4, 800c836 <_calloc_r+0x1c>
 800c822:	4611      	mov	r1, r2
 800c824:	9201      	str	r2, [sp, #4]
 800c826:	f7fb fc6d 	bl	8008104 <_malloc_r>
 800c82a:	9a01      	ldr	r2, [sp, #4]
 800c82c:	4605      	mov	r5, r0
 800c82e:	b930      	cbnz	r0, 800c83e <_calloc_r+0x24>
 800c830:	4628      	mov	r0, r5
 800c832:	b003      	add	sp, #12
 800c834:	bd30      	pop	{r4, r5, pc}
 800c836:	220c      	movs	r2, #12
 800c838:	6002      	str	r2, [r0, #0]
 800c83a:	2500      	movs	r5, #0
 800c83c:	e7f8      	b.n	800c830 <_calloc_r+0x16>
 800c83e:	4621      	mov	r1, r4
 800c840:	f7fd fb9e 	bl	8009f80 <memset>
 800c844:	e7f4      	b.n	800c830 <_calloc_r+0x16>

0800c846 <_realloc_r>:
 800c846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84a:	4680      	mov	r8, r0
 800c84c:	4614      	mov	r4, r2
 800c84e:	460e      	mov	r6, r1
 800c850:	b921      	cbnz	r1, 800c85c <_realloc_r+0x16>
 800c852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	4611      	mov	r1, r2
 800c858:	f7fb bc54 	b.w	8008104 <_malloc_r>
 800c85c:	b92a      	cbnz	r2, 800c86a <_realloc_r+0x24>
 800c85e:	f7fe fae5 	bl	800ae2c <_free_r>
 800c862:	4625      	mov	r5, r4
 800c864:	4628      	mov	r0, r5
 800c866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86a:	f000 f85f 	bl	800c92c <_malloc_usable_size_r>
 800c86e:	4284      	cmp	r4, r0
 800c870:	4607      	mov	r7, r0
 800c872:	d802      	bhi.n	800c87a <_realloc_r+0x34>
 800c874:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c878:	d812      	bhi.n	800c8a0 <_realloc_r+0x5a>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4640      	mov	r0, r8
 800c87e:	f7fb fc41 	bl	8008104 <_malloc_r>
 800c882:	4605      	mov	r5, r0
 800c884:	2800      	cmp	r0, #0
 800c886:	d0ed      	beq.n	800c864 <_realloc_r+0x1e>
 800c888:	42bc      	cmp	r4, r7
 800c88a:	4622      	mov	r2, r4
 800c88c:	4631      	mov	r1, r6
 800c88e:	bf28      	it	cs
 800c890:	463a      	movcs	r2, r7
 800c892:	f7fd fc16 	bl	800a0c2 <memcpy>
 800c896:	4631      	mov	r1, r6
 800c898:	4640      	mov	r0, r8
 800c89a:	f7fe fac7 	bl	800ae2c <_free_r>
 800c89e:	e7e1      	b.n	800c864 <_realloc_r+0x1e>
 800c8a0:	4635      	mov	r5, r6
 800c8a2:	e7df      	b.n	800c864 <_realloc_r+0x1e>

0800c8a4 <_raise_r>:
 800c8a4:	291f      	cmp	r1, #31
 800c8a6:	b538      	push	{r3, r4, r5, lr}
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	d904      	bls.n	800c8b8 <_raise_r+0x14>
 800c8ae:	2316      	movs	r3, #22
 800c8b0:	6003      	str	r3, [r0, #0]
 800c8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c8ba:	b112      	cbz	r2, 800c8c2 <_raise_r+0x1e>
 800c8bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8c0:	b94b      	cbnz	r3, 800c8d6 <_raise_r+0x32>
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 f830 	bl	800c928 <_getpid_r>
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d2:	f000 b817 	b.w	800c904 <_kill_r>
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d00a      	beq.n	800c8f0 <_raise_r+0x4c>
 800c8da:	1c59      	adds	r1, r3, #1
 800c8dc:	d103      	bne.n	800c8e6 <_raise_r+0x42>
 800c8de:	2316      	movs	r3, #22
 800c8e0:	6003      	str	r3, [r0, #0]
 800c8e2:	2001      	movs	r0, #1
 800c8e4:	e7e7      	b.n	800c8b6 <_raise_r+0x12>
 800c8e6:	2400      	movs	r4, #0
 800c8e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	4798      	blx	r3
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	e7e0      	b.n	800c8b6 <_raise_r+0x12>

0800c8f4 <raise>:
 800c8f4:	4b02      	ldr	r3, [pc, #8]	; (800c900 <raise+0xc>)
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	6818      	ldr	r0, [r3, #0]
 800c8fa:	f7ff bfd3 	b.w	800c8a4 <_raise_r>
 800c8fe:	bf00      	nop
 800c900:	200001e0 	.word	0x200001e0

0800c904 <_kill_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	; (800c924 <_kill_r+0x20>)
 800c908:	2300      	movs	r3, #0
 800c90a:	4604      	mov	r4, r0
 800c90c:	4608      	mov	r0, r1
 800c90e:	4611      	mov	r1, r2
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	f7f7 f9f3 	bl	8003cfc <_kill>
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	d102      	bne.n	800c920 <_kill_r+0x1c>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	b103      	cbz	r3, 800c920 <_kill_r+0x1c>
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	bd38      	pop	{r3, r4, r5, pc}
 800c922:	bf00      	nop
 800c924:	200006dc 	.word	0x200006dc

0800c928 <_getpid_r>:
 800c928:	f7f7 b9e0 	b.w	8003cec <_getpid>

0800c92c <_malloc_usable_size_r>:
 800c92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c930:	1f18      	subs	r0, r3, #4
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfbc      	itt	lt
 800c936:	580b      	ldrlt	r3, [r1, r0]
 800c938:	18c0      	addlt	r0, r0, r3
 800c93a:	4770      	bx	lr

0800c93c <pow>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	ed2d 8b02 	vpush	{d8}
 800c942:	eeb0 8a40 	vmov.f32	s16, s0
 800c946:	eef0 8a60 	vmov.f32	s17, s1
 800c94a:	ec55 4b11 	vmov	r4, r5, d1
 800c94e:	f000 fbaf 	bl	800d0b0 <__ieee754_pow>
 800c952:	4622      	mov	r2, r4
 800c954:	462b      	mov	r3, r5
 800c956:	4620      	mov	r0, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	ec57 6b10 	vmov	r6, r7, d0
 800c95e:	f7f4 f8ed 	bl	8000b3c <__aeabi_dcmpun>
 800c962:	2800      	cmp	r0, #0
 800c964:	d13b      	bne.n	800c9de <pow+0xa2>
 800c966:	ec51 0b18 	vmov	r0, r1, d8
 800c96a:	2200      	movs	r2, #0
 800c96c:	2300      	movs	r3, #0
 800c96e:	f7f4 f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c972:	b1b8      	cbz	r0, 800c9a4 <pow+0x68>
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	4620      	mov	r0, r4
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f4 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800c980:	2800      	cmp	r0, #0
 800c982:	d146      	bne.n	800ca12 <pow+0xd6>
 800c984:	ec45 4b10 	vmov	d0, r4, r5
 800c988:	f000 f922 	bl	800cbd0 <finite>
 800c98c:	b338      	cbz	r0, 800c9de <pow+0xa2>
 800c98e:	2200      	movs	r2, #0
 800c990:	2300      	movs	r3, #0
 800c992:	4620      	mov	r0, r4
 800c994:	4629      	mov	r1, r5
 800c996:	f7f4 f8a9 	bl	8000aec <__aeabi_dcmplt>
 800c99a:	b300      	cbz	r0, 800c9de <pow+0xa2>
 800c99c:	f7fd fb64 	bl	800a068 <__errno>
 800c9a0:	2322      	movs	r3, #34	; 0x22
 800c9a2:	e01b      	b.n	800c9dc <pow+0xa0>
 800c9a4:	ec47 6b10 	vmov	d0, r6, r7
 800c9a8:	f000 f912 	bl	800cbd0 <finite>
 800c9ac:	b9e0      	cbnz	r0, 800c9e8 <pow+0xac>
 800c9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800c9b2:	eef0 0a68 	vmov.f32	s1, s17
 800c9b6:	f000 f90b 	bl	800cbd0 <finite>
 800c9ba:	b1a8      	cbz	r0, 800c9e8 <pow+0xac>
 800c9bc:	ec45 4b10 	vmov	d0, r4, r5
 800c9c0:	f000 f906 	bl	800cbd0 <finite>
 800c9c4:	b180      	cbz	r0, 800c9e8 <pow+0xac>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	f7f4 f8b5 	bl	8000b3c <__aeabi_dcmpun>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0e2      	beq.n	800c99c <pow+0x60>
 800c9d6:	f7fd fb47 	bl	800a068 <__errno>
 800c9da:	2321      	movs	r3, #33	; 0x21
 800c9dc:	6003      	str	r3, [r0, #0]
 800c9de:	ecbd 8b02 	vpop	{d8}
 800c9e2:	ec47 6b10 	vmov	d0, r6, r7
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	f7f4 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d0f2      	beq.n	800c9de <pow+0xa2>
 800c9f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c9fc:	eef0 0a68 	vmov.f32	s1, s17
 800ca00:	f000 f8e6 	bl	800cbd0 <finite>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d0ea      	beq.n	800c9de <pow+0xa2>
 800ca08:	ec45 4b10 	vmov	d0, r4, r5
 800ca0c:	f000 f8e0 	bl	800cbd0 <finite>
 800ca10:	e7c3      	b.n	800c99a <pow+0x5e>
 800ca12:	4f01      	ldr	r7, [pc, #4]	; (800ca18 <pow+0xdc>)
 800ca14:	2600      	movs	r6, #0
 800ca16:	e7e2      	b.n	800c9de <pow+0xa2>
 800ca18:	3ff00000 	.word	0x3ff00000

0800ca1c <sqrt>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	ed2d 8b02 	vpush	{d8}
 800ca22:	ec55 4b10 	vmov	r4, r5, d0
 800ca26:	f000 f8df 	bl	800cbe8 <__ieee754_sqrt>
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	4620      	mov	r0, r4
 800ca30:	4629      	mov	r1, r5
 800ca32:	eeb0 8a40 	vmov.f32	s16, s0
 800ca36:	eef0 8a60 	vmov.f32	s17, s1
 800ca3a:	f7f4 f87f 	bl	8000b3c <__aeabi_dcmpun>
 800ca3e:	b990      	cbnz	r0, 800ca66 <sqrt+0x4a>
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	4620      	mov	r0, r4
 800ca46:	4629      	mov	r1, r5
 800ca48:	f7f4 f850 	bl	8000aec <__aeabi_dcmplt>
 800ca4c:	b158      	cbz	r0, 800ca66 <sqrt+0x4a>
 800ca4e:	f7fd fb0b 	bl	800a068 <__errno>
 800ca52:	2321      	movs	r3, #33	; 0x21
 800ca54:	6003      	str	r3, [r0, #0]
 800ca56:	2200      	movs	r2, #0
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	f7f3 fefd 	bl	800085c <__aeabi_ddiv>
 800ca62:	ec41 0b18 	vmov	d8, r0, r1
 800ca66:	eeb0 0a48 	vmov.f32	s0, s16
 800ca6a:	eef0 0a68 	vmov.f32	s1, s17
 800ca6e:	ecbd 8b02 	vpop	{d8}
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	0000      	movs	r0, r0
	...

0800ca78 <cos>:
 800ca78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca7a:	ec53 2b10 	vmov	r2, r3, d0
 800ca7e:	4826      	ldr	r0, [pc, #152]	; (800cb18 <cos+0xa0>)
 800ca80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca84:	4281      	cmp	r1, r0
 800ca86:	dc06      	bgt.n	800ca96 <cos+0x1e>
 800ca88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cb10 <cos+0x98>
 800ca8c:	b005      	add	sp, #20
 800ca8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca92:	f000 b985 	b.w	800cda0 <__kernel_cos>
 800ca96:	4821      	ldr	r0, [pc, #132]	; (800cb1c <cos+0xa4>)
 800ca98:	4281      	cmp	r1, r0
 800ca9a:	dd09      	ble.n	800cab0 <cos+0x38>
 800ca9c:	ee10 0a10 	vmov	r0, s0
 800caa0:	4619      	mov	r1, r3
 800caa2:	f7f3 fbf9 	bl	8000298 <__aeabi_dsub>
 800caa6:	ec41 0b10 	vmov	d0, r0, r1
 800caaa:	b005      	add	sp, #20
 800caac:	f85d fb04 	ldr.w	pc, [sp], #4
 800cab0:	4668      	mov	r0, sp
 800cab2:	f001 f829 	bl	800db08 <__ieee754_rem_pio2>
 800cab6:	f000 0003 	and.w	r0, r0, #3
 800caba:	2801      	cmp	r0, #1
 800cabc:	d00b      	beq.n	800cad6 <cos+0x5e>
 800cabe:	2802      	cmp	r0, #2
 800cac0:	d016      	beq.n	800caf0 <cos+0x78>
 800cac2:	b9e0      	cbnz	r0, 800cafe <cos+0x86>
 800cac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cac8:	ed9d 0b00 	vldr	d0, [sp]
 800cacc:	f000 f968 	bl	800cda0 <__kernel_cos>
 800cad0:	ec51 0b10 	vmov	r0, r1, d0
 800cad4:	e7e7      	b.n	800caa6 <cos+0x2e>
 800cad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cada:	ed9d 0b00 	vldr	d0, [sp]
 800cade:	f000 fa27 	bl	800cf30 <__kernel_sin>
 800cae2:	ec53 2b10 	vmov	r2, r3, d0
 800cae6:	ee10 0a10 	vmov	r0, s0
 800caea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800caee:	e7da      	b.n	800caa6 <cos+0x2e>
 800caf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800caf4:	ed9d 0b00 	vldr	d0, [sp]
 800caf8:	f000 f952 	bl	800cda0 <__kernel_cos>
 800cafc:	e7f1      	b.n	800cae2 <cos+0x6a>
 800cafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb02:	ed9d 0b00 	vldr	d0, [sp]
 800cb06:	2001      	movs	r0, #1
 800cb08:	f000 fa12 	bl	800cf30 <__kernel_sin>
 800cb0c:	e7e0      	b.n	800cad0 <cos+0x58>
 800cb0e:	bf00      	nop
	...
 800cb18:	3fe921fb 	.word	0x3fe921fb
 800cb1c:	7fefffff 	.word	0x7fefffff

0800cb20 <sin>:
 800cb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb22:	ec53 2b10 	vmov	r2, r3, d0
 800cb26:	4828      	ldr	r0, [pc, #160]	; (800cbc8 <sin+0xa8>)
 800cb28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb2c:	4281      	cmp	r1, r0
 800cb2e:	dc07      	bgt.n	800cb40 <sin+0x20>
 800cb30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cbc0 <sin+0xa0>
 800cb34:	2000      	movs	r0, #0
 800cb36:	b005      	add	sp, #20
 800cb38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb3c:	f000 b9f8 	b.w	800cf30 <__kernel_sin>
 800cb40:	4822      	ldr	r0, [pc, #136]	; (800cbcc <sin+0xac>)
 800cb42:	4281      	cmp	r1, r0
 800cb44:	dd09      	ble.n	800cb5a <sin+0x3a>
 800cb46:	ee10 0a10 	vmov	r0, s0
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f7f3 fba4 	bl	8000298 <__aeabi_dsub>
 800cb50:	ec41 0b10 	vmov	d0, r0, r1
 800cb54:	b005      	add	sp, #20
 800cb56:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb5a:	4668      	mov	r0, sp
 800cb5c:	f000 ffd4 	bl	800db08 <__ieee754_rem_pio2>
 800cb60:	f000 0003 	and.w	r0, r0, #3
 800cb64:	2801      	cmp	r0, #1
 800cb66:	d00c      	beq.n	800cb82 <sin+0x62>
 800cb68:	2802      	cmp	r0, #2
 800cb6a:	d011      	beq.n	800cb90 <sin+0x70>
 800cb6c:	b9f0      	cbnz	r0, 800cbac <sin+0x8c>
 800cb6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb72:	ed9d 0b00 	vldr	d0, [sp]
 800cb76:	2001      	movs	r0, #1
 800cb78:	f000 f9da 	bl	800cf30 <__kernel_sin>
 800cb7c:	ec51 0b10 	vmov	r0, r1, d0
 800cb80:	e7e6      	b.n	800cb50 <sin+0x30>
 800cb82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb86:	ed9d 0b00 	vldr	d0, [sp]
 800cb8a:	f000 f909 	bl	800cda0 <__kernel_cos>
 800cb8e:	e7f5      	b.n	800cb7c <sin+0x5c>
 800cb90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb94:	ed9d 0b00 	vldr	d0, [sp]
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f000 f9c9 	bl	800cf30 <__kernel_sin>
 800cb9e:	ec53 2b10 	vmov	r2, r3, d0
 800cba2:	ee10 0a10 	vmov	r0, s0
 800cba6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cbaa:	e7d1      	b.n	800cb50 <sin+0x30>
 800cbac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbb0:	ed9d 0b00 	vldr	d0, [sp]
 800cbb4:	f000 f8f4 	bl	800cda0 <__kernel_cos>
 800cbb8:	e7f1      	b.n	800cb9e <sin+0x7e>
 800cbba:	bf00      	nop
 800cbbc:	f3af 8000 	nop.w
	...
 800cbc8:	3fe921fb 	.word	0x3fe921fb
 800cbcc:	7fefffff 	.word	0x7fefffff

0800cbd0 <finite>:
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	ed8d 0b00 	vstr	d0, [sp]
 800cbd6:	9801      	ldr	r0, [sp, #4]
 800cbd8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cbdc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cbe0:	0fc0      	lsrs	r0, r0, #31
 800cbe2:	b002      	add	sp, #8
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <__ieee754_sqrt>:
 800cbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	ec55 4b10 	vmov	r4, r5, d0
 800cbf0:	4e67      	ldr	r6, [pc, #412]	; (800cd90 <__ieee754_sqrt+0x1a8>)
 800cbf2:	43ae      	bics	r6, r5
 800cbf4:	ee10 0a10 	vmov	r0, s0
 800cbf8:	ee10 2a10 	vmov	r2, s0
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	462b      	mov	r3, r5
 800cc00:	d10d      	bne.n	800cc1e <__ieee754_sqrt+0x36>
 800cc02:	f7f3 fd01 	bl	8000608 <__aeabi_dmul>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7f3 fb45 	bl	800029c <__adddf3>
 800cc12:	4604      	mov	r4, r0
 800cc14:	460d      	mov	r5, r1
 800cc16:	ec45 4b10 	vmov	d0, r4, r5
 800cc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	dc0b      	bgt.n	800cc3a <__ieee754_sqrt+0x52>
 800cc22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc26:	4326      	orrs	r6, r4
 800cc28:	d0f5      	beq.n	800cc16 <__ieee754_sqrt+0x2e>
 800cc2a:	b135      	cbz	r5, 800cc3a <__ieee754_sqrt+0x52>
 800cc2c:	f7f3 fb34 	bl	8000298 <__aeabi_dsub>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	f7f3 fe12 	bl	800085c <__aeabi_ddiv>
 800cc38:	e7eb      	b.n	800cc12 <__ieee754_sqrt+0x2a>
 800cc3a:	1509      	asrs	r1, r1, #20
 800cc3c:	f000 808d 	beq.w	800cd5a <__ieee754_sqrt+0x172>
 800cc40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc44:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cc48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc4c:	07c9      	lsls	r1, r1, #31
 800cc4e:	bf5c      	itt	pl
 800cc50:	005b      	lslpl	r3, r3, #1
 800cc52:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cc56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc5a:	bf58      	it	pl
 800cc5c:	0052      	lslpl	r2, r2, #1
 800cc5e:	2500      	movs	r5, #0
 800cc60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cc64:	1076      	asrs	r6, r6, #1
 800cc66:	0052      	lsls	r2, r2, #1
 800cc68:	f04f 0e16 	mov.w	lr, #22
 800cc6c:	46ac      	mov	ip, r5
 800cc6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc72:	eb0c 0001 	add.w	r0, ip, r1
 800cc76:	4298      	cmp	r0, r3
 800cc78:	bfde      	ittt	le
 800cc7a:	1a1b      	suble	r3, r3, r0
 800cc7c:	eb00 0c01 	addle.w	ip, r0, r1
 800cc80:	186d      	addle	r5, r5, r1
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	f1be 0e01 	subs.w	lr, lr, #1
 800cc88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cc8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cc94:	d1ed      	bne.n	800cc72 <__ieee754_sqrt+0x8a>
 800cc96:	4674      	mov	r4, lr
 800cc98:	2720      	movs	r7, #32
 800cc9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cc9e:	4563      	cmp	r3, ip
 800cca0:	eb01 000e 	add.w	r0, r1, lr
 800cca4:	dc02      	bgt.n	800ccac <__ieee754_sqrt+0xc4>
 800cca6:	d113      	bne.n	800ccd0 <__ieee754_sqrt+0xe8>
 800cca8:	4290      	cmp	r0, r2
 800ccaa:	d811      	bhi.n	800ccd0 <__ieee754_sqrt+0xe8>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	eb00 0e01 	add.w	lr, r0, r1
 800ccb2:	da57      	bge.n	800cd64 <__ieee754_sqrt+0x17c>
 800ccb4:	f1be 0f00 	cmp.w	lr, #0
 800ccb8:	db54      	blt.n	800cd64 <__ieee754_sqrt+0x17c>
 800ccba:	f10c 0801 	add.w	r8, ip, #1
 800ccbe:	eba3 030c 	sub.w	r3, r3, ip
 800ccc2:	4290      	cmp	r0, r2
 800ccc4:	bf88      	it	hi
 800ccc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ccca:	1a12      	subs	r2, r2, r0
 800cccc:	440c      	add	r4, r1
 800ccce:	46c4      	mov	ip, r8
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	3f01      	subs	r7, #1
 800ccd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ccd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ccdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cce0:	d1dd      	bne.n	800cc9e <__ieee754_sqrt+0xb6>
 800cce2:	4313      	orrs	r3, r2
 800cce4:	d01b      	beq.n	800cd1e <__ieee754_sqrt+0x136>
 800cce6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cd94 <__ieee754_sqrt+0x1ac>
 800ccea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cd98 <__ieee754_sqrt+0x1b0>
 800ccee:	e9da 0100 	ldrd	r0, r1, [sl]
 800ccf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800ccf6:	f7f3 facf 	bl	8000298 <__aeabi_dsub>
 800ccfa:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4640      	mov	r0, r8
 800cd04:	4649      	mov	r1, r9
 800cd06:	f7f3 fefb 	bl	8000b00 <__aeabi_dcmple>
 800cd0a:	b140      	cbz	r0, 800cd1e <__ieee754_sqrt+0x136>
 800cd0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cd10:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd14:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd18:	d126      	bne.n	800cd68 <__ieee754_sqrt+0x180>
 800cd1a:	3501      	adds	r5, #1
 800cd1c:	463c      	mov	r4, r7
 800cd1e:	106a      	asrs	r2, r5, #1
 800cd20:	0863      	lsrs	r3, r4, #1
 800cd22:	07e9      	lsls	r1, r5, #31
 800cd24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cd28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cd2c:	bf48      	it	mi
 800cd2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cd32:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cd36:	461c      	mov	r4, r3
 800cd38:	e76d      	b.n	800cc16 <__ieee754_sqrt+0x2e>
 800cd3a:	0ad3      	lsrs	r3, r2, #11
 800cd3c:	3815      	subs	r0, #21
 800cd3e:	0552      	lsls	r2, r2, #21
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d0fa      	beq.n	800cd3a <__ieee754_sqrt+0x152>
 800cd44:	02dc      	lsls	r4, r3, #11
 800cd46:	d50a      	bpl.n	800cd5e <__ieee754_sqrt+0x176>
 800cd48:	f1c1 0420 	rsb	r4, r1, #32
 800cd4c:	fa22 f404 	lsr.w	r4, r2, r4
 800cd50:	1e4d      	subs	r5, r1, #1
 800cd52:	408a      	lsls	r2, r1
 800cd54:	4323      	orrs	r3, r4
 800cd56:	1b41      	subs	r1, r0, r5
 800cd58:	e772      	b.n	800cc40 <__ieee754_sqrt+0x58>
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	e7f0      	b.n	800cd40 <__ieee754_sqrt+0x158>
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	3101      	adds	r1, #1
 800cd62:	e7ef      	b.n	800cd44 <__ieee754_sqrt+0x15c>
 800cd64:	46e0      	mov	r8, ip
 800cd66:	e7aa      	b.n	800ccbe <__ieee754_sqrt+0xd6>
 800cd68:	f7f3 fa98 	bl	800029c <__adddf3>
 800cd6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4640      	mov	r0, r8
 800cd76:	4649      	mov	r1, r9
 800cd78:	f7f3 feb8 	bl	8000aec <__aeabi_dcmplt>
 800cd7c:	b120      	cbz	r0, 800cd88 <__ieee754_sqrt+0x1a0>
 800cd7e:	1ca0      	adds	r0, r4, #2
 800cd80:	bf08      	it	eq
 800cd82:	3501      	addeq	r5, #1
 800cd84:	3402      	adds	r4, #2
 800cd86:	e7ca      	b.n	800cd1e <__ieee754_sqrt+0x136>
 800cd88:	3401      	adds	r4, #1
 800cd8a:	f024 0401 	bic.w	r4, r4, #1
 800cd8e:	e7c6      	b.n	800cd1e <__ieee754_sqrt+0x136>
 800cd90:	7ff00000 	.word	0x7ff00000
 800cd94:	200001e8 	.word	0x200001e8
 800cd98:	200001f0 	.word	0x200001f0
 800cd9c:	00000000 	.word	0x00000000

0800cda0 <__kernel_cos>:
 800cda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	ec57 6b10 	vmov	r6, r7, d0
 800cda8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cdac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cdb0:	ed8d 1b00 	vstr	d1, [sp]
 800cdb4:	da07      	bge.n	800cdc6 <__kernel_cos+0x26>
 800cdb6:	ee10 0a10 	vmov	r0, s0
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fed4 	bl	8000b68 <__aeabi_d2iz>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	f000 8088 	beq.w	800ced6 <__kernel_cos+0x136>
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fc1b 	bl	8000608 <__aeabi_dmul>
 800cdd2:	4b51      	ldr	r3, [pc, #324]	; (800cf18 <__kernel_cos+0x178>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	f7f3 fc15 	bl	8000608 <__aeabi_dmul>
 800cdde:	a340      	add	r3, pc, #256	; (adr r3, 800cee0 <__kernel_cos+0x140>)
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	4682      	mov	sl, r0
 800cde6:	468b      	mov	fp, r1
 800cde8:	4620      	mov	r0, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7f3 fc0c 	bl	8000608 <__aeabi_dmul>
 800cdf0:	a33d      	add	r3, pc, #244	; (adr r3, 800cee8 <__kernel_cos+0x148>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa51 	bl	800029c <__adddf3>
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	f7f3 fc03 	bl	8000608 <__aeabi_dmul>
 800ce02:	a33b      	add	r3, pc, #236	; (adr r3, 800cef0 <__kernel_cos+0x150>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	f7f3 fa46 	bl	8000298 <__aeabi_dsub>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fbfa 	bl	8000608 <__aeabi_dmul>
 800ce14:	a338      	add	r3, pc, #224	; (adr r3, 800cef8 <__kernel_cos+0x158>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7f3 fa3f 	bl	800029c <__adddf3>
 800ce1e:	4622      	mov	r2, r4
 800ce20:	462b      	mov	r3, r5
 800ce22:	f7f3 fbf1 	bl	8000608 <__aeabi_dmul>
 800ce26:	a336      	add	r3, pc, #216	; (adr r3, 800cf00 <__kernel_cos+0x160>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fa34 	bl	8000298 <__aeabi_dsub>
 800ce30:	4622      	mov	r2, r4
 800ce32:	462b      	mov	r3, r5
 800ce34:	f7f3 fbe8 	bl	8000608 <__aeabi_dmul>
 800ce38:	a333      	add	r3, pc, #204	; (adr r3, 800cf08 <__kernel_cos+0x168>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f7f3 fa2d 	bl	800029c <__adddf3>
 800ce42:	4622      	mov	r2, r4
 800ce44:	462b      	mov	r3, r5
 800ce46:	f7f3 fbdf 	bl	8000608 <__aeabi_dmul>
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	f7f3 fbdb 	bl	8000608 <__aeabi_dmul>
 800ce52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce56:	4604      	mov	r4, r0
 800ce58:	460d      	mov	r5, r1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 fbd3 	bl	8000608 <__aeabi_dmul>
 800ce62:	460b      	mov	r3, r1
 800ce64:	4602      	mov	r2, r0
 800ce66:	4629      	mov	r1, r5
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f7f3 fa15 	bl	8000298 <__aeabi_dsub>
 800ce6e:	4b2b      	ldr	r3, [pc, #172]	; (800cf1c <__kernel_cos+0x17c>)
 800ce70:	4598      	cmp	r8, r3
 800ce72:	4606      	mov	r6, r0
 800ce74:	460f      	mov	r7, r1
 800ce76:	dc10      	bgt.n	800ce9a <__kernel_cos+0xfa>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4650      	mov	r0, sl
 800ce7e:	4659      	mov	r1, fp
 800ce80:	f7f3 fa0a 	bl	8000298 <__aeabi_dsub>
 800ce84:	460b      	mov	r3, r1
 800ce86:	4926      	ldr	r1, [pc, #152]	; (800cf20 <__kernel_cos+0x180>)
 800ce88:	4602      	mov	r2, r0
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	f7f3 fa04 	bl	8000298 <__aeabi_dsub>
 800ce90:	ec41 0b10 	vmov	d0, r0, r1
 800ce94:	b003      	add	sp, #12
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9a:	4b22      	ldr	r3, [pc, #136]	; (800cf24 <__kernel_cos+0x184>)
 800ce9c:	4920      	ldr	r1, [pc, #128]	; (800cf20 <__kernel_cos+0x180>)
 800ce9e:	4598      	cmp	r8, r3
 800cea0:	bfcc      	ite	gt
 800cea2:	4d21      	ldrgt	r5, [pc, #132]	; (800cf28 <__kernel_cos+0x188>)
 800cea4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cea8:	2400      	movs	r4, #0
 800ceaa:	4622      	mov	r2, r4
 800ceac:	462b      	mov	r3, r5
 800ceae:	2000      	movs	r0, #0
 800ceb0:	f7f3 f9f2 	bl	8000298 <__aeabi_dsub>
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	4689      	mov	r9, r1
 800ceba:	462b      	mov	r3, r5
 800cebc:	4650      	mov	r0, sl
 800cebe:	4659      	mov	r1, fp
 800cec0:	f7f3 f9ea 	bl	8000298 <__aeabi_dsub>
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	f7f3 f9e6 	bl	8000298 <__aeabi_dsub>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4640      	mov	r0, r8
 800ced2:	4649      	mov	r1, r9
 800ced4:	e7da      	b.n	800ce8c <__kernel_cos+0xec>
 800ced6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cf10 <__kernel_cos+0x170>
 800ceda:	e7db      	b.n	800ce94 <__kernel_cos+0xf4>
 800cedc:	f3af 8000 	nop.w
 800cee0:	be8838d4 	.word	0xbe8838d4
 800cee4:	bda8fae9 	.word	0xbda8fae9
 800cee8:	bdb4b1c4 	.word	0xbdb4b1c4
 800ceec:	3e21ee9e 	.word	0x3e21ee9e
 800cef0:	809c52ad 	.word	0x809c52ad
 800cef4:	3e927e4f 	.word	0x3e927e4f
 800cef8:	19cb1590 	.word	0x19cb1590
 800cefc:	3efa01a0 	.word	0x3efa01a0
 800cf00:	16c15177 	.word	0x16c15177
 800cf04:	3f56c16c 	.word	0x3f56c16c
 800cf08:	5555554c 	.word	0x5555554c
 800cf0c:	3fa55555 	.word	0x3fa55555
 800cf10:	00000000 	.word	0x00000000
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3fe00000 	.word	0x3fe00000
 800cf1c:	3fd33332 	.word	0x3fd33332
 800cf20:	3ff00000 	.word	0x3ff00000
 800cf24:	3fe90000 	.word	0x3fe90000
 800cf28:	3fd20000 	.word	0x3fd20000
 800cf2c:	00000000 	.word	0x00000000

0800cf30 <__kernel_sin>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	ed2d 8b04 	vpush	{d8-d9}
 800cf38:	eeb0 8a41 	vmov.f32	s16, s2
 800cf3c:	eef0 8a61 	vmov.f32	s17, s3
 800cf40:	ec55 4b10 	vmov	r4, r5, d0
 800cf44:	b083      	sub	sp, #12
 800cf46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf4e:	9001      	str	r0, [sp, #4]
 800cf50:	da06      	bge.n	800cf60 <__kernel_sin+0x30>
 800cf52:	ee10 0a10 	vmov	r0, s0
 800cf56:	4629      	mov	r1, r5
 800cf58:	f7f3 fe06 	bl	8000b68 <__aeabi_d2iz>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d051      	beq.n	800d004 <__kernel_sin+0xd4>
 800cf60:	4622      	mov	r2, r4
 800cf62:	462b      	mov	r3, r5
 800cf64:	4620      	mov	r0, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	f7f3 fb4e 	bl	8000608 <__aeabi_dmul>
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	468b      	mov	fp, r1
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	4620      	mov	r0, r4
 800cf76:	4629      	mov	r1, r5
 800cf78:	f7f3 fb46 	bl	8000608 <__aeabi_dmul>
 800cf7c:	a341      	add	r3, pc, #260	; (adr r3, 800d084 <__kernel_sin+0x154>)
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	4680      	mov	r8, r0
 800cf84:	4689      	mov	r9, r1
 800cf86:	4650      	mov	r0, sl
 800cf88:	4659      	mov	r1, fp
 800cf8a:	f7f3 fb3d 	bl	8000608 <__aeabi_dmul>
 800cf8e:	a33f      	add	r3, pc, #252	; (adr r3, 800d08c <__kernel_sin+0x15c>)
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	f7f3 f980 	bl	8000298 <__aeabi_dsub>
 800cf98:	4652      	mov	r2, sl
 800cf9a:	465b      	mov	r3, fp
 800cf9c:	f7f3 fb34 	bl	8000608 <__aeabi_dmul>
 800cfa0:	a33c      	add	r3, pc, #240	; (adr r3, 800d094 <__kernel_sin+0x164>)
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f7f3 f979 	bl	800029c <__adddf3>
 800cfaa:	4652      	mov	r2, sl
 800cfac:	465b      	mov	r3, fp
 800cfae:	f7f3 fb2b 	bl	8000608 <__aeabi_dmul>
 800cfb2:	a33a      	add	r3, pc, #232	; (adr r3, 800d09c <__kernel_sin+0x16c>)
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f7f3 f96e 	bl	8000298 <__aeabi_dsub>
 800cfbc:	4652      	mov	r2, sl
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	f7f3 fb22 	bl	8000608 <__aeabi_dmul>
 800cfc4:	a337      	add	r3, pc, #220	; (adr r3, 800d0a4 <__kernel_sin+0x174>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f7f3 f967 	bl	800029c <__adddf3>
 800cfce:	9b01      	ldr	r3, [sp, #4]
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	460f      	mov	r7, r1
 800cfd4:	b9eb      	cbnz	r3, 800d012 <__kernel_sin+0xe2>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4650      	mov	r0, sl
 800cfdc:	4659      	mov	r1, fp
 800cfde:	f7f3 fb13 	bl	8000608 <__aeabi_dmul>
 800cfe2:	a325      	add	r3, pc, #148	; (adr r3, 800d078 <__kernel_sin+0x148>)
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f7f3 f956 	bl	8000298 <__aeabi_dsub>
 800cfec:	4642      	mov	r2, r8
 800cfee:	464b      	mov	r3, r9
 800cff0:	f7f3 fb0a 	bl	8000608 <__aeabi_dmul>
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	4620      	mov	r0, r4
 800cffa:	4629      	mov	r1, r5
 800cffc:	f7f3 f94e 	bl	800029c <__adddf3>
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	ec45 4b10 	vmov	d0, r4, r5
 800d008:	b003      	add	sp, #12
 800d00a:	ecbd 8b04 	vpop	{d8-d9}
 800d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d012:	4b1b      	ldr	r3, [pc, #108]	; (800d080 <__kernel_sin+0x150>)
 800d014:	ec51 0b18 	vmov	r0, r1, d8
 800d018:	2200      	movs	r2, #0
 800d01a:	f7f3 faf5 	bl	8000608 <__aeabi_dmul>
 800d01e:	4632      	mov	r2, r6
 800d020:	ec41 0b19 	vmov	d9, r0, r1
 800d024:	463b      	mov	r3, r7
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 faed 	bl	8000608 <__aeabi_dmul>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	ec51 0b19 	vmov	r0, r1, d9
 800d036:	f7f3 f92f 	bl	8000298 <__aeabi_dsub>
 800d03a:	4652      	mov	r2, sl
 800d03c:	465b      	mov	r3, fp
 800d03e:	f7f3 fae3 	bl	8000608 <__aeabi_dmul>
 800d042:	ec53 2b18 	vmov	r2, r3, d8
 800d046:	f7f3 f927 	bl	8000298 <__aeabi_dsub>
 800d04a:	a30b      	add	r3, pc, #44	; (adr r3, 800d078 <__kernel_sin+0x148>)
 800d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d050:	4606      	mov	r6, r0
 800d052:	460f      	mov	r7, r1
 800d054:	4640      	mov	r0, r8
 800d056:	4649      	mov	r1, r9
 800d058:	f7f3 fad6 	bl	8000608 <__aeabi_dmul>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4630      	mov	r0, r6
 800d062:	4639      	mov	r1, r7
 800d064:	f7f3 f91a 	bl	800029c <__adddf3>
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 f912 	bl	8000298 <__aeabi_dsub>
 800d074:	e7c4      	b.n	800d000 <__kernel_sin+0xd0>
 800d076:	bf00      	nop
 800d078:	55555549 	.word	0x55555549
 800d07c:	3fc55555 	.word	0x3fc55555
 800d080:	3fe00000 	.word	0x3fe00000
 800d084:	5acfd57c 	.word	0x5acfd57c
 800d088:	3de5d93a 	.word	0x3de5d93a
 800d08c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d090:	3e5ae5e6 	.word	0x3e5ae5e6
 800d094:	57b1fe7d 	.word	0x57b1fe7d
 800d098:	3ec71de3 	.word	0x3ec71de3
 800d09c:	19c161d5 	.word	0x19c161d5
 800d0a0:	3f2a01a0 	.word	0x3f2a01a0
 800d0a4:	1110f8a6 	.word	0x1110f8a6
 800d0a8:	3f811111 	.word	0x3f811111
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <__ieee754_pow>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	ed2d 8b06 	vpush	{d8-d10}
 800d0b8:	b089      	sub	sp, #36	; 0x24
 800d0ba:	ed8d 1b00 	vstr	d1, [sp]
 800d0be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d0c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d0c6:	ea58 0102 	orrs.w	r1, r8, r2
 800d0ca:	ec57 6b10 	vmov	r6, r7, d0
 800d0ce:	d115      	bne.n	800d0fc <__ieee754_pow+0x4c>
 800d0d0:	19b3      	adds	r3, r6, r6
 800d0d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d0d6:	4152      	adcs	r2, r2
 800d0d8:	4299      	cmp	r1, r3
 800d0da:	4b89      	ldr	r3, [pc, #548]	; (800d300 <__ieee754_pow+0x250>)
 800d0dc:	4193      	sbcs	r3, r2
 800d0de:	f080 84d1 	bcs.w	800da84 <__ieee754_pow+0x9d4>
 800d0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	f7f3 f8d7 	bl	800029c <__adddf3>
 800d0ee:	ec41 0b10 	vmov	d0, r0, r1
 800d0f2:	b009      	add	sp, #36	; 0x24
 800d0f4:	ecbd 8b06 	vpop	{d8-d10}
 800d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fc:	4b81      	ldr	r3, [pc, #516]	; (800d304 <__ieee754_pow+0x254>)
 800d0fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d102:	429c      	cmp	r4, r3
 800d104:	ee10 aa10 	vmov	sl, s0
 800d108:	463d      	mov	r5, r7
 800d10a:	dc06      	bgt.n	800d11a <__ieee754_pow+0x6a>
 800d10c:	d101      	bne.n	800d112 <__ieee754_pow+0x62>
 800d10e:	2e00      	cmp	r6, #0
 800d110:	d1e7      	bne.n	800d0e2 <__ieee754_pow+0x32>
 800d112:	4598      	cmp	r8, r3
 800d114:	dc01      	bgt.n	800d11a <__ieee754_pow+0x6a>
 800d116:	d10f      	bne.n	800d138 <__ieee754_pow+0x88>
 800d118:	b172      	cbz	r2, 800d138 <__ieee754_pow+0x88>
 800d11a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d11e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d122:	ea55 050a 	orrs.w	r5, r5, sl
 800d126:	d1dc      	bne.n	800d0e2 <__ieee754_pow+0x32>
 800d128:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d12c:	18db      	adds	r3, r3, r3
 800d12e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d132:	4152      	adcs	r2, r2
 800d134:	429d      	cmp	r5, r3
 800d136:	e7d0      	b.n	800d0da <__ieee754_pow+0x2a>
 800d138:	2d00      	cmp	r5, #0
 800d13a:	da3b      	bge.n	800d1b4 <__ieee754_pow+0x104>
 800d13c:	4b72      	ldr	r3, [pc, #456]	; (800d308 <__ieee754_pow+0x258>)
 800d13e:	4598      	cmp	r8, r3
 800d140:	dc51      	bgt.n	800d1e6 <__ieee754_pow+0x136>
 800d142:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d146:	4598      	cmp	r8, r3
 800d148:	f340 84ab 	ble.w	800daa2 <__ieee754_pow+0x9f2>
 800d14c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d154:	2b14      	cmp	r3, #20
 800d156:	dd0f      	ble.n	800d178 <__ieee754_pow+0xc8>
 800d158:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d15c:	fa22 f103 	lsr.w	r1, r2, r3
 800d160:	fa01 f303 	lsl.w	r3, r1, r3
 800d164:	4293      	cmp	r3, r2
 800d166:	f040 849c 	bne.w	800daa2 <__ieee754_pow+0x9f2>
 800d16a:	f001 0101 	and.w	r1, r1, #1
 800d16e:	f1c1 0302 	rsb	r3, r1, #2
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	b182      	cbz	r2, 800d198 <__ieee754_pow+0xe8>
 800d176:	e05f      	b.n	800d238 <__ieee754_pow+0x188>
 800d178:	2a00      	cmp	r2, #0
 800d17a:	d15b      	bne.n	800d234 <__ieee754_pow+0x184>
 800d17c:	f1c3 0314 	rsb	r3, r3, #20
 800d180:	fa48 f103 	asr.w	r1, r8, r3
 800d184:	fa01 f303 	lsl.w	r3, r1, r3
 800d188:	4543      	cmp	r3, r8
 800d18a:	f040 8487 	bne.w	800da9c <__ieee754_pow+0x9ec>
 800d18e:	f001 0101 	and.w	r1, r1, #1
 800d192:	f1c1 0302 	rsb	r3, r1, #2
 800d196:	9304      	str	r3, [sp, #16]
 800d198:	4b5c      	ldr	r3, [pc, #368]	; (800d30c <__ieee754_pow+0x25c>)
 800d19a:	4598      	cmp	r8, r3
 800d19c:	d132      	bne.n	800d204 <__ieee754_pow+0x154>
 800d19e:	f1b9 0f00 	cmp.w	r9, #0
 800d1a2:	f280 8477 	bge.w	800da94 <__ieee754_pow+0x9e4>
 800d1a6:	4959      	ldr	r1, [pc, #356]	; (800d30c <__ieee754_pow+0x25c>)
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	463b      	mov	r3, r7
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	f7f3 fb55 	bl	800085c <__aeabi_ddiv>
 800d1b2:	e79c      	b.n	800d0ee <__ieee754_pow+0x3e>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9304      	str	r3, [sp, #16]
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	d13d      	bne.n	800d238 <__ieee754_pow+0x188>
 800d1bc:	4b51      	ldr	r3, [pc, #324]	; (800d304 <__ieee754_pow+0x254>)
 800d1be:	4598      	cmp	r8, r3
 800d1c0:	d1ea      	bne.n	800d198 <__ieee754_pow+0xe8>
 800d1c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d1c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800d1ce:	f000 8459 	beq.w	800da84 <__ieee754_pow+0x9d4>
 800d1d2:	4b4f      	ldr	r3, [pc, #316]	; (800d310 <__ieee754_pow+0x260>)
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	dd08      	ble.n	800d1ea <__ieee754_pow+0x13a>
 800d1d8:	f1b9 0f00 	cmp.w	r9, #0
 800d1dc:	f2c0 8456 	blt.w	800da8c <__ieee754_pow+0x9dc>
 800d1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1e4:	e783      	b.n	800d0ee <__ieee754_pow+0x3e>
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	e7e5      	b.n	800d1b6 <__ieee754_pow+0x106>
 800d1ea:	f1b9 0f00 	cmp.w	r9, #0
 800d1ee:	f04f 0000 	mov.w	r0, #0
 800d1f2:	f04f 0100 	mov.w	r1, #0
 800d1f6:	f6bf af7a 	bge.w	800d0ee <__ieee754_pow+0x3e>
 800d1fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d1fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d202:	e774      	b.n	800d0ee <__ieee754_pow+0x3e>
 800d204:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d208:	d106      	bne.n	800d218 <__ieee754_pow+0x168>
 800d20a:	4632      	mov	r2, r6
 800d20c:	463b      	mov	r3, r7
 800d20e:	4630      	mov	r0, r6
 800d210:	4639      	mov	r1, r7
 800d212:	f7f3 f9f9 	bl	8000608 <__aeabi_dmul>
 800d216:	e76a      	b.n	800d0ee <__ieee754_pow+0x3e>
 800d218:	4b3e      	ldr	r3, [pc, #248]	; (800d314 <__ieee754_pow+0x264>)
 800d21a:	4599      	cmp	r9, r3
 800d21c:	d10c      	bne.n	800d238 <__ieee754_pow+0x188>
 800d21e:	2d00      	cmp	r5, #0
 800d220:	db0a      	blt.n	800d238 <__ieee754_pow+0x188>
 800d222:	ec47 6b10 	vmov	d0, r6, r7
 800d226:	b009      	add	sp, #36	; 0x24
 800d228:	ecbd 8b06 	vpop	{d8-d10}
 800d22c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	f7ff bcda 	b.w	800cbe8 <__ieee754_sqrt>
 800d234:	2300      	movs	r3, #0
 800d236:	9304      	str	r3, [sp, #16]
 800d238:	ec47 6b10 	vmov	d0, r6, r7
 800d23c:	f000 fe6a 	bl	800df14 <fabs>
 800d240:	ec51 0b10 	vmov	r0, r1, d0
 800d244:	f1ba 0f00 	cmp.w	sl, #0
 800d248:	d129      	bne.n	800d29e <__ieee754_pow+0x1ee>
 800d24a:	b124      	cbz	r4, 800d256 <__ieee754_pow+0x1a6>
 800d24c:	4b2f      	ldr	r3, [pc, #188]	; (800d30c <__ieee754_pow+0x25c>)
 800d24e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d252:	429a      	cmp	r2, r3
 800d254:	d123      	bne.n	800d29e <__ieee754_pow+0x1ee>
 800d256:	f1b9 0f00 	cmp.w	r9, #0
 800d25a:	da05      	bge.n	800d268 <__ieee754_pow+0x1b8>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	2000      	movs	r0, #0
 800d262:	492a      	ldr	r1, [pc, #168]	; (800d30c <__ieee754_pow+0x25c>)
 800d264:	f7f3 fafa 	bl	800085c <__aeabi_ddiv>
 800d268:	2d00      	cmp	r5, #0
 800d26a:	f6bf af40 	bge.w	800d0ee <__ieee754_pow+0x3e>
 800d26e:	9b04      	ldr	r3, [sp, #16]
 800d270:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d274:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d278:	431c      	orrs	r4, r3
 800d27a:	d108      	bne.n	800d28e <__ieee754_pow+0x1de>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4610      	mov	r0, r2
 800d282:	4619      	mov	r1, r3
 800d284:	f7f3 f808 	bl	8000298 <__aeabi_dsub>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	e78f      	b.n	800d1ae <__ieee754_pow+0xfe>
 800d28e:	9b04      	ldr	r3, [sp, #16]
 800d290:	2b01      	cmp	r3, #1
 800d292:	f47f af2c 	bne.w	800d0ee <__ieee754_pow+0x3e>
 800d296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d29a:	4619      	mov	r1, r3
 800d29c:	e727      	b.n	800d0ee <__ieee754_pow+0x3e>
 800d29e:	0feb      	lsrs	r3, r5, #31
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	9306      	str	r3, [sp, #24]
 800d2a4:	9a06      	ldr	r2, [sp, #24]
 800d2a6:	9b04      	ldr	r3, [sp, #16]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	d102      	bne.n	800d2b2 <__ieee754_pow+0x202>
 800d2ac:	4632      	mov	r2, r6
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	e7e6      	b.n	800d280 <__ieee754_pow+0x1d0>
 800d2b2:	4b19      	ldr	r3, [pc, #100]	; (800d318 <__ieee754_pow+0x268>)
 800d2b4:	4598      	cmp	r8, r3
 800d2b6:	f340 80fb 	ble.w	800d4b0 <__ieee754_pow+0x400>
 800d2ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d2be:	4598      	cmp	r8, r3
 800d2c0:	4b13      	ldr	r3, [pc, #76]	; (800d310 <__ieee754_pow+0x260>)
 800d2c2:	dd0c      	ble.n	800d2de <__ieee754_pow+0x22e>
 800d2c4:	429c      	cmp	r4, r3
 800d2c6:	dc0f      	bgt.n	800d2e8 <__ieee754_pow+0x238>
 800d2c8:	f1b9 0f00 	cmp.w	r9, #0
 800d2cc:	da0f      	bge.n	800d2ee <__ieee754_pow+0x23e>
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	b009      	add	sp, #36	; 0x24
 800d2d2:	ecbd 8b06 	vpop	{d8-d10}
 800d2d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	f000 beca 	b.w	800e072 <__math_oflow>
 800d2de:	429c      	cmp	r4, r3
 800d2e0:	dbf2      	blt.n	800d2c8 <__ieee754_pow+0x218>
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <__ieee754_pow+0x25c>)
 800d2e4:	429c      	cmp	r4, r3
 800d2e6:	dd19      	ble.n	800d31c <__ieee754_pow+0x26c>
 800d2e8:	f1b9 0f00 	cmp.w	r9, #0
 800d2ec:	dcef      	bgt.n	800d2ce <__ieee754_pow+0x21e>
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	b009      	add	sp, #36	; 0x24
 800d2f2:	ecbd 8b06 	vpop	{d8-d10}
 800d2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fa:	f000 beb1 	b.w	800e060 <__math_uflow>
 800d2fe:	bf00      	nop
 800d300:	fff00000 	.word	0xfff00000
 800d304:	7ff00000 	.word	0x7ff00000
 800d308:	433fffff 	.word	0x433fffff
 800d30c:	3ff00000 	.word	0x3ff00000
 800d310:	3fefffff 	.word	0x3fefffff
 800d314:	3fe00000 	.word	0x3fe00000
 800d318:	41e00000 	.word	0x41e00000
 800d31c:	4b60      	ldr	r3, [pc, #384]	; (800d4a0 <__ieee754_pow+0x3f0>)
 800d31e:	2200      	movs	r2, #0
 800d320:	f7f2 ffba 	bl	8000298 <__aeabi_dsub>
 800d324:	a354      	add	r3, pc, #336	; (adr r3, 800d478 <__ieee754_pow+0x3c8>)
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	4604      	mov	r4, r0
 800d32c:	460d      	mov	r5, r1
 800d32e:	f7f3 f96b 	bl	8000608 <__aeabi_dmul>
 800d332:	a353      	add	r3, pc, #332	; (adr r3, 800d480 <__ieee754_pow+0x3d0>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	4620      	mov	r0, r4
 800d33e:	4629      	mov	r1, r5
 800d340:	f7f3 f962 	bl	8000608 <__aeabi_dmul>
 800d344:	4b57      	ldr	r3, [pc, #348]	; (800d4a4 <__ieee754_pow+0x3f4>)
 800d346:	4682      	mov	sl, r0
 800d348:	468b      	mov	fp, r1
 800d34a:	2200      	movs	r2, #0
 800d34c:	4620      	mov	r0, r4
 800d34e:	4629      	mov	r1, r5
 800d350:	f7f3 f95a 	bl	8000608 <__aeabi_dmul>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	a14b      	add	r1, pc, #300	; (adr r1, 800d488 <__ieee754_pow+0x3d8>)
 800d35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d35e:	f7f2 ff9b 	bl	8000298 <__aeabi_dsub>
 800d362:	4622      	mov	r2, r4
 800d364:	462b      	mov	r3, r5
 800d366:	f7f3 f94f 	bl	8000608 <__aeabi_dmul>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	2000      	movs	r0, #0
 800d370:	494d      	ldr	r1, [pc, #308]	; (800d4a8 <__ieee754_pow+0x3f8>)
 800d372:	f7f2 ff91 	bl	8000298 <__aeabi_dsub>
 800d376:	4622      	mov	r2, r4
 800d378:	4680      	mov	r8, r0
 800d37a:	4689      	mov	r9, r1
 800d37c:	462b      	mov	r3, r5
 800d37e:	4620      	mov	r0, r4
 800d380:	4629      	mov	r1, r5
 800d382:	f7f3 f941 	bl	8000608 <__aeabi_dmul>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	4640      	mov	r0, r8
 800d38c:	4649      	mov	r1, r9
 800d38e:	f7f3 f93b 	bl	8000608 <__aeabi_dmul>
 800d392:	a33f      	add	r3, pc, #252	; (adr r3, 800d490 <__ieee754_pow+0x3e0>)
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	f7f3 f936 	bl	8000608 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	f7f2 ff78 	bl	8000298 <__aeabi_dsub>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4689      	mov	r9, r1
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	f7f2 ff72 	bl	800029c <__adddf3>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	4632      	mov	r2, r6
 800d3bc:	463b      	mov	r3, r7
 800d3be:	4604      	mov	r4, r0
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	f7f2 ff69 	bl	8000298 <__aeabi_dsub>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	f7f2 ff63 	bl	8000298 <__aeabi_dsub>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	9a06      	ldr	r2, [sp, #24]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	4682      	mov	sl, r0
 800d3dc:	468b      	mov	fp, r1
 800d3de:	f040 81e7 	bne.w	800d7b0 <__ieee754_pow+0x700>
 800d3e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d498 <__ieee754_pow+0x3e8>
 800d3e6:	eeb0 8a47 	vmov.f32	s16, s14
 800d3ea:	eef0 8a67 	vmov.f32	s17, s15
 800d3ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3f2:	2600      	movs	r6, #0
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3fc:	f7f2 ff4c 	bl	8000298 <__aeabi_dsub>
 800d400:	4622      	mov	r2, r4
 800d402:	462b      	mov	r3, r5
 800d404:	f7f3 f900 	bl	8000608 <__aeabi_dmul>
 800d408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d40c:	4680      	mov	r8, r0
 800d40e:	4689      	mov	r9, r1
 800d410:	4650      	mov	r0, sl
 800d412:	4659      	mov	r1, fp
 800d414:	f7f3 f8f8 	bl	8000608 <__aeabi_dmul>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4640      	mov	r0, r8
 800d41e:	4649      	mov	r1, r9
 800d420:	f7f2 ff3c 	bl	800029c <__adddf3>
 800d424:	4632      	mov	r2, r6
 800d426:	463b      	mov	r3, r7
 800d428:	4680      	mov	r8, r0
 800d42a:	4689      	mov	r9, r1
 800d42c:	4620      	mov	r0, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	f7f3 f8ea 	bl	8000608 <__aeabi_dmul>
 800d434:	460b      	mov	r3, r1
 800d436:	4604      	mov	r4, r0
 800d438:	460d      	mov	r5, r1
 800d43a:	4602      	mov	r2, r0
 800d43c:	4649      	mov	r1, r9
 800d43e:	4640      	mov	r0, r8
 800d440:	f7f2 ff2c 	bl	800029c <__adddf3>
 800d444:	4b19      	ldr	r3, [pc, #100]	; (800d4ac <__ieee754_pow+0x3fc>)
 800d446:	4299      	cmp	r1, r3
 800d448:	ec45 4b19 	vmov	d9, r4, r5
 800d44c:	4606      	mov	r6, r0
 800d44e:	460f      	mov	r7, r1
 800d450:	468b      	mov	fp, r1
 800d452:	f340 82f0 	ble.w	800da36 <__ieee754_pow+0x986>
 800d456:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d45a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d45e:	4303      	orrs	r3, r0
 800d460:	f000 81e4 	beq.w	800d82c <__ieee754_pow+0x77c>
 800d464:	ec51 0b18 	vmov	r0, r1, d8
 800d468:	2200      	movs	r2, #0
 800d46a:	2300      	movs	r3, #0
 800d46c:	f7f3 fb3e 	bl	8000aec <__aeabi_dcmplt>
 800d470:	3800      	subs	r0, #0
 800d472:	bf18      	it	ne
 800d474:	2001      	movne	r0, #1
 800d476:	e72b      	b.n	800d2d0 <__ieee754_pow+0x220>
 800d478:	60000000 	.word	0x60000000
 800d47c:	3ff71547 	.word	0x3ff71547
 800d480:	f85ddf44 	.word	0xf85ddf44
 800d484:	3e54ae0b 	.word	0x3e54ae0b
 800d488:	55555555 	.word	0x55555555
 800d48c:	3fd55555 	.word	0x3fd55555
 800d490:	652b82fe 	.word	0x652b82fe
 800d494:	3ff71547 	.word	0x3ff71547
 800d498:	00000000 	.word	0x00000000
 800d49c:	bff00000 	.word	0xbff00000
 800d4a0:	3ff00000 	.word	0x3ff00000
 800d4a4:	3fd00000 	.word	0x3fd00000
 800d4a8:	3fe00000 	.word	0x3fe00000
 800d4ac:	408fffff 	.word	0x408fffff
 800d4b0:	4bd5      	ldr	r3, [pc, #852]	; (800d808 <__ieee754_pow+0x758>)
 800d4b2:	402b      	ands	r3, r5
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	b92b      	cbnz	r3, 800d4c4 <__ieee754_pow+0x414>
 800d4b8:	4bd4      	ldr	r3, [pc, #848]	; (800d80c <__ieee754_pow+0x75c>)
 800d4ba:	f7f3 f8a5 	bl	8000608 <__aeabi_dmul>
 800d4be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	1523      	asrs	r3, r4, #20
 800d4c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4ca:	4413      	add	r3, r2
 800d4cc:	9305      	str	r3, [sp, #20]
 800d4ce:	4bd0      	ldr	r3, [pc, #832]	; (800d810 <__ieee754_pow+0x760>)
 800d4d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d4d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d4de:	dd08      	ble.n	800d4f2 <__ieee754_pow+0x442>
 800d4e0:	4bcc      	ldr	r3, [pc, #816]	; (800d814 <__ieee754_pow+0x764>)
 800d4e2:	429c      	cmp	r4, r3
 800d4e4:	f340 8162 	ble.w	800d7ac <__ieee754_pow+0x6fc>
 800d4e8:	9b05      	ldr	r3, [sp, #20]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	9305      	str	r3, [sp, #20]
 800d4ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d4f2:	2400      	movs	r4, #0
 800d4f4:	00e3      	lsls	r3, r4, #3
 800d4f6:	9307      	str	r3, [sp, #28]
 800d4f8:	4bc7      	ldr	r3, [pc, #796]	; (800d818 <__ieee754_pow+0x768>)
 800d4fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d4fe:	ed93 7b00 	vldr	d7, [r3]
 800d502:	4629      	mov	r1, r5
 800d504:	ec53 2b17 	vmov	r2, r3, d7
 800d508:	eeb0 9a47 	vmov.f32	s18, s14
 800d50c:	eef0 9a67 	vmov.f32	s19, s15
 800d510:	4682      	mov	sl, r0
 800d512:	f7f2 fec1 	bl	8000298 <__aeabi_dsub>
 800d516:	4652      	mov	r2, sl
 800d518:	4606      	mov	r6, r0
 800d51a:	460f      	mov	r7, r1
 800d51c:	462b      	mov	r3, r5
 800d51e:	ec51 0b19 	vmov	r0, r1, d9
 800d522:	f7f2 febb 	bl	800029c <__adddf3>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	2000      	movs	r0, #0
 800d52c:	49bb      	ldr	r1, [pc, #748]	; (800d81c <__ieee754_pow+0x76c>)
 800d52e:	f7f3 f995 	bl	800085c <__aeabi_ddiv>
 800d532:	ec41 0b1a 	vmov	d10, r0, r1
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 f863 	bl	8000608 <__aeabi_dmul>
 800d542:	2300      	movs	r3, #0
 800d544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d548:	9302      	str	r3, [sp, #8]
 800d54a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d54e:	46ab      	mov	fp, r5
 800d550:	106d      	asrs	r5, r5, #1
 800d552:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d556:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d55a:	ec41 0b18 	vmov	d8, r0, r1
 800d55e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d562:	2200      	movs	r2, #0
 800d564:	4640      	mov	r0, r8
 800d566:	4649      	mov	r1, r9
 800d568:	4614      	mov	r4, r2
 800d56a:	461d      	mov	r5, r3
 800d56c:	f7f3 f84c 	bl	8000608 <__aeabi_dmul>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4630      	mov	r0, r6
 800d576:	4639      	mov	r1, r7
 800d578:	f7f2 fe8e 	bl	8000298 <__aeabi_dsub>
 800d57c:	ec53 2b19 	vmov	r2, r3, d9
 800d580:	4606      	mov	r6, r0
 800d582:	460f      	mov	r7, r1
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f2 fe86 	bl	8000298 <__aeabi_dsub>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4650      	mov	r0, sl
 800d592:	4659      	mov	r1, fp
 800d594:	f7f2 fe80 	bl	8000298 <__aeabi_dsub>
 800d598:	4642      	mov	r2, r8
 800d59a:	464b      	mov	r3, r9
 800d59c:	f7f3 f834 	bl	8000608 <__aeabi_dmul>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	f7f2 fe76 	bl	8000298 <__aeabi_dsub>
 800d5ac:	ec53 2b1a 	vmov	r2, r3, d10
 800d5b0:	f7f3 f82a 	bl	8000608 <__aeabi_dmul>
 800d5b4:	ec53 2b18 	vmov	r2, r3, d8
 800d5b8:	ec41 0b19 	vmov	d9, r0, r1
 800d5bc:	ec51 0b18 	vmov	r0, r1, d8
 800d5c0:	f7f3 f822 	bl	8000608 <__aeabi_dmul>
 800d5c4:	a37c      	add	r3, pc, #496	; (adr r3, 800d7b8 <__ieee754_pow+0x708>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	460d      	mov	r5, r1
 800d5ce:	f7f3 f81b 	bl	8000608 <__aeabi_dmul>
 800d5d2:	a37b      	add	r3, pc, #492	; (adr r3, 800d7c0 <__ieee754_pow+0x710>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f7f2 fe60 	bl	800029c <__adddf3>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	462b      	mov	r3, r5
 800d5e0:	f7f3 f812 	bl	8000608 <__aeabi_dmul>
 800d5e4:	a378      	add	r3, pc, #480	; (adr r3, 800d7c8 <__ieee754_pow+0x718>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f7f2 fe57 	bl	800029c <__adddf3>
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	462b      	mov	r3, r5
 800d5f2:	f7f3 f809 	bl	8000608 <__aeabi_dmul>
 800d5f6:	a376      	add	r3, pc, #472	; (adr r3, 800d7d0 <__ieee754_pow+0x720>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	f7f2 fe4e 	bl	800029c <__adddf3>
 800d600:	4622      	mov	r2, r4
 800d602:	462b      	mov	r3, r5
 800d604:	f7f3 f800 	bl	8000608 <__aeabi_dmul>
 800d608:	a373      	add	r3, pc, #460	; (adr r3, 800d7d8 <__ieee754_pow+0x728>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f7f2 fe45 	bl	800029c <__adddf3>
 800d612:	4622      	mov	r2, r4
 800d614:	462b      	mov	r3, r5
 800d616:	f7f2 fff7 	bl	8000608 <__aeabi_dmul>
 800d61a:	a371      	add	r3, pc, #452	; (adr r3, 800d7e0 <__ieee754_pow+0x730>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f2 fe3c 	bl	800029c <__adddf3>
 800d624:	4622      	mov	r2, r4
 800d626:	4606      	mov	r6, r0
 800d628:	460f      	mov	r7, r1
 800d62a:	462b      	mov	r3, r5
 800d62c:	4620      	mov	r0, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	f7f2 ffea 	bl	8000608 <__aeabi_dmul>
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	4630      	mov	r0, r6
 800d63a:	4639      	mov	r1, r7
 800d63c:	f7f2 ffe4 	bl	8000608 <__aeabi_dmul>
 800d640:	4642      	mov	r2, r8
 800d642:	4604      	mov	r4, r0
 800d644:	460d      	mov	r5, r1
 800d646:	464b      	mov	r3, r9
 800d648:	ec51 0b18 	vmov	r0, r1, d8
 800d64c:	f7f2 fe26 	bl	800029c <__adddf3>
 800d650:	ec53 2b19 	vmov	r2, r3, d9
 800d654:	f7f2 ffd8 	bl	8000608 <__aeabi_dmul>
 800d658:	4622      	mov	r2, r4
 800d65a:	462b      	mov	r3, r5
 800d65c:	f7f2 fe1e 	bl	800029c <__adddf3>
 800d660:	4642      	mov	r2, r8
 800d662:	4682      	mov	sl, r0
 800d664:	468b      	mov	fp, r1
 800d666:	464b      	mov	r3, r9
 800d668:	4640      	mov	r0, r8
 800d66a:	4649      	mov	r1, r9
 800d66c:	f7f2 ffcc 	bl	8000608 <__aeabi_dmul>
 800d670:	4b6b      	ldr	r3, [pc, #428]	; (800d820 <__ieee754_pow+0x770>)
 800d672:	2200      	movs	r2, #0
 800d674:	4606      	mov	r6, r0
 800d676:	460f      	mov	r7, r1
 800d678:	f7f2 fe10 	bl	800029c <__adddf3>
 800d67c:	4652      	mov	r2, sl
 800d67e:	465b      	mov	r3, fp
 800d680:	f7f2 fe0c 	bl	800029c <__adddf3>
 800d684:	2000      	movs	r0, #0
 800d686:	4604      	mov	r4, r0
 800d688:	460d      	mov	r5, r1
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4640      	mov	r0, r8
 800d690:	4649      	mov	r1, r9
 800d692:	f7f2 ffb9 	bl	8000608 <__aeabi_dmul>
 800d696:	4b62      	ldr	r3, [pc, #392]	; (800d820 <__ieee754_pow+0x770>)
 800d698:	4680      	mov	r8, r0
 800d69a:	4689      	mov	r9, r1
 800d69c:	2200      	movs	r2, #0
 800d69e:	4620      	mov	r0, r4
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	f7f2 fdf9 	bl	8000298 <__aeabi_dsub>
 800d6a6:	4632      	mov	r2, r6
 800d6a8:	463b      	mov	r3, r7
 800d6aa:	f7f2 fdf5 	bl	8000298 <__aeabi_dsub>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	4659      	mov	r1, fp
 800d6b6:	f7f2 fdef 	bl	8000298 <__aeabi_dsub>
 800d6ba:	ec53 2b18 	vmov	r2, r3, d8
 800d6be:	f7f2 ffa3 	bl	8000608 <__aeabi_dmul>
 800d6c2:	4622      	mov	r2, r4
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	460f      	mov	r7, r1
 800d6c8:	462b      	mov	r3, r5
 800d6ca:	ec51 0b19 	vmov	r0, r1, d9
 800d6ce:	f7f2 ff9b 	bl	8000608 <__aeabi_dmul>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	4639      	mov	r1, r7
 800d6da:	f7f2 fddf 	bl	800029c <__adddf3>
 800d6de:	4606      	mov	r6, r0
 800d6e0:	460f      	mov	r7, r1
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4640      	mov	r0, r8
 800d6e8:	4649      	mov	r1, r9
 800d6ea:	f7f2 fdd7 	bl	800029c <__adddf3>
 800d6ee:	a33e      	add	r3, pc, #248	; (adr r3, 800d7e8 <__ieee754_pow+0x738>)
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	f7f2 ff85 	bl	8000608 <__aeabi_dmul>
 800d6fe:	4642      	mov	r2, r8
 800d700:	ec41 0b18 	vmov	d8, r0, r1
 800d704:	464b      	mov	r3, r9
 800d706:	4620      	mov	r0, r4
 800d708:	4629      	mov	r1, r5
 800d70a:	f7f2 fdc5 	bl	8000298 <__aeabi_dsub>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	4630      	mov	r0, r6
 800d714:	4639      	mov	r1, r7
 800d716:	f7f2 fdbf 	bl	8000298 <__aeabi_dsub>
 800d71a:	a335      	add	r3, pc, #212	; (adr r3, 800d7f0 <__ieee754_pow+0x740>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	a334      	add	r3, pc, #208	; (adr r3, 800d7f8 <__ieee754_pow+0x748>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	4606      	mov	r6, r0
 800d72c:	460f      	mov	r7, r1
 800d72e:	4620      	mov	r0, r4
 800d730:	4629      	mov	r1, r5
 800d732:	f7f2 ff69 	bl	8000608 <__aeabi_dmul>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4630      	mov	r0, r6
 800d73c:	4639      	mov	r1, r7
 800d73e:	f7f2 fdad 	bl	800029c <__adddf3>
 800d742:	9a07      	ldr	r2, [sp, #28]
 800d744:	4b37      	ldr	r3, [pc, #220]	; (800d824 <__ieee754_pow+0x774>)
 800d746:	4413      	add	r3, r2
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	f7f2 fda6 	bl	800029c <__adddf3>
 800d750:	4682      	mov	sl, r0
 800d752:	9805      	ldr	r0, [sp, #20]
 800d754:	468b      	mov	fp, r1
 800d756:	f7f2 feed 	bl	8000534 <__aeabi_i2d>
 800d75a:	9a07      	ldr	r2, [sp, #28]
 800d75c:	4b32      	ldr	r3, [pc, #200]	; (800d828 <__ieee754_pow+0x778>)
 800d75e:	4413      	add	r3, r2
 800d760:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d764:	4606      	mov	r6, r0
 800d766:	460f      	mov	r7, r1
 800d768:	4652      	mov	r2, sl
 800d76a:	465b      	mov	r3, fp
 800d76c:	ec51 0b18 	vmov	r0, r1, d8
 800d770:	f7f2 fd94 	bl	800029c <__adddf3>
 800d774:	4642      	mov	r2, r8
 800d776:	464b      	mov	r3, r9
 800d778:	f7f2 fd90 	bl	800029c <__adddf3>
 800d77c:	4632      	mov	r2, r6
 800d77e:	463b      	mov	r3, r7
 800d780:	f7f2 fd8c 	bl	800029c <__adddf3>
 800d784:	2000      	movs	r0, #0
 800d786:	4632      	mov	r2, r6
 800d788:	463b      	mov	r3, r7
 800d78a:	4604      	mov	r4, r0
 800d78c:	460d      	mov	r5, r1
 800d78e:	f7f2 fd83 	bl	8000298 <__aeabi_dsub>
 800d792:	4642      	mov	r2, r8
 800d794:	464b      	mov	r3, r9
 800d796:	f7f2 fd7f 	bl	8000298 <__aeabi_dsub>
 800d79a:	ec53 2b18 	vmov	r2, r3, d8
 800d79e:	f7f2 fd7b 	bl	8000298 <__aeabi_dsub>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	4650      	mov	r0, sl
 800d7a8:	4659      	mov	r1, fp
 800d7aa:	e610      	b.n	800d3ce <__ieee754_pow+0x31e>
 800d7ac:	2401      	movs	r4, #1
 800d7ae:	e6a1      	b.n	800d4f4 <__ieee754_pow+0x444>
 800d7b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d800 <__ieee754_pow+0x750>
 800d7b4:	e617      	b.n	800d3e6 <__ieee754_pow+0x336>
 800d7b6:	bf00      	nop
 800d7b8:	4a454eef 	.word	0x4a454eef
 800d7bc:	3fca7e28 	.word	0x3fca7e28
 800d7c0:	93c9db65 	.word	0x93c9db65
 800d7c4:	3fcd864a 	.word	0x3fcd864a
 800d7c8:	a91d4101 	.word	0xa91d4101
 800d7cc:	3fd17460 	.word	0x3fd17460
 800d7d0:	518f264d 	.word	0x518f264d
 800d7d4:	3fd55555 	.word	0x3fd55555
 800d7d8:	db6fabff 	.word	0xdb6fabff
 800d7dc:	3fdb6db6 	.word	0x3fdb6db6
 800d7e0:	33333303 	.word	0x33333303
 800d7e4:	3fe33333 	.word	0x3fe33333
 800d7e8:	e0000000 	.word	0xe0000000
 800d7ec:	3feec709 	.word	0x3feec709
 800d7f0:	dc3a03fd 	.word	0xdc3a03fd
 800d7f4:	3feec709 	.word	0x3feec709
 800d7f8:	145b01f5 	.word	0x145b01f5
 800d7fc:	be3e2fe0 	.word	0xbe3e2fe0
 800d800:	00000000 	.word	0x00000000
 800d804:	3ff00000 	.word	0x3ff00000
 800d808:	7ff00000 	.word	0x7ff00000
 800d80c:	43400000 	.word	0x43400000
 800d810:	0003988e 	.word	0x0003988e
 800d814:	000bb679 	.word	0x000bb679
 800d818:	0800eef8 	.word	0x0800eef8
 800d81c:	3ff00000 	.word	0x3ff00000
 800d820:	40080000 	.word	0x40080000
 800d824:	0800ef18 	.word	0x0800ef18
 800d828:	0800ef08 	.word	0x0800ef08
 800d82c:	a3b3      	add	r3, pc, #716	; (adr r3, 800dafc <__ieee754_pow+0xa4c>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	4640      	mov	r0, r8
 800d834:	4649      	mov	r1, r9
 800d836:	f7f2 fd31 	bl	800029c <__adddf3>
 800d83a:	4622      	mov	r2, r4
 800d83c:	ec41 0b1a 	vmov	d10, r0, r1
 800d840:	462b      	mov	r3, r5
 800d842:	4630      	mov	r0, r6
 800d844:	4639      	mov	r1, r7
 800d846:	f7f2 fd27 	bl	8000298 <__aeabi_dsub>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	ec51 0b1a 	vmov	r0, r1, d10
 800d852:	f7f3 f969 	bl	8000b28 <__aeabi_dcmpgt>
 800d856:	2800      	cmp	r0, #0
 800d858:	f47f ae04 	bne.w	800d464 <__ieee754_pow+0x3b4>
 800d85c:	4aa2      	ldr	r2, [pc, #648]	; (800dae8 <__ieee754_pow+0xa38>)
 800d85e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d862:	4293      	cmp	r3, r2
 800d864:	f340 8107 	ble.w	800da76 <__ieee754_pow+0x9c6>
 800d868:	151b      	asrs	r3, r3, #20
 800d86a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d86e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d872:	fa4a fa03 	asr.w	sl, sl, r3
 800d876:	44da      	add	sl, fp
 800d878:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d87c:	489b      	ldr	r0, [pc, #620]	; (800daec <__ieee754_pow+0xa3c>)
 800d87e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d882:	4108      	asrs	r0, r1
 800d884:	ea00 030a 	and.w	r3, r0, sl
 800d888:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d88c:	f1c1 0114 	rsb	r1, r1, #20
 800d890:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d894:	fa4a fa01 	asr.w	sl, sl, r1
 800d898:	f1bb 0f00 	cmp.w	fp, #0
 800d89c:	f04f 0200 	mov.w	r2, #0
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	bfb8      	it	lt
 800d8a6:	f1ca 0a00 	rsblt	sl, sl, #0
 800d8aa:	f7f2 fcf5 	bl	8000298 <__aeabi_dsub>
 800d8ae:	ec41 0b19 	vmov	d9, r0, r1
 800d8b2:	4642      	mov	r2, r8
 800d8b4:	464b      	mov	r3, r9
 800d8b6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ba:	f7f2 fcef 	bl	800029c <__adddf3>
 800d8be:	a37a      	add	r3, pc, #488	; (adr r3, 800daa8 <__ieee754_pow+0x9f8>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	f7f2 fe9d 	bl	8000608 <__aeabi_dmul>
 800d8ce:	ec53 2b19 	vmov	r2, r3, d9
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 fcdd 	bl	8000298 <__aeabi_dsub>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	f7f2 fcd7 	bl	8000298 <__aeabi_dsub>
 800d8ea:	a371      	add	r3, pc, #452	; (adr r3, 800dab0 <__ieee754_pow+0xa00>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fe8a 	bl	8000608 <__aeabi_dmul>
 800d8f4:	a370      	add	r3, pc, #448	; (adr r3, 800dab8 <__ieee754_pow+0xa08>)
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	4689      	mov	r9, r1
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 fe81 	bl	8000608 <__aeabi_dmul>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4640      	mov	r0, r8
 800d90c:	4649      	mov	r1, r9
 800d90e:	f7f2 fcc5 	bl	800029c <__adddf3>
 800d912:	4604      	mov	r4, r0
 800d914:	460d      	mov	r5, r1
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4630      	mov	r0, r6
 800d91c:	4639      	mov	r1, r7
 800d91e:	f7f2 fcbd 	bl	800029c <__adddf3>
 800d922:	4632      	mov	r2, r6
 800d924:	463b      	mov	r3, r7
 800d926:	4680      	mov	r8, r0
 800d928:	4689      	mov	r9, r1
 800d92a:	f7f2 fcb5 	bl	8000298 <__aeabi_dsub>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4620      	mov	r0, r4
 800d934:	4629      	mov	r1, r5
 800d936:	f7f2 fcaf 	bl	8000298 <__aeabi_dsub>
 800d93a:	4642      	mov	r2, r8
 800d93c:	4606      	mov	r6, r0
 800d93e:	460f      	mov	r7, r1
 800d940:	464b      	mov	r3, r9
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	f7f2 fe5f 	bl	8000608 <__aeabi_dmul>
 800d94a:	a35d      	add	r3, pc, #372	; (adr r3, 800dac0 <__ieee754_pow+0xa10>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	4604      	mov	r4, r0
 800d952:	460d      	mov	r5, r1
 800d954:	f7f2 fe58 	bl	8000608 <__aeabi_dmul>
 800d958:	a35b      	add	r3, pc, #364	; (adr r3, 800dac8 <__ieee754_pow+0xa18>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7f2 fc9b 	bl	8000298 <__aeabi_dsub>
 800d962:	4622      	mov	r2, r4
 800d964:	462b      	mov	r3, r5
 800d966:	f7f2 fe4f 	bl	8000608 <__aeabi_dmul>
 800d96a:	a359      	add	r3, pc, #356	; (adr r3, 800dad0 <__ieee754_pow+0xa20>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	f7f2 fc94 	bl	800029c <__adddf3>
 800d974:	4622      	mov	r2, r4
 800d976:	462b      	mov	r3, r5
 800d978:	f7f2 fe46 	bl	8000608 <__aeabi_dmul>
 800d97c:	a356      	add	r3, pc, #344	; (adr r3, 800dad8 <__ieee754_pow+0xa28>)
 800d97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d982:	f7f2 fc89 	bl	8000298 <__aeabi_dsub>
 800d986:	4622      	mov	r2, r4
 800d988:	462b      	mov	r3, r5
 800d98a:	f7f2 fe3d 	bl	8000608 <__aeabi_dmul>
 800d98e:	a354      	add	r3, pc, #336	; (adr r3, 800dae0 <__ieee754_pow+0xa30>)
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	f7f2 fc82 	bl	800029c <__adddf3>
 800d998:	4622      	mov	r2, r4
 800d99a:	462b      	mov	r3, r5
 800d99c:	f7f2 fe34 	bl	8000608 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f2 fc76 	bl	8000298 <__aeabi_dsub>
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	4649      	mov	r1, r9
 800d9b8:	f7f2 fe26 	bl	8000608 <__aeabi_dmul>
 800d9bc:	2200      	movs	r2, #0
 800d9be:	ec41 0b19 	vmov	d9, r0, r1
 800d9c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	f7f2 fc65 	bl	8000298 <__aeabi_dsub>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	ec51 0b19 	vmov	r0, r1, d9
 800d9d6:	f7f2 ff41 	bl	800085c <__aeabi_ddiv>
 800d9da:	4632      	mov	r2, r6
 800d9dc:	4604      	mov	r4, r0
 800d9de:	460d      	mov	r5, r1
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fe0f 	bl	8000608 <__aeabi_dmul>
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	f7f2 fc55 	bl	800029c <__adddf3>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	f7f2 fc4d 	bl	8000298 <__aeabi_dsub>
 800d9fe:	4642      	mov	r2, r8
 800da00:	464b      	mov	r3, r9
 800da02:	f7f2 fc49 	bl	8000298 <__aeabi_dsub>
 800da06:	460b      	mov	r3, r1
 800da08:	4602      	mov	r2, r0
 800da0a:	4939      	ldr	r1, [pc, #228]	; (800daf0 <__ieee754_pow+0xa40>)
 800da0c:	2000      	movs	r0, #0
 800da0e:	f7f2 fc43 	bl	8000298 <__aeabi_dsub>
 800da12:	ec41 0b10 	vmov	d0, r0, r1
 800da16:	ee10 3a90 	vmov	r3, s1
 800da1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800da1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da22:	da2b      	bge.n	800da7c <__ieee754_pow+0x9cc>
 800da24:	4650      	mov	r0, sl
 800da26:	f000 fa7f 	bl	800df28 <scalbn>
 800da2a:	ec51 0b10 	vmov	r0, r1, d0
 800da2e:	ec53 2b18 	vmov	r2, r3, d8
 800da32:	f7ff bbee 	b.w	800d212 <__ieee754_pow+0x162>
 800da36:	4b2f      	ldr	r3, [pc, #188]	; (800daf4 <__ieee754_pow+0xa44>)
 800da38:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800da3c:	429e      	cmp	r6, r3
 800da3e:	f77f af0d 	ble.w	800d85c <__ieee754_pow+0x7ac>
 800da42:	4b2d      	ldr	r3, [pc, #180]	; (800daf8 <__ieee754_pow+0xa48>)
 800da44:	440b      	add	r3, r1
 800da46:	4303      	orrs	r3, r0
 800da48:	d009      	beq.n	800da5e <__ieee754_pow+0x9ae>
 800da4a:	ec51 0b18 	vmov	r0, r1, d8
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	f7f3 f84b 	bl	8000aec <__aeabi_dcmplt>
 800da56:	3800      	subs	r0, #0
 800da58:	bf18      	it	ne
 800da5a:	2001      	movne	r0, #1
 800da5c:	e448      	b.n	800d2f0 <__ieee754_pow+0x240>
 800da5e:	4622      	mov	r2, r4
 800da60:	462b      	mov	r3, r5
 800da62:	f7f2 fc19 	bl	8000298 <__aeabi_dsub>
 800da66:	4642      	mov	r2, r8
 800da68:	464b      	mov	r3, r9
 800da6a:	f7f3 f853 	bl	8000b14 <__aeabi_dcmpge>
 800da6e:	2800      	cmp	r0, #0
 800da70:	f43f aef4 	beq.w	800d85c <__ieee754_pow+0x7ac>
 800da74:	e7e9      	b.n	800da4a <__ieee754_pow+0x99a>
 800da76:	f04f 0a00 	mov.w	sl, #0
 800da7a:	e71a      	b.n	800d8b2 <__ieee754_pow+0x802>
 800da7c:	ec51 0b10 	vmov	r0, r1, d0
 800da80:	4619      	mov	r1, r3
 800da82:	e7d4      	b.n	800da2e <__ieee754_pow+0x97e>
 800da84:	491a      	ldr	r1, [pc, #104]	; (800daf0 <__ieee754_pow+0xa40>)
 800da86:	2000      	movs	r0, #0
 800da88:	f7ff bb31 	b.w	800d0ee <__ieee754_pow+0x3e>
 800da8c:	2000      	movs	r0, #0
 800da8e:	2100      	movs	r1, #0
 800da90:	f7ff bb2d 	b.w	800d0ee <__ieee754_pow+0x3e>
 800da94:	4630      	mov	r0, r6
 800da96:	4639      	mov	r1, r7
 800da98:	f7ff bb29 	b.w	800d0ee <__ieee754_pow+0x3e>
 800da9c:	9204      	str	r2, [sp, #16]
 800da9e:	f7ff bb7b 	b.w	800d198 <__ieee754_pow+0xe8>
 800daa2:	2300      	movs	r3, #0
 800daa4:	f7ff bb65 	b.w	800d172 <__ieee754_pow+0xc2>
 800daa8:	00000000 	.word	0x00000000
 800daac:	3fe62e43 	.word	0x3fe62e43
 800dab0:	fefa39ef 	.word	0xfefa39ef
 800dab4:	3fe62e42 	.word	0x3fe62e42
 800dab8:	0ca86c39 	.word	0x0ca86c39
 800dabc:	be205c61 	.word	0xbe205c61
 800dac0:	72bea4d0 	.word	0x72bea4d0
 800dac4:	3e663769 	.word	0x3e663769
 800dac8:	c5d26bf1 	.word	0xc5d26bf1
 800dacc:	3ebbbd41 	.word	0x3ebbbd41
 800dad0:	af25de2c 	.word	0xaf25de2c
 800dad4:	3f11566a 	.word	0x3f11566a
 800dad8:	16bebd93 	.word	0x16bebd93
 800dadc:	3f66c16c 	.word	0x3f66c16c
 800dae0:	5555553e 	.word	0x5555553e
 800dae4:	3fc55555 	.word	0x3fc55555
 800dae8:	3fe00000 	.word	0x3fe00000
 800daec:	fff00000 	.word	0xfff00000
 800daf0:	3ff00000 	.word	0x3ff00000
 800daf4:	4090cbff 	.word	0x4090cbff
 800daf8:	3f6f3400 	.word	0x3f6f3400
 800dafc:	652b82fe 	.word	0x652b82fe
 800db00:	3c971547 	.word	0x3c971547
 800db04:	00000000 	.word	0x00000000

0800db08 <__ieee754_rem_pio2>:
 800db08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	ed2d 8b02 	vpush	{d8}
 800db10:	ec55 4b10 	vmov	r4, r5, d0
 800db14:	4bca      	ldr	r3, [pc, #808]	; (800de40 <__ieee754_rem_pio2+0x338>)
 800db16:	b08b      	sub	sp, #44	; 0x2c
 800db18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800db1c:	4598      	cmp	r8, r3
 800db1e:	4682      	mov	sl, r0
 800db20:	9502      	str	r5, [sp, #8]
 800db22:	dc08      	bgt.n	800db36 <__ieee754_rem_pio2+0x2e>
 800db24:	2200      	movs	r2, #0
 800db26:	2300      	movs	r3, #0
 800db28:	ed80 0b00 	vstr	d0, [r0]
 800db2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db30:	f04f 0b00 	mov.w	fp, #0
 800db34:	e028      	b.n	800db88 <__ieee754_rem_pio2+0x80>
 800db36:	4bc3      	ldr	r3, [pc, #780]	; (800de44 <__ieee754_rem_pio2+0x33c>)
 800db38:	4598      	cmp	r8, r3
 800db3a:	dc78      	bgt.n	800dc2e <__ieee754_rem_pio2+0x126>
 800db3c:	9b02      	ldr	r3, [sp, #8]
 800db3e:	4ec2      	ldr	r6, [pc, #776]	; (800de48 <__ieee754_rem_pio2+0x340>)
 800db40:	2b00      	cmp	r3, #0
 800db42:	ee10 0a10 	vmov	r0, s0
 800db46:	a3b0      	add	r3, pc, #704	; (adr r3, 800de08 <__ieee754_rem_pio2+0x300>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	4629      	mov	r1, r5
 800db4e:	dd39      	ble.n	800dbc4 <__ieee754_rem_pio2+0xbc>
 800db50:	f7f2 fba2 	bl	8000298 <__aeabi_dsub>
 800db54:	45b0      	cmp	r8, r6
 800db56:	4604      	mov	r4, r0
 800db58:	460d      	mov	r5, r1
 800db5a:	d01b      	beq.n	800db94 <__ieee754_rem_pio2+0x8c>
 800db5c:	a3ac      	add	r3, pc, #688	; (adr r3, 800de10 <__ieee754_rem_pio2+0x308>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fb99 	bl	8000298 <__aeabi_dsub>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	e9ca 2300 	strd	r2, r3, [sl]
 800db6e:	4620      	mov	r0, r4
 800db70:	4629      	mov	r1, r5
 800db72:	f7f2 fb91 	bl	8000298 <__aeabi_dsub>
 800db76:	a3a6      	add	r3, pc, #664	; (adr r3, 800de10 <__ieee754_rem_pio2+0x308>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	f7f2 fb8c 	bl	8000298 <__aeabi_dsub>
 800db80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db84:	f04f 0b01 	mov.w	fp, #1
 800db88:	4658      	mov	r0, fp
 800db8a:	b00b      	add	sp, #44	; 0x2c
 800db8c:	ecbd 8b02 	vpop	{d8}
 800db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	a3a0      	add	r3, pc, #640	; (adr r3, 800de18 <__ieee754_rem_pio2+0x310>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	f7f2 fb7d 	bl	8000298 <__aeabi_dsub>
 800db9e:	a3a0      	add	r3, pc, #640	; (adr r3, 800de20 <__ieee754_rem_pio2+0x318>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	4604      	mov	r4, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	f7f2 fb76 	bl	8000298 <__aeabi_dsub>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	e9ca 2300 	strd	r2, r3, [sl]
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 fb6e 	bl	8000298 <__aeabi_dsub>
 800dbbc:	a398      	add	r3, pc, #608	; (adr r3, 800de20 <__ieee754_rem_pio2+0x318>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	e7db      	b.n	800db7c <__ieee754_rem_pio2+0x74>
 800dbc4:	f7f2 fb6a 	bl	800029c <__adddf3>
 800dbc8:	45b0      	cmp	r8, r6
 800dbca:	4604      	mov	r4, r0
 800dbcc:	460d      	mov	r5, r1
 800dbce:	d016      	beq.n	800dbfe <__ieee754_rem_pio2+0xf6>
 800dbd0:	a38f      	add	r3, pc, #572	; (adr r3, 800de10 <__ieee754_rem_pio2+0x308>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb61 	bl	800029c <__adddf3>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	e9ca 2300 	strd	r2, r3, [sl]
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7f2 fb57 	bl	8000298 <__aeabi_dsub>
 800dbea:	a389      	add	r3, pc, #548	; (adr r3, 800de10 <__ieee754_rem_pio2+0x308>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	f7f2 fb54 	bl	800029c <__adddf3>
 800dbf4:	f04f 3bff 	mov.w	fp, #4294967295
 800dbf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbfc:	e7c4      	b.n	800db88 <__ieee754_rem_pio2+0x80>
 800dbfe:	a386      	add	r3, pc, #536	; (adr r3, 800de18 <__ieee754_rem_pio2+0x310>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f7f2 fb4a 	bl	800029c <__adddf3>
 800dc08:	a385      	add	r3, pc, #532	; (adr r3, 800de20 <__ieee754_rem_pio2+0x318>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	4604      	mov	r4, r0
 800dc10:	460d      	mov	r5, r1
 800dc12:	f7f2 fb43 	bl	800029c <__adddf3>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	e9ca 2300 	strd	r2, r3, [sl]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4629      	mov	r1, r5
 800dc22:	f7f2 fb39 	bl	8000298 <__aeabi_dsub>
 800dc26:	a37e      	add	r3, pc, #504	; (adr r3, 800de20 <__ieee754_rem_pio2+0x318>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	e7e0      	b.n	800dbf0 <__ieee754_rem_pio2+0xe8>
 800dc2e:	4b87      	ldr	r3, [pc, #540]	; (800de4c <__ieee754_rem_pio2+0x344>)
 800dc30:	4598      	cmp	r8, r3
 800dc32:	f300 80d8 	bgt.w	800dde6 <__ieee754_rem_pio2+0x2de>
 800dc36:	f000 f96d 	bl	800df14 <fabs>
 800dc3a:	ec55 4b10 	vmov	r4, r5, d0
 800dc3e:	ee10 0a10 	vmov	r0, s0
 800dc42:	a379      	add	r3, pc, #484	; (adr r3, 800de28 <__ieee754_rem_pio2+0x320>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	4629      	mov	r1, r5
 800dc4a:	f7f2 fcdd 	bl	8000608 <__aeabi_dmul>
 800dc4e:	4b80      	ldr	r3, [pc, #512]	; (800de50 <__ieee754_rem_pio2+0x348>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	f7f2 fb23 	bl	800029c <__adddf3>
 800dc56:	f7f2 ff87 	bl	8000b68 <__aeabi_d2iz>
 800dc5a:	4683      	mov	fp, r0
 800dc5c:	f7f2 fc6a 	bl	8000534 <__aeabi_i2d>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	ec43 2b18 	vmov	d8, r2, r3
 800dc68:	a367      	add	r3, pc, #412	; (adr r3, 800de08 <__ieee754_rem_pio2+0x300>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f7f2 fccb 	bl	8000608 <__aeabi_dmul>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 fb0d 	bl	8000298 <__aeabi_dsub>
 800dc7e:	a364      	add	r3, pc, #400	; (adr r3, 800de10 <__ieee754_rem_pio2+0x308>)
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	4606      	mov	r6, r0
 800dc86:	460f      	mov	r7, r1
 800dc88:	ec51 0b18 	vmov	r0, r1, d8
 800dc8c:	f7f2 fcbc 	bl	8000608 <__aeabi_dmul>
 800dc90:	f1bb 0f1f 	cmp.w	fp, #31
 800dc94:	4604      	mov	r4, r0
 800dc96:	460d      	mov	r5, r1
 800dc98:	dc0d      	bgt.n	800dcb6 <__ieee754_rem_pio2+0x1ae>
 800dc9a:	4b6e      	ldr	r3, [pc, #440]	; (800de54 <__ieee754_rem_pio2+0x34c>)
 800dc9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dca4:	4543      	cmp	r3, r8
 800dca6:	d006      	beq.n	800dcb6 <__ieee754_rem_pio2+0x1ae>
 800dca8:	4622      	mov	r2, r4
 800dcaa:	462b      	mov	r3, r5
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f7f2 faf2 	bl	8000298 <__aeabi_dsub>
 800dcb4:	e00e      	b.n	800dcd4 <__ieee754_rem_pio2+0x1cc>
 800dcb6:	462b      	mov	r3, r5
 800dcb8:	4622      	mov	r2, r4
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f7f2 faeb 	bl	8000298 <__aeabi_dsub>
 800dcc2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcc6:	9303      	str	r3, [sp, #12]
 800dcc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dccc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dcd0:	2b10      	cmp	r3, #16
 800dcd2:	dc02      	bgt.n	800dcda <__ieee754_rem_pio2+0x1d2>
 800dcd4:	e9ca 0100 	strd	r0, r1, [sl]
 800dcd8:	e039      	b.n	800dd4e <__ieee754_rem_pio2+0x246>
 800dcda:	a34f      	add	r3, pc, #316	; (adr r3, 800de18 <__ieee754_rem_pio2+0x310>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	ec51 0b18 	vmov	r0, r1, d8
 800dce4:	f7f2 fc90 	bl	8000608 <__aeabi_dmul>
 800dce8:	4604      	mov	r4, r0
 800dcea:	460d      	mov	r5, r1
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	4639      	mov	r1, r7
 800dcf4:	f7f2 fad0 	bl	8000298 <__aeabi_dsub>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	4689      	mov	r9, r1
 800dd00:	4630      	mov	r0, r6
 800dd02:	4639      	mov	r1, r7
 800dd04:	f7f2 fac8 	bl	8000298 <__aeabi_dsub>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	f7f2 fac4 	bl	8000298 <__aeabi_dsub>
 800dd10:	a343      	add	r3, pc, #268	; (adr r3, 800de20 <__ieee754_rem_pio2+0x318>)
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	4604      	mov	r4, r0
 800dd18:	460d      	mov	r5, r1
 800dd1a:	ec51 0b18 	vmov	r0, r1, d8
 800dd1e:	f7f2 fc73 	bl	8000608 <__aeabi_dmul>
 800dd22:	4622      	mov	r2, r4
 800dd24:	462b      	mov	r3, r5
 800dd26:	f7f2 fab7 	bl	8000298 <__aeabi_dsub>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4604      	mov	r4, r0
 800dd30:	460d      	mov	r5, r1
 800dd32:	4640      	mov	r0, r8
 800dd34:	4649      	mov	r1, r9
 800dd36:	f7f2 faaf 	bl	8000298 <__aeabi_dsub>
 800dd3a:	9a03      	ldr	r2, [sp, #12]
 800dd3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	2b31      	cmp	r3, #49	; 0x31
 800dd44:	dc24      	bgt.n	800dd90 <__ieee754_rem_pio2+0x288>
 800dd46:	e9ca 0100 	strd	r0, r1, [sl]
 800dd4a:	4646      	mov	r6, r8
 800dd4c:	464f      	mov	r7, r9
 800dd4e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd52:	4630      	mov	r0, r6
 800dd54:	4642      	mov	r2, r8
 800dd56:	464b      	mov	r3, r9
 800dd58:	4639      	mov	r1, r7
 800dd5a:	f7f2 fa9d 	bl	8000298 <__aeabi_dsub>
 800dd5e:	462b      	mov	r3, r5
 800dd60:	4622      	mov	r2, r4
 800dd62:	f7f2 fa99 	bl	8000298 <__aeabi_dsub>
 800dd66:	9b02      	ldr	r3, [sp, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd6e:	f6bf af0b 	bge.w	800db88 <__ieee754_rem_pio2+0x80>
 800dd72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd76:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd7e:	f8ca 8000 	str.w	r8, [sl]
 800dd82:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd86:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd8a:	f1cb 0b00 	rsb	fp, fp, #0
 800dd8e:	e6fb      	b.n	800db88 <__ieee754_rem_pio2+0x80>
 800dd90:	a327      	add	r3, pc, #156	; (adr r3, 800de30 <__ieee754_rem_pio2+0x328>)
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	ec51 0b18 	vmov	r0, r1, d8
 800dd9a:	f7f2 fc35 	bl	8000608 <__aeabi_dmul>
 800dd9e:	4604      	mov	r4, r0
 800dda0:	460d      	mov	r5, r1
 800dda2:	4602      	mov	r2, r0
 800dda4:	460b      	mov	r3, r1
 800dda6:	4640      	mov	r0, r8
 800dda8:	4649      	mov	r1, r9
 800ddaa:	f7f2 fa75 	bl	8000298 <__aeabi_dsub>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460f      	mov	r7, r1
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4649      	mov	r1, r9
 800ddba:	f7f2 fa6d 	bl	8000298 <__aeabi_dsub>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	462b      	mov	r3, r5
 800ddc2:	f7f2 fa69 	bl	8000298 <__aeabi_dsub>
 800ddc6:	a31c      	add	r3, pc, #112	; (adr r3, 800de38 <__ieee754_rem_pio2+0x330>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	4604      	mov	r4, r0
 800ddce:	460d      	mov	r5, r1
 800ddd0:	ec51 0b18 	vmov	r0, r1, d8
 800ddd4:	f7f2 fc18 	bl	8000608 <__aeabi_dmul>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	462b      	mov	r3, r5
 800dddc:	f7f2 fa5c 	bl	8000298 <__aeabi_dsub>
 800dde0:	4604      	mov	r4, r0
 800dde2:	460d      	mov	r5, r1
 800dde4:	e760      	b.n	800dca8 <__ieee754_rem_pio2+0x1a0>
 800dde6:	4b1c      	ldr	r3, [pc, #112]	; (800de58 <__ieee754_rem_pio2+0x350>)
 800dde8:	4598      	cmp	r8, r3
 800ddea:	dd37      	ble.n	800de5c <__ieee754_rem_pio2+0x354>
 800ddec:	ee10 2a10 	vmov	r2, s0
 800ddf0:	462b      	mov	r3, r5
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	f7f2 fa4f 	bl	8000298 <__aeabi_dsub>
 800ddfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ddfe:	e9ca 0100 	strd	r0, r1, [sl]
 800de02:	e695      	b.n	800db30 <__ieee754_rem_pio2+0x28>
 800de04:	f3af 8000 	nop.w
 800de08:	54400000 	.word	0x54400000
 800de0c:	3ff921fb 	.word	0x3ff921fb
 800de10:	1a626331 	.word	0x1a626331
 800de14:	3dd0b461 	.word	0x3dd0b461
 800de18:	1a600000 	.word	0x1a600000
 800de1c:	3dd0b461 	.word	0x3dd0b461
 800de20:	2e037073 	.word	0x2e037073
 800de24:	3ba3198a 	.word	0x3ba3198a
 800de28:	6dc9c883 	.word	0x6dc9c883
 800de2c:	3fe45f30 	.word	0x3fe45f30
 800de30:	2e000000 	.word	0x2e000000
 800de34:	3ba3198a 	.word	0x3ba3198a
 800de38:	252049c1 	.word	0x252049c1
 800de3c:	397b839a 	.word	0x397b839a
 800de40:	3fe921fb 	.word	0x3fe921fb
 800de44:	4002d97b 	.word	0x4002d97b
 800de48:	3ff921fb 	.word	0x3ff921fb
 800de4c:	413921fb 	.word	0x413921fb
 800de50:	3fe00000 	.word	0x3fe00000
 800de54:	0800ef28 	.word	0x0800ef28
 800de58:	7fefffff 	.word	0x7fefffff
 800de5c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800de60:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800de64:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800de68:	4620      	mov	r0, r4
 800de6a:	460d      	mov	r5, r1
 800de6c:	f7f2 fe7c 	bl	8000b68 <__aeabi_d2iz>
 800de70:	f7f2 fb60 	bl	8000534 <__aeabi_i2d>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4620      	mov	r0, r4
 800de7a:	4629      	mov	r1, r5
 800de7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de80:	f7f2 fa0a 	bl	8000298 <__aeabi_dsub>
 800de84:	4b21      	ldr	r3, [pc, #132]	; (800df0c <__ieee754_rem_pio2+0x404>)
 800de86:	2200      	movs	r2, #0
 800de88:	f7f2 fbbe 	bl	8000608 <__aeabi_dmul>
 800de8c:	460d      	mov	r5, r1
 800de8e:	4604      	mov	r4, r0
 800de90:	f7f2 fe6a 	bl	8000b68 <__aeabi_d2iz>
 800de94:	f7f2 fb4e 	bl	8000534 <__aeabi_i2d>
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dea4:	f7f2 f9f8 	bl	8000298 <__aeabi_dsub>
 800dea8:	4b18      	ldr	r3, [pc, #96]	; (800df0c <__ieee754_rem_pio2+0x404>)
 800deaa:	2200      	movs	r2, #0
 800deac:	f7f2 fbac 	bl	8000608 <__aeabi_dmul>
 800deb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800deb4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800deb8:	2703      	movs	r7, #3
 800deba:	2400      	movs	r4, #0
 800debc:	2500      	movs	r5, #0
 800debe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800dec2:	4622      	mov	r2, r4
 800dec4:	462b      	mov	r3, r5
 800dec6:	46b9      	mov	r9, r7
 800dec8:	3f01      	subs	r7, #1
 800deca:	f7f2 fe05 	bl	8000ad8 <__aeabi_dcmpeq>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d1f5      	bne.n	800debe <__ieee754_rem_pio2+0x3b6>
 800ded2:	4b0f      	ldr	r3, [pc, #60]	; (800df10 <__ieee754_rem_pio2+0x408>)
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	2302      	movs	r3, #2
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	4632      	mov	r2, r6
 800dedc:	464b      	mov	r3, r9
 800dede:	4651      	mov	r1, sl
 800dee0:	a804      	add	r0, sp, #16
 800dee2:	f000 f8d1 	bl	800e088 <__kernel_rem_pio2>
 800dee6:	9b02      	ldr	r3, [sp, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	4683      	mov	fp, r0
 800deec:	f6bf ae4c 	bge.w	800db88 <__ieee754_rem_pio2+0x80>
 800def0:	e9da 2100 	ldrd	r2, r1, [sl]
 800def4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800def8:	e9ca 2300 	strd	r2, r3, [sl]
 800defc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800df00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df04:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800df08:	e73f      	b.n	800dd8a <__ieee754_rem_pio2+0x282>
 800df0a:	bf00      	nop
 800df0c:	41700000 	.word	0x41700000
 800df10:	0800efa8 	.word	0x0800efa8

0800df14 <fabs>:
 800df14:	ec51 0b10 	vmov	r0, r1, d0
 800df18:	ee10 2a10 	vmov	r2, s0
 800df1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df20:	ec43 2b10 	vmov	d0, r2, r3
 800df24:	4770      	bx	lr
	...

0800df28 <scalbn>:
 800df28:	b570      	push	{r4, r5, r6, lr}
 800df2a:	ec55 4b10 	vmov	r4, r5, d0
 800df2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800df32:	4606      	mov	r6, r0
 800df34:	462b      	mov	r3, r5
 800df36:	b999      	cbnz	r1, 800df60 <scalbn+0x38>
 800df38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df3c:	4323      	orrs	r3, r4
 800df3e:	d03f      	beq.n	800dfc0 <scalbn+0x98>
 800df40:	4b35      	ldr	r3, [pc, #212]	; (800e018 <scalbn+0xf0>)
 800df42:	4629      	mov	r1, r5
 800df44:	ee10 0a10 	vmov	r0, s0
 800df48:	2200      	movs	r2, #0
 800df4a:	f7f2 fb5d 	bl	8000608 <__aeabi_dmul>
 800df4e:	4b33      	ldr	r3, [pc, #204]	; (800e01c <scalbn+0xf4>)
 800df50:	429e      	cmp	r6, r3
 800df52:	4604      	mov	r4, r0
 800df54:	460d      	mov	r5, r1
 800df56:	da10      	bge.n	800df7a <scalbn+0x52>
 800df58:	a327      	add	r3, pc, #156	; (adr r3, 800dff8 <scalbn+0xd0>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	e01f      	b.n	800dfa0 <scalbn+0x78>
 800df60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df64:	4291      	cmp	r1, r2
 800df66:	d10c      	bne.n	800df82 <scalbn+0x5a>
 800df68:	ee10 2a10 	vmov	r2, s0
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	f7f2 f994 	bl	800029c <__adddf3>
 800df74:	4604      	mov	r4, r0
 800df76:	460d      	mov	r5, r1
 800df78:	e022      	b.n	800dfc0 <scalbn+0x98>
 800df7a:	460b      	mov	r3, r1
 800df7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800df80:	3936      	subs	r1, #54	; 0x36
 800df82:	f24c 3250 	movw	r2, #50000	; 0xc350
 800df86:	4296      	cmp	r6, r2
 800df88:	dd0d      	ble.n	800dfa6 <scalbn+0x7e>
 800df8a:	2d00      	cmp	r5, #0
 800df8c:	a11c      	add	r1, pc, #112	; (adr r1, 800e000 <scalbn+0xd8>)
 800df8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df92:	da02      	bge.n	800df9a <scalbn+0x72>
 800df94:	a11c      	add	r1, pc, #112	; (adr r1, 800e008 <scalbn+0xe0>)
 800df96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df9a:	a319      	add	r3, pc, #100	; (adr r3, 800e000 <scalbn+0xd8>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 fb32 	bl	8000608 <__aeabi_dmul>
 800dfa4:	e7e6      	b.n	800df74 <scalbn+0x4c>
 800dfa6:	1872      	adds	r2, r6, r1
 800dfa8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfac:	428a      	cmp	r2, r1
 800dfae:	dcec      	bgt.n	800df8a <scalbn+0x62>
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	dd08      	ble.n	800dfc6 <scalbn+0x9e>
 800dfb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dfc0:	ec45 4b10 	vmov	d0, r4, r5
 800dfc4:	bd70      	pop	{r4, r5, r6, pc}
 800dfc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dfca:	da08      	bge.n	800dfde <scalbn+0xb6>
 800dfcc:	2d00      	cmp	r5, #0
 800dfce:	a10a      	add	r1, pc, #40	; (adr r1, 800dff8 <scalbn+0xd0>)
 800dfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd4:	dac0      	bge.n	800df58 <scalbn+0x30>
 800dfd6:	a10e      	add	r1, pc, #56	; (adr r1, 800e010 <scalbn+0xe8>)
 800dfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfdc:	e7bc      	b.n	800df58 <scalbn+0x30>
 800dfde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfe2:	3236      	adds	r2, #54	; 0x36
 800dfe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfec:	4620      	mov	r0, r4
 800dfee:	4b0c      	ldr	r3, [pc, #48]	; (800e020 <scalbn+0xf8>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	e7d5      	b.n	800dfa0 <scalbn+0x78>
 800dff4:	f3af 8000 	nop.w
 800dff8:	c2f8f359 	.word	0xc2f8f359
 800dffc:	01a56e1f 	.word	0x01a56e1f
 800e000:	8800759c 	.word	0x8800759c
 800e004:	7e37e43c 	.word	0x7e37e43c
 800e008:	8800759c 	.word	0x8800759c
 800e00c:	fe37e43c 	.word	0xfe37e43c
 800e010:	c2f8f359 	.word	0xc2f8f359
 800e014:	81a56e1f 	.word	0x81a56e1f
 800e018:	43500000 	.word	0x43500000
 800e01c:	ffff3cb0 	.word	0xffff3cb0
 800e020:	3c900000 	.word	0x3c900000

0800e024 <with_errno>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	4616      	mov	r6, r2
 800e02c:	f7fc f81c 	bl	800a068 <__errno>
 800e030:	4629      	mov	r1, r5
 800e032:	6006      	str	r6, [r0, #0]
 800e034:	4620      	mov	r0, r4
 800e036:	bd70      	pop	{r4, r5, r6, pc}

0800e038 <xflow>:
 800e038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e03a:	4614      	mov	r4, r2
 800e03c:	461d      	mov	r5, r3
 800e03e:	b108      	cbz	r0, 800e044 <xflow+0xc>
 800e040:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e044:	e9cd 2300 	strd	r2, r3, [sp]
 800e048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 fada 	bl	8000608 <__aeabi_dmul>
 800e054:	2222      	movs	r2, #34	; 0x22
 800e056:	b003      	add	sp, #12
 800e058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e05c:	f7ff bfe2 	b.w	800e024 <with_errno>

0800e060 <__math_uflow>:
 800e060:	b508      	push	{r3, lr}
 800e062:	2200      	movs	r2, #0
 800e064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e068:	f7ff ffe6 	bl	800e038 <xflow>
 800e06c:	ec41 0b10 	vmov	d0, r0, r1
 800e070:	bd08      	pop	{r3, pc}

0800e072 <__math_oflow>:
 800e072:	b508      	push	{r3, lr}
 800e074:	2200      	movs	r2, #0
 800e076:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e07a:	f7ff ffdd 	bl	800e038 <xflow>
 800e07e:	ec41 0b10 	vmov	d0, r0, r1
 800e082:	bd08      	pop	{r3, pc}
 800e084:	0000      	movs	r0, r0
	...

0800e088 <__kernel_rem_pio2>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	ed2d 8b02 	vpush	{d8}
 800e090:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e094:	f112 0f14 	cmn.w	r2, #20
 800e098:	9306      	str	r3, [sp, #24]
 800e09a:	9104      	str	r1, [sp, #16]
 800e09c:	4bc2      	ldr	r3, [pc, #776]	; (800e3a8 <__kernel_rem_pio2+0x320>)
 800e09e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e0a0:	9009      	str	r0, [sp, #36]	; 0x24
 800e0a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	9b06      	ldr	r3, [sp, #24]
 800e0aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0ae:	bfa8      	it	ge
 800e0b0:	1ed4      	subge	r4, r2, #3
 800e0b2:	9305      	str	r3, [sp, #20]
 800e0b4:	bfb2      	itee	lt
 800e0b6:	2400      	movlt	r4, #0
 800e0b8:	2318      	movge	r3, #24
 800e0ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800e0be:	f06f 0317 	mvn.w	r3, #23
 800e0c2:	fb04 3303 	mla	r3, r4, r3, r3
 800e0c6:	eb03 0a02 	add.w	sl, r3, r2
 800e0ca:	9b00      	ldr	r3, [sp, #0]
 800e0cc:	9a05      	ldr	r2, [sp, #20]
 800e0ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e398 <__kernel_rem_pio2+0x310>
 800e0d2:	eb03 0802 	add.w	r8, r3, r2
 800e0d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e0d8:	1aa7      	subs	r7, r4, r2
 800e0da:	ae20      	add	r6, sp, #128	; 0x80
 800e0dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0e0:	2500      	movs	r5, #0
 800e0e2:	4545      	cmp	r5, r8
 800e0e4:	dd13      	ble.n	800e10e <__kernel_rem_pio2+0x86>
 800e0e6:	9b06      	ldr	r3, [sp, #24]
 800e0e8:	aa20      	add	r2, sp, #128	; 0x80
 800e0ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e0ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e0f2:	f04f 0800 	mov.w	r8, #0
 800e0f6:	9b00      	ldr	r3, [sp, #0]
 800e0f8:	4598      	cmp	r8, r3
 800e0fa:	dc31      	bgt.n	800e160 <__kernel_rem_pio2+0xd8>
 800e0fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e398 <__kernel_rem_pio2+0x310>
 800e100:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e104:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e108:	462f      	mov	r7, r5
 800e10a:	2600      	movs	r6, #0
 800e10c:	e01b      	b.n	800e146 <__kernel_rem_pio2+0xbe>
 800e10e:	42ef      	cmn	r7, r5
 800e110:	d407      	bmi.n	800e122 <__kernel_rem_pio2+0x9a>
 800e112:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e116:	f7f2 fa0d 	bl	8000534 <__aeabi_i2d>
 800e11a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e11e:	3501      	adds	r5, #1
 800e120:	e7df      	b.n	800e0e2 <__kernel_rem_pio2+0x5a>
 800e122:	ec51 0b18 	vmov	r0, r1, d8
 800e126:	e7f8      	b.n	800e11a <__kernel_rem_pio2+0x92>
 800e128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e12c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e130:	f7f2 fa6a 	bl	8000608 <__aeabi_dmul>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e13c:	f7f2 f8ae 	bl	800029c <__adddf3>
 800e140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e144:	3601      	adds	r6, #1
 800e146:	9b05      	ldr	r3, [sp, #20]
 800e148:	429e      	cmp	r6, r3
 800e14a:	f1a7 0708 	sub.w	r7, r7, #8
 800e14e:	ddeb      	ble.n	800e128 <__kernel_rem_pio2+0xa0>
 800e150:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e154:	f108 0801 	add.w	r8, r8, #1
 800e158:	ecab 7b02 	vstmia	fp!, {d7}
 800e15c:	3508      	adds	r5, #8
 800e15e:	e7ca      	b.n	800e0f6 <__kernel_rem_pio2+0x6e>
 800e160:	9b00      	ldr	r3, [sp, #0]
 800e162:	aa0c      	add	r2, sp, #48	; 0x30
 800e164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e168:	930b      	str	r3, [sp, #44]	; 0x2c
 800e16a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e16c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e170:	9c00      	ldr	r4, [sp, #0]
 800e172:	930a      	str	r3, [sp, #40]	; 0x28
 800e174:	00e3      	lsls	r3, r4, #3
 800e176:	9308      	str	r3, [sp, #32]
 800e178:	ab98      	add	r3, sp, #608	; 0x260
 800e17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e17e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e182:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e186:	ab70      	add	r3, sp, #448	; 0x1c0
 800e188:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e18c:	46c3      	mov	fp, r8
 800e18e:	46a1      	mov	r9, r4
 800e190:	f1b9 0f00 	cmp.w	r9, #0
 800e194:	f1a5 0508 	sub.w	r5, r5, #8
 800e198:	dc77      	bgt.n	800e28a <__kernel_rem_pio2+0x202>
 800e19a:	ec47 6b10 	vmov	d0, r6, r7
 800e19e:	4650      	mov	r0, sl
 800e1a0:	f7ff fec2 	bl	800df28 <scalbn>
 800e1a4:	ec57 6b10 	vmov	r6, r7, d0
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e1ae:	ee10 0a10 	vmov	r0, s0
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	f7f2 fa28 	bl	8000608 <__aeabi_dmul>
 800e1b8:	ec41 0b10 	vmov	d0, r0, r1
 800e1bc:	f000 fab4 	bl	800e728 <floor>
 800e1c0:	4b7a      	ldr	r3, [pc, #488]	; (800e3ac <__kernel_rem_pio2+0x324>)
 800e1c2:	ec51 0b10 	vmov	r0, r1, d0
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f7f2 fa1e 	bl	8000608 <__aeabi_dmul>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f7f2 f860 	bl	8000298 <__aeabi_dsub>
 800e1d8:	460f      	mov	r7, r1
 800e1da:	4606      	mov	r6, r0
 800e1dc:	f7f2 fcc4 	bl	8000b68 <__aeabi_d2iz>
 800e1e0:	9002      	str	r0, [sp, #8]
 800e1e2:	f7f2 f9a7 	bl	8000534 <__aeabi_i2d>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	f7f2 f853 	bl	8000298 <__aeabi_dsub>
 800e1f2:	f1ba 0f00 	cmp.w	sl, #0
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	460f      	mov	r7, r1
 800e1fa:	dd6d      	ble.n	800e2d8 <__kernel_rem_pio2+0x250>
 800e1fc:	1e61      	subs	r1, r4, #1
 800e1fe:	ab0c      	add	r3, sp, #48	; 0x30
 800e200:	9d02      	ldr	r5, [sp, #8]
 800e202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e206:	f1ca 0018 	rsb	r0, sl, #24
 800e20a:	fa43 f200 	asr.w	r2, r3, r0
 800e20e:	4415      	add	r5, r2
 800e210:	4082      	lsls	r2, r0
 800e212:	1a9b      	subs	r3, r3, r2
 800e214:	aa0c      	add	r2, sp, #48	; 0x30
 800e216:	9502      	str	r5, [sp, #8]
 800e218:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e21c:	f1ca 0217 	rsb	r2, sl, #23
 800e220:	fa43 fb02 	asr.w	fp, r3, r2
 800e224:	f1bb 0f00 	cmp.w	fp, #0
 800e228:	dd65      	ble.n	800e2f6 <__kernel_rem_pio2+0x26e>
 800e22a:	9b02      	ldr	r3, [sp, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	3301      	adds	r3, #1
 800e230:	9302      	str	r3, [sp, #8]
 800e232:	4615      	mov	r5, r2
 800e234:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e238:	4294      	cmp	r4, r2
 800e23a:	f300 809f 	bgt.w	800e37c <__kernel_rem_pio2+0x2f4>
 800e23e:	f1ba 0f00 	cmp.w	sl, #0
 800e242:	dd07      	ble.n	800e254 <__kernel_rem_pio2+0x1cc>
 800e244:	f1ba 0f01 	cmp.w	sl, #1
 800e248:	f000 80c1 	beq.w	800e3ce <__kernel_rem_pio2+0x346>
 800e24c:	f1ba 0f02 	cmp.w	sl, #2
 800e250:	f000 80c7 	beq.w	800e3e2 <__kernel_rem_pio2+0x35a>
 800e254:	f1bb 0f02 	cmp.w	fp, #2
 800e258:	d14d      	bne.n	800e2f6 <__kernel_rem_pio2+0x26e>
 800e25a:	4632      	mov	r2, r6
 800e25c:	463b      	mov	r3, r7
 800e25e:	4954      	ldr	r1, [pc, #336]	; (800e3b0 <__kernel_rem_pio2+0x328>)
 800e260:	2000      	movs	r0, #0
 800e262:	f7f2 f819 	bl	8000298 <__aeabi_dsub>
 800e266:	4606      	mov	r6, r0
 800e268:	460f      	mov	r7, r1
 800e26a:	2d00      	cmp	r5, #0
 800e26c:	d043      	beq.n	800e2f6 <__kernel_rem_pio2+0x26e>
 800e26e:	4650      	mov	r0, sl
 800e270:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e3a0 <__kernel_rem_pio2+0x318>
 800e274:	f7ff fe58 	bl	800df28 <scalbn>
 800e278:	4630      	mov	r0, r6
 800e27a:	4639      	mov	r1, r7
 800e27c:	ec53 2b10 	vmov	r2, r3, d0
 800e280:	f7f2 f80a 	bl	8000298 <__aeabi_dsub>
 800e284:	4606      	mov	r6, r0
 800e286:	460f      	mov	r7, r1
 800e288:	e035      	b.n	800e2f6 <__kernel_rem_pio2+0x26e>
 800e28a:	4b4a      	ldr	r3, [pc, #296]	; (800e3b4 <__kernel_rem_pio2+0x32c>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	4630      	mov	r0, r6
 800e290:	4639      	mov	r1, r7
 800e292:	f7f2 f9b9 	bl	8000608 <__aeabi_dmul>
 800e296:	f7f2 fc67 	bl	8000b68 <__aeabi_d2iz>
 800e29a:	f7f2 f94b 	bl	8000534 <__aeabi_i2d>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	ec43 2b18 	vmov	d8, r2, r3
 800e2a6:	4b44      	ldr	r3, [pc, #272]	; (800e3b8 <__kernel_rem_pio2+0x330>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f7f2 f9ad 	bl	8000608 <__aeabi_dmul>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	f7f1 ffef 	bl	8000298 <__aeabi_dsub>
 800e2ba:	f7f2 fc55 	bl	8000b68 <__aeabi_d2iz>
 800e2be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e2c2:	f84b 0b04 	str.w	r0, [fp], #4
 800e2c6:	ec51 0b18 	vmov	r0, r1, d8
 800e2ca:	f7f1 ffe7 	bl	800029c <__adddf3>
 800e2ce:	f109 39ff 	add.w	r9, r9, #4294967295
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460f      	mov	r7, r1
 800e2d6:	e75b      	b.n	800e190 <__kernel_rem_pio2+0x108>
 800e2d8:	d106      	bne.n	800e2e8 <__kernel_rem_pio2+0x260>
 800e2da:	1e63      	subs	r3, r4, #1
 800e2dc:	aa0c      	add	r2, sp, #48	; 0x30
 800e2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e2e6:	e79d      	b.n	800e224 <__kernel_rem_pio2+0x19c>
 800e2e8:	4b34      	ldr	r3, [pc, #208]	; (800e3bc <__kernel_rem_pio2+0x334>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f7f2 fc12 	bl	8000b14 <__aeabi_dcmpge>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d140      	bne.n	800e376 <__kernel_rem_pio2+0x2ee>
 800e2f4:	4683      	mov	fp, r0
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	f7f2 fbeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e302:	2800      	cmp	r0, #0
 800e304:	f000 80c1 	beq.w	800e48a <__kernel_rem_pio2+0x402>
 800e308:	1e65      	subs	r5, r4, #1
 800e30a:	462b      	mov	r3, r5
 800e30c:	2200      	movs	r2, #0
 800e30e:	9900      	ldr	r1, [sp, #0]
 800e310:	428b      	cmp	r3, r1
 800e312:	da6d      	bge.n	800e3f0 <__kernel_rem_pio2+0x368>
 800e314:	2a00      	cmp	r2, #0
 800e316:	f000 808a 	beq.w	800e42e <__kernel_rem_pio2+0x3a6>
 800e31a:	ab0c      	add	r3, sp, #48	; 0x30
 800e31c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e320:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e324:	2b00      	cmp	r3, #0
 800e326:	f000 80ae 	beq.w	800e486 <__kernel_rem_pio2+0x3fe>
 800e32a:	4650      	mov	r0, sl
 800e32c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e3a0 <__kernel_rem_pio2+0x318>
 800e330:	f7ff fdfa 	bl	800df28 <scalbn>
 800e334:	1c6b      	adds	r3, r5, #1
 800e336:	00da      	lsls	r2, r3, #3
 800e338:	9205      	str	r2, [sp, #20]
 800e33a:	ec57 6b10 	vmov	r6, r7, d0
 800e33e:	aa70      	add	r2, sp, #448	; 0x1c0
 800e340:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e3b4 <__kernel_rem_pio2+0x32c>
 800e344:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e348:	462c      	mov	r4, r5
 800e34a:	f04f 0800 	mov.w	r8, #0
 800e34e:	2c00      	cmp	r4, #0
 800e350:	f280 80d4 	bge.w	800e4fc <__kernel_rem_pio2+0x474>
 800e354:	462c      	mov	r4, r5
 800e356:	2c00      	cmp	r4, #0
 800e358:	f2c0 8102 	blt.w	800e560 <__kernel_rem_pio2+0x4d8>
 800e35c:	4b18      	ldr	r3, [pc, #96]	; (800e3c0 <__kernel_rem_pio2+0x338>)
 800e35e:	461e      	mov	r6, r3
 800e360:	ab70      	add	r3, sp, #448	; 0x1c0
 800e362:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e366:	1b2b      	subs	r3, r5, r4
 800e368:	f04f 0900 	mov.w	r9, #0
 800e36c:	f04f 0a00 	mov.w	sl, #0
 800e370:	2700      	movs	r7, #0
 800e372:	9306      	str	r3, [sp, #24]
 800e374:	e0e6      	b.n	800e544 <__kernel_rem_pio2+0x4bc>
 800e376:	f04f 0b02 	mov.w	fp, #2
 800e37a:	e756      	b.n	800e22a <__kernel_rem_pio2+0x1a2>
 800e37c:	f8d8 3000 	ldr.w	r3, [r8]
 800e380:	bb05      	cbnz	r5, 800e3c4 <__kernel_rem_pio2+0x33c>
 800e382:	b123      	cbz	r3, 800e38e <__kernel_rem_pio2+0x306>
 800e384:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e388:	f8c8 3000 	str.w	r3, [r8]
 800e38c:	2301      	movs	r3, #1
 800e38e:	3201      	adds	r2, #1
 800e390:	f108 0804 	add.w	r8, r8, #4
 800e394:	461d      	mov	r5, r3
 800e396:	e74f      	b.n	800e238 <__kernel_rem_pio2+0x1b0>
	...
 800e3a4:	3ff00000 	.word	0x3ff00000
 800e3a8:	0800f0f0 	.word	0x0800f0f0
 800e3ac:	40200000 	.word	0x40200000
 800e3b0:	3ff00000 	.word	0x3ff00000
 800e3b4:	3e700000 	.word	0x3e700000
 800e3b8:	41700000 	.word	0x41700000
 800e3bc:	3fe00000 	.word	0x3fe00000
 800e3c0:	0800f0b0 	.word	0x0800f0b0
 800e3c4:	1acb      	subs	r3, r1, r3
 800e3c6:	f8c8 3000 	str.w	r3, [r8]
 800e3ca:	462b      	mov	r3, r5
 800e3cc:	e7df      	b.n	800e38e <__kernel_rem_pio2+0x306>
 800e3ce:	1e62      	subs	r2, r4, #1
 800e3d0:	ab0c      	add	r3, sp, #48	; 0x30
 800e3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e3da:	a90c      	add	r1, sp, #48	; 0x30
 800e3dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e3e0:	e738      	b.n	800e254 <__kernel_rem_pio2+0x1cc>
 800e3e2:	1e62      	subs	r2, r4, #1
 800e3e4:	ab0c      	add	r3, sp, #48	; 0x30
 800e3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3ee:	e7f4      	b.n	800e3da <__kernel_rem_pio2+0x352>
 800e3f0:	a90c      	add	r1, sp, #48	; 0x30
 800e3f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	e788      	b.n	800e30e <__kernel_rem_pio2+0x286>
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e402:	2900      	cmp	r1, #0
 800e404:	d0fa      	beq.n	800e3fc <__kernel_rem_pio2+0x374>
 800e406:	9a08      	ldr	r2, [sp, #32]
 800e408:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e40c:	446a      	add	r2, sp
 800e40e:	3a98      	subs	r2, #152	; 0x98
 800e410:	9208      	str	r2, [sp, #32]
 800e412:	9a06      	ldr	r2, [sp, #24]
 800e414:	a920      	add	r1, sp, #128	; 0x80
 800e416:	18a2      	adds	r2, r4, r2
 800e418:	18e3      	adds	r3, r4, r3
 800e41a:	f104 0801 	add.w	r8, r4, #1
 800e41e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e422:	9302      	str	r3, [sp, #8]
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	4543      	cmp	r3, r8
 800e428:	da04      	bge.n	800e434 <__kernel_rem_pio2+0x3ac>
 800e42a:	461c      	mov	r4, r3
 800e42c:	e6a2      	b.n	800e174 <__kernel_rem_pio2+0xec>
 800e42e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e430:	2301      	movs	r3, #1
 800e432:	e7e4      	b.n	800e3fe <__kernel_rem_pio2+0x376>
 800e434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e436:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e43a:	f7f2 f87b 	bl	8000534 <__aeabi_i2d>
 800e43e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	46ab      	mov	fp, r5
 800e446:	461c      	mov	r4, r3
 800e448:	f04f 0900 	mov.w	r9, #0
 800e44c:	2600      	movs	r6, #0
 800e44e:	2700      	movs	r7, #0
 800e450:	9b05      	ldr	r3, [sp, #20]
 800e452:	4599      	cmp	r9, r3
 800e454:	dd06      	ble.n	800e464 <__kernel_rem_pio2+0x3dc>
 800e456:	9b08      	ldr	r3, [sp, #32]
 800e458:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e45c:	f108 0801 	add.w	r8, r8, #1
 800e460:	9308      	str	r3, [sp, #32]
 800e462:	e7df      	b.n	800e424 <__kernel_rem_pio2+0x39c>
 800e464:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e468:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e46c:	f7f2 f8cc 	bl	8000608 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4630      	mov	r0, r6
 800e476:	4639      	mov	r1, r7
 800e478:	f7f1 ff10 	bl	800029c <__adddf3>
 800e47c:	f109 0901 	add.w	r9, r9, #1
 800e480:	4606      	mov	r6, r0
 800e482:	460f      	mov	r7, r1
 800e484:	e7e4      	b.n	800e450 <__kernel_rem_pio2+0x3c8>
 800e486:	3d01      	subs	r5, #1
 800e488:	e747      	b.n	800e31a <__kernel_rem_pio2+0x292>
 800e48a:	ec47 6b10 	vmov	d0, r6, r7
 800e48e:	f1ca 0000 	rsb	r0, sl, #0
 800e492:	f7ff fd49 	bl	800df28 <scalbn>
 800e496:	ec57 6b10 	vmov	r6, r7, d0
 800e49a:	4ba0      	ldr	r3, [pc, #640]	; (800e71c <__kernel_rem_pio2+0x694>)
 800e49c:	ee10 0a10 	vmov	r0, s0
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f2 fb36 	bl	8000b14 <__aeabi_dcmpge>
 800e4a8:	b1f8      	cbz	r0, 800e4ea <__kernel_rem_pio2+0x462>
 800e4aa:	4b9d      	ldr	r3, [pc, #628]	; (800e720 <__kernel_rem_pio2+0x698>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	f7f2 f8a9 	bl	8000608 <__aeabi_dmul>
 800e4b6:	f7f2 fb57 	bl	8000b68 <__aeabi_d2iz>
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	f7f2 f83a 	bl	8000534 <__aeabi_i2d>
 800e4c0:	4b96      	ldr	r3, [pc, #600]	; (800e71c <__kernel_rem_pio2+0x694>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f7f2 f8a0 	bl	8000608 <__aeabi_dmul>
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f7f1 fee2 	bl	8000298 <__aeabi_dsub>
 800e4d4:	f7f2 fb48 	bl	8000b68 <__aeabi_d2iz>
 800e4d8:	1c65      	adds	r5, r4, #1
 800e4da:	ab0c      	add	r3, sp, #48	; 0x30
 800e4dc:	f10a 0a18 	add.w	sl, sl, #24
 800e4e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e4e8:	e71f      	b.n	800e32a <__kernel_rem_pio2+0x2a2>
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	f7f2 fb3b 	bl	8000b68 <__aeabi_d2iz>
 800e4f2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4f4:	4625      	mov	r5, r4
 800e4f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4fa:	e716      	b.n	800e32a <__kernel_rem_pio2+0x2a2>
 800e4fc:	ab0c      	add	r3, sp, #48	; 0x30
 800e4fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e502:	f7f2 f817 	bl	8000534 <__aeabi_i2d>
 800e506:	4632      	mov	r2, r6
 800e508:	463b      	mov	r3, r7
 800e50a:	f7f2 f87d 	bl	8000608 <__aeabi_dmul>
 800e50e:	4642      	mov	r2, r8
 800e510:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e514:	464b      	mov	r3, r9
 800e516:	4630      	mov	r0, r6
 800e518:	4639      	mov	r1, r7
 800e51a:	f7f2 f875 	bl	8000608 <__aeabi_dmul>
 800e51e:	3c01      	subs	r4, #1
 800e520:	4606      	mov	r6, r0
 800e522:	460f      	mov	r7, r1
 800e524:	e713      	b.n	800e34e <__kernel_rem_pio2+0x2c6>
 800e526:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e52a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e52e:	f7f2 f86b 	bl	8000608 <__aeabi_dmul>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4648      	mov	r0, r9
 800e538:	4651      	mov	r1, sl
 800e53a:	f7f1 feaf 	bl	800029c <__adddf3>
 800e53e:	3701      	adds	r7, #1
 800e540:	4681      	mov	r9, r0
 800e542:	468a      	mov	sl, r1
 800e544:	9b00      	ldr	r3, [sp, #0]
 800e546:	429f      	cmp	r7, r3
 800e548:	dc02      	bgt.n	800e550 <__kernel_rem_pio2+0x4c8>
 800e54a:	9b06      	ldr	r3, [sp, #24]
 800e54c:	429f      	cmp	r7, r3
 800e54e:	ddea      	ble.n	800e526 <__kernel_rem_pio2+0x49e>
 800e550:	9a06      	ldr	r2, [sp, #24]
 800e552:	ab48      	add	r3, sp, #288	; 0x120
 800e554:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e558:	e9c6 9a00 	strd	r9, sl, [r6]
 800e55c:	3c01      	subs	r4, #1
 800e55e:	e6fa      	b.n	800e356 <__kernel_rem_pio2+0x2ce>
 800e560:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e562:	2b02      	cmp	r3, #2
 800e564:	dc0b      	bgt.n	800e57e <__kernel_rem_pio2+0x4f6>
 800e566:	2b00      	cmp	r3, #0
 800e568:	dc39      	bgt.n	800e5de <__kernel_rem_pio2+0x556>
 800e56a:	d05d      	beq.n	800e628 <__kernel_rem_pio2+0x5a0>
 800e56c:	9b02      	ldr	r3, [sp, #8]
 800e56e:	f003 0007 	and.w	r0, r3, #7
 800e572:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e576:	ecbd 8b02 	vpop	{d8}
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e580:	2b03      	cmp	r3, #3
 800e582:	d1f3      	bne.n	800e56c <__kernel_rem_pio2+0x4e4>
 800e584:	9b05      	ldr	r3, [sp, #20]
 800e586:	9500      	str	r5, [sp, #0]
 800e588:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e58c:	eb0d 0403 	add.w	r4, sp, r3
 800e590:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e594:	46a2      	mov	sl, r4
 800e596:	9b00      	ldr	r3, [sp, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f1aa 0a08 	sub.w	sl, sl, #8
 800e59e:	dc69      	bgt.n	800e674 <__kernel_rem_pio2+0x5ec>
 800e5a0:	46aa      	mov	sl, r5
 800e5a2:	f1ba 0f01 	cmp.w	sl, #1
 800e5a6:	f1a4 0408 	sub.w	r4, r4, #8
 800e5aa:	f300 8083 	bgt.w	800e6b4 <__kernel_rem_pio2+0x62c>
 800e5ae:	9c05      	ldr	r4, [sp, #20]
 800e5b0:	ab48      	add	r3, sp, #288	; 0x120
 800e5b2:	441c      	add	r4, r3
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	2d01      	cmp	r5, #1
 800e5ba:	f300 809a 	bgt.w	800e6f2 <__kernel_rem_pio2+0x66a>
 800e5be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e5c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e5c6:	f1bb 0f00 	cmp.w	fp, #0
 800e5ca:	f040 8098 	bne.w	800e6fe <__kernel_rem_pio2+0x676>
 800e5ce:	9b04      	ldr	r3, [sp, #16]
 800e5d0:	e9c3 7800 	strd	r7, r8, [r3]
 800e5d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e5d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e5dc:	e7c6      	b.n	800e56c <__kernel_rem_pio2+0x4e4>
 800e5de:	9e05      	ldr	r6, [sp, #20]
 800e5e0:	ab48      	add	r3, sp, #288	; 0x120
 800e5e2:	441e      	add	r6, r3
 800e5e4:	462c      	mov	r4, r5
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	2c00      	cmp	r4, #0
 800e5ec:	da33      	bge.n	800e656 <__kernel_rem_pio2+0x5ce>
 800e5ee:	f1bb 0f00 	cmp.w	fp, #0
 800e5f2:	d036      	beq.n	800e662 <__kernel_rem_pio2+0x5da>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5fa:	9c04      	ldr	r4, [sp, #16]
 800e5fc:	e9c4 2300 	strd	r2, r3, [r4]
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e608:	f7f1 fe46 	bl	8000298 <__aeabi_dsub>
 800e60c:	ae4a      	add	r6, sp, #296	; 0x128
 800e60e:	2401      	movs	r4, #1
 800e610:	42a5      	cmp	r5, r4
 800e612:	da29      	bge.n	800e668 <__kernel_rem_pio2+0x5e0>
 800e614:	f1bb 0f00 	cmp.w	fp, #0
 800e618:	d002      	beq.n	800e620 <__kernel_rem_pio2+0x598>
 800e61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e61e:	4619      	mov	r1, r3
 800e620:	9b04      	ldr	r3, [sp, #16]
 800e622:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e626:	e7a1      	b.n	800e56c <__kernel_rem_pio2+0x4e4>
 800e628:	9c05      	ldr	r4, [sp, #20]
 800e62a:	ab48      	add	r3, sp, #288	; 0x120
 800e62c:	441c      	add	r4, r3
 800e62e:	2000      	movs	r0, #0
 800e630:	2100      	movs	r1, #0
 800e632:	2d00      	cmp	r5, #0
 800e634:	da09      	bge.n	800e64a <__kernel_rem_pio2+0x5c2>
 800e636:	f1bb 0f00 	cmp.w	fp, #0
 800e63a:	d002      	beq.n	800e642 <__kernel_rem_pio2+0x5ba>
 800e63c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e640:	4619      	mov	r1, r3
 800e642:	9b04      	ldr	r3, [sp, #16]
 800e644:	e9c3 0100 	strd	r0, r1, [r3]
 800e648:	e790      	b.n	800e56c <__kernel_rem_pio2+0x4e4>
 800e64a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e64e:	f7f1 fe25 	bl	800029c <__adddf3>
 800e652:	3d01      	subs	r5, #1
 800e654:	e7ed      	b.n	800e632 <__kernel_rem_pio2+0x5aa>
 800e656:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e65a:	f7f1 fe1f 	bl	800029c <__adddf3>
 800e65e:	3c01      	subs	r4, #1
 800e660:	e7c3      	b.n	800e5ea <__kernel_rem_pio2+0x562>
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	e7c8      	b.n	800e5fa <__kernel_rem_pio2+0x572>
 800e668:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e66c:	f7f1 fe16 	bl	800029c <__adddf3>
 800e670:	3401      	adds	r4, #1
 800e672:	e7cd      	b.n	800e610 <__kernel_rem_pio2+0x588>
 800e674:	e9da 8900 	ldrd	r8, r9, [sl]
 800e678:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e67c:	9b00      	ldr	r3, [sp, #0]
 800e67e:	3b01      	subs	r3, #1
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4632      	mov	r2, r6
 800e684:	463b      	mov	r3, r7
 800e686:	4640      	mov	r0, r8
 800e688:	4649      	mov	r1, r9
 800e68a:	f7f1 fe07 	bl	800029c <__adddf3>
 800e68e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4640      	mov	r0, r8
 800e698:	4649      	mov	r1, r9
 800e69a:	f7f1 fdfd 	bl	8000298 <__aeabi_dsub>
 800e69e:	4632      	mov	r2, r6
 800e6a0:	463b      	mov	r3, r7
 800e6a2:	f7f1 fdfb 	bl	800029c <__adddf3>
 800e6a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e6aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6ae:	ed8a 7b00 	vstr	d7, [sl]
 800e6b2:	e770      	b.n	800e596 <__kernel_rem_pio2+0x50e>
 800e6b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e6b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e6bc:	4640      	mov	r0, r8
 800e6be:	4632      	mov	r2, r6
 800e6c0:	463b      	mov	r3, r7
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	f7f1 fdea 	bl	800029c <__adddf3>
 800e6c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	f7f1 fde0 	bl	8000298 <__aeabi_dsub>
 800e6d8:	4632      	mov	r2, r6
 800e6da:	463b      	mov	r3, r7
 800e6dc:	f7f1 fdde 	bl	800029c <__adddf3>
 800e6e0:	ed9d 7b00 	vldr	d7, [sp]
 800e6e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e6e8:	ed84 7b00 	vstr	d7, [r4]
 800e6ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6f0:	e757      	b.n	800e5a2 <__kernel_rem_pio2+0x51a>
 800e6f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6f6:	f7f1 fdd1 	bl	800029c <__adddf3>
 800e6fa:	3d01      	subs	r5, #1
 800e6fc:	e75c      	b.n	800e5b8 <__kernel_rem_pio2+0x530>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	9a04      	ldr	r2, [sp, #16]
 800e702:	601f      	str	r7, [r3, #0]
 800e704:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e708:	605c      	str	r4, [r3, #4]
 800e70a:	609d      	str	r5, [r3, #8]
 800e70c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e710:	60d3      	str	r3, [r2, #12]
 800e712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e716:	6110      	str	r0, [r2, #16]
 800e718:	6153      	str	r3, [r2, #20]
 800e71a:	e727      	b.n	800e56c <__kernel_rem_pio2+0x4e4>
 800e71c:	41700000 	.word	0x41700000
 800e720:	3e700000 	.word	0x3e700000
 800e724:	00000000 	.word	0x00000000

0800e728 <floor>:
 800e728:	ec51 0b10 	vmov	r0, r1, d0
 800e72c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e734:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e738:	2e13      	cmp	r6, #19
 800e73a:	ee10 5a10 	vmov	r5, s0
 800e73e:	ee10 8a10 	vmov	r8, s0
 800e742:	460c      	mov	r4, r1
 800e744:	dc31      	bgt.n	800e7aa <floor+0x82>
 800e746:	2e00      	cmp	r6, #0
 800e748:	da14      	bge.n	800e774 <floor+0x4c>
 800e74a:	a333      	add	r3, pc, #204	; (adr r3, 800e818 <floor+0xf0>)
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	f7f1 fda4 	bl	800029c <__adddf3>
 800e754:	2200      	movs	r2, #0
 800e756:	2300      	movs	r3, #0
 800e758:	f7f2 f9e6 	bl	8000b28 <__aeabi_dcmpgt>
 800e75c:	b138      	cbz	r0, 800e76e <floor+0x46>
 800e75e:	2c00      	cmp	r4, #0
 800e760:	da53      	bge.n	800e80a <floor+0xe2>
 800e762:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e766:	4325      	orrs	r5, r4
 800e768:	d052      	beq.n	800e810 <floor+0xe8>
 800e76a:	4c2d      	ldr	r4, [pc, #180]	; (800e820 <floor+0xf8>)
 800e76c:	2500      	movs	r5, #0
 800e76e:	4621      	mov	r1, r4
 800e770:	4628      	mov	r0, r5
 800e772:	e024      	b.n	800e7be <floor+0x96>
 800e774:	4f2b      	ldr	r7, [pc, #172]	; (800e824 <floor+0xfc>)
 800e776:	4137      	asrs	r7, r6
 800e778:	ea01 0307 	and.w	r3, r1, r7
 800e77c:	4303      	orrs	r3, r0
 800e77e:	d01e      	beq.n	800e7be <floor+0x96>
 800e780:	a325      	add	r3, pc, #148	; (adr r3, 800e818 <floor+0xf0>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f7f1 fd89 	bl	800029c <__adddf3>
 800e78a:	2200      	movs	r2, #0
 800e78c:	2300      	movs	r3, #0
 800e78e:	f7f2 f9cb 	bl	8000b28 <__aeabi_dcmpgt>
 800e792:	2800      	cmp	r0, #0
 800e794:	d0eb      	beq.n	800e76e <floor+0x46>
 800e796:	2c00      	cmp	r4, #0
 800e798:	bfbe      	ittt	lt
 800e79a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e79e:	4133      	asrlt	r3, r6
 800e7a0:	18e4      	addlt	r4, r4, r3
 800e7a2:	ea24 0407 	bic.w	r4, r4, r7
 800e7a6:	2500      	movs	r5, #0
 800e7a8:	e7e1      	b.n	800e76e <floor+0x46>
 800e7aa:	2e33      	cmp	r6, #51	; 0x33
 800e7ac:	dd0b      	ble.n	800e7c6 <floor+0x9e>
 800e7ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e7b2:	d104      	bne.n	800e7be <floor+0x96>
 800e7b4:	ee10 2a10 	vmov	r2, s0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	f7f1 fd6f 	bl	800029c <__adddf3>
 800e7be:	ec41 0b10 	vmov	d0, r0, r1
 800e7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e7ca:	f04f 37ff 	mov.w	r7, #4294967295
 800e7ce:	40df      	lsrs	r7, r3
 800e7d0:	4238      	tst	r0, r7
 800e7d2:	d0f4      	beq.n	800e7be <floor+0x96>
 800e7d4:	a310      	add	r3, pc, #64	; (adr r3, 800e818 <floor+0xf0>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	f7f1 fd5f 	bl	800029c <__adddf3>
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f7f2 f9a1 	bl	8000b28 <__aeabi_dcmpgt>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d0c1      	beq.n	800e76e <floor+0x46>
 800e7ea:	2c00      	cmp	r4, #0
 800e7ec:	da0a      	bge.n	800e804 <floor+0xdc>
 800e7ee:	2e14      	cmp	r6, #20
 800e7f0:	d101      	bne.n	800e7f6 <floor+0xce>
 800e7f2:	3401      	adds	r4, #1
 800e7f4:	e006      	b.n	800e804 <floor+0xdc>
 800e7f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	40b3      	lsls	r3, r6
 800e7fe:	441d      	add	r5, r3
 800e800:	45a8      	cmp	r8, r5
 800e802:	d8f6      	bhi.n	800e7f2 <floor+0xca>
 800e804:	ea25 0507 	bic.w	r5, r5, r7
 800e808:	e7b1      	b.n	800e76e <floor+0x46>
 800e80a:	2500      	movs	r5, #0
 800e80c:	462c      	mov	r4, r5
 800e80e:	e7ae      	b.n	800e76e <floor+0x46>
 800e810:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e814:	e7ab      	b.n	800e76e <floor+0x46>
 800e816:	bf00      	nop
 800e818:	8800759c 	.word	0x8800759c
 800e81c:	7e37e43c 	.word	0x7e37e43c
 800e820:	bff00000 	.word	0xbff00000
 800e824:	000fffff 	.word	0x000fffff

0800e828 <_init>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	bf00      	nop
 800e82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82e:	bc08      	pop	{r3}
 800e830:	469e      	mov	lr, r3
 800e832:	4770      	bx	lr

0800e834 <_fini>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	bf00      	nop
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr
