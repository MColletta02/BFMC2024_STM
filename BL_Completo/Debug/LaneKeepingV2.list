
LaneKeepingV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800bb08  0800bb08  0001bb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c228  0800c228  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c230  0800c230  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c230  0800c230  0001c230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001e8  0800c41c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  0800c41c  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012717  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002997  00000000  00000000  0003296e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2c  00000000  00000000  00036510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019db9  00000000  00000000  0003733c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016300  00000000  00000000  000510f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f34e  00000000  00000000  000673f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006320  00000000  00000000  00106744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0010ca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800baec 	.word	0x0800baec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800baec 	.word	0x0800baec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <BL_DegreeSec2RPM>:
 */


#include <BL_motor.h>

float BL_DegreeSec2RPM(float speed_degsec){
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001038 <BL_DegreeSec2RPM+0x38>
 8001012:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001016:	eddf 6a09 	vldr	s13, [pc, #36]	; 800103c <BL_DegreeSec2RPM+0x3c>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	42700000 	.word	0x42700000
 800103c:	43b40000 	.word	0x43b40000

08001040 <BL_Voltage2Duty>:

float BL_Voltage2Duty(float u){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/BL_V_MAX;
 800104a:	edd7 7a01 	vldr	s15, [r7, #4]
 800104e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80010c0 <BL_Voltage2Duty+0x80>
 8001052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa7d 	bl	8000558 <__aeabi_f2d>
 800105e:	a316      	add	r3, pc, #88	; (adr r3, 80010b8 <BL_Voltage2Duty+0x78>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbfa 	bl	800085c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fdc2 	bl	8000bf8 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]

	if(duty>100){
 8001078:	edd7 7a03 	vldr	s15, [r7, #12]
 800107c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010c0 <BL_Voltage2Duty+0x80>
 8001080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	dd02      	ble.n	8001090 <BL_Voltage2Duty+0x50>
		duty=100;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <BL_Voltage2Duty+0x84>)
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e009      	b.n	80010a4 <BL_Voltage2Duty+0x64>
	} else if(duty<0){
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d502      	bpl.n	80010a4 <BL_Voltage2Duty+0x64>
		duty = 0;
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ee07 3a90 	vmov	s15, r3
}
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	cccccccd 	.word	0xcccccccd
 80010bc:	4020cccc 	.word	0x4020cccc
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	42c80000 	.word	0x42c80000

080010c8 <BL_Ref2Direction>:

uint8_t BL_Ref2Direction(float y_ref){
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;

	if(y_ref>=0){
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	db02      	blt.n	80010e6 <BL_Ref2Direction+0x1e>
		dir = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <BL_Ref2Direction+0x22>
	} else {
		dir = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <BL_set_PWM_and_dir>:

void BL_set_PWM_and_dir(uint32_t duty){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800113c <BL_set_PWM_and_dir+0x44>
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <BL_set_PWM_and_dir+0x48>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <BL_set_PWM_and_dir+0x48>)
 8001124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001128:	ee17 2a90 	vmov	r2, s15
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	42c80000 	.word	0x42c80000
 8001140:	40014400 	.word	0x40014400

08001144 <init_PID>:
#include "PID.h"
#include <stdio.h>

void init_PID(PID* p, float Tc, float u_max, float u_min){
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001150:	edc7 0a01 	vstr	s1, [r7, #4]
 8001154:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001192:	edc7 0a01 	vstr	s1, [r7, #4]
 8001196:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	609a      	str	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 80011b8:	b480      	push	{r7}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011c4:	edc7 0a01 	vstr	s1, [r7, #4]
	float u;
	float newIterm;
	float e = 0;
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]

	e = r-y;
 80011ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80011d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011da:	edc7 7a08 	vstr	s15, [r7, #32]


	float Pterm = p->Kp*e;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001202:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	edd3 7a06 	vldr	s15, [r3, #24]
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	edd3 6a02 	vldr	s13, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edd3 7a06 	vldr	s15, [r3, #24]
 800122e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123a:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm;
 8001244:	ed97 7a07 	vldr	s14, [r7, #28]
 8001248:	edd7 7a06 	vldr	s15, [r7, #24]
 800124c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001250:	ed97 7a05 	vldr	s14, [r7, #20]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001262:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd03      	ble.n	8001278 <PID_controller+0xc0>
		u = p->u_max;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	e010      	b.n	800129a <PID_controller+0xe2>
	} else if(u < p->u_min){
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	edd3 7a05 	vldr	s15, [r3, #20]
 800127e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d503      	bpl.n	8001294 <PID_controller+0xdc>
		u = p->u_min;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	e002      	b.n	800129a <PID_controller+0xe2>
	} else {
		p->Iterm = newIterm;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	61da      	str	r2, [r3, #28]
	}

	//printf("errore: %.2f, y: %.2f, r: %.2f \r\n", e, y, r);

	return u;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	ee07 3a90 	vmov	s15, r3
}
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	372c      	adds	r7, #44	; 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <parseCSV>:


#define MAX_VALUES 5


void parseCSV(const char *csvString, float *values) {
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    char *token;
    char *copy = strdup(csvString); // Make a copy of the string to avoid modifying the original
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f007 fec6 	bl	800904c <strdup>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60fb      	str	r3, [r7, #12]
    int index = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]

    token = strtok(copy, ",");
 80012c8:	4912      	ldr	r1, [pc, #72]	; (8001314 <parseCSV+0x64>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f007 feee 	bl	80090ac <strtok>
 80012d0:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80012d2:	e012      	b.n	80012fa <parseCSV+0x4a>
        values[index++] = strtof(token, NULL); // Convert token to float and store in the array
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	613a      	str	r2, [r7, #16]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	18d4      	adds	r4, r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f006 fda6 	bl	8007e34 <strtof>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	edc4 7a00 	vstr	s15, [r4]
        token = strtok(NULL, ",");
 80012f0:	4908      	ldr	r1, [pc, #32]	; (8001314 <parseCSV+0x64>)
 80012f2:	2000      	movs	r0, #0
 80012f4:	f007 feda 	bl	80090ac <strtok>
 80012f8:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <parseCSV+0x56>
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b04      	cmp	r3, #4
 8001304:	dde6      	ble.n	80012d4 <parseCSV+0x24>
    }

    free(copy); // Free the dynamically allocated memory for the copied string
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f005 fece 	bl	80070a8 <free>
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	0800bb08 	.word	0x0800bb08

08001318 <mainSerialRead>:

//USART6 per la ricezione dei dati del Raspberry
void mainSerialRead(uint8_t *msg, uint32_t message_size) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0xFFFF;
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	827b      	strh	r3, [r7, #18]
		uint8_t app = '\0';
 8001328:	2300      	movs	r3, #0
 800132a:	72fb      	strb	r3, [r7, #11]
		int msg_len = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

		int i = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

		while(app!='\n' && i <message_size-1){
 8001334:	e013      	b.n	800135e <mainSerialRead+0x46>
			HAL_UART_Receive(&huart6, &app, 1, timeout);
 8001336:	8a7b      	ldrh	r3, [r7, #18]
 8001338:	f107 010b 	add.w	r1, r7, #11
 800133c:	2201      	movs	r2, #1
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <mainSerialRead+0x68>)
 8001340:	f005 fb25 	bl	800698e <HAL_UART_Receive>

			if(app != '\n'){
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d006      	beq.n	8001358 <mainSerialRead+0x40>
				msg[i] = app;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	7afa      	ldrb	r2, [r7, #11]
 8001352:	701a      	strb	r2, [r3, #0]
				msg_len = i;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	60fb      	str	r3, [r7, #12]
			}
			i++;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
		while(app!='\n' && i <message_size-1){
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	2b0a      	cmp	r3, #10
 8001362:	d004      	beq.n	800136e <mainSerialRead+0x56>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	429a      	cmp	r2, r3
 800136c:	d8e3      	bhi.n	8001336 <mainSerialRead+0x1e>
		}

		printf("%s\r\n",msg);
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <mainSerialRead+0x6c>)
 8001372:	f007 fcfd 	bl	8008d70 <iprintf>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000408 	.word	0x20000408
 8001384:	0800bb0c 	.word	0x0800bb0c

08001388 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4619      	mov	r1, r3
 8001396:	2007      	movs	r0, #7
 8001398:	f000 fa02 	bl	80017a0 <bno055_writeData>
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4619      	mov	r1, r3
 80013b2:	203d      	movs	r0, #61	; 0x3d
 80013b4:	f000 f9f4 	bl	80017a0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80013be:	2013      	movs	r0, #19
 80013c0:	f000 f9e2 	bl	8001788 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80013c4:	e002      	b.n	80013cc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 f9de 	bl	8001788 <bno055_delay>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ffe3 	bl	80013a4 <bno055_setOperationMode>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80013e6:	200c      	movs	r0, #12
 80013e8:	f7ff ffdc 	bl	80013a4 <bno055_setOperationMode>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80013f4:	2120      	movs	r1, #32
 80013f6:	203f      	movs	r0, #63	; 0x3f
 80013f8:	f000 f9d2 	bl	80017a0 <bno055_writeData>
  bno055_delay(700);
 80013fc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001400:	f000 f9c2 	bl	8001788 <bno055_delay>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  bno055_reset();
 800140e:	f7ff ffef 	bl	80013f0 <bno055_reset>

  uint8_t id = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	2000      	movs	r0, #0
 800141e:	f000 faab 	bl	8001978 <bno055_readData>
  if (id != BNO055_ID) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2ba0      	cmp	r3, #160	; 0xa0
 8001426:	d004      	beq.n	8001432 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4619      	mov	r1, r3
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <bno055_setup+0x4c>)
 800142e:	f007 fc9f 	bl	8008d70 <iprintf>
  }
  bno055_setPage(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ffa8 	bl	8001388 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001438:	2100      	movs	r1, #0
 800143a:	203f      	movs	r0, #63	; 0x3f
 800143c:	f000 f9b0 	bl	80017a0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001440:	f7ff ffc8 	bl	80013d4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001444:	200a      	movs	r0, #10
 8001446:	f000 f99f 	bl	8001788 <bno055_delay>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800bb14 	.word	0x0800bb14

08001458 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800145c:	b09e      	sub	sp, #120	; 0x78
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff ff8e 	bl	8001388 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800146c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001470:	2b20      	cmp	r3, #32
 8001472:	d108      	bne.n	8001486 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001474:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147c:	2208      	movs	r2, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fa7a 	bl	8001978 <bno055_readData>
 8001484:	e007      	b.n	8001496 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001486:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800148a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800148e:	2206      	movs	r2, #6
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa71 	bl	8001978 <bno055_readData>

  double scale = 1;
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <bno055_getVector+0x270>)
 800149c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80014a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a4:	2b0e      	cmp	r3, #14
 80014a6:	d109      	bne.n	80014bc <bno055_getVector+0x64>
    scale = magScale;
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <bno055_getVector+0x274>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f831 	bl	8000514 <__aeabi_ui2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80014ba:	e03e      	b.n	800153a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80014bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d007      	beq.n	80014d4 <bno055_getVector+0x7c>
 80014c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c8:	2b28      	cmp	r3, #40	; 0x28
 80014ca:	d003      	beq.n	80014d4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80014cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d0:	2b2e      	cmp	r3, #46	; 0x2e
 80014d2:	d109      	bne.n	80014e8 <bno055_getVector+0x90>
    scale = accelScale;
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <bno055_getVector+0x278>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f81b 	bl	8000514 <__aeabi_ui2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80014e6:	e028      	b.n	800153a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80014e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ec:	2b14      	cmp	r3, #20
 80014ee:	d109      	bne.n	8001504 <bno055_getVector+0xac>
    scale = angularRateScale;
 80014f0:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <bno055_getVector+0x27c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f80d 	bl	8000514 <__aeabi_ui2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001502:	e01a      	b.n	800153a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001508:	2b1a      	cmp	r3, #26
 800150a:	d109      	bne.n	8001520 <bno055_getVector+0xc8>
    scale = eulerScale;
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <bno055_getVector+0x280>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ffff 	bl	8000514 <__aeabi_ui2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800151e:	e00c      	b.n	800153a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001524:	2b20      	cmp	r3, #32
 8001526:	d108      	bne.n	800153a <bno055_getVector+0xe2>
    scale = quaScale;
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <bno055_getVector+0x284>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fff1 	bl	8000514 <__aeabi_ui2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	2220      	movs	r2, #32
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f007 fd7a 	bl	800903c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154c:	2b20      	cmp	r3, #32
 800154e:	d150      	bne.n	80015f2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001550:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffe6 	bl	8000534 <__aeabi_i2d>
 8001568:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800156c:	f7ff f976 	bl	800085c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001578:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffd2 	bl	8000534 <__aeabi_i2d>
 8001590:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001594:	f7ff f962 	bl	800085c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80015a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffbe 	bl	8000534 <__aeabi_i2d>
 80015b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015bc:	f7ff f94e 	bl	800085c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80015c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffaa 	bl	8000534 <__aeabi_i2d>
 80015e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015e4:	f7ff f93a 	bl	800085c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80015f0:	e03b      	b.n	800166a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21b      	sxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800160e:	f7ff f925 	bl	800085c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800161a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff81 	bl	8000534 <__aeabi_i2d>
 8001632:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001636:	f7ff f911 	bl	800085c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001642:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff6d 	bl	8000534 <__aeabi_i2d>
 800165a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800166a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800166e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800167e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001682:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001686:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800168a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800168e:	ec49 8b14 	vmov	d4, r8, r9
 8001692:	ec45 4b15 	vmov	d5, r4, r5
 8001696:	ec41 0b16 	vmov	d6, r0, r1
 800169a:	ec43 2b17 	vmov	d7, r2, r3
}
 800169e:	eeb0 0a44 	vmov.f32	s0, s8
 80016a2:	eef0 0a64 	vmov.f32	s1, s9
 80016a6:	eeb0 1a45 	vmov.f32	s2, s10
 80016aa:	eef0 1a65 	vmov.f32	s3, s11
 80016ae:	eeb0 2a46 	vmov.f32	s4, s12
 80016b2:	eef0 2a66 	vmov.f32	s5, s13
 80016b6:	eeb0 3a47 	vmov.f32	s6, s14
 80016ba:	eef0 3a67 	vmov.f32	s7, s15
 80016be:	3778      	adds	r7, #120	; 0x78
 80016c0:	46bd      	mov	sp, r7
 80016c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016c6:	bf00      	nop
 80016c8:	3ff00000 	.word	0x3ff00000
 80016cc:	20000006 	.word	0x20000006
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000002 	.word	0x20000002
 80016d8:	20000004 	.word	0x20000004
 80016dc:	20000008 	.word	0x20000008

080016e0 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	b090      	sub	sp, #64	; 0x40
 80016e6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80016e8:	2014      	movs	r0, #20
 80016ea:	f7ff feb5 	bl	8001458 <bno055_getVector>
 80016ee:	eeb0 4a40 	vmov.f32	s8, s0
 80016f2:	eef0 4a60 	vmov.f32	s9, s1
 80016f6:	eeb0 5a41 	vmov.f32	s10, s2
 80016fa:	eef0 5a61 	vmov.f32	s11, s3
 80016fe:	eeb0 6a42 	vmov.f32	s12, s4
 8001702:	eef0 6a62 	vmov.f32	s13, s5
 8001706:	eeb0 7a43 	vmov.f32	s14, s6
 800170a:	eef0 7a63 	vmov.f32	s15, s7
 800170e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001712:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001716:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800171a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800171e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001722:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001726:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800172a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800172e:	ec49 8b14 	vmov	d4, r8, r9
 8001732:	ec45 4b15 	vmov	d5, r4, r5
 8001736:	ec41 0b16 	vmov	d6, r0, r1
 800173a:	ec43 2b17 	vmov	d7, r2, r3
}
 800173e:	eeb0 0a44 	vmov.f32	s0, s8
 8001742:	eef0 0a64 	vmov.f32	s1, s9
 8001746:	eeb0 1a45 	vmov.f32	s2, s10
 800174a:	eef0 1a65 	vmov.f32	s3, s11
 800174e:	eeb0 2a46 	vmov.f32	s4, s12
 8001752:	eef0 2a66 	vmov.f32	s5, s13
 8001756:	eeb0 3a47 	vmov.f32	s6, s14
 800175a:	eef0 3a67 	vmov.f32	s7, s15
 800175e:	3740      	adds	r7, #64	; 0x40
 8001760:	46bd      	mov	sp, r7
 8001762:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001768 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <bno055_assignI2C+0x1c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000204 	.word	0x20000204

08001788 <bno055_delay>:

void bno055_delay(int time) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fc0e 	bl	8002fb4 <HAL_Delay>
#endif
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	733b      	strb	r3, [r7, #12]
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <bno055_writeData+0x184>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	230a      	movs	r3, #10
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	2150      	movs	r1, #80	; 0x50
 80017c8:	f002 fa86 	bl	8003cd8 <HAL_I2C_Master_Transmit>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a0 	beq.w	8001918 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d103      	bne.n	80017e6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80017de:	4852      	ldr	r0, [pc, #328]	; (8001928 <bno055_writeData+0x188>)
 80017e0:	f007 fb2c 	bl	8008e3c <puts>
 80017e4:	e012      	b.n	800180c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d103      	bne.n	80017f4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80017ec:	484f      	ldr	r0, [pc, #316]	; (800192c <bno055_writeData+0x18c>)
 80017ee:	f007 fb25 	bl	8008e3c <puts>
 80017f2:	e00b      	b.n	800180c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d103      	bne.n	8001802 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80017fa:	484d      	ldr	r0, [pc, #308]	; (8001930 <bno055_writeData+0x190>)
 80017fc:	f007 fb1e 	bl	8008e3c <puts>
 8001800:	e004      	b.n	800180c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	4619      	mov	r1, r3
 8001806:	484b      	ldr	r0, [pc, #300]	; (8001934 <bno055_writeData+0x194>)
 8001808:	f007 fab2 	bl	8008d70 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800180c:	4b45      	ldr	r3, [pc, #276]	; (8001924 <bno055_writeData+0x184>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fec1 	bl	8004598 <HAL_I2C_GetError>
 8001816:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d07e      	beq.n	800191c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d103      	bne.n	800182c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001824:	4844      	ldr	r0, [pc, #272]	; (8001938 <bno055_writeData+0x198>)
 8001826:	f007 fb09 	bl	8008e3c <puts>
 800182a:	e021      	b.n	8001870 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d103      	bne.n	800183a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001832:	4842      	ldr	r0, [pc, #264]	; (800193c <bno055_writeData+0x19c>)
 8001834:	f007 fb02 	bl	8008e3c <puts>
 8001838:	e01a      	b.n	8001870 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b04      	cmp	r3, #4
 800183e:	d103      	bne.n	8001848 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001840:	483f      	ldr	r0, [pc, #252]	; (8001940 <bno055_writeData+0x1a0>)
 8001842:	f007 fafb 	bl	8008e3c <puts>
 8001846:	e013      	b.n	8001870 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d103      	bne.n	8001856 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800184e:	483d      	ldr	r0, [pc, #244]	; (8001944 <bno055_writeData+0x1a4>)
 8001850:	f007 faf4 	bl	8008e3c <puts>
 8001854:	e00c      	b.n	8001870 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d103      	bne.n	8001864 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800185c:	483a      	ldr	r0, [pc, #232]	; (8001948 <bno055_writeData+0x1a8>)
 800185e:	f007 faed 	bl	8008e3c <puts>
 8001862:	e005      	b.n	8001870 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b20      	cmp	r3, #32
 8001868:	d102      	bne.n	8001870 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800186a:	4838      	ldr	r0, [pc, #224]	; (800194c <bno055_writeData+0x1ac>)
 800186c:	f007 fae6 	bl	8008e3c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <bno055_writeData+0x184>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fe81 	bl	800457c <HAL_I2C_GetState>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001884:	4832      	ldr	r0, [pc, #200]	; (8001950 <bno055_writeData+0x1b0>)
 8001886:	f007 fad9 	bl	8008e3c <puts>
 800188a:	e048      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b20      	cmp	r3, #32
 8001890:	d103      	bne.n	800189a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001892:	482f      	ldr	r0, [pc, #188]	; (8001950 <bno055_writeData+0x1b0>)
 8001894:	f007 fad2 	bl	8008e3c <puts>
 8001898:	e041      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b24      	cmp	r3, #36	; 0x24
 800189e:	d103      	bne.n	80018a8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80018a0:	482c      	ldr	r0, [pc, #176]	; (8001954 <bno055_writeData+0x1b4>)
 80018a2:	f007 facb 	bl	8008e3c <puts>
 80018a6:	e03a      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b21      	cmp	r3, #33	; 0x21
 80018ac:	d103      	bne.n	80018b6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80018ae:	482a      	ldr	r0, [pc, #168]	; (8001958 <bno055_writeData+0x1b8>)
 80018b0:	f007 fac4 	bl	8008e3c <puts>
 80018b4:	e033      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b22      	cmp	r3, #34	; 0x22
 80018ba:	d103      	bne.n	80018c4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80018bc:	4827      	ldr	r0, [pc, #156]	; (800195c <bno055_writeData+0x1bc>)
 80018be:	f007 fabd 	bl	8008e3c <puts>
 80018c2:	e02c      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b28      	cmp	r3, #40	; 0x28
 80018c8:	d103      	bne.n	80018d2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80018ca:	4825      	ldr	r0, [pc, #148]	; (8001960 <bno055_writeData+0x1c0>)
 80018cc:	f007 fab6 	bl	8008e3c <puts>
 80018d0:	e025      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b29      	cmp	r3, #41	; 0x29
 80018d6:	d103      	bne.n	80018e0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80018d8:	4822      	ldr	r0, [pc, #136]	; (8001964 <bno055_writeData+0x1c4>)
 80018da:	f007 faaf 	bl	8008e3c <puts>
 80018de:	e01e      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b2a      	cmp	r3, #42	; 0x2a
 80018e4:	d103      	bne.n	80018ee <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <bno055_writeData+0x1c8>)
 80018e8:	f007 faa8 	bl	8008e3c <puts>
 80018ec:	e017      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b60      	cmp	r3, #96	; 0x60
 80018f2:	d103      	bne.n	80018fc <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <bno055_writeData+0x1cc>)
 80018f6:	f007 faa1 	bl	8008e3c <puts>
 80018fa:	e010      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001900:	d103      	bne.n	800190a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001902:	481b      	ldr	r0, [pc, #108]	; (8001970 <bno055_writeData+0x1d0>)
 8001904:	f007 fa9a 	bl	8008e3c <puts>
 8001908:	e009      	b.n	800191e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2be0      	cmp	r3, #224	; 0xe0
 800190e:	d106      	bne.n	800191e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001910:	4818      	ldr	r0, [pc, #96]	; (8001974 <bno055_writeData+0x1d4>)
 8001912:	f007 fa93 	bl	8008e3c <puts>
 8001916:	e002      	b.n	800191e <bno055_writeData+0x17e>
    return;
 8001918:	bf00      	nop
 800191a:	e000      	b.n	800191e <bno055_writeData+0x17e>
    return;
 800191c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000204 	.word	0x20000204
 8001928:	0800bb50 	.word	0x0800bb50
 800192c:	0800bb74 	.word	0x0800bb74
 8001930:	0800bb9c 	.word	0x0800bb9c
 8001934:	0800bbc0 	.word	0x0800bbc0
 8001938:	0800bbd8 	.word	0x0800bbd8
 800193c:	0800bbec 	.word	0x0800bbec
 8001940:	0800bc00 	.word	0x0800bc00
 8001944:	0800bc14 	.word	0x0800bc14
 8001948:	0800bc28 	.word	0x0800bc28
 800194c:	0800bc3c 	.word	0x0800bc3c
 8001950:	0800bc54 	.word	0x0800bc54
 8001954:	0800bc6c 	.word	0x0800bc6c
 8001958:	0800bc80 	.word	0x0800bc80
 800195c:	0800bc98 	.word	0x0800bc98
 8001960:	0800bcb0 	.word	0x0800bcb0
 8001964:	0800bcc8 	.word	0x0800bcc8
 8001968:	0800bce8 	.word	0x0800bce8
 800196c:	0800bd08 	.word	0x0800bd08
 8001970:	0800bd20 	.word	0x0800bd20
 8001974:	0800bd38 	.word	0x0800bd38

08001978 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af02      	add	r7, sp, #8
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <bno055_readData+0x84>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	1dfa      	adds	r2, r7, #7
 800198e:	2364      	movs	r3, #100	; 0x64
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	2150      	movs	r1, #80	; 0x50
 8001996:	f002 f99f 	bl	8003cd8 <HAL_I2C_Master_Transmit>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <bno055_readData+0x84>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2264      	movs	r2, #100	; 0x64
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	2150      	movs	r1, #80	; 0x50
 80019ae:	f002 fa91 	bl	8003ed4 <HAL_I2C_Master_Receive>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01a      	beq.n	80019f2 <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d103      	bne.n	80019ca <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <bno055_readData+0x88>)
 80019c4:	f007 fa3a 	bl	8008e3c <puts>
 80019c8:	e014      	b.n	80019f4 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d103      	bne.n	80019d8 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <bno055_readData+0x8c>)
 80019d2:	f007 fa33 	bl	8008e3c <puts>
 80019d6:	e00d      	b.n	80019f4 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d103      	bne.n	80019e6 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <bno055_readData+0x90>)
 80019e0:	f007 fa2c 	bl	8008e3c <puts>
 80019e4:	e006      	b.n	80019f4 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <bno055_readData+0x94>)
 80019ec:	f007 f9c0 	bl	8008d70 <iprintf>
 80019f0:	e000      	b.n	80019f4 <bno055_readData+0x7c>
	    return;
 80019f2:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000204 	.word	0x20000204
 8001a00:	0800bb50 	.word	0x0800bb50
 8001a04:	0800bb74 	.word	0x0800bb74
 8001a08:	0800bb9c 	.word	0x0800bb9c
 8001a0c:	0800bbc0 	.word	0x0800bbc0

08001a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a14:	b09b      	sub	sp, #108	; 0x6c
 8001a16:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a18:	f001 fa5a 	bl	8002ed0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a1c:	f000 facc 	bl	8001fb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a20:	f000 fd72 	bl	8002508 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a24:	f000 fb86 	bl	8002134 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001a28:	f000 fbb2 	bl	8002190 <MX_TIM1_Init>
	MX_TIM10_Init();
 8001a2c:	f000 fca6 	bl	800237c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001a30:	f000 fcf2 	bl	8002418 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001a34:	f000 fd14 	bl	8002460 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001a38:	f000 fc4c 	bl	80022d4 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8001a3c:	f000 fd3a 	bl	80024b4 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001a40:	f000 fb26 	bl	8002090 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a44:	2100      	movs	r1, #0
 8001a46:	48c2      	ldr	r0, [pc, #776]	; (8001d50 <main+0x340>)
 8001a48:	f003 fe84 	bl	8005754 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	48c1      	ldr	r0, [pc, #772]	; (8001d54 <main+0x344>)
 8001a50:	f003 fe80 	bl	8005754 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a54:	213c      	movs	r1, #60	; 0x3c
 8001a56:	48c0      	ldr	r0, [pc, #768]	; (8001d58 <main+0x348>)
 8001a58:	f003 ffd2 	bl	8005a00 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 8001a5c:	48bf      	ldr	r0, [pc, #764]	; (8001d5c <main+0x34c>)
 8001a5e:	f003 fdbd 	bl	80055dc <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION,
 8001a62:	ed9f 1abf 	vldr	s2, [pc, #764]	; 8001d60 <main+0x350>
 8001a66:	eddf 0abf 	vldr	s1, [pc, #764]	; 8001d64 <main+0x354>
 8001a6a:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8001d68 <main+0x358>
 8001a6e:	48bf      	ldr	r0, [pc, #764]	; (8001d6c <main+0x35c>)
 8001a70:	f7ff fb68 	bl	8001144 <init_PID>
	MIN_U_TRACTION);
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0);
 8001a74:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8001d70 <main+0x360>
 8001a78:	eddf 0abe 	vldr	s1, [pc, #760]	; 8001d74 <main+0x364>
 8001a7c:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8001d78 <main+0x368>
 8001a80:	48ba      	ldr	r0, [pc, #744]	; (8001d6c <main+0x35c>)
 8001a82:	f7ff fb80 	bl	8001186 <tune_PID>

	//PID steering
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING,
 8001a86:	eebb 1a07 	vmov.f32	s2, #183	; 0xc1b80000 -23.0
 8001a8a:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 8001a8e:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8001d68 <main+0x358>
 8001a92:	48ba      	ldr	r0, [pc, #744]	; (8001d7c <main+0x36c>)
 8001a94:	f7ff fb56 	bl	8001144 <init_PID>
	MIN_U_STEERING);
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0);
 8001a98:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 8001d70 <main+0x360>
 8001a9c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8001d80 <main+0x370>
 8001aa0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001aa4:	48b5      	ldr	r0, [pc, #724]	; (8001d7c <main+0x36c>)
 8001aa6:	f7ff fb6e 	bl	8001186 <tune_PID>

	// IMU BNO055 config
	HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1, 5, 1000);
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	2205      	movs	r2, #5
 8001ab0:	2150      	movs	r1, #80	; 0x50
 8001ab2:	48b4      	ldr	r0, [pc, #720]	; (8001d84 <main+0x374>)
 8001ab4:	f002 fc34 	bl	8004320 <HAL_I2C_IsDeviceReady>
	bno055_assignI2C(&hi2c1);
 8001ab8:	48b2      	ldr	r0, [pc, #712]	; (8001d84 <main+0x374>)
 8001aba:	f7ff fe55 	bl	8001768 <bno055_assignI2C>
	bno055_setup();
 8001abe:	f7ff fca3 	bl	8001408 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001ac2:	f7ff fc8e 	bl	80013e2 <bno055_setOperationModeNDOF>

	servo_motor(0);
 8001ac6:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001d70 <main+0x360>
 8001aca:	f000 fe0d 	bl	80026e8 <servo_motor>

	printf("Initialization Completed!\r\n");
 8001ace:	48ae      	ldr	r0, [pc, #696]	; (8001d88 <main+0x378>)
 8001ad0:	f007 f9b4 	bl	8008e3c <puts>
	//data.valid = 1;
	//data.offset = 0.0;
	//data.curvature_radius_ref_m = MAX_CURVATURE_RADIUS_FOR_STRAIGHT; //with r=1000000 the car goes straight
	//data.linear_speed_ref_m_s = 1.0;

	float RPM_2_m_s = (2 * M_PI / 60) * WHEEL_RADIUS
 8001ad4:	4bad      	ldr	r3, [pc, #692]	; (8001d8c <main+0x37c>)
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
			/ MOTOR_REVOLUTION_FOR_ONE_WHEEL_REVOLUTION;
	RPM_2_m_s = RPM_2_m_s * 0.787; // correzione aggiunta xk non andava a 1m/s ma a 0.82m/s
 8001ad8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ada:	f7fe fd3d 	bl	8000558 <__aeabi_f2d>
 8001ade:	a396      	add	r3, pc, #600	; (adr r3, 8001d38 <main+0x328>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fd90 	bl	8000608 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f882 	bl	8000bf8 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44

		/* USER CODE BEGIN 3 */

		//-------------------------------------------------------------
		//Leggo messaggio in entrata
		mainSerialRead(msg, sizeof(msg));
 8001af8:	212d      	movs	r1, #45	; 0x2d
 8001afa:	48a5      	ldr	r0, [pc, #660]	; (8001d90 <main+0x380>)
 8001afc:	f7ff fc0c 	bl	8001318 <mainSerialRead>
		//-------------------------------------------------------------

		//-------------------------------------------------------------
		//Interpreto il messaggio
		float floatArray[MAX_VALUES];
		parseCSV(msg, floatArray);
 8001b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b04:	4619      	mov	r1, r3
 8001b06:	48a2      	ldr	r0, [pc, #648]	; (8001d90 <main+0x380>)
 8001b08:	f7ff fbd2 	bl	80012b0 <parseCSV>
		data.enable = (int) floatArray[0];
 8001b0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 2a90 	vmov	r2, s15
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <main+0x384>)
 8001b1a:	601a      	str	r2, [r3, #0]
		data.valid = (int) floatArray[1];
 8001b1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b24:	ee17 2a90 	vmov	r2, s15
 8001b28:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <main+0x384>)
 8001b2a:	605a      	str	r2, [r3, #4]
		data.curvature_radius_ref_m = floatArray[2];
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	4a99      	ldr	r2, [pc, #612]	; (8001d94 <main+0x384>)
 8001b30:	60d3      	str	r3, [r2, #12]
		data.offset = floatArray[3];
 8001b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b34:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <main+0x384>)
 8001b36:	6093      	str	r3, [r2, #8]
		data.linear_speed_ref_m_s = 0.50;
 8001b38:	4b96      	ldr	r3, [pc, #600]	; (8001d94 <main+0x384>)
 8001b3a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001b3e:	611a      	str	r2, [r3, #16]

		printf("%d %.2f %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b40:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <main+0x384>)
 8001b42:	681e      	ldr	r6, [r3, #0]
 8001b44:	4b93      	ldr	r3, [pc, #588]	; (8001d94 <main+0x384>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
								data.curvature_radius_ref_m, data.offset,
 8001b4a:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <main+0x384>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
		printf("%d %.2f %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd02 	bl	8000558 <__aeabi_f2d>
 8001b54:	4682      	mov	sl, r0
 8001b56:	468b      	mov	fp, r1
								data.curvature_radius_ref_m, data.offset,
 8001b58:	4b8e      	ldr	r3, [pc, #568]	; (8001d94 <main+0x384>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
		printf("%d %.2f %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcfb 	bl	8000558 <__aeabi_f2d>
 8001b62:	e9c7 0100 	strd	r0, r1, [r7]
								data.linear_speed_ref_m_s);
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <main+0x384>)
 8001b68:	691b      	ldr	r3, [r3, #16]
		printf("%d %.2f %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcf4 	bl	8000558 <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b78:	ed97 7b00 	vldr	d7, [r7]
 8001b7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b80:	e9cd ab00 	strd	sl, fp, [sp]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4631      	mov	r1, r6
 8001b88:	4883      	ldr	r0, [pc, #524]	; (8001d98 <main+0x388>)
 8001b8a:	f007 f8f1 	bl	8008d70 <iprintf>
		//-------------------------------------------------------------

		//-------------------------------------------------------------
		//Controllo
		if (data.enable == 1 /*&& HardwareEnable == 1*/) {
 8001b8e:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <main+0x384>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	f040 81fe 	bne.w	8001f94 <main+0x584>
			if (Flag_10ms == 1) { //Car enabled from user
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <main+0x38c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d1ab      	bne.n	8001af8 <main+0xe8>
				Flag_10ms = 0;
 8001ba0:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <main+0x38c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
				DC_set_PWM_and_dir((uint32_t) DC_Voltage2Duty(u_trazione),
						vehicleState.motor_direction_ref);
				*/
				//BL_TRACTION control
				//Measure speed with encoder
				vehicleState.ref_count = TIM2->ARR / 2;
 8001ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <main+0x390>)
 8001bb2:	605a      	str	r2, [r3, #4]
				vehicleState.delta_count = vehicleState.counts
 8001bb4:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <main+0x390>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
						- vehicleState.ref_count;
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <main+0x390>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	1ad3      	subs	r3, r2, r3
				vehicleState.delta_count = vehicleState.counts
 8001bbe:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <main+0x390>)
 8001bc0:	6093      	str	r3, [r2, #8]

				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001bc2:	4b77      	ldr	r3, [pc, #476]	; (8001da0 <main+0x390>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
						/ ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <main+0x394>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001bec:	4a6c      	ldr	r2, [pc, #432]	; (8001da0 <main+0x390>)
 8001bee:	60d3      	str	r3, [r2, #12]
								* GEARBOX_RATIO));
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <main+0x390>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcaf 	bl	8000558 <__aeabi_f2d>
						/ ENCODER_SAMPLING_TIME;
 8001bfa:	a351      	add	r3, pc, #324	; (adr r3, 8001d40 <main+0x330>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fe2c 	bl	800085c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe fff4 	bl	8000bf8 <__aeabi_d2f>
 8001c10:	4603      	mov	r3, r0
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001c12:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <main+0x390>)
 8001c14:	6113      	str	r3, [r2, #16]
				vehicleState.motor_speed_RPM = BL_DegreeSec2RPM(
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <main+0x390>)
 8001c18:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f7ff f9ee 	bl	8001000 <BL_DegreeSec2RPM>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <main+0x390>)
 8001c2a:	edc3 7a05 	vstr	s15, [r3, #20]
						vehicleState.motor_speed_deg_sec);

				//Speed reference for motor
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001c2e:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <main+0x384>)
 8001c30:	edd3 6a04 	vldr	s13, [r3, #16]
						/ RPM_2_m_s;
 8001c34:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001c3c:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <main+0x390>)
 8001c3e:	edc3 7a07 	vstr	s15, [r3, #28]

				vehicleState.motor_direction_ref = BL_Ref2Direction(
 8001c42:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <main+0x390>)
 8001c44:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	f7ff fa3c 	bl	80010c8 <BL_Ref2Direction>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <main+0x390>)
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]
						vehicleState.motor_speed_ref_RPM);

				u_trazione = PID_controller(&pid_traction,
 8001c5a:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <main+0x390>)
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <main+0x390>)
 8001c62:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c66:	eef0 0a47 	vmov.f32	s1, s14
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	483f      	ldr	r0, [pc, #252]	; (8001d6c <main+0x35c>)
 8001c70:	f7ff faa2 	bl	80011b8 <PID_controller>
 8001c74:	ee10 3a10 	vmov	r3, s0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc6d 	bl	8000558 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4949      	ldr	r1, [pc, #292]	; (8001da8 <main+0x398>)
 8001c84:	e9c1 2300 	strd	r2, r3, [r1]
						vehicleState.motor_speed_RPM,
						vehicleState.motor_speed_ref_RPM);

				BL_set_PWM_and_dir((uint32_t) BL_Voltage2Duty(u_trazione));
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <main+0x398>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffb1 	bl	8000bf8 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	ee00 3a10 	vmov	s0, r3
 8001c9c:	f7ff f9d0 	bl	8001040 <BL_Voltage2Duty>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 0a90 	vmov	r0, s15
 8001cac:	f7ff fa24 	bl	80010f8 <BL_set_PWM_and_dir>
				 */
				//-------------------------------------------------------------
				//-------------------------------------------------------------
				//STEERING control
				//Get yawrate from IMU
				bno055_vector_t v = bno055_getVectorGyroscope();
 8001cb0:	f7ff fd16 	bl	80016e0 <bno055_getVectorGyroscope>
 8001cb4:	eeb0 4a40 	vmov.f32	s8, s0
 8001cb8:	eef0 4a60 	vmov.f32	s9, s1
 8001cbc:	eeb0 5a41 	vmov.f32	s10, s2
 8001cc0:	eef0 5a61 	vmov.f32	s11, s3
 8001cc4:	eeb0 6a42 	vmov.f32	s12, s4
 8001cc8:	eef0 6a62 	vmov.f32	s13, s5
 8001ccc:	eeb0 7a43 	vmov.f32	s14, s6
 8001cd0:	eef0 7a63 	vmov.f32	s15, s7
 8001cd4:	ed87 4b04 	vstr	d4, [r7, #16]
 8001cd8:	ed87 5b06 	vstr	d5, [r7, #24]
 8001cdc:	ed87 6b08 	vstr	d6, [r7, #32]
 8001ce0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
				vehicleState.yaw_rate_deg_sec = v.z;
 8001ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce8:	492d      	ldr	r1, [pc, #180]	; (8001da0 <main+0x390>)
 8001cea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <main+0x390>)
 8001cf0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
						* M_PI) / 180;
 8001cf4:	a314      	add	r3, pc, #80	; (adr r3, 8001d48 <main+0x338>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc85 	bl	8000608 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <main+0x39c>)
 8001d0c:	f7fe fda6 	bl	800085c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001d14:	4922      	ldr	r1, [pc, #136]	; (8001da0 <main+0x390>)
 8001d16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				if (data.curvature_radius_ref_m
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <main+0x384>)
 8001d1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	db76      	blt.n	8001e1c <main+0x40c>
						>= MAX_CURVATURE_RADIUS_FOR_STRAIGHT) {
					vehicleState.yaw_rate_ref_rad_sec = 0;
 8001d2e:	491c      	ldr	r1, [pc, #112]	; (8001da0 <main+0x390>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	e03c      	b.n	8001db0 <main+0x3a0>
 8001d36:	bf00      	nop
 8001d38:	9fbe76c9 	.word	0x9fbe76c9
 8001d3c:	3fe92f1a 	.word	0x3fe92f1a
 8001d40:	47ae147b 	.word	0x47ae147b
 8001d44:	3f847ae1 	.word	0x3f847ae1
 8001d48:	54442d18 	.word	0x54442d18
 8001d4c:	400921fb 	.word	0x400921fb
 8001d50:	200002a4 	.word	0x200002a4
 8001d54:	20000334 	.word	0x20000334
 8001d58:	200002ec 	.word	0x200002ec
 8001d5c:	2000037c 	.word	0x2000037c
 8001d60:	c0266666 	.word	0xc0266666
 8001d64:	40266666 	.word	0x40266666
 8001d68:	3c23d70a 	.word	0x3c23d70a
 8001d6c:	200004a0 	.word	0x200004a0
 8001d70:	00000000 	.word	0x00000000
 8001d74:	3b9374bc 	.word	0x3b9374bc
 8001d78:	3a902de0 	.word	0x3a902de0
 8001d7c:	200004c0 	.word	0x200004c0
 8001d80:	437a0000 	.word	0x437a0000
 8001d84:	20000250 	.word	0x20000250
 8001d88:	0800bd50 	.word	0x0800bd50
 8001d8c:	3a24b5be 	.word	0x3a24b5be
 8001d90:	200004f8 	.word	0x200004f8
 8001d94:	2000044c 	.word	0x2000044c
 8001d98:	0800bd6c 	.word	0x0800bd6c
 8001d9c:	200004f0 	.word	0x200004f0
 8001da0:	20000460 	.word	0x20000460
 8001da4:	40c00000 	.word	0x40c00000
 8001da8:	200004e0 	.word	0x200004e0
 8001dac:	40668000 	.word	0x40668000
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
							vehicleState.yaw_rate_rad_sec,
 8001db8:	4b7a      	ldr	r3, [pc, #488]	; (8001fa4 <main+0x594>)
 8001dba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
					u_sterzo = PID_controller(&pid_steering,
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff19 	bl	8000bf8 <__aeabi_d2f>
 8001dc6:	4606      	mov	r6, r0
							vehicleState.yaw_rate_ref_rad_sec);
 8001dc8:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <main+0x594>)
 8001dca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe ff11 	bl	8000bf8 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	ee00 3a90 	vmov	s1, r3
 8001ddc:	ee00 6a10 	vmov	s0, r6
 8001de0:	4871      	ldr	r0, [pc, #452]	; (8001fa8 <main+0x598>)
 8001de2:	f7ff f9e9 	bl	80011b8 <PID_controller>
 8001de6:	ee10 3a10 	vmov	r3, s0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbb4 	bl	8000558 <__aeabi_f2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	496d      	ldr	r1, [pc, #436]	; (8001fac <main+0x59c>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
					servo_motor(-u_sterzo); //minus because yawrate and steering are opposite
 8001dfa:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <main+0x59c>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fef8 	bl	8000bf8 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef1 7a67 	vneg.f32	s15, s15
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f000 fc67 	bl	80026e8 <servo_motor>
 8001e1a:	e66d      	b.n	8001af8 <main+0xe8>
				} else {
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <main+0x594>)
 8001e1e:	ed93 7a05 	vldr	s14, [r3, #20]
							* RPM_2_m_s;
 8001e22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <main+0x594>)
 8001e2c:	edc3 7a06 	vstr	s15, [r3, #24]
					vehicleState.yaw_rate_ref_rad_sec =
							vehicleState.linear_speed_m_s
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <main+0x594>)
 8001e32:	ed93 7a06 	vldr	s14, [r3, #24]
									/ data.curvature_radius_ref_m;
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <main+0x5a0>)
 8001e38:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e40:	ee16 0a90 	vmov	r0, s13
 8001e44:	f7fe fb88 	bl	8000558 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
					vehicleState.yaw_rate_ref_rad_sec =
 8001e4c:	4955      	ldr	r1, [pc, #340]	; (8001fa4 <main+0x594>)
 8001e4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

					float yaw_rate_ref_rad_sec_abs =
							vehicleState.yaw_rate_ref_rad_sec;
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <main+0x594>)
 8001e54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					float yaw_rate_ref_rad_sec_abs =
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fecc 	bl	8000bf8 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
					float yaw_rate_rad_sec_abs = vehicleState.yaw_rate_rad_sec;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <main+0x594>)
 8001e66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fec3 	bl	8000bf8 <__aeabi_d2f>
 8001e72:	4603      	mov	r3, r0
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
					if (vehicleState.yaw_rate_ref_rad_sec < 0)
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <main+0x594>)
 8001e78:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f7fe fe32 	bl	8000aec <__aeabi_dcmplt>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <main+0x49a>
						yaw_rate_ref_rad_sec_abs =
								-vehicleState.yaw_rate_ref_rad_sec;
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <main+0x594>)
 8001e90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe feae 	bl	8000bf8 <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
						yaw_rate_ref_rad_sec_abs =
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef1 7a67 	vneg.f32	s15, s15
 8001ea6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
					if (vehicleState.yaw_rate_rad_sec < 0)
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <main+0x594>)
 8001eac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	f7fe fe18 	bl	8000aec <__aeabi_dcmplt>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <main+0x4ce>
						yaw_rate_rad_sec_abs = -vehicleState.yaw_rate_rad_sec;
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <main+0x594>)
 8001ec4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fe94 	bl	8000bf8 <__aeabi_d2f>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef1 7a67 	vneg.f32	s15, s15
 8001eda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

					u_sterzo = PID_controller(&pid_steering,
 8001ede:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8001ee2:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001ee6:	4830      	ldr	r0, [pc, #192]	; (8001fa8 <main+0x598>)
 8001ee8:	f7ff f966 	bl	80011b8 <PID_controller>
 8001eec:	ee10 3a10 	vmov	r3, s0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb31 	bl	8000558 <__aeabi_f2d>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	492c      	ldr	r1, [pc, #176]	; (8001fac <main+0x59c>)
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
							yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs);

					//minus because yawrate and steering are opposite
					if (data.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <main+0x5a0>)
 8001f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	db14      	blt.n	8001f3a <main+0x52a>
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <main+0x59c>)
 8001f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f7fe fe03 	bl	8000b28 <__aeabi_dcmpgt>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <main+0x52a>
						u_sterzo *= -1.0;
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <main+0x59c>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	4614      	mov	r4, r2
 8001f30:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <main+0x59c>)
 8001f36:	e9c3 4500 	strd	r4, r5, [r3]
					if (data.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x5a0>)
 8001f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d514      	bpl.n	8001f74 <main+0x564>
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <main+0x59c>)
 8001f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f7fe fdc8 	bl	8000aec <__aeabi_dcmplt>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <main+0x564>
						u_sterzo *= -1.0;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <main+0x59c>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	4690      	mov	r8, r2
 8001f6a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <main+0x59c>)
 8001f70:	e9c3 8900 	strd	r8, r9, [r3]

					servo_motor((int) u_sterzo);
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <main+0x59c>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fdf3 	bl	8000b68 <__aeabi_d2iz>
 8001f82:	ee07 0a90 	vmov	s15, r0
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	f000 fbab 	bl	80026e8 <servo_motor>
 8001f92:	e5b1      	b.n	8001af8 <main+0xe8>
						vehicleState.motor_speed_ref_RPM,
						vehicleState.motor_speed_RPM, u_trazione);*/
			}
		} else {
			//DC_set_PWM_and_dir(0, vehicleState.motor_direction_ref);
			BL_set_PWM_and_dir(0);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff f8af 	bl	80010f8 <BL_set_PWM_and_dir>
			servo_motor(0);
 8001f9a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001fb4 <main+0x5a4>
 8001f9e:	f000 fba3 	bl	80026e8 <servo_motor>
	while (1) {
 8001fa2:	e5a9      	b.n	8001af8 <main+0xe8>
 8001fa4:	20000460 	.word	0x20000460
 8001fa8:	200004c0 	.word	0x200004c0
 8001fac:	200004e8 	.word	0x200004e8
 8001fb0:	2000044c 	.word	0x2000044c
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	2230      	movs	r2, #48	; 0x30
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 f838 	bl	800903c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <SystemClock_Config+0xd0>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <SystemClock_Config+0xd0>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <SystemClock_Config+0xd0>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <SystemClock_Config+0xd4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002004:	4a21      	ldr	r2, [pc, #132]	; (800208c <SystemClock_Config+0xd4>)
 8002006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <SystemClock_Config+0xd4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	2301      	movs	r3, #1
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002020:	2310      	movs	r3, #16
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002024:	2302      	movs	r3, #2
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800202c:	2310      	movs	r3, #16
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002030:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002034:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002036:	2304      	movs	r3, #4
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800203a:	2307      	movs	r3, #7
 800203c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fde2 	bl	8004c0c <HAL_RCC_OscConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x9a>
		Error_Handler();
 800204e:	f000 fb45 	bl	80026dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f003 f844 	bl	80050fc <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xc6>
		Error_Handler();
 800207a:	f000 fb2f 	bl	80026dc <Error_Handler>
	}
}
 800207e:	bf00      	nop
 8002080:	3750      	adds	r7, #80	; 0x50
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_ADC1_Init+0x98>)
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <MX_ADC1_Init+0x9c>)
 80020a6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_ADC1_Init+0x98>)
 80020aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ae:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_ADC1_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_ADC1_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_ADC1_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <MX_ADC1_Init+0xa0>)
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_ADC1_Init+0x98>)
 80020de:	2201      	movs	r2, #1
 80020e0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_ADC1_Init+0x98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_ADC1_Init+0x98>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <MX_ADC1_Init+0x98>)
 80020f2:	f000 ff83 	bl	8002ffc <HAL_ADC_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC1_Init+0x70>
		Error_Handler();
 80020fc:	f000 faee 	bl	80026dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8002100:	230b      	movs	r3, #11
 8002102:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800210c:	463b      	mov	r3, r7
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_ADC1_Init+0x98>)
 8002112:	f000 ffb7 	bl	8003084 <HAL_ADC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_ADC1_Init+0x90>
		Error_Handler();
 800211c:	f000 fade 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000208 	.word	0x20000208
 800212c:	40012000 	.word	0x40012000
 8002130:	0f000001 	.word	0x0f000001

08002134 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_I2C1_Init+0x50>)
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <MX_I2C1_Init+0x54>)
 800213c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_I2C1_Init+0x50>)
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <MX_I2C1_Init+0x58>)
 8002142:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_I2C1_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_I2C1_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_I2C1_Init+0x50>)
 8002152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002156:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <MX_I2C1_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_I2C1_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <MX_I2C1_Init+0x50>)
 8002172:	f001 fc6d 	bl	8003a50 <HAL_I2C_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800217c:	f000 faae 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000250 	.word	0x20000250
 8002188:	40005400 	.word	0x40005400
 800218c:	000186a0 	.word	0x000186a0

08002190 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b096      	sub	sp, #88	; 0x58
 8002194:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2220      	movs	r2, #32
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 ff37 	bl	800903c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021d0:	4a3f      	ldr	r2, [pc, #252]	; (80022d0 <MX_TIM1_Init+0x140>)
 80021d2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1681 - 1;
 80021d4:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021d6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80021da:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1001 - 1;
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b35      	ldr	r3, [pc, #212]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80021fc:	4833      	ldr	r0, [pc, #204]	; (80022cc <MX_TIM1_Init+0x13c>)
 80021fe:	f003 f99d 	bl	800553c <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002208:	f000 fa68 	bl	80026dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002216:	4619      	mov	r1, r3
 8002218:	482c      	ldr	r0, [pc, #176]	; (80022cc <MX_TIM1_Init+0x13c>)
 800221a:	f003 fe49 	bl	8005eb0 <HAL_TIM_ConfigClockSource>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM1_Init+0x98>
		Error_Handler();
 8002224:	f000 fa5a 	bl	80026dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002228:	4828      	ldr	r0, [pc, #160]	; (80022cc <MX_TIM1_Init+0x13c>)
 800222a:	f003 fa39 	bl	80056a0 <HAL_TIM_PWM_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8002234:	f000 fa52 	bl	80026dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002244:	4619      	mov	r1, r3
 8002246:	4821      	ldr	r0, [pc, #132]	; (80022cc <MX_TIM1_Init+0x13c>)
 8002248:	f004 f9ee 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8002252:	f000 fa43 	bl	80026dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	; 0x60
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	4814      	ldr	r0, [pc, #80]	; (80022cc <MX_TIM1_Init+0x13c>)
 800227c:	f003 fd56 	bl	8005d2c <HAL_TIM_PWM_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8002286:	f000 fa29 	bl	80026dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800229e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <MX_TIM1_Init+0x13c>)
 80022ae:	f004 fa29 	bl	8006704 <HAL_TIMEx_ConfigBreakDeadTime>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 80022b8:	f000 fa10 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <MX_TIM1_Init+0x13c>)
 80022be:	f000 fbd9 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80022c2:	bf00      	nop
 80022c4:	3758      	adds	r7, #88	; 0x58
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002a4 	.word	0x200002a4
 80022d0:	40010000 	.word	0x40010000

080022d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f006 feaa 	bl	800903c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_TIM2_Init+0xa4>)
 80022f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_TIM2_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <MX_TIM2_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295 - 1;
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_TIM2_Init+0xa4>)
 8002306:	f06f 0201 	mvn.w	r2, #1
 800230a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_TIM2_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_TIM2_Init+0xa4>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002318:	2303      	movs	r3, #3
 800231a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002330:	2301      	movs	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_TIM2_Init+0xa4>)
 8002344:	f003 fab6 	bl	80058b4 <HAL_TIM_Encoder_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0x7e>
		Error_Handler();
 800234e:	f000 f9c5 	bl	80026dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4806      	ldr	r0, [pc, #24]	; (8002378 <MX_TIM2_Init+0xa4>)
 8002360:	f004 f962 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800236a:	f000 f9b7 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	3730      	adds	r7, #48	; 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002ec 	.word	0x200002ec

0800237c <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MX_TIM10_Init+0x94>)
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <MX_TIM10_Init+0x98>)
 8002398:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 84 - 1;
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <MX_TIM10_Init+0x94>)
 800239c:	2253      	movs	r2, #83	; 0x53
 800239e:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_TIM10_Init+0x94>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000 - 1;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_TIM10_Init+0x94>)
 80023a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ac:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_TIM10_Init+0x94>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <MX_TIM10_Init+0x94>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <MX_TIM10_Init+0x94>)
 80023bc:	f003 f8be 	bl	800553c <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM10_Init+0x4e>
		Error_Handler();
 80023c6:	f000 f989 	bl	80026dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80023ca:	4811      	ldr	r0, [pc, #68]	; (8002410 <MX_TIM10_Init+0x94>)
 80023cc:	f003 f968 	bl	80056a0 <HAL_TIM_PWM_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM10_Init+0x5e>
		Error_Handler();
 80023d6:	f000 f981 	bl	80026dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023da:	2360      	movs	r3, #96	; 0x60
 80023dc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <MX_TIM10_Init+0x94>)
 80023f2:	f003 fc9b 	bl	8005d2c <HAL_TIM_PWM_ConfigChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80023fc:	f000 f96e 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <MX_TIM10_Init+0x94>)
 8002402:	f000 fb37 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000334 	.word	0x20000334
 8002414:	40014400 	.word	0x40014400

08002418 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_TIM11_Init+0x40>)
 800241e:	4a0f      	ldr	r2, [pc, #60]	; (800245c <MX_TIM11_Init+0x44>)
 8002420:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 120 - 1;
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <MX_TIM11_Init+0x40>)
 8002424:	2277      	movs	r2, #119	; 0x77
 8002426:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_TIM11_Init+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 7000 - 1;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <MX_TIM11_Init+0x40>)
 8002430:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002434:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_TIM11_Init+0x40>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_TIM11_Init+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_TIM11_Init+0x40>)
 8002444:	f003 f87a 	bl	800553c <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM11_Init+0x3a>
		Error_Handler();
 800244e:	f000 f945 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000037c 	.word	0x2000037c
 800245c:	40014800 	.word	0x40014800

08002460 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART2_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002498:	f004 f99a 	bl	80067d0 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80024a2:	f000 f91b 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200003c4 	.word	0x200003c4
 80024b0:	40004400 	.word	0x40004400

080024b4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_USART6_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART6_UART_Init+0x4c>)
 80024ec:	f004 f970 	bl	80067d0 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80024f6:	f000 f8f1 	bl	80026dc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000408 	.word	0x20000408
 8002504:	40011400 	.word	0x40011400

08002508 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <MX_GPIO_Init+0xe0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <MX_GPIO_Init+0xe0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <MX_GPIO_Init+0xe0>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <MX_GPIO_Init+0xe0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2101      	movs	r1, #1
 8002592:	4816      	ldr	r0, [pc, #88]	; (80025ec <MX_GPIO_Init+0xe4>)
 8002594:	f001 fa2a 	bl	80039ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	480f      	ldr	r0, [pc, #60]	; (80025ec <MX_GPIO_Init+0xe4>)
 80025b0:	f001 f898 	bl	80036e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR_Pin */
	GPIO_InitStruct.Pin = DIR_Pin;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <MX_GPIO_Init+0xe4>)
 80025cc:	f001 f88a 	bl	80036e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2028      	movs	r0, #40	; 0x28
 80025d6:	f001 f84e 	bl	8003676 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025da:	2028      	movs	r0, #40	; 0x28
 80025dc:	f001 f867 	bl	80036ae <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020800 	.word	0x40020800

080025f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Timer11 for temporization
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d12b      	bne.n	8002658 <HAL_TIM_PeriodElapsedCallback+0x68>
		Flag_10ms = 1;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

		//Encoder
		vehicleState.counts = TIM2->CNT;
 8002606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	461a      	mov	r2, r3
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002610:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 8002612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	6253      	str	r3, [r2, #36]	; 0x24

		//References
		time_counter++;
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002628:	6013      	str	r3, [r2, #0]

		if (time_counter == 200) {
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2bc8      	cmp	r3, #200	; 0xc8
 8002630:	d10a      	bne.n	8002648 <HAL_TIM_PeriodElapsedCallback+0x58>
			data.curvature_radius_ref_m = 1.3; //2.2;//2.2; //1.3;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002634:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002636:	60da      	str	r2, [r3, #12]
			pid_steering.Iterm = 0;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
			pid_steering.e_old = 0;
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
		}

		if (time_counter == 580) {
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002650:	d102      	bne.n	8002658 <HAL_TIM_PeriodElapsedCallback+0x68>
			data.enable = 0;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
		 data.enable = 0;
		 }
		 */

	}
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	2000037c 	.word	0x2000037c
 8002668:	200004f0 	.word	0x200004f0
 800266c:	20000460 	.word	0x20000460
 8002670:	200004f4 	.word	0x200004f4
 8002674:	2000044c 	.word	0x2000044c
 8002678:	3fa66666 	.word	0x3fa66666
 800267c:	200004c0 	.word	0x200004c0

08002680 <__io_putchar>:

//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002688:	1d39      	adds	r1, r7, #4
 800268a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268e:	2201      	movs	r2, #1
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <__io_putchar+0x20>)
 8002692:	f004 f8ea 	bl	800686a <HAL_UART_Transmit>
	return ch;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200003c4 	.word	0x200003c4

080026a4 <HAL_GPIO_EXTI_Callback>:

//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b4:	d10a      	bne.n	80026cc <HAL_GPIO_EXTI_Callback+0x28>
		if (HardwareEnable == 0) {
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <HAL_GPIO_EXTI_Callback+0x22>
			HardwareEnable = 1;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
		} else {
			HardwareEnable = 0;
		}
	}
}
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_EXTI_Callback+0x28>
			HardwareEnable = 0;
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	2000000c 	.word	0x2000000c

080026dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026e4:	e7fe      	b.n	80026e4 <Error_Handler+0x8>
	...

080026e8 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <servo_motor+0xb8>)
 80026f4:	617b      	str	r3, [r7, #20]
	  float ccr;
	  float conv_angolo;

	  if(angolo < MIN_ANGOLO)
 80026f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80026fa:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d502      	bpl.n	800270e <servo_motor+0x26>

		   angolo = MIN_ANGOLO;
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <servo_motor+0xbc>)
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e00a      	b.n	8002724 <servo_motor+0x3c>

	  else if (angolo > MAX_ANGOLO)
 800270e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002712:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	dd01      	ble.n	8002724 <servo_motor+0x3c>

		   angolo = MAX_ANGOLO;
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <servo_motor+0xc0>)
 8002722:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + DRITTO;
 8002724:	edd7 7a01 	vldr	s15, [r7, #4]
 8002728:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80027ac <servo_motor+0xc4>
 800272c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002730:	edc7 7a04 	vstr	s15, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8002734:	6938      	ldr	r0, [r7, #16]
 8002736:	f7fd ff0f 	bl	8000558 <__aeabi_f2d>
 800273a:	a317      	add	r3, pc, #92	; (adr r3, 8002798 <servo_motor+0xb0>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fd ff62 	bl	8000608 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <servo_motor+0xc8>)
 8002752:	f7fd fda3 	bl	800029c <__adddf3>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4614      	mov	r4, r2
 800275c:	461d      	mov	r5, r3
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7fd fefa 	bl	8000558 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f7fe f876 	bl	800085c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe fa3e 	bl	8000bf8 <__aeabi_d2f>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <servo_motor+0xcc>)
 8002782:	edd7 7a03 	vldr	s15, [r7, #12]
 8002786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278a:	ee17 2a90 	vmov	r2, s15
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bdb0      	pop	{r4, r5, r7, pc}
 8002798:	f544bb1b 	.word	0xf544bb1b
 800279c:	3f86c0d6 	.word	0x3f86c0d6
 80027a0:	3ca3d70a 	.word	0x3ca3d70a
 80027a4:	c1f00000 	.word	0xc1f00000
 80027a8:	41f00000 	.word	0x41f00000
 80027ac:	42b80000 	.word	0x42b80000
 80027b0:	3fe00000 	.word	0x3fe00000
 80027b4:	40010000 	.word	0x40010000

080027b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <HAL_MspInit+0x4c>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_MspInit+0x4c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a08      	ldr	r2, [pc, #32]	; (8002804 <HAL_MspInit+0x4c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027f6:	2007      	movs	r0, #7
 80027f8:	f000 ff32 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_ADC_MspInit+0x7c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d127      	bne.n	800287a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_ADC_MspInit+0x80>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_ADC_MspInit+0x80>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_ADC_MspInit+0x80>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_ADC_MspInit+0x80>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_ADC_MspInit+0x80>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_ADC_MspInit+0x80>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002862:	2302      	movs	r3, #2
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <HAL_ADC_MspInit+0x84>)
 8002876:	f000 ff35 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40012000 	.word	0x40012000
 8002888:	40023800 	.word	0x40023800
 800288c:	40020800 	.word	0x40020800

08002890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_I2C_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d2:	2312      	movs	r3, #18
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028de:	2304      	movs	r3, #4
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <HAL_I2C_MspInit+0x8c>)
 80028ea:	f000 fefb 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_I2C_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005400 	.word	0x40005400
 8002918:	40023800 	.word	0x40023800
 800291c:	40020400 	.word	0x40020400

08002920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_TIM_Base_MspInit+0xb8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d11e      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a28      	ldr	r2, [pc, #160]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2018      	movs	r0, #24
 8002954:	f000 fe8f 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002958:	2018      	movs	r0, #24
 800295a:	f000 fea8 	bl	80036ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	201a      	movs	r0, #26
 8002964:	f000 fe87 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002968:	201a      	movs	r0, #26
 800296a:	f000 fea0 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800296e:	e02e      	b.n	80029ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
}
 8002996:	e01a      	b.n	80029ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_TIM_Base_MspInit+0xc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d115      	bne.n	80029ce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_TIM_Base_MspInit+0xbc>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	201a      	movs	r0, #26
 80029c4:	f000 fe57 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029c8:	201a      	movs	r0, #26
 80029ca:	f000 fe70 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800

080029e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d12b      	bne.n	8002a62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8002a42:	2303      	movs	r3, #3
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a5e:	f000 fe41 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a25      	ldr	r2, [pc, #148]	; (8002b28 <HAL_TIM_MspPostInit+0xb4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d11f      	bne.n	8002ad6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	4818      	ldr	r0, [pc, #96]	; (8002b30 <HAL_TIM_MspPostInit+0xbc>)
 8002ad0:	f000 fe08 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002ad4:	e023      	b.n	8002b1e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_TIM_MspPostInit+0xc0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d11e      	bne.n	8002b1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	6313      	str	r3, [r2, #48]	; 0x30
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_TIM_MspPostInit+0xb8>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8002afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4807      	ldr	r0, [pc, #28]	; (8002b38 <HAL_TIM_MspPostInit+0xc4>)
 8002b1a:	f000 fde3 	bl	80036e4 <HAL_GPIO_Init>
}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40020400 	.word	0x40020400

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_UART_MspInit+0xe8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12c      	bne.n	8002bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8002b96:	230c      	movs	r3, #12
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481e      	ldr	r0, [pc, #120]	; (8002c2c <HAL_UART_MspInit+0xf0>)
 8002bb2:	f000 fd97 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bb6:	e030      	b.n	8002c1a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_UART_MspInit+0xf4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d12b      	bne.n	8002c1a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_UART_MspInit+0xec>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bfa:	23c0      	movs	r3, #192	; 0xc0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <HAL_UART_MspInit+0xf8>)
 8002c16:	f000 fd65 	bl	80036e4 <HAL_GPIO_Init>
}
 8002c1a:	bf00      	nop
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40004400 	.word	0x40004400
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	40020800 	.word	0x40020800

08002c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <NMI_Handler+0x4>

08002c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <HardFault_Handler+0x4>

08002c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <MemManage_Handler+0x4>

08002c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <BusFault_Handler+0x4>

08002c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <UsageFault_Handler+0x4>

08002c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c84:	f000 f976 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002c92:	f002 ff43 	bl	8005b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002a4 	.word	0x200002a4

08002ca0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002ca6:	f002 ff39 	bl	8005b1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002caa:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002cac:	f002 ff36 	bl	8005b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200002a4 	.word	0x200002a4
 8002cb8:	2000037c 	.word	0x2000037c

08002cbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cc4:	f000 feac 	bl	8003a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return 1;
 8002cd0:	2301      	movs	r3, #1
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_kill>:

int _kill(int pid, int sig)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ce6:	f006 fa97 	bl	8009218 <__errno>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2216      	movs	r2, #22
 8002cee:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_exit>:

void _exit (int status)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffe7 	bl	8002cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d0e:	e7fe      	b.n	8002d0e <_exit+0x12>

08002d10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e00a      	b.n	8002d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d22:	f3af 8000 	nop.w
 8002d26:	4601      	mov	r1, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	60ba      	str	r2, [r7, #8]
 8002d2e:	b2ca      	uxtb	r2, r1
 8002d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	dbf0      	blt.n	8002d22 <_read+0x12>
  }

  return len;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e009      	b.n	8002d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60ba      	str	r2, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fc8b 	bl	8002680 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbf1      	blt.n	8002d5c <_write+0x12>
  }
  return len;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_close>:

int _close(int file)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002daa:	605a      	str	r2, [r3, #4]
  return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_isatty>:

int _isatty(int file)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f006 f9fc 	bl	8009218 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20018000 	.word	0x20018000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20000528 	.word	0x20000528
 8002e54:	20000680 	.word	0x20000680

08002e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e82:	490e      	ldr	r1, [pc, #56]	; (8002ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e98:	4c0b      	ldr	r4, [pc, #44]	; (8002ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea6:	f7ff ffd7 	bl	8002e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f006 f9bb 	bl	8009224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7fe fdaf 	bl	8001a10 <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ec0:	0800c238 	.word	0x0800c238
  ldr r2, =_sbss
 8002ec4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ec8:	2000067c 	.word	0x2000067c

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f000 fbb1 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fc58 	bl	80027b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fbc9 	bl	80036ca <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f000 fb91 	bl	8003676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	20000018 	.word	0x20000018
 8002f70:	20000014 	.word	0x20000014

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000018 	.word	0x20000018
 8002f98:	2000052c 	.word	0x2000052c

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	2000052c 	.word	0x2000052c

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000018 	.word	0x20000018

08002ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e033      	b.n	800307a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fbf4 	bl	8002808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003042:	f023 0302 	bic.w	r3, r3, #2
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f93a 	bl	80032c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
 800306a:	e001      	b.n	8003070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x1c>
 800309c:	2302      	movs	r3, #2
 800309e:	e105      	b.n	80032ac <HAL_ADC_ConfigChannel+0x228>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	d925      	bls.n	80030fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	2207      	movs	r2, #7
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43da      	mvns	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	400a      	ands	r2, r1
 80030d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68d9      	ldr	r1, [r3, #12]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	4603      	mov	r3, r0
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4403      	add	r3, r0
 80030ee:	3b1e      	subs	r3, #30
 80030f0:	409a      	lsls	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e022      	b.n	8003142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	2207      	movs	r2, #7
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	400a      	ands	r2, r1
 800311e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	4618      	mov	r0, r3
 8003132:	4603      	mov	r3, r0
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4403      	add	r3, r0
 8003138:	409a      	lsls	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d824      	bhi.n	8003194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3b05      	subs	r3, #5
 800315c:	221f      	movs	r2, #31
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	400a      	ands	r2, r1
 800316a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b05      	subs	r3, #5
 8003186:	fa00 f203 	lsl.w	r2, r0, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
 8003192:	e04c      	b.n	800322e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d824      	bhi.n	80031e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b23      	subs	r3, #35	; 0x23
 80031ae:	221f      	movs	r2, #31
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43da      	mvns	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	400a      	ands	r2, r1
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	3b23      	subs	r3, #35	; 0x23
 80031d8:	fa00 f203 	lsl.w	r2, r0, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	e023      	b.n	800322e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b41      	subs	r3, #65	; 0x41
 80031f8:	221f      	movs	r2, #31
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	400a      	ands	r2, r1
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	3b41      	subs	r3, #65	; 0x41
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_ADC_ConfigChannel+0x234>)
 8003230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_ADC_ConfigChannel+0x238>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d109      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1cc>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b12      	cmp	r3, #18
 8003242:	d105      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_ADC_ConfigChannel+0x238>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d123      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x21e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b10      	cmp	r3, #16
 8003260:	d003      	beq.n	800326a <HAL_ADC_ConfigChannel+0x1e6>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b11      	cmp	r3, #17
 8003268:	d11b      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b10      	cmp	r3, #16
 800327c:	d111      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_ConfigChannel+0x23c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_ADC_ConfigChannel+0x240>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	0c9a      	lsrs	r2, r3, #18
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003294:	e002      	b.n	800329c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3b01      	subs	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f9      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012300 	.word	0x40012300
 80032bc:	40012000 	.word	0x40012000
 80032c0:	20000010 	.word	0x20000010
 80032c4:	431bde83 	.word	0x431bde83

080032c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <ADC_Init+0x1f0>)
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	021a      	lsls	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	4a58      	ldr	r2, [pc, #352]	; (80034bc <ADC_Init+0x1f4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800336e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6899      	ldr	r1, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	e00f      	b.n	80033c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0202 	bic.w	r2, r2, #2
 80033d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7e1b      	ldrb	r3, [r3, #24]
 80033e0:	005a      	lsls	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003402:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	3b01      	subs	r3, #1
 8003420:	035a      	lsls	r2, r3, #13
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e007      	b.n	800343c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	3b01      	subs	r3, #1
 8003458:	051a      	lsls	r2, r3, #20
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800347e:	025a      	lsls	r2, r3, #9
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	029a      	lsls	r2, r3, #10
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40012300 	.word	0x40012300
 80034bc:	0f000001 	.word	0x0f000001

080034c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034dc:	4013      	ands	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	60d3      	str	r3, [r2, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <__NVIC_GetPriorityGrouping+0x18>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0307 	and.w	r3, r3, #7
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	db0b      	blt.n	800354e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	f003 021f 	and.w	r2, r3, #31
 800353c:	4907      	ldr	r1, [pc, #28]	; (800355c <__NVIC_EnableIRQ+0x38>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2001      	movs	r0, #1
 8003546:	fa00 f202 	lsl.w	r2, r0, r2
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	; (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	; (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362c:	d301      	bcc.n	8003632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <SysTick_Config+0x40>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363a:	210f      	movs	r1, #15
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f7ff ff8e 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <SysTick_Config+0x40>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364a:	4b04      	ldr	r3, [pc, #16]	; (800365c <SysTick_Config+0x40>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff29 	bl	80034c0 <__NVIC_SetPriorityGrouping>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003688:	f7ff ff3e 	bl	8003508 <__NVIC_GetPriorityGrouping>
 800368c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff8e 	bl	80035b4 <NVIC_EncodePriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <__NVIC_SetPriority>
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff31 	bl	8003524 <__NVIC_EnableIRQ>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa2 	bl	800361c <SysTick_Config>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e159      	b.n	80039b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8148 	bne.w	80039ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a2 	beq.w	80039ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a56      	ldr	r2, [pc, #344]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b54      	ldr	r3, [pc, #336]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a49      	ldr	r2, [pc, #292]	; (80039d4 <HAL_GPIO_Init+0x2f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x202>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_GPIO_Init+0x2f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x1fe>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a47      	ldr	r2, [pc, #284]	; (80039dc <HAL_GPIO_Init+0x2f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x1fa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a46      	ldr	r2, [pc, #280]	; (80039e0 <HAL_GPIO_Init+0x2fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x1f6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a45      	ldr	r2, [pc, #276]	; (80039e4 <HAL_GPIO_Init+0x300>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x1f2>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4935      	ldr	r1, [pc, #212]	; (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x304>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_GPIO_Init+0x304>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a8:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f aea2 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fe30 	bl	80026a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40013c00 	.word	0x40013c00

08003a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e12b      	b.n	8003cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe ff0a 	bl	8002890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f001 fd1a 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a81      	ldr	r2, [pc, #516]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d807      	bhi.n	8003ad4 <HAL_I2C_Init+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_I2C_Init+0x278>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e006      	b.n	8003ae2 <HAL_I2C_Init+0x92>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <HAL_I2C_Init+0x27c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0e7      	b.n	8003cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a78      	ldr	r2, [pc, #480]	; (8003cd0 <HAL_I2C_Init+0x280>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a6a      	ldr	r2, [pc, #424]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d802      	bhi.n	8003b24 <HAL_I2C_Init+0xd4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3301      	adds	r3, #1
 8003b22:	e009      	b.n	8003b38 <HAL_I2C_Init+0xe8>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_I2C_Init+0x284>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	495c      	ldr	r1, [pc, #368]	; (8003cc4 <HAL_I2C_Init+0x274>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d819      	bhi.n	8003b8c <HAL_I2C_Init+0x13c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e59      	subs	r1, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_I2C_Init+0x138>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	e051      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e04f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_I2C_Init+0x168>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e012      	b.n	8003bde <HAL_I2C_Init+0x18e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	0099      	lsls	r1, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Init+0x196>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e022      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <HAL_I2C_Init+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e58      	subs	r0, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	440b      	add	r3, r1
 8003bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Init+0x1dc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6809      	ldr	r1, [r1, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6911      	ldr	r1, [r2, #16]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	000186a0 	.word	0x000186a0
 8003cc8:	001e847f 	.word	0x001e847f
 8003ccc:	003d08ff 	.word	0x003d08ff
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	817b      	strh	r3, [r7, #10]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff f956 	bl	8002f9c <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	f040 80e0 	bne.w	8003ec0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2319      	movs	r3, #25
 8003d06:	2201      	movs	r2, #1
 8003d08:	4970      	ldr	r1, [pc, #448]	; (8003ecc <HAL_I2C_Master_Transmit+0x1f4>)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fda0 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
 8003d18:	e0d3      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Master_Transmit+0x50>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0cc      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d007      	beq.n	8003d4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2221      	movs	r2, #33	; 0x21
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	893a      	ldrh	r2, [r7, #8]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	; (8003ed0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fc0a 	bl	80045b0 <I2C_MasterRequestWrite>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e08d      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dbc:	e066      	b.n	8003e8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	6a39      	ldr	r1, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fe1a 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d107      	bne.n	8003de6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e06b      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d11b      	bne.n	8003e60 <HAL_I2C_Master_Transmit+0x188>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d017      	beq.n	8003e60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6a39      	ldr	r1, [r7, #32]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fe0a 	bl	8004a7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d107      	bne.n	8003e88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e01a      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d194      	bne.n	8003dbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	00100002 	.word	0x00100002
 8003ed0:	ffff0000 	.word	0xffff0000

08003ed4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	817b      	strh	r3, [r7, #10]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff f858 	bl	8002f9c <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	f040 820b 	bne.w	8004312 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2319      	movs	r3, #25
 8003f02:	2201      	movs	r2, #1
 8003f04:	497c      	ldr	r1, [pc, #496]	; (80040f8 <HAL_I2C_Master_Receive+0x224>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fca2 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
 8003f14:	e1fe      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2C_Master_Receive+0x50>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e1f7      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d007      	beq.n	8003f4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2222      	movs	r2, #34	; 0x22
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2210      	movs	r2, #16
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_I2C_Master_Receive+0x228>)
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fb8e 	bl	80046b4 <I2C_MasterRequestRead>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1b8      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d113      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e18c      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d11b      	bne.n	8004012 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e16c      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	2b02      	cmp	r3, #2
 8004018:	d11b      	bne.n	8004052 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	e14c      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004078:	e138      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	2b03      	cmp	r3, #3
 8004080:	f200 80f1 	bhi.w	8004266 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	2b01      	cmp	r3, #1
 800408a:	d123      	bne.n	80040d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fd35 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e139      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d2:	e10b      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d14e      	bne.n	800417a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	2200      	movs	r2, #0
 80040e4:	4906      	ldr	r1, [pc, #24]	; (8004100 <HAL_I2C_Master_Receive+0x22c>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fbb2 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e10e      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
 80040f6:	bf00      	nop
 80040f8:	00100002 	.word	0x00100002
 80040fc:	ffff0000 	.word	0xffff0000
 8004100:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004178:	e0b8      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2200      	movs	r2, #0
 8004182:	4966      	ldr	r1, [pc, #408]	; (800431c <HAL_I2C_Master_Receive+0x448>)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fb63 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0bf      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2200      	movs	r2, #0
 80041de:	494f      	ldr	r1, [pc, #316]	; (800431c <HAL_I2C_Master_Receive+0x448>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb35 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e091      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004264:	e042      	b.n	80042ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fc48 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e04c      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d118      	bne.n	80042ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f aec2 	bne.w	800407a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3728      	adds	r7, #40	; 0x28
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	00010004 	.word	0x00010004

08004320 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	460b      	mov	r3, r1
 800432e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7fe fe34 	bl	8002f9c <HAL_GetTick>
 8004334:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b20      	cmp	r3, #32
 8004344:	f040 8111 	bne.w	800456a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2319      	movs	r3, #25
 800434e:	2201      	movs	r2, #1
 8004350:	4988      	ldr	r1, [pc, #544]	; (8004574 <HAL_I2C_IsDeviceReady+0x254>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa7c 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
 8004360:	e104      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_I2C_IsDeviceReady+0x50>
 800436c:	2302      	movs	r3, #2
 800436e:	e0fd      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d007      	beq.n	8004396 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a70      	ldr	r2, [pc, #448]	; (8004578 <HAL_I2C_IsDeviceReady+0x258>)
 80043b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa3a 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f0:	d103      	bne.n	80043fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0b6      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800440c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800440e:	f7fe fdc5 	bl	8002f9c <HAL_GetTick>
 8004412:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004442:	e025      	b.n	8004490 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fe fdaa 	bl	8002f9c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <HAL_I2C_IsDeviceReady+0x13a>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22a0      	movs	r2, #160	; 0xa0
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2ba0      	cmp	r3, #160	; 0xa0
 800449a:	d005      	beq.n	80044a8 <HAL_I2C_IsDeviceReady+0x188>
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_I2C_IsDeviceReady+0x188>
 80044a2:	7dbb      	ldrb	r3, [r7, #22]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0cd      	beq.n	8004444 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d129      	bne.n	8004512 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2319      	movs	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	4921      	ldr	r1, [pc, #132]	; (8004574 <HAL_I2C_IsDeviceReady+0x254>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f9ae 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e036      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e02c      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004520:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800452a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	490f      	ldr	r1, [pc, #60]	; (8004574 <HAL_I2C_IsDeviceReady+0x254>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f98a 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e012      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3301      	adds	r3, #1
 800454a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	f4ff af32 	bcc.w	80043ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	00100002 	.word	0x00100002
 8004578:	ffff0000 	.word	0xffff0000

0800457c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	b2db      	uxtb	r3, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d006      	beq.n	80045da <I2C_MasterRequestWrite+0x2a>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d003      	beq.n	80045da <I2C_MasterRequestWrite+0x2a>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e00b      	b.n	8004604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b12      	cmp	r3, #18
 80045f2:	d107      	bne.n	8004604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f91d 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d103      	bne.n	8004634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e035      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004640:	d108      	bne.n	8004654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004650:	611a      	str	r2, [r3, #16]
 8004652:	e01b      	b.n	800468c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	11db      	asrs	r3, r3, #7
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f063 030f 	orn	r3, r3, #15
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <I2C_MasterRequestWrite+0xfc>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f943 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e010      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <I2C_MasterRequestWrite+0x100>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f933 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	00010008 	.word	0x00010008
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	460b      	mov	r3, r1
 80046c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d006      	beq.n	80046ee <I2C_MasterRequestRead+0x3a>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d003      	beq.n	80046ee <I2C_MasterRequestRead+0x3a>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e00b      	b.n	8004718 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b11      	cmp	r3, #17
 8004706:	d107      	bne.n	8004718 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f893 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e079      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d108      	bne.n	8004768 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e05f      	b.n	8004828 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	11db      	asrs	r3, r3, #7
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f063 030f 	orn	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4930      	ldr	r1, [pc, #192]	; (8004848 <I2C_MasterRequestRead+0x194>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f8b9 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e054      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4929      	ldr	r1, [pc, #164]	; (800484c <I2C_MasterRequestRead+0x198>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8a9 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e044      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f831 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	d103      	bne.n	800480c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e017      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	11db      	asrs	r3, r3, #7
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0306 	and.w	r3, r3, #6
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f063 030e 	orn	r3, r3, #14
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4907      	ldr	r1, [pc, #28]	; (800484c <I2C_MasterRequestRead+0x198>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f865 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010008 	.word	0x00010008
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	e025      	b.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d021      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fe fb97 	bl	8002f9c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e023      	b.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10d      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	e00c      	b.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b6      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490c:	e051      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d123      	bne.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004936:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e046      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d021      	beq.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fe fb15 	bl	8002f9c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e020      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10c      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	43da      	mvns	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e00b      	b.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	43da      	mvns	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d18d      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8ce 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02d      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fe fabb 	bl	8002f9c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e007      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d1ca      	bne.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f88d 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e02d      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d021      	beq.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fe fa7a 	bl	8002f9c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d1ca      	bne.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b0c:	e042      	b.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d119      	bne.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e029      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fe fa24 	bl	8002f9c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e007      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d1b5      	bne.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d11b      	bne.n	8004bfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e267      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d075      	beq.n	8004d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d00c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c36:	4b85      	ldr	r3, [pc, #532]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d112      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	4b82      	ldr	r3, [pc, #520]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	4b7e      	ldr	r3, [pc, #504]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05b      	beq.n	8004d14 <HAL_RCC_OscConfig+0x108>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d157      	bne.n	8004d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e242      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	d106      	bne.n	8004c80 <HAL_RCC_OscConfig+0x74>
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a75      	ldr	r2, [pc, #468]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x98>
 8004c8a:	4b70      	ldr	r3, [pc, #448]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6f      	ldr	r2, [pc, #444]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6c      	ldr	r2, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xb0>
 8004ca4:	4b69      	ldr	r3, [pc, #420]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a68      	ldr	r2, [pc, #416]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a65      	ldr	r2, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fe f96a 	bl	8002f9c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fe f966 	bl	8002f9c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e207      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xc0>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fe f956 	bl	8002f9c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fe f952 	bl	8002f9c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1f3      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	4b51      	ldr	r3, [pc, #324]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xe8>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d22:	4b4a      	ldr	r3, [pc, #296]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2e:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3a:	4b44      	ldr	r3, [pc, #272]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1c7      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4937      	ldr	r1, [pc, #220]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	e03a      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7c:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fe f90b 	bl	8002f9c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fe f907 	bl	8002f9c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1a8      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4925      	ldr	r1, [pc, #148]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fe f8ea 	bl	8002f9c <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7fe f8e6 	bl	8002f9c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e187      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d036      	beq.n	8004e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fe f8ca 	bl	8002f9c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0c:	f7fe f8c6 	bl	8002f9c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e167      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x240>)
 8004e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x200>
 8004e2a:	e01b      	b.n	8004e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_OscConfig+0x248>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7fe f8b3 	bl	8002f9c <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	e00e      	b.n	8004e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7fe f8af 	bl	8002f9c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d907      	bls.n	8004e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e150      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	42470000 	.word	0x42470000
 8004e54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ea      	bne.n	8004e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8097 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e76:	4b81      	ldr	r3, [pc, #516]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	4b7d      	ldr	r3, [pc, #500]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	4a7c      	ldr	r2, [pc, #496]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6413      	str	r3, [r2, #64]	; 0x40
 8004e92:	4b7a      	ldr	r3, [pc, #488]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b77      	ldr	r3, [pc, #476]	; (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d118      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eae:	4b74      	ldr	r3, [pc, #464]	; (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a73      	ldr	r2, [pc, #460]	; (8005080 <HAL_RCC_OscConfig+0x474>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eba:	f7fe f86f 	bl	8002f9c <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7fe f86b 	bl	8002f9c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e10c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCC_OscConfig+0x474>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x2ea>
 8004ee8:	4b64      	ldr	r3, [pc, #400]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	4a63      	ldr	r2, [pc, #396]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x30c>
 8004efe:	4b5f      	ldr	r3, [pc, #380]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a5e      	ldr	r2, [pc, #376]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0a:	4b5c      	ldr	r3, [pc, #368]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	4a5b      	ldr	r2, [pc, #364]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	; 0x70
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0x324>
 8004f18:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	4a57      	ldr	r2, [pc, #348]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	; 0x70
 8004f24:	4b55      	ldr	r3, [pc, #340]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a54      	ldr	r2, [pc, #336]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fe f830 	bl	8002f9c <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fe f82c 	bl	8002f9c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0cb      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	4b49      	ldr	r3, [pc, #292]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ee      	beq.n	8004f40 <HAL_RCC_OscConfig+0x334>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f64:	f7fe f81a 	bl	8002f9c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fe f816 	bl	8002f9c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0b5      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f82:	4b3e      	ldr	r3, [pc, #248]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ee      	bne.n	8004f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f94:	4b39      	ldr	r3, [pc, #228]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	4a38      	ldr	r2, [pc, #224]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a1 	beq.w	80050ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004faa:	4b34      	ldr	r3, [pc, #208]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d05c      	beq.n	8005070 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d141      	bne.n	8005042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <HAL_RCC_OscConfig+0x478>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd ffea 	bl	8002f9c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd ffe6 	bl	8002f9c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e087      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	3b01      	subs	r3, #1
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	491b      	ldr	r1, [pc, #108]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCC_OscConfig+0x478>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fd ffbf 	bl	8002f9c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005022:	f7fd ffbb 	bl	8002f9c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e05c      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x416>
 8005040:	e054      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <HAL_RCC_OscConfig+0x478>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fd ffa8 	bl	8002f9c <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005050:	f7fd ffa4 	bl	8002f9c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e045      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_OscConfig+0x470>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x444>
 800506e:	e03d      	b.n	80050ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e038      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000
 8005084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x4ec>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d028      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d121      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d11a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	3b01      	subs	r3, #1
 80050d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0cc      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b68      	ldr	r3, [pc, #416]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d90c      	bls.n	8005138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b65      	ldr	r3, [pc, #404]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0b8      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d020      	beq.n	8005186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005150:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a58      	ldr	r2, [pc, #352]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800515a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005168:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a52      	ldr	r2, [pc, #328]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b50      	ldr	r3, [pc, #320]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	494d      	ldr	r1, [pc, #308]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d044      	beq.n	800521c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b47      	ldr	r3, [pc, #284]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d119      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e07f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ba:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ca:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e067      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051da:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 0203 	bic.w	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4934      	ldr	r1, [pc, #208]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ec:	f7fd fed6 	bl	8002f9c <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	e00a      	b.n	800520a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f4:	f7fd fed2 	bl	8002f9c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e04f      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 020c 	and.w	r2, r3, #12
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	429a      	cmp	r2, r3
 800521a:	d1eb      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d20c      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e032      	b.n	80052aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4916      	ldr	r1, [pc, #88]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	490e      	ldr	r1, [pc, #56]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005282:	f000 f821 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8005286:	4602      	mov	r2, r0
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	490a      	ldr	r1, [pc, #40]	; (80052bc <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	5ccb      	ldrb	r3, [r1, r3]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd fe36 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40023c00 	.word	0x40023c00
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800bd88 	.word	0x0800bd88
 80052c0:	20000010 	.word	0x20000010
 80052c4:	20000014 	.word	0x20000014

080052c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052cc:	b094      	sub	sp, #80	; 0x50
 80052ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	647b      	str	r3, [r7, #68]	; 0x44
 80052d4:	2300      	movs	r3, #0
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d8:	2300      	movs	r3, #0
 80052da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e0:	4b79      	ldr	r3, [pc, #484]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d00d      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x40>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	f200 80e1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x34>
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d003      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x3a>
 80052fa:	e0db      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b73      	ldr	r3, [pc, #460]	; (80054cc <HAL_RCC_GetSysClockFreq+0x204>)
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005300:	e0db      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005302:	4b73      	ldr	r3, [pc, #460]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005306:	e0d8      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005308:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005312:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d063      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531e:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	2200      	movs	r2, #0
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
 8005328:	63fa      	str	r2, [r7, #60]	; 0x3c
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	633b      	str	r3, [r7, #48]	; 0x30
 8005332:	2300      	movs	r3, #0
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
 8005336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f04f 0000 	mov.w	r0, #0
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	0159      	lsls	r1, r3, #5
 8005348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534c:	0150      	lsls	r0, r2, #5
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4621      	mov	r1, r4
 8005354:	1a51      	subs	r1, r2, r1
 8005356:	6139      	str	r1, [r7, #16]
 8005358:	4629      	mov	r1, r5
 800535a:	eb63 0301 	sbc.w	r3, r3, r1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800536c:	4659      	mov	r1, fp
 800536e:	018b      	lsls	r3, r1, #6
 8005370:	4651      	mov	r1, sl
 8005372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005376:	4651      	mov	r1, sl
 8005378:	018a      	lsls	r2, r1, #6
 800537a:	4651      	mov	r1, sl
 800537c:	ebb2 0801 	subs.w	r8, r2, r1
 8005380:	4659      	mov	r1, fp
 8005382:	eb63 0901 	sbc.w	r9, r3, r1
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539a:	4690      	mov	r8, r2
 800539c:	4699      	mov	r9, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	eb18 0303 	adds.w	r3, r8, r3
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	462b      	mov	r3, r5
 80053a8:	eb49 0303 	adc.w	r3, r9, r3
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ba:	4629      	mov	r1, r5
 80053bc:	024b      	lsls	r3, r1, #9
 80053be:	4621      	mov	r1, r4
 80053c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c4:	4621      	mov	r1, r4
 80053c6:	024a      	lsls	r2, r1, #9
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ce:	2200      	movs	r2, #0
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053d8:	f7fb fc5e 	bl	8000c98 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e4:	e058      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e6:	4b38      	ldr	r3, [pc, #224]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	2200      	movs	r2, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	4611      	mov	r1, r2
 80053f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	2300      	movs	r3, #0
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	0159      	lsls	r1, r3, #5
 800540e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005412:	0150      	lsls	r0, r2, #5
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4641      	mov	r1, r8
 800541a:	ebb2 0a01 	subs.w	sl, r2, r1
 800541e:	4649      	mov	r1, r9
 8005420:	eb63 0b01 	sbc.w	fp, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005438:	ebb2 040a 	subs.w	r4, r2, sl
 800543c:	eb63 050b 	sbc.w	r5, r3, fp
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00eb      	lsls	r3, r5, #3
 800544a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544e:	00e2      	lsls	r2, r4, #3
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	4643      	mov	r3, r8
 8005456:	18e3      	adds	r3, r4, r3
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	464b      	mov	r3, r9
 800545c:	eb45 0303 	adc.w	r3, r5, r3
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005482:	2200      	movs	r2, #0
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	61fa      	str	r2, [r7, #28]
 8005488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800548c:	f7fb fc04 	bl	8000c98 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetSysClockFreq+0x204>)
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3750      	adds	r7, #80	; 0x50
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000010 	.word	0x20000010

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800bd98 	.word	0x0800bd98

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	0800bd98 	.word	0x0800bd98

0800553c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e041      	b.n	80055d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd f9dc 	bl	8002920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f000 fd88 	bl	8006090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e044      	b.n	800567e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1e      	ldr	r2, [pc, #120]	; (800568c <HAL_TIM_Base_Start_IT+0xb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561e:	d013      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <HAL_TIM_Base_Start_IT+0xb4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <HAL_TIM_Base_Start_IT+0xb8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_TIM_Base_Start_IT+0xbc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a16      	ldr	r2, [pc, #88]	; (800569c <HAL_TIM_Base_Start_IT+0xc0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b06      	cmp	r3, #6
 8005658:	d010      	beq.n	800567c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	e007      	b.n	800567c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40014000 	.word	0x40014000

080056a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e041      	b.n	8005736 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f839 	bl	800573e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 fcd6 	bl	8006090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_TIM_PWM_Start+0x24>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e022      	b.n	80057be <HAL_TIM_PWM_Start+0x6a>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d109      	bne.n	8005792 <HAL_TIM_PWM_Start+0x3e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	e015      	b.n	80057be <HAL_TIM_PWM_Start+0x6a>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d109      	bne.n	80057ac <HAL_TIM_PWM_Start+0x58>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e008      	b.n	80057be <HAL_TIM_PWM_Start+0x6a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e068      	b.n	8005898 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x82>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d4:	e013      	b.n	80057fe <HAL_TIM_PWM_Start+0xaa>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x92>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	e00b      	b.n	80057fe <HAL_TIM_PWM_Start+0xaa>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f4:	e003      	b.n	80057fe <HAL_TIM_PWM_Start+0xaa>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fee8 	bl	80065dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a23      	ldr	r2, [pc, #140]	; (80058a0 <HAL_TIM_PWM_Start+0x14c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d107      	bne.n	8005826 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_TIM_PWM_Start+0x14c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d018      	beq.n	8005862 <HAL_TIM_PWM_Start+0x10e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d013      	beq.n	8005862 <HAL_TIM_PWM_Start+0x10e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_TIM_PWM_Start+0x150>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_TIM_PWM_Start+0x10e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <HAL_TIM_PWM_Start+0x154>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_TIM_PWM_Start+0x10e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a16      	ldr	r2, [pc, #88]	; (80058ac <HAL_TIM_PWM_Start+0x158>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_TIM_PWM_Start+0x10e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_TIM_PWM_Start+0x15c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d111      	bne.n	8005886 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d010      	beq.n	8005896 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	e007      	b.n	8005896 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40014000 	.word	0x40014000

080058b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e097      	b.n	80059f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fd f883 	bl	80029e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f8:	f023 0307 	bic.w	r3, r3, #7
 80058fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fbc1 	bl	8006090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	4313      	orrs	r3, r2
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005954:	f023 030c 	bic.w	r3, r3, #12
 8005958:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	4313      	orrs	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	011a      	lsls	r2, r3, #4
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	031b      	lsls	r3, r3, #12
 8005984:	4313      	orrs	r3, r2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	4313      	orrs	r3, r2
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d110      	bne.n	8005a52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d102      	bne.n	8005a3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a36:	7b7b      	ldrb	r3, [r7, #13]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d001      	beq.n	8005a40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e069      	b.n	8005b14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a50:	e031      	b.n	8005ab6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d110      	bne.n	8005a7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d102      	bne.n	8005a64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a5e:	7b3b      	ldrb	r3, [r7, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d001      	beq.n	8005a68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e055      	b.n	8005b14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a78:	e01d      	b.n	8005ab6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d108      	bne.n	8005a92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d105      	bne.n	8005a92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	7b7b      	ldrb	r3, [r7, #13]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a8c:	7b3b      	ldrb	r3, [r7, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e03e      	b.n	8005b14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_Encoder_Start+0xc4>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d008      	beq.n	8005ad4 <HAL_TIM_Encoder_Start+0xd4>
 8005ac2:	e00f      	b.n	8005ae4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fd85 	bl	80065dc <TIM_CCxChannelCmd>
      break;
 8005ad2:	e016      	b.n	8005b02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2104      	movs	r1, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fd7d 	bl	80065dc <TIM_CCxChannelCmd>
      break;
 8005ae2:	e00e      	b.n	8005b02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fd75 	bl	80065dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2201      	movs	r2, #1
 8005af8:	2104      	movs	r1, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fd6e 	bl	80065dc <TIM_CCxChannelCmd>
      break;
 8005b00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0202 	mvn.w	r2, #2
 8005b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa77 	bl	8006052 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa69 	bl	800603e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa7a 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0204 	mvn.w	r2, #4
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa4d 	bl	8006052 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa3f 	bl	800603e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa50 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d122      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d11b      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0208 	mvn.w	r2, #8
 8005bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa23 	bl	8006052 <HAL_TIM_IC_CaptureCallback>
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa15 	bl	800603e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa26 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d122      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0210 	mvn.w	r2, #16
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9f9 	bl	8006052 <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9eb 	bl	800603e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f9fc 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10e      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0201 	mvn.w	r2, #1
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc fca8 	bl	80025f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b80      	cmp	r3, #128	; 0x80
 8005cac:	d10e      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d107      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fd78 	bl	80067bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d10e      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d107      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9c1 	bl	800607a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d10e      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d107      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0220 	mvn.w	r2, #32
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fd42 	bl	80067a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e0ae      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	f200 809f 	bhi.w	8005e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005e99 	.word	0x08005e99
 8005d68:	08005e99 	.word	0x08005e99
 8005d6c:	08005e99 	.word	0x08005e99
 8005d70:	08005dd5 	.word	0x08005dd5
 8005d74:	08005e99 	.word	0x08005e99
 8005d78:	08005e99 	.word	0x08005e99
 8005d7c:	08005e99 	.word	0x08005e99
 8005d80:	08005e17 	.word	0x08005e17
 8005d84:	08005e99 	.word	0x08005e99
 8005d88:	08005e99 	.word	0x08005e99
 8005d8c:	08005e99 	.word	0x08005e99
 8005d90:	08005e57 	.word	0x08005e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f9f8 	bl	8006190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0208 	orr.w	r2, r2, #8
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	619a      	str	r2, [r3, #24]
      break;
 8005dd2:	e064      	b.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fa3e 	bl	800625c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
      break;
 8005e14:	e043      	b.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fa89 	bl	8006334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0208 	orr.w	r2, r2, #8
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0204 	bic.w	r2, r2, #4
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	61da      	str	r2, [r3, #28]
      break;
 8005e54:	e023      	b.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fad3 	bl	8006408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	021a      	lsls	r2, r3, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	61da      	str	r2, [r3, #28]
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIM_ConfigClockSource+0x1c>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e0b4      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x186>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d03e      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0xd4>
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0a:	f200 8087 	bhi.w	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f12:	f000 8086 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x172>
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d87f      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b70      	cmp	r3, #112	; 0x70
 8005f1e:	d01a      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0xa6>
 8005f20:	2b70      	cmp	r3, #112	; 0x70
 8005f22:	d87b      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f24:	2b60      	cmp	r3, #96	; 0x60
 8005f26:	d050      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x11a>
 8005f28:	2b60      	cmp	r3, #96	; 0x60
 8005f2a:	d877      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f2c:	2b50      	cmp	r3, #80	; 0x50
 8005f2e:	d03c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xfa>
 8005f30:	2b50      	cmp	r3, #80	; 0x50
 8005f32:	d873      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d058      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x13a>
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d86f      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d064      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x15a>
 8005f40:	2b30      	cmp	r3, #48	; 0x30
 8005f42:	d86b      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d060      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x15a>
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d867      	bhi.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05c      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x15a>
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d05a      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x15a>
 8005f54:	e062      	b.n	800601c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6899      	ldr	r1, [r3, #8]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f000 fb19 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]
      break;
 8005f82:	e04f      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	6899      	ldr	r1, [r3, #8]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f000 fb02 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa6:	609a      	str	r2, [r3, #8]
      break;
 8005fa8:	e03c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6859      	ldr	r1, [r3, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f000 fa76 	bl	80064a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2150      	movs	r1, #80	; 0x50
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 facf 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e02c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 fa95 	bl	8006506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2160      	movs	r1, #96	; 0x60
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fabf 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e01c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 fa56 	bl	80064a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	4618      	mov	r0, r3
 8006004:	f000 faaf 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8006008:	e00c      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f000 faa6 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 800601a:	e003      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
      break;
 8006020:	e000      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a34      	ldr	r2, [pc, #208]	; (8006174 <TIM_Base_SetConfig+0xe4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00f      	beq.n	80060c8 <TIM_Base_SetConfig+0x38>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0x38>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a31      	ldr	r2, [pc, #196]	; (8006178 <TIM_Base_SetConfig+0xe8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x38>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a30      	ldr	r2, [pc, #192]	; (800617c <TIM_Base_SetConfig+0xec>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x38>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <TIM_Base_SetConfig+0xf0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <TIM_Base_SetConfig+0xe4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d017      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <TIM_Base_SetConfig+0xe8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a21      	ldr	r2, [pc, #132]	; (800617c <TIM_Base_SetConfig+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a20      	ldr	r2, [pc, #128]	; (8006180 <TIM_Base_SetConfig+0xf0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <TIM_Base_SetConfig+0xf4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <TIM_Base_SetConfig+0xf8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_Base_SetConfig+0x8a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1d      	ldr	r2, [pc, #116]	; (800618c <TIM_Base_SetConfig+0xfc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a08      	ldr	r2, [pc, #32]	; (8006174 <TIM_Base_SetConfig+0xe4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d103      	bne.n	8006160 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	615a      	str	r2, [r3, #20]
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800

08006190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 0302 	bic.w	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1c      	ldr	r2, [pc, #112]	; (8006258 <TIM_OC1_SetConfig+0xc8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10c      	bne.n	8006206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0308 	bic.w	r3, r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <TIM_OC1_SetConfig+0xc8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d111      	bne.n	8006232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	621a      	str	r2, [r3, #32]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	40010000 	.word	0x40010000

0800625c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0210 	bic.w	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0320 	bic.w	r3, r3, #32
 80062a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <TIM_OC2_SetConfig+0xd4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d10d      	bne.n	80062d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a15      	ldr	r2, [pc, #84]	; (8006330 <TIM_OC2_SetConfig+0xd4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d113      	bne.n	8006308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000

08006334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <TIM_OC3_SetConfig+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10d      	bne.n	80063ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a14      	ldr	r2, [pc, #80]	; (8006404 <TIM_OC3_SetConfig+0xd0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d113      	bne.n	80063de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	621a      	str	r2, [r3, #32]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40010000 	.word	0x40010000

08006408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <TIM_OC4_SetConfig+0x9c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d109      	bne.n	800647c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800646e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	019b      	lsls	r3, r3, #6
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000

080064a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f023 030a 	bic.w	r3, r3, #10
 80064e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	f043 0307 	orr.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	431a      	orrs	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2201      	movs	r2, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	401a      	ands	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800663c:	2302      	movs	r3, #2
 800663e:	e050      	b.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d013      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a15      	ldr	r2, [pc, #84]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a13      	ldr	r2, [pc, #76]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10c      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40014000 	.word	0x40014000

08006704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800671c:	2302      	movs	r3, #2
 800671e:	e03d      	b.n	800679c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e03f      	b.n	8006862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc f9a0 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9cb 	bl	8006bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b08a      	sub	sp, #40	; 0x28
 800686e:	af02      	add	r7, sp, #8
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	d17c      	bne.n	8006984 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_UART_Transmit+0x2c>
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e075      	b.n	8006986 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Transmit+0x3e>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e06e      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2221      	movs	r2, #33	; 0x21
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068be:	f7fc fb6d 	bl	8002f9c <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	88fa      	ldrh	r2, [r7, #6]
 80068ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d8:	d108      	bne.n	80068ec <HAL_UART_Transmit+0x82>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e003      	b.n	80068f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068fc:	e02a      	b.n	8006954 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f8e2 	bl	8006ad2 <UART_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e036      	b.n	8006986 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	3302      	adds	r3, #2
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e007      	b.n	8006946 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	3301      	adds	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1cf      	bne.n	80068fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f8b2 	bl	8006ad2 <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e006      	b.n	8006986 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b08a      	sub	sp, #40	; 0x28
 8006992:	af02      	add	r7, sp, #8
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	f040 808c 	bne.w	8006ac8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Receive+0x2e>
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e084      	b.n	8006aca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_UART_Receive+0x40>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e07d      	b.n	8006aca <HAL_UART_Receive+0x13c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2222      	movs	r2, #34	; 0x22
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ea:	f7fc fad7 	bl	8002f9c <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d108      	bne.n	8006a18 <HAL_UART_Receive+0x8a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e003      	b.n	8006a20 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a28:	e043      	b.n	8006ab2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2120      	movs	r1, #32
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f84c 	bl	8006ad2 <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e042      	b.n	8006aca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10c      	bne.n	8006a64 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e01f      	b.n	8006aa4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d007      	beq.n	8006a7e <HAL_UART_Receive+0xf0>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <HAL_UART_Receive+0xfe>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e008      	b.n	8006a9e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1b6      	bne.n	8006a2a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e000      	b.n	8006aca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b090      	sub	sp, #64	; 0x40
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	603b      	str	r3, [r7, #0]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	e050      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d04c      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8006af2:	f7fc fa53 	bl	8002f9c <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d241      	bcs.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b22:	637a      	str	r2, [r7, #52]	; 0x34
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	613b      	str	r3, [r7, #16]
   return(result);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3314      	adds	r3, #20
 8006b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b56:	623a      	str	r2, [r7, #32]
 8006b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	69f9      	ldr	r1, [r7, #28]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00f      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d09f      	beq.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3740      	adds	r7, #64	; 0x40
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b0c0      	sub	sp, #256	; 0x100
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	68d9      	ldr	r1, [r3, #12]
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	ea40 0301 	orr.w	r3, r0, r1
 8006bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c08:	f021 010c 	bic.w	r1, r1, #12
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c16:	430b      	orrs	r3, r1
 8006c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	6999      	ldr	r1, [r3, #24]
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	ea40 0301 	orr.w	r3, r0, r1
 8006c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b8f      	ldr	r3, [pc, #572]	; (8006e7c <UART_SetConfig+0x2cc>)
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d005      	beq.n	8006c50 <UART_SetConfig+0xa0>
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8d      	ldr	r3, [pc, #564]	; (8006e80 <UART_SetConfig+0x2d0>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d104      	bne.n	8006c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c50:	f7fe fc60 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006c54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c58:	e003      	b.n	8006c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5a:	f7fe fc47 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8006c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	f040 810c 	bne.w	8006e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	1891      	adds	r1, r2, r2
 8006c88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c92:	4621      	mov	r1, r4
 8006c94:	eb12 0801 	adds.w	r8, r2, r1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	eb43 0901 	adc.w	r9, r3, r1
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	eb18 0303 	adds.w	r3, r8, r3
 8006cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	eb49 0303 	adc.w	r3, r9, r3
 8006cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cde:	460b      	mov	r3, r1
 8006ce0:	18db      	adds	r3, r3, r3
 8006ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	eb42 0303 	adc.w	r3, r2, r3
 8006cea:	657b      	str	r3, [r7, #84]	; 0x54
 8006cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cf4:	f7f9 ffd0 	bl	8000c98 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b61      	ldr	r3, [pc, #388]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	011c      	lsls	r4, r3, #4
 8006d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d20:	415b      	adcs	r3, r3
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d28:	4641      	mov	r1, r8
 8006d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d2e:	4649      	mov	r1, r9
 8006d30:	eb43 0b01 	adc.w	fp, r3, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d48:	4692      	mov	sl, r2
 8006d4a:	469b      	mov	fp, r3
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d56:	464b      	mov	r3, r9
 8006d58:	eb4b 0303 	adc.w	r3, fp, r3
 8006d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d74:	460b      	mov	r3, r1
 8006d76:	18db      	adds	r3, r3, r3
 8006d78:	643b      	str	r3, [r7, #64]	; 0x40
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	647b      	str	r3, [r7, #68]	; 0x44
 8006d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d8a:	f7f9 ff85 	bl	8000c98 <__aeabi_uldivmod>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006d96:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2264      	movs	r2, #100	; 0x64
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	1acb      	subs	r3, r1, r3
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006daa:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 2302 	umull	r2, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db8:	441c      	add	r4, r3
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	1891      	adds	r1, r2, r2
 8006dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ddc:	4641      	mov	r1, r8
 8006dde:	1851      	adds	r1, r2, r1
 8006de0:	6339      	str	r1, [r7, #48]	; 0x30
 8006de2:	4649      	mov	r1, r9
 8006de4:	414b      	adcs	r3, r1
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006df4:	4659      	mov	r1, fp
 8006df6:	00cb      	lsls	r3, r1, #3
 8006df8:	4651      	mov	r1, sl
 8006dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfe:	4651      	mov	r1, sl
 8006e00:	00ca      	lsls	r2, r1, #3
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	4642      	mov	r2, r8
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e10:	464b      	mov	r3, r9
 8006e12:	460a      	mov	r2, r1
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e30:	460b      	mov	r3, r1
 8006e32:	18db      	adds	r3, r3, r3
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	4613      	mov	r3, r2
 8006e38:	eb42 0303 	adc.w	r3, r2, r3
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e46:	f7f9 ff27 	bl	8000c98 <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	3332      	adds	r3, #50	; 0x32
 8006e62:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 0207 	and.w	r2, r3, #7
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4422      	add	r2, r4
 8006e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e78:	e106      	b.n	8007088 <UART_SetConfig+0x4d8>
 8006e7a:	bf00      	nop
 8006e7c:	40011000 	.word	0x40011000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	6239      	str	r1, [r7, #32]
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eaa:	4641      	mov	r1, r8
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	4649      	mov	r1, r9
 8006eb0:	eb43 0501 	adc.w	r5, r3, r1
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	00eb      	lsls	r3, r5, #3
 8006ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec2:	00e2      	lsls	r2, r4, #3
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	4643      	mov	r3, r8
 8006eca:	18e3      	adds	r3, r4, r3
 8006ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	eb45 0303 	adc.w	r3, r5, r3
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	008b      	lsls	r3, r1, #2
 8006efa:	4621      	mov	r1, r4
 8006efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f00:	4621      	mov	r1, r4
 8006f02:	008a      	lsls	r2, r1, #2
 8006f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f08:	f7f9 fec6 	bl	8000c98 <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4b60      	ldr	r3, [pc, #384]	; (8007094 <UART_SetConfig+0x4e4>)
 8006f12:	fba3 2302 	umull	r2, r3, r3, r2
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	011c      	lsls	r4, r3, #4
 8006f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	1891      	adds	r1, r2, r2
 8006f32:	61b9      	str	r1, [r7, #24]
 8006f34:	415b      	adcs	r3, r3
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	1851      	adds	r1, r2, r1
 8006f40:	6139      	str	r1, [r7, #16]
 8006f42:	4649      	mov	r1, r9
 8006f44:	414b      	adcs	r3, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f54:	4659      	mov	r1, fp
 8006f56:	00cb      	lsls	r3, r1, #3
 8006f58:	4651      	mov	r1, sl
 8006f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5e:	4651      	mov	r1, sl
 8006f60:	00ca      	lsls	r2, r1, #3
 8006f62:	4610      	mov	r0, r2
 8006f64:	4619      	mov	r1, r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	4642      	mov	r2, r8
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f70:	464b      	mov	r3, r9
 8006f72:	460a      	mov	r2, r1
 8006f74:	eb42 0303 	adc.w	r3, r2, r3
 8006f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f94:	4649      	mov	r1, r9
 8006f96:	008b      	lsls	r3, r1, #2
 8006f98:	4641      	mov	r1, r8
 8006f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	008a      	lsls	r2, r1, #2
 8006fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fa6:	f7f9 fe77 	bl	8000c98 <__aeabi_uldivmod>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4b38      	ldr	r3, [pc, #224]	; (8007094 <UART_SetConfig+0x4e4>)
 8006fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	2264      	movs	r2, #100	; 0x64
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	1acb      	subs	r3, r1, r3
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	3332      	adds	r3, #50	; 0x32
 8006fc4:	4a33      	ldr	r2, [pc, #204]	; (8007094 <UART_SetConfig+0x4e4>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8006fda:	677a      	str	r2, [r7, #116]	; 0x74
 8006fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	1891      	adds	r1, r2, r2
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	415b      	adcs	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	1851      	adds	r1, r2, r1
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	414b      	adcs	r3, r1
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007008:	4659      	mov	r1, fp
 800700a:	00cb      	lsls	r3, r1, #3
 800700c:	4651      	mov	r1, sl
 800700e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007012:	4651      	mov	r1, sl
 8007014:	00ca      	lsls	r2, r1, #3
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	4603      	mov	r3, r0
 800701c:	4642      	mov	r2, r8
 800701e:	189b      	adds	r3, r3, r2
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
 8007022:	464b      	mov	r3, r9
 8007024:	460a      	mov	r2, r1
 8007026:	eb42 0303 	adc.w	r3, r2, r3
 800702a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	663b      	str	r3, [r7, #96]	; 0x60
 8007036:	667a      	str	r2, [r7, #100]	; 0x64
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007044:	4649      	mov	r1, r9
 8007046:	008b      	lsls	r3, r1, #2
 8007048:	4641      	mov	r1, r8
 800704a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704e:	4641      	mov	r1, r8
 8007050:	008a      	lsls	r2, r1, #2
 8007052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007056:	f7f9 fe1f 	bl	8000c98 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <UART_SetConfig+0x4e4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <UART_SetConfig+0x4e4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4422      	add	r2, r4
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800708e:	46bd      	mov	sp, r7
 8007090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007094:	51eb851f 	.word	0x51eb851f

08007098 <malloc>:
 8007098:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <malloc+0xc>)
 800709a:	4601      	mov	r1, r0
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	f000 b82b 	b.w	80070f8 <_malloc_r>
 80070a2:	bf00      	nop
 80070a4:	200001e0 	.word	0x200001e0

080070a8 <free>:
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <free+0xc>)
 80070aa:	4601      	mov	r1, r0
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f002 bf95 	b.w	8009fdc <_free_r>
 80070b2:	bf00      	nop
 80070b4:	200001e0 	.word	0x200001e0

080070b8 <sbrk_aligned>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4e0e      	ldr	r6, [pc, #56]	; (80070f4 <sbrk_aligned+0x3c>)
 80070bc:	460c      	mov	r4, r1
 80070be:	6831      	ldr	r1, [r6, #0]
 80070c0:	4605      	mov	r5, r0
 80070c2:	b911      	cbnz	r1, 80070ca <sbrk_aligned+0x12>
 80070c4:	f002 f886 	bl	80091d4 <_sbrk_r>
 80070c8:	6030      	str	r0, [r6, #0]
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f002 f881 	bl	80091d4 <_sbrk_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d00a      	beq.n	80070ec <sbrk_aligned+0x34>
 80070d6:	1cc4      	adds	r4, r0, #3
 80070d8:	f024 0403 	bic.w	r4, r4, #3
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d007      	beq.n	80070f0 <sbrk_aligned+0x38>
 80070e0:	1a21      	subs	r1, r4, r0
 80070e2:	4628      	mov	r0, r5
 80070e4:	f002 f876 	bl	80091d4 <_sbrk_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d101      	bne.n	80070f0 <sbrk_aligned+0x38>
 80070ec:	f04f 34ff 	mov.w	r4, #4294967295
 80070f0:	4620      	mov	r0, r4
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	20000534 	.word	0x20000534

080070f8 <_malloc_r>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	1ccd      	adds	r5, r1, #3
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	2d00      	cmp	r5, #0
 800710c:	4607      	mov	r7, r0
 800710e:	db01      	blt.n	8007114 <_malloc_r+0x1c>
 8007110:	42a9      	cmp	r1, r5
 8007112:	d905      	bls.n	8007120 <_malloc_r+0x28>
 8007114:	230c      	movs	r3, #12
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	2600      	movs	r6, #0
 800711a:	4630      	mov	r0, r6
 800711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007120:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071f4 <_malloc_r+0xfc>
 8007124:	f000 f868 	bl	80071f8 <__malloc_lock>
 8007128:	f8d8 3000 	ldr.w	r3, [r8]
 800712c:	461c      	mov	r4, r3
 800712e:	bb5c      	cbnz	r4, 8007188 <_malloc_r+0x90>
 8007130:	4629      	mov	r1, r5
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ffc0 	bl	80070b8 <sbrk_aligned>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	4604      	mov	r4, r0
 800713c:	d155      	bne.n	80071ea <_malloc_r+0xf2>
 800713e:	f8d8 4000 	ldr.w	r4, [r8]
 8007142:	4626      	mov	r6, r4
 8007144:	2e00      	cmp	r6, #0
 8007146:	d145      	bne.n	80071d4 <_malloc_r+0xdc>
 8007148:	2c00      	cmp	r4, #0
 800714a:	d048      	beq.n	80071de <_malloc_r+0xe6>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	4631      	mov	r1, r6
 8007150:	4638      	mov	r0, r7
 8007152:	eb04 0903 	add.w	r9, r4, r3
 8007156:	f002 f83d 	bl	80091d4 <_sbrk_r>
 800715a:	4581      	cmp	r9, r0
 800715c:	d13f      	bne.n	80071de <_malloc_r+0xe6>
 800715e:	6821      	ldr	r1, [r4, #0]
 8007160:	1a6d      	subs	r5, r5, r1
 8007162:	4629      	mov	r1, r5
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff ffa7 	bl	80070b8 <sbrk_aligned>
 800716a:	3001      	adds	r0, #1
 800716c:	d037      	beq.n	80071de <_malloc_r+0xe6>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	442b      	add	r3, r5
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	f8d8 3000 	ldr.w	r3, [r8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d038      	beq.n	80071ee <_malloc_r+0xf6>
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	42a2      	cmp	r2, r4
 8007180:	d12b      	bne.n	80071da <_malloc_r+0xe2>
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	e00f      	b.n	80071a8 <_malloc_r+0xb0>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	d41f      	bmi.n	80071ce <_malloc_r+0xd6>
 800718e:	2a0b      	cmp	r2, #11
 8007190:	d917      	bls.n	80071c2 <_malloc_r+0xca>
 8007192:	1961      	adds	r1, r4, r5
 8007194:	42a3      	cmp	r3, r4
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	6059      	strne	r1, [r3, #4]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	bf08      	it	eq
 80071a0:	f8c8 1000 	streq.w	r1, [r8]
 80071a4:	5162      	str	r2, [r4, r5]
 80071a6:	604b      	str	r3, [r1, #4]
 80071a8:	4638      	mov	r0, r7
 80071aa:	f104 060b 	add.w	r6, r4, #11
 80071ae:	f000 f829 	bl	8007204 <__malloc_unlock>
 80071b2:	f026 0607 	bic.w	r6, r6, #7
 80071b6:	1d23      	adds	r3, r4, #4
 80071b8:	1af2      	subs	r2, r6, r3
 80071ba:	d0ae      	beq.n	800711a <_malloc_r+0x22>
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	50a3      	str	r3, [r4, r2]
 80071c0:	e7ab      	b.n	800711a <_malloc_r+0x22>
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	d1dd      	bne.n	8007184 <_malloc_r+0x8c>
 80071c8:	f8c8 2000 	str.w	r2, [r8]
 80071cc:	e7ec      	b.n	80071a8 <_malloc_r+0xb0>
 80071ce:	4623      	mov	r3, r4
 80071d0:	6864      	ldr	r4, [r4, #4]
 80071d2:	e7ac      	b.n	800712e <_malloc_r+0x36>
 80071d4:	4634      	mov	r4, r6
 80071d6:	6876      	ldr	r6, [r6, #4]
 80071d8:	e7b4      	b.n	8007144 <_malloc_r+0x4c>
 80071da:	4613      	mov	r3, r2
 80071dc:	e7cc      	b.n	8007178 <_malloc_r+0x80>
 80071de:	230c      	movs	r3, #12
 80071e0:	603b      	str	r3, [r7, #0]
 80071e2:	4638      	mov	r0, r7
 80071e4:	f000 f80e 	bl	8007204 <__malloc_unlock>
 80071e8:	e797      	b.n	800711a <_malloc_r+0x22>
 80071ea:	6025      	str	r5, [r4, #0]
 80071ec:	e7dc      	b.n	80071a8 <_malloc_r+0xb0>
 80071ee:	605b      	str	r3, [r3, #4]
 80071f0:	deff      	udf	#255	; 0xff
 80071f2:	bf00      	nop
 80071f4:	20000530 	.word	0x20000530

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__malloc_lock+0x8>)
 80071fa:	f002 b838 	b.w	800926e <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20000678 	.word	0x20000678

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__malloc_unlock+0x8>)
 8007206:	f002 b833 	b.w	8009270 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20000678 	.word	0x20000678

08007210 <sulp>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	460d      	mov	r5, r1
 8007216:	ec45 4b10 	vmov	d0, r4, r5
 800721a:	4616      	mov	r6, r2
 800721c:	f003 fe00 	bl	800ae20 <__ulp>
 8007220:	ec51 0b10 	vmov	r0, r1, d0
 8007224:	b17e      	cbz	r6, 8007246 <sulp+0x36>
 8007226:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800722a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd09      	ble.n	8007246 <sulp+0x36>
 8007232:	051b      	lsls	r3, r3, #20
 8007234:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007238:	2400      	movs	r4, #0
 800723a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	f7f9 f9e1 	bl	8000608 <__aeabi_dmul>
 8007246:	bd70      	pop	{r4, r5, r6, pc}

08007248 <_strtod_l>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	ed2d 8b02 	vpush	{d8}
 8007250:	b09b      	sub	sp, #108	; 0x6c
 8007252:	4604      	mov	r4, r0
 8007254:	9213      	str	r2, [sp, #76]	; 0x4c
 8007256:	2200      	movs	r2, #0
 8007258:	9216      	str	r2, [sp, #88]	; 0x58
 800725a:	460d      	mov	r5, r1
 800725c:	f04f 0800 	mov.w	r8, #0
 8007260:	f04f 0900 	mov.w	r9, #0
 8007264:	460a      	mov	r2, r1
 8007266:	9215      	str	r2, [sp, #84]	; 0x54
 8007268:	7811      	ldrb	r1, [r2, #0]
 800726a:	292b      	cmp	r1, #43	; 0x2b
 800726c:	d04c      	beq.n	8007308 <_strtod_l+0xc0>
 800726e:	d83a      	bhi.n	80072e6 <_strtod_l+0x9e>
 8007270:	290d      	cmp	r1, #13
 8007272:	d834      	bhi.n	80072de <_strtod_l+0x96>
 8007274:	2908      	cmp	r1, #8
 8007276:	d834      	bhi.n	80072e2 <_strtod_l+0x9a>
 8007278:	2900      	cmp	r1, #0
 800727a:	d03d      	beq.n	80072f8 <_strtod_l+0xb0>
 800727c:	2200      	movs	r2, #0
 800727e:	920a      	str	r2, [sp, #40]	; 0x28
 8007280:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007282:	7832      	ldrb	r2, [r6, #0]
 8007284:	2a30      	cmp	r2, #48	; 0x30
 8007286:	f040 80b4 	bne.w	80073f2 <_strtod_l+0x1aa>
 800728a:	7872      	ldrb	r2, [r6, #1]
 800728c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007290:	2a58      	cmp	r2, #88	; 0x58
 8007292:	d170      	bne.n	8007376 <_strtod_l+0x12e>
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	ab16      	add	r3, sp, #88	; 0x58
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	4a8e      	ldr	r2, [pc, #568]	; (80074d8 <_strtod_l+0x290>)
 80072a0:	ab17      	add	r3, sp, #92	; 0x5c
 80072a2:	a915      	add	r1, sp, #84	; 0x54
 80072a4:	4620      	mov	r0, r4
 80072a6:	f002 ff4d 	bl	800a144 <__gethex>
 80072aa:	f010 070f 	ands.w	r7, r0, #15
 80072ae:	4605      	mov	r5, r0
 80072b0:	d005      	beq.n	80072be <_strtod_l+0x76>
 80072b2:	2f06      	cmp	r7, #6
 80072b4:	d12a      	bne.n	800730c <_strtod_l+0xc4>
 80072b6:	3601      	adds	r6, #1
 80072b8:	2300      	movs	r3, #0
 80072ba:	9615      	str	r6, [sp, #84]	; 0x54
 80072bc:	930a      	str	r3, [sp, #40]	; 0x28
 80072be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 857f 	bne.w	8007dc4 <_strtod_l+0xb7c>
 80072c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c8:	b1db      	cbz	r3, 8007302 <_strtod_l+0xba>
 80072ca:	4642      	mov	r2, r8
 80072cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072d0:	ec43 2b10 	vmov	d0, r2, r3
 80072d4:	b01b      	add	sp, #108	; 0x6c
 80072d6:	ecbd 8b02 	vpop	{d8}
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	2920      	cmp	r1, #32
 80072e0:	d1cc      	bne.n	800727c <_strtod_l+0x34>
 80072e2:	3201      	adds	r2, #1
 80072e4:	e7bf      	b.n	8007266 <_strtod_l+0x1e>
 80072e6:	292d      	cmp	r1, #45	; 0x2d
 80072e8:	d1c8      	bne.n	800727c <_strtod_l+0x34>
 80072ea:	2101      	movs	r1, #1
 80072ec:	910a      	str	r1, [sp, #40]	; 0x28
 80072ee:	1c51      	adds	r1, r2, #1
 80072f0:	9115      	str	r1, [sp, #84]	; 0x54
 80072f2:	7852      	ldrb	r2, [r2, #1]
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	d1c3      	bne.n	8007280 <_strtod_l+0x38>
 80072f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072fa:	9515      	str	r5, [sp, #84]	; 0x54
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 855f 	bne.w	8007dc0 <_strtod_l+0xb78>
 8007302:	4642      	mov	r2, r8
 8007304:	464b      	mov	r3, r9
 8007306:	e7e3      	b.n	80072d0 <_strtod_l+0x88>
 8007308:	2100      	movs	r1, #0
 800730a:	e7ef      	b.n	80072ec <_strtod_l+0xa4>
 800730c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800730e:	b13a      	cbz	r2, 8007320 <_strtod_l+0xd8>
 8007310:	2135      	movs	r1, #53	; 0x35
 8007312:	a818      	add	r0, sp, #96	; 0x60
 8007314:	f003 fe81 	bl	800b01a <__copybits>
 8007318:	9916      	ldr	r1, [sp, #88]	; 0x58
 800731a:	4620      	mov	r0, r4
 800731c:	f003 fa54 	bl	800a7c8 <_Bfree>
 8007320:	3f01      	subs	r7, #1
 8007322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007324:	2f04      	cmp	r7, #4
 8007326:	d806      	bhi.n	8007336 <_strtod_l+0xee>
 8007328:	e8df f007 	tbb	[pc, r7]
 800732c:	201d0314 	.word	0x201d0314
 8007330:	14          	.byte	0x14
 8007331:	00          	.byte	0x00
 8007332:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007336:	05e9      	lsls	r1, r5, #23
 8007338:	bf48      	it	mi
 800733a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800733e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007342:	0d1b      	lsrs	r3, r3, #20
 8007344:	051b      	lsls	r3, r3, #20
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1b9      	bne.n	80072be <_strtod_l+0x76>
 800734a:	f001 ff65 	bl	8009218 <__errno>
 800734e:	2322      	movs	r3, #34	; 0x22
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	e7b4      	b.n	80072be <_strtod_l+0x76>
 8007354:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007358:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800735c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007360:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007364:	e7e7      	b.n	8007336 <_strtod_l+0xee>
 8007366:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80074e0 <_strtod_l+0x298>
 800736a:	e7e4      	b.n	8007336 <_strtod_l+0xee>
 800736c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007370:	f04f 38ff 	mov.w	r8, #4294967295
 8007374:	e7df      	b.n	8007336 <_strtod_l+0xee>
 8007376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	9215      	str	r2, [sp, #84]	; 0x54
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b30      	cmp	r3, #48	; 0x30
 8007380:	d0f9      	beq.n	8007376 <_strtod_l+0x12e>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d09b      	beq.n	80072be <_strtod_l+0x76>
 8007386:	2301      	movs	r3, #1
 8007388:	f04f 0a00 	mov.w	sl, #0
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007390:	930b      	str	r3, [sp, #44]	; 0x2c
 8007392:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007396:	46d3      	mov	fp, sl
 8007398:	220a      	movs	r2, #10
 800739a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800739c:	7806      	ldrb	r6, [r0, #0]
 800739e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80073a2:	b2d9      	uxtb	r1, r3
 80073a4:	2909      	cmp	r1, #9
 80073a6:	d926      	bls.n	80073f6 <_strtod_l+0x1ae>
 80073a8:	494c      	ldr	r1, [pc, #304]	; (80074dc <_strtod_l+0x294>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	f001 fe6b 	bl	8009086 <strncmp>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d030      	beq.n	8007416 <_strtod_l+0x1ce>
 80073b4:	2000      	movs	r0, #0
 80073b6:	4632      	mov	r2, r6
 80073b8:	9005      	str	r0, [sp, #20]
 80073ba:	465e      	mov	r6, fp
 80073bc:	4603      	mov	r3, r0
 80073be:	2a65      	cmp	r2, #101	; 0x65
 80073c0:	d001      	beq.n	80073c6 <_strtod_l+0x17e>
 80073c2:	2a45      	cmp	r2, #69	; 0x45
 80073c4:	d113      	bne.n	80073ee <_strtod_l+0x1a6>
 80073c6:	b91e      	cbnz	r6, 80073d0 <_strtod_l+0x188>
 80073c8:	9a04      	ldr	r2, [sp, #16]
 80073ca:	4302      	orrs	r2, r0
 80073cc:	d094      	beq.n	80072f8 <_strtod_l+0xb0>
 80073ce:	2600      	movs	r6, #0
 80073d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80073d2:	1c6a      	adds	r2, r5, #1
 80073d4:	9215      	str	r2, [sp, #84]	; 0x54
 80073d6:	786a      	ldrb	r2, [r5, #1]
 80073d8:	2a2b      	cmp	r2, #43	; 0x2b
 80073da:	d074      	beq.n	80074c6 <_strtod_l+0x27e>
 80073dc:	2a2d      	cmp	r2, #45	; 0x2d
 80073de:	d078      	beq.n	80074d2 <_strtod_l+0x28a>
 80073e0:	f04f 0c00 	mov.w	ip, #0
 80073e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073e8:	2909      	cmp	r1, #9
 80073ea:	d97f      	bls.n	80074ec <_strtod_l+0x2a4>
 80073ec:	9515      	str	r5, [sp, #84]	; 0x54
 80073ee:	2700      	movs	r7, #0
 80073f0:	e09e      	b.n	8007530 <_strtod_l+0x2e8>
 80073f2:	2300      	movs	r3, #0
 80073f4:	e7c8      	b.n	8007388 <_strtod_l+0x140>
 80073f6:	f1bb 0f08 	cmp.w	fp, #8
 80073fa:	bfd8      	it	le
 80073fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80073fe:	f100 0001 	add.w	r0, r0, #1
 8007402:	bfda      	itte	le
 8007404:	fb02 3301 	mlale	r3, r2, r1, r3
 8007408:	9309      	strle	r3, [sp, #36]	; 0x24
 800740a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800740e:	f10b 0b01 	add.w	fp, fp, #1
 8007412:	9015      	str	r0, [sp, #84]	; 0x54
 8007414:	e7c1      	b.n	800739a <_strtod_l+0x152>
 8007416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	9215      	str	r2, [sp, #84]	; 0x54
 800741c:	785a      	ldrb	r2, [r3, #1]
 800741e:	f1bb 0f00 	cmp.w	fp, #0
 8007422:	d037      	beq.n	8007494 <_strtod_l+0x24c>
 8007424:	9005      	str	r0, [sp, #20]
 8007426:	465e      	mov	r6, fp
 8007428:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d912      	bls.n	8007456 <_strtod_l+0x20e>
 8007430:	2301      	movs	r3, #1
 8007432:	e7c4      	b.n	80073be <_strtod_l+0x176>
 8007434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	9215      	str	r2, [sp, #84]	; 0x54
 800743a:	785a      	ldrb	r2, [r3, #1]
 800743c:	3001      	adds	r0, #1
 800743e:	2a30      	cmp	r2, #48	; 0x30
 8007440:	d0f8      	beq.n	8007434 <_strtod_l+0x1ec>
 8007442:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007446:	2b08      	cmp	r3, #8
 8007448:	f200 84c1 	bhi.w	8007dce <_strtod_l+0xb86>
 800744c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800744e:	9005      	str	r0, [sp, #20]
 8007450:	2000      	movs	r0, #0
 8007452:	930b      	str	r3, [sp, #44]	; 0x2c
 8007454:	4606      	mov	r6, r0
 8007456:	3a30      	subs	r2, #48	; 0x30
 8007458:	f100 0301 	add.w	r3, r0, #1
 800745c:	d014      	beq.n	8007488 <_strtod_l+0x240>
 800745e:	9905      	ldr	r1, [sp, #20]
 8007460:	4419      	add	r1, r3
 8007462:	9105      	str	r1, [sp, #20]
 8007464:	4633      	mov	r3, r6
 8007466:	eb00 0c06 	add.w	ip, r0, r6
 800746a:	210a      	movs	r1, #10
 800746c:	4563      	cmp	r3, ip
 800746e:	d113      	bne.n	8007498 <_strtod_l+0x250>
 8007470:	1833      	adds	r3, r6, r0
 8007472:	2b08      	cmp	r3, #8
 8007474:	f106 0601 	add.w	r6, r6, #1
 8007478:	4406      	add	r6, r0
 800747a:	dc1a      	bgt.n	80074b2 <_strtod_l+0x26a>
 800747c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800747e:	230a      	movs	r3, #10
 8007480:	fb03 2301 	mla	r3, r3, r1, r2
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	2300      	movs	r3, #0
 8007488:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800748a:	1c51      	adds	r1, r2, #1
 800748c:	9115      	str	r1, [sp, #84]	; 0x54
 800748e:	7852      	ldrb	r2, [r2, #1]
 8007490:	4618      	mov	r0, r3
 8007492:	e7c9      	b.n	8007428 <_strtod_l+0x1e0>
 8007494:	4658      	mov	r0, fp
 8007496:	e7d2      	b.n	800743e <_strtod_l+0x1f6>
 8007498:	2b08      	cmp	r3, #8
 800749a:	f103 0301 	add.w	r3, r3, #1
 800749e:	dc03      	bgt.n	80074a8 <_strtod_l+0x260>
 80074a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074a2:	434f      	muls	r7, r1
 80074a4:	9709      	str	r7, [sp, #36]	; 0x24
 80074a6:	e7e1      	b.n	800746c <_strtod_l+0x224>
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	bfd8      	it	le
 80074ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80074b0:	e7dc      	b.n	800746c <_strtod_l+0x224>
 80074b2:	2e10      	cmp	r6, #16
 80074b4:	bfdc      	itt	le
 80074b6:	230a      	movle	r3, #10
 80074b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80074bc:	e7e3      	b.n	8007486 <_strtod_l+0x23e>
 80074be:	2300      	movs	r3, #0
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	2301      	movs	r3, #1
 80074c4:	e780      	b.n	80073c8 <_strtod_l+0x180>
 80074c6:	f04f 0c00 	mov.w	ip, #0
 80074ca:	1caa      	adds	r2, r5, #2
 80074cc:	9215      	str	r2, [sp, #84]	; 0x54
 80074ce:	78aa      	ldrb	r2, [r5, #2]
 80074d0:	e788      	b.n	80073e4 <_strtod_l+0x19c>
 80074d2:	f04f 0c01 	mov.w	ip, #1
 80074d6:	e7f8      	b.n	80074ca <_strtod_l+0x282>
 80074d8:	0800bda4 	.word	0x0800bda4
 80074dc:	0800bda0 	.word	0x0800bda0
 80074e0:	7ff00000 	.word	0x7ff00000
 80074e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074e6:	1c51      	adds	r1, r2, #1
 80074e8:	9115      	str	r1, [sp, #84]	; 0x54
 80074ea:	7852      	ldrb	r2, [r2, #1]
 80074ec:	2a30      	cmp	r2, #48	; 0x30
 80074ee:	d0f9      	beq.n	80074e4 <_strtod_l+0x29c>
 80074f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074f4:	2908      	cmp	r1, #8
 80074f6:	f63f af7a 	bhi.w	80073ee <_strtod_l+0x1a6>
 80074fa:	3a30      	subs	r2, #48	; 0x30
 80074fc:	9208      	str	r2, [sp, #32]
 80074fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007500:	920c      	str	r2, [sp, #48]	; 0x30
 8007502:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007504:	1c57      	adds	r7, r2, #1
 8007506:	9715      	str	r7, [sp, #84]	; 0x54
 8007508:	7852      	ldrb	r2, [r2, #1]
 800750a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800750e:	f1be 0f09 	cmp.w	lr, #9
 8007512:	d938      	bls.n	8007586 <_strtod_l+0x33e>
 8007514:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007516:	1a7f      	subs	r7, r7, r1
 8007518:	2f08      	cmp	r7, #8
 800751a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800751e:	dc03      	bgt.n	8007528 <_strtod_l+0x2e0>
 8007520:	9908      	ldr	r1, [sp, #32]
 8007522:	428f      	cmp	r7, r1
 8007524:	bfa8      	it	ge
 8007526:	460f      	movge	r7, r1
 8007528:	f1bc 0f00 	cmp.w	ip, #0
 800752c:	d000      	beq.n	8007530 <_strtod_l+0x2e8>
 800752e:	427f      	negs	r7, r7
 8007530:	2e00      	cmp	r6, #0
 8007532:	d14f      	bne.n	80075d4 <_strtod_l+0x38c>
 8007534:	9904      	ldr	r1, [sp, #16]
 8007536:	4301      	orrs	r1, r0
 8007538:	f47f aec1 	bne.w	80072be <_strtod_l+0x76>
 800753c:	2b00      	cmp	r3, #0
 800753e:	f47f aedb 	bne.w	80072f8 <_strtod_l+0xb0>
 8007542:	2a69      	cmp	r2, #105	; 0x69
 8007544:	d029      	beq.n	800759a <_strtod_l+0x352>
 8007546:	dc26      	bgt.n	8007596 <_strtod_l+0x34e>
 8007548:	2a49      	cmp	r2, #73	; 0x49
 800754a:	d026      	beq.n	800759a <_strtod_l+0x352>
 800754c:	2a4e      	cmp	r2, #78	; 0x4e
 800754e:	f47f aed3 	bne.w	80072f8 <_strtod_l+0xb0>
 8007552:	499b      	ldr	r1, [pc, #620]	; (80077c0 <_strtod_l+0x578>)
 8007554:	a815      	add	r0, sp, #84	; 0x54
 8007556:	f003 f835 	bl	800a5c4 <__match>
 800755a:	2800      	cmp	r0, #0
 800755c:	f43f aecc 	beq.w	80072f8 <_strtod_l+0xb0>
 8007560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b28      	cmp	r3, #40	; 0x28
 8007566:	d12f      	bne.n	80075c8 <_strtod_l+0x380>
 8007568:	4996      	ldr	r1, [pc, #600]	; (80077c4 <_strtod_l+0x57c>)
 800756a:	aa18      	add	r2, sp, #96	; 0x60
 800756c:	a815      	add	r0, sp, #84	; 0x54
 800756e:	f003 f83d 	bl	800a5ec <__hexnan>
 8007572:	2805      	cmp	r0, #5
 8007574:	d128      	bne.n	80075c8 <_strtod_l+0x380>
 8007576:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800757c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007580:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007584:	e69b      	b.n	80072be <_strtod_l+0x76>
 8007586:	9f08      	ldr	r7, [sp, #32]
 8007588:	210a      	movs	r1, #10
 800758a:	fb01 2107 	mla	r1, r1, r7, r2
 800758e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007592:	9208      	str	r2, [sp, #32]
 8007594:	e7b5      	b.n	8007502 <_strtod_l+0x2ba>
 8007596:	2a6e      	cmp	r2, #110	; 0x6e
 8007598:	e7d9      	b.n	800754e <_strtod_l+0x306>
 800759a:	498b      	ldr	r1, [pc, #556]	; (80077c8 <_strtod_l+0x580>)
 800759c:	a815      	add	r0, sp, #84	; 0x54
 800759e:	f003 f811 	bl	800a5c4 <__match>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f43f aea8 	beq.w	80072f8 <_strtod_l+0xb0>
 80075a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075aa:	4988      	ldr	r1, [pc, #544]	; (80077cc <_strtod_l+0x584>)
 80075ac:	3b01      	subs	r3, #1
 80075ae:	a815      	add	r0, sp, #84	; 0x54
 80075b0:	9315      	str	r3, [sp, #84]	; 0x54
 80075b2:	f003 f807 	bl	800a5c4 <__match>
 80075b6:	b910      	cbnz	r0, 80075be <_strtod_l+0x376>
 80075b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075ba:	3301      	adds	r3, #1
 80075bc:	9315      	str	r3, [sp, #84]	; 0x54
 80075be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80077dc <_strtod_l+0x594>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	e67a      	b.n	80072be <_strtod_l+0x76>
 80075c8:	4881      	ldr	r0, [pc, #516]	; (80077d0 <_strtod_l+0x588>)
 80075ca:	f001 fe61 	bl	8009290 <nan>
 80075ce:	ec59 8b10 	vmov	r8, r9, d0
 80075d2:	e674      	b.n	80072be <_strtod_l+0x76>
 80075d4:	9b05      	ldr	r3, [sp, #20]
 80075d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075d8:	1afb      	subs	r3, r7, r3
 80075da:	f1bb 0f00 	cmp.w	fp, #0
 80075de:	bf08      	it	eq
 80075e0:	46b3      	moveq	fp, r6
 80075e2:	2e10      	cmp	r6, #16
 80075e4:	9308      	str	r3, [sp, #32]
 80075e6:	4635      	mov	r5, r6
 80075e8:	bfa8      	it	ge
 80075ea:	2510      	movge	r5, #16
 80075ec:	f7f8 ff92 	bl	8000514 <__aeabi_ui2d>
 80075f0:	2e09      	cmp	r6, #9
 80075f2:	4680      	mov	r8, r0
 80075f4:	4689      	mov	r9, r1
 80075f6:	dd13      	ble.n	8007620 <_strtod_l+0x3d8>
 80075f8:	4b76      	ldr	r3, [pc, #472]	; (80077d4 <_strtod_l+0x58c>)
 80075fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80075fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007602:	f7f9 f801 	bl	8000608 <__aeabi_dmul>
 8007606:	4680      	mov	r8, r0
 8007608:	4650      	mov	r0, sl
 800760a:	4689      	mov	r9, r1
 800760c:	f7f8 ff82 	bl	8000514 <__aeabi_ui2d>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f8 fe40 	bl	800029c <__adddf3>
 800761c:	4680      	mov	r8, r0
 800761e:	4689      	mov	r9, r1
 8007620:	2e0f      	cmp	r6, #15
 8007622:	dc38      	bgt.n	8007696 <_strtod_l+0x44e>
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f43f ae49 	beq.w	80072be <_strtod_l+0x76>
 800762c:	dd24      	ble.n	8007678 <_strtod_l+0x430>
 800762e:	2b16      	cmp	r3, #22
 8007630:	dc0b      	bgt.n	800764a <_strtod_l+0x402>
 8007632:	4968      	ldr	r1, [pc, #416]	; (80077d4 <_strtod_l+0x58c>)
 8007634:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	f7f8 ffe2 	bl	8000608 <__aeabi_dmul>
 8007644:	4680      	mov	r8, r0
 8007646:	4689      	mov	r9, r1
 8007648:	e639      	b.n	80072be <_strtod_l+0x76>
 800764a:	9a08      	ldr	r2, [sp, #32]
 800764c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007650:	4293      	cmp	r3, r2
 8007652:	db20      	blt.n	8007696 <_strtod_l+0x44e>
 8007654:	4c5f      	ldr	r4, [pc, #380]	; (80077d4 <_strtod_l+0x58c>)
 8007656:	f1c6 060f 	rsb	r6, r6, #15
 800765a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800765e:	4642      	mov	r2, r8
 8007660:	464b      	mov	r3, r9
 8007662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007666:	f7f8 ffcf 	bl	8000608 <__aeabi_dmul>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	1b9e      	subs	r6, r3, r6
 800766e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007672:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007676:	e7e3      	b.n	8007640 <_strtod_l+0x3f8>
 8007678:	9b08      	ldr	r3, [sp, #32]
 800767a:	3316      	adds	r3, #22
 800767c:	db0b      	blt.n	8007696 <_strtod_l+0x44e>
 800767e:	9b05      	ldr	r3, [sp, #20]
 8007680:	1bdf      	subs	r7, r3, r7
 8007682:	4b54      	ldr	r3, [pc, #336]	; (80077d4 <_strtod_l+0x58c>)
 8007684:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	4640      	mov	r0, r8
 800768e:	4649      	mov	r1, r9
 8007690:	f7f9 f8e4 	bl	800085c <__aeabi_ddiv>
 8007694:	e7d6      	b.n	8007644 <_strtod_l+0x3fc>
 8007696:	9b08      	ldr	r3, [sp, #32]
 8007698:	1b75      	subs	r5, r6, r5
 800769a:	441d      	add	r5, r3
 800769c:	2d00      	cmp	r5, #0
 800769e:	dd70      	ble.n	8007782 <_strtod_l+0x53a>
 80076a0:	f015 030f 	ands.w	r3, r5, #15
 80076a4:	d00a      	beq.n	80076bc <_strtod_l+0x474>
 80076a6:	494b      	ldr	r1, [pc, #300]	; (80077d4 <_strtod_l+0x58c>)
 80076a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b4:	f7f8 ffa8 	bl	8000608 <__aeabi_dmul>
 80076b8:	4680      	mov	r8, r0
 80076ba:	4689      	mov	r9, r1
 80076bc:	f035 050f 	bics.w	r5, r5, #15
 80076c0:	d04d      	beq.n	800775e <_strtod_l+0x516>
 80076c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80076c6:	dd22      	ble.n	800770e <_strtod_l+0x4c6>
 80076c8:	2500      	movs	r5, #0
 80076ca:	46ab      	mov	fp, r5
 80076cc:	9509      	str	r5, [sp, #36]	; 0x24
 80076ce:	9505      	str	r5, [sp, #20]
 80076d0:	2322      	movs	r3, #34	; 0x22
 80076d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80077dc <_strtod_l+0x594>
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	f04f 0800 	mov.w	r8, #0
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f43f aded 	beq.w	80072be <_strtod_l+0x76>
 80076e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80076e6:	4620      	mov	r0, r4
 80076e8:	f003 f86e 	bl	800a7c8 <_Bfree>
 80076ec:	9905      	ldr	r1, [sp, #20]
 80076ee:	4620      	mov	r0, r4
 80076f0:	f003 f86a 	bl	800a7c8 <_Bfree>
 80076f4:	4659      	mov	r1, fp
 80076f6:	4620      	mov	r0, r4
 80076f8:	f003 f866 	bl	800a7c8 <_Bfree>
 80076fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076fe:	4620      	mov	r0, r4
 8007700:	f003 f862 	bl	800a7c8 <_Bfree>
 8007704:	4629      	mov	r1, r5
 8007706:	4620      	mov	r0, r4
 8007708:	f003 f85e 	bl	800a7c8 <_Bfree>
 800770c:	e5d7      	b.n	80072be <_strtod_l+0x76>
 800770e:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <_strtod_l+0x590>)
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	112d      	asrs	r5, r5, #4
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	469a      	mov	sl, r3
 800771c:	2d01      	cmp	r5, #1
 800771e:	dc21      	bgt.n	8007764 <_strtod_l+0x51c>
 8007720:	b10b      	cbz	r3, 8007726 <_strtod_l+0x4de>
 8007722:	4680      	mov	r8, r0
 8007724:	4689      	mov	r9, r1
 8007726:	492c      	ldr	r1, [pc, #176]	; (80077d8 <_strtod_l+0x590>)
 8007728:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800772c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007738:	f7f8 ff66 	bl	8000608 <__aeabi_dmul>
 800773c:	4b27      	ldr	r3, [pc, #156]	; (80077dc <_strtod_l+0x594>)
 800773e:	460a      	mov	r2, r1
 8007740:	400b      	ands	r3, r1
 8007742:	4927      	ldr	r1, [pc, #156]	; (80077e0 <_strtod_l+0x598>)
 8007744:	428b      	cmp	r3, r1
 8007746:	4680      	mov	r8, r0
 8007748:	d8be      	bhi.n	80076c8 <_strtod_l+0x480>
 800774a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800774e:	428b      	cmp	r3, r1
 8007750:	bf86      	itte	hi
 8007752:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80077e4 <_strtod_l+0x59c>
 8007756:	f04f 38ff 	movhi.w	r8, #4294967295
 800775a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800775e:	2300      	movs	r3, #0
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	e07b      	b.n	800785c <_strtod_l+0x614>
 8007764:	07ea      	lsls	r2, r5, #31
 8007766:	d505      	bpl.n	8007774 <_strtod_l+0x52c>
 8007768:	9b04      	ldr	r3, [sp, #16]
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 ff4b 	bl	8000608 <__aeabi_dmul>
 8007772:	2301      	movs	r3, #1
 8007774:	9a04      	ldr	r2, [sp, #16]
 8007776:	3208      	adds	r2, #8
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	9204      	str	r2, [sp, #16]
 8007780:	e7cc      	b.n	800771c <_strtod_l+0x4d4>
 8007782:	d0ec      	beq.n	800775e <_strtod_l+0x516>
 8007784:	426d      	negs	r5, r5
 8007786:	f015 020f 	ands.w	r2, r5, #15
 800778a:	d00a      	beq.n	80077a2 <_strtod_l+0x55a>
 800778c:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <_strtod_l+0x58c>)
 800778e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f9 f85f 	bl	800085c <__aeabi_ddiv>
 800779e:	4680      	mov	r8, r0
 80077a0:	4689      	mov	r9, r1
 80077a2:	112d      	asrs	r5, r5, #4
 80077a4:	d0db      	beq.n	800775e <_strtod_l+0x516>
 80077a6:	2d1f      	cmp	r5, #31
 80077a8:	dd1e      	ble.n	80077e8 <_strtod_l+0x5a0>
 80077aa:	2500      	movs	r5, #0
 80077ac:	46ab      	mov	fp, r5
 80077ae:	9509      	str	r5, [sp, #36]	; 0x24
 80077b0:	9505      	str	r5, [sp, #20]
 80077b2:	2322      	movs	r3, #34	; 0x22
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	e78d      	b.n	80076dc <_strtod_l+0x494>
 80077c0:	0800be05 	.word	0x0800be05
 80077c4:	0800bdb8 	.word	0x0800bdb8
 80077c8:	0800bdfd 	.word	0x0800bdfd
 80077cc:	0800bee9 	.word	0x0800bee9
 80077d0:	0800bee5 	.word	0x0800bee5
 80077d4:	0800c040 	.word	0x0800c040
 80077d8:	0800c018 	.word	0x0800c018
 80077dc:	7ff00000 	.word	0x7ff00000
 80077e0:	7ca00000 	.word	0x7ca00000
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	f015 0310 	ands.w	r3, r5, #16
 80077ec:	bf18      	it	ne
 80077ee:	236a      	movne	r3, #106	; 0x6a
 80077f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007b94 <_strtod_l+0x94c>
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	2300      	movs	r3, #0
 80077fc:	07ea      	lsls	r2, r5, #31
 80077fe:	d504      	bpl.n	800780a <_strtod_l+0x5c2>
 8007800:	e9da 2300 	ldrd	r2, r3, [sl]
 8007804:	f7f8 ff00 	bl	8000608 <__aeabi_dmul>
 8007808:	2301      	movs	r3, #1
 800780a:	106d      	asrs	r5, r5, #1
 800780c:	f10a 0a08 	add.w	sl, sl, #8
 8007810:	d1f4      	bne.n	80077fc <_strtod_l+0x5b4>
 8007812:	b10b      	cbz	r3, 8007818 <_strtod_l+0x5d0>
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	9b04      	ldr	r3, [sp, #16]
 800781a:	b1bb      	cbz	r3, 800784c <_strtod_l+0x604>
 800781c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007820:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007824:	2b00      	cmp	r3, #0
 8007826:	4649      	mov	r1, r9
 8007828:	dd10      	ble.n	800784c <_strtod_l+0x604>
 800782a:	2b1f      	cmp	r3, #31
 800782c:	f340 811e 	ble.w	8007a6c <_strtod_l+0x824>
 8007830:	2b34      	cmp	r3, #52	; 0x34
 8007832:	bfde      	ittt	le
 8007834:	f04f 33ff 	movle.w	r3, #4294967295
 8007838:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800783c:	4093      	lslle	r3, r2
 800783e:	f04f 0800 	mov.w	r8, #0
 8007842:	bfcc      	ite	gt
 8007844:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007848:	ea03 0901 	andle.w	r9, r3, r1
 800784c:	2200      	movs	r2, #0
 800784e:	2300      	movs	r3, #0
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	f7f9 f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8007858:	2800      	cmp	r0, #0
 800785a:	d1a6      	bne.n	80077aa <_strtod_l+0x562>
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007862:	4633      	mov	r3, r6
 8007864:	465a      	mov	r2, fp
 8007866:	4620      	mov	r0, r4
 8007868:	f003 f816 	bl	800a898 <__s2b>
 800786c:	9009      	str	r0, [sp, #36]	; 0x24
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f af2a 	beq.w	80076c8 <_strtod_l+0x480>
 8007874:	9a08      	ldr	r2, [sp, #32]
 8007876:	9b05      	ldr	r3, [sp, #20]
 8007878:	2a00      	cmp	r2, #0
 800787a:	eba3 0307 	sub.w	r3, r3, r7
 800787e:	bfa8      	it	ge
 8007880:	2300      	movge	r3, #0
 8007882:	930c      	str	r3, [sp, #48]	; 0x30
 8007884:	2500      	movs	r5, #0
 8007886:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800788a:	9312      	str	r3, [sp, #72]	; 0x48
 800788c:	46ab      	mov	fp, r5
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	4620      	mov	r0, r4
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	f002 ff58 	bl	800a748 <_Balloc>
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	2800      	cmp	r0, #0
 800789c:	f43f af18 	beq.w	80076d0 <_strtod_l+0x488>
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	3202      	adds	r2, #2
 80078a6:	f103 010c 	add.w	r1, r3, #12
 80078aa:	0092      	lsls	r2, r2, #2
 80078ac:	300c      	adds	r0, #12
 80078ae:	f001 fce0 	bl	8009272 <memcpy>
 80078b2:	ec49 8b10 	vmov	d0, r8, r9
 80078b6:	aa18      	add	r2, sp, #96	; 0x60
 80078b8:	a917      	add	r1, sp, #92	; 0x5c
 80078ba:	4620      	mov	r0, r4
 80078bc:	f003 fb20 	bl	800af00 <__d2b>
 80078c0:	ec49 8b18 	vmov	d8, r8, r9
 80078c4:	9016      	str	r0, [sp, #88]	; 0x58
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f af02 	beq.w	80076d0 <_strtod_l+0x488>
 80078cc:	2101      	movs	r1, #1
 80078ce:	4620      	mov	r0, r4
 80078d0:	f003 f87a 	bl	800a9c8 <__i2b>
 80078d4:	4683      	mov	fp, r0
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f aefa 	beq.w	80076d0 <_strtod_l+0x488>
 80078dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80078de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078e0:	2e00      	cmp	r6, #0
 80078e2:	bfab      	itete	ge
 80078e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80078e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80078e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80078ee:	bfac      	ite	ge
 80078f0:	eb06 0a03 	addge.w	sl, r6, r3
 80078f4:	1b9f      	sublt	r7, r3, r6
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	1af6      	subs	r6, r6, r3
 80078fa:	4416      	add	r6, r2
 80078fc:	4ba0      	ldr	r3, [pc, #640]	; (8007b80 <_strtod_l+0x938>)
 80078fe:	3e01      	subs	r6, #1
 8007900:	429e      	cmp	r6, r3
 8007902:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007906:	f280 80c4 	bge.w	8007a92 <_strtod_l+0x84a>
 800790a:	1b9b      	subs	r3, r3, r6
 800790c:	2b1f      	cmp	r3, #31
 800790e:	eba2 0203 	sub.w	r2, r2, r3
 8007912:	f04f 0101 	mov.w	r1, #1
 8007916:	f300 80b0 	bgt.w	8007a7a <_strtod_l+0x832>
 800791a:	fa01 f303 	lsl.w	r3, r1, r3
 800791e:	930e      	str	r3, [sp, #56]	; 0x38
 8007920:	2300      	movs	r3, #0
 8007922:	930d      	str	r3, [sp, #52]	; 0x34
 8007924:	eb0a 0602 	add.w	r6, sl, r2
 8007928:	9b04      	ldr	r3, [sp, #16]
 800792a:	45b2      	cmp	sl, r6
 800792c:	4417      	add	r7, r2
 800792e:	441f      	add	r7, r3
 8007930:	4653      	mov	r3, sl
 8007932:	bfa8      	it	ge
 8007934:	4633      	movge	r3, r6
 8007936:	42bb      	cmp	r3, r7
 8007938:	bfa8      	it	ge
 800793a:	463b      	movge	r3, r7
 800793c:	2b00      	cmp	r3, #0
 800793e:	bfc2      	ittt	gt
 8007940:	1af6      	subgt	r6, r6, r3
 8007942:	1aff      	subgt	r7, r7, r3
 8007944:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800794a:	2b00      	cmp	r3, #0
 800794c:	dd17      	ble.n	800797e <_strtod_l+0x736>
 800794e:	4659      	mov	r1, fp
 8007950:	461a      	mov	r2, r3
 8007952:	4620      	mov	r0, r4
 8007954:	f003 f8f8 	bl	800ab48 <__pow5mult>
 8007958:	4683      	mov	fp, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	f43f aeb8 	beq.w	80076d0 <_strtod_l+0x488>
 8007960:	4601      	mov	r1, r0
 8007962:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007964:	4620      	mov	r0, r4
 8007966:	f003 f845 	bl	800a9f4 <__multiply>
 800796a:	900b      	str	r0, [sp, #44]	; 0x2c
 800796c:	2800      	cmp	r0, #0
 800796e:	f43f aeaf 	beq.w	80076d0 <_strtod_l+0x488>
 8007972:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007974:	4620      	mov	r0, r4
 8007976:	f002 ff27 	bl	800a7c8 <_Bfree>
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	9316      	str	r3, [sp, #88]	; 0x58
 800797e:	2e00      	cmp	r6, #0
 8007980:	f300 808c 	bgt.w	8007a9c <_strtod_l+0x854>
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd08      	ble.n	800799c <_strtod_l+0x754>
 800798a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800798c:	9905      	ldr	r1, [sp, #20]
 800798e:	4620      	mov	r0, r4
 8007990:	f003 f8da 	bl	800ab48 <__pow5mult>
 8007994:	9005      	str	r0, [sp, #20]
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f ae9a 	beq.w	80076d0 <_strtod_l+0x488>
 800799c:	2f00      	cmp	r7, #0
 800799e:	dd08      	ble.n	80079b2 <_strtod_l+0x76a>
 80079a0:	9905      	ldr	r1, [sp, #20]
 80079a2:	463a      	mov	r2, r7
 80079a4:	4620      	mov	r0, r4
 80079a6:	f003 f929 	bl	800abfc <__lshift>
 80079aa:	9005      	str	r0, [sp, #20]
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f43f ae8f 	beq.w	80076d0 <_strtod_l+0x488>
 80079b2:	f1ba 0f00 	cmp.w	sl, #0
 80079b6:	dd08      	ble.n	80079ca <_strtod_l+0x782>
 80079b8:	4659      	mov	r1, fp
 80079ba:	4652      	mov	r2, sl
 80079bc:	4620      	mov	r0, r4
 80079be:	f003 f91d 	bl	800abfc <__lshift>
 80079c2:	4683      	mov	fp, r0
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f ae83 	beq.w	80076d0 <_strtod_l+0x488>
 80079ca:	9a05      	ldr	r2, [sp, #20]
 80079cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079ce:	4620      	mov	r0, r4
 80079d0:	f003 f99c 	bl	800ad0c <__mdiff>
 80079d4:	4605      	mov	r5, r0
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f ae7a 	beq.w	80076d0 <_strtod_l+0x488>
 80079dc:	68c3      	ldr	r3, [r0, #12]
 80079de:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e0:	2300      	movs	r3, #0
 80079e2:	60c3      	str	r3, [r0, #12]
 80079e4:	4659      	mov	r1, fp
 80079e6:	f003 f975 	bl	800acd4 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	da60      	bge.n	8007ab0 <_strtod_l+0x868>
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	ea53 0308 	orrs.w	r3, r3, r8
 80079f4:	f040 8084 	bne.w	8007b00 <_strtod_l+0x8b8>
 80079f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d17f      	bne.n	8007b00 <_strtod_l+0x8b8>
 8007a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a04:	0d1b      	lsrs	r3, r3, #20
 8007a06:	051b      	lsls	r3, r3, #20
 8007a08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a0c:	d978      	bls.n	8007b00 <_strtod_l+0x8b8>
 8007a0e:	696b      	ldr	r3, [r5, #20]
 8007a10:	b913      	cbnz	r3, 8007a18 <_strtod_l+0x7d0>
 8007a12:	692b      	ldr	r3, [r5, #16]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	dd73      	ble.n	8007b00 <_strtod_l+0x8b8>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f003 f8ed 	bl	800abfc <__lshift>
 8007a22:	4659      	mov	r1, fp
 8007a24:	4605      	mov	r5, r0
 8007a26:	f003 f955 	bl	800acd4 <__mcmp>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dd68      	ble.n	8007b00 <_strtod_l+0x8b8>
 8007a2e:	9904      	ldr	r1, [sp, #16]
 8007a30:	4a54      	ldr	r2, [pc, #336]	; (8007b84 <_strtod_l+0x93c>)
 8007a32:	464b      	mov	r3, r9
 8007a34:	2900      	cmp	r1, #0
 8007a36:	f000 8084 	beq.w	8007b42 <_strtod_l+0x8fa>
 8007a3a:	ea02 0109 	and.w	r1, r2, r9
 8007a3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a42:	dc7e      	bgt.n	8007b42 <_strtod_l+0x8fa>
 8007a44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a48:	f77f aeb3 	ble.w	80077b2 <_strtod_l+0x56a>
 8007a4c:	4b4e      	ldr	r3, [pc, #312]	; (8007b88 <_strtod_l+0x940>)
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	2200      	movs	r2, #0
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	4b4a      	ldr	r3, [pc, #296]	; (8007b84 <_strtod_l+0x93c>)
 8007a5a:	400b      	ands	r3, r1
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f47f ae3f 	bne.w	80076e4 <_strtod_l+0x49c>
 8007a66:	2322      	movs	r3, #34	; 0x22
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	e63b      	b.n	80076e4 <_strtod_l+0x49c>
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	ea03 0808 	and.w	r8, r3, r8
 8007a78:	e6e8      	b.n	800784c <_strtod_l+0x604>
 8007a7a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007a7e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007a82:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007a86:	36e2      	adds	r6, #226	; 0xe2
 8007a88:	fa01 f306 	lsl.w	r3, r1, r6
 8007a8c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007a90:	e748      	b.n	8007924 <_strtod_l+0x6dc>
 8007a92:	2100      	movs	r1, #0
 8007a94:	2301      	movs	r3, #1
 8007a96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007a9a:	e743      	b.n	8007924 <_strtod_l+0x6dc>
 8007a9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f003 f8ab 	bl	800abfc <__lshift>
 8007aa6:	9016      	str	r0, [sp, #88]	; 0x58
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f47f af6b 	bne.w	8007984 <_strtod_l+0x73c>
 8007aae:	e60f      	b.n	80076d0 <_strtod_l+0x488>
 8007ab0:	46ca      	mov	sl, r9
 8007ab2:	d171      	bne.n	8007b98 <_strtod_l+0x950>
 8007ab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ab6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aba:	b352      	cbz	r2, 8007b12 <_strtod_l+0x8ca>
 8007abc:	4a33      	ldr	r2, [pc, #204]	; (8007b8c <_strtod_l+0x944>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d12a      	bne.n	8007b18 <_strtod_l+0x8d0>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	4641      	mov	r1, r8
 8007ac6:	b1fb      	cbz	r3, 8007b08 <_strtod_l+0x8c0>
 8007ac8:	4b2e      	ldr	r3, [pc, #184]	; (8007b84 <_strtod_l+0x93c>)
 8007aca:	ea09 0303 	and.w	r3, r9, r3
 8007ace:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	d81a      	bhi.n	8007b0e <_strtod_l+0x8c6>
 8007ad8:	0d1b      	lsrs	r3, r3, #20
 8007ada:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	d118      	bne.n	8007b18 <_strtod_l+0x8d0>
 8007ae6:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <_strtod_l+0x948>)
 8007ae8:	459a      	cmp	sl, r3
 8007aea:	d102      	bne.n	8007af2 <_strtod_l+0x8aa>
 8007aec:	3101      	adds	r1, #1
 8007aee:	f43f adef 	beq.w	80076d0 <_strtod_l+0x488>
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <_strtod_l+0x93c>)
 8007af4:	ea0a 0303 	and.w	r3, sl, r3
 8007af8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007afc:	f04f 0800 	mov.w	r8, #0
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1a2      	bne.n	8007a4c <_strtod_l+0x804>
 8007b06:	e5ed      	b.n	80076e4 <_strtod_l+0x49c>
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	e7e9      	b.n	8007ae2 <_strtod_l+0x89a>
 8007b0e:	4613      	mov	r3, r2
 8007b10:	e7e7      	b.n	8007ae2 <_strtod_l+0x89a>
 8007b12:	ea53 0308 	orrs.w	r3, r3, r8
 8007b16:	d08a      	beq.n	8007a2e <_strtod_l+0x7e6>
 8007b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b1a:	b1e3      	cbz	r3, 8007b56 <_strtod_l+0x90e>
 8007b1c:	ea13 0f0a 	tst.w	r3, sl
 8007b20:	d0ee      	beq.n	8007b00 <_strtod_l+0x8b8>
 8007b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	4640      	mov	r0, r8
 8007b28:	4649      	mov	r1, r9
 8007b2a:	b1c3      	cbz	r3, 8007b5e <_strtod_l+0x916>
 8007b2c:	f7ff fb70 	bl	8007210 <sulp>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	ec51 0b18 	vmov	r0, r1, d8
 8007b38:	f7f8 fbb0 	bl	800029c <__adddf3>
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4689      	mov	r9, r1
 8007b40:	e7de      	b.n	8007b00 <_strtod_l+0x8b8>
 8007b42:	4013      	ands	r3, r2
 8007b44:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b48:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007b4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007b50:	f04f 38ff 	mov.w	r8, #4294967295
 8007b54:	e7d4      	b.n	8007b00 <_strtod_l+0x8b8>
 8007b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b58:	ea13 0f08 	tst.w	r3, r8
 8007b5c:	e7e0      	b.n	8007b20 <_strtod_l+0x8d8>
 8007b5e:	f7ff fb57 	bl	8007210 <sulp>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	ec51 0b18 	vmov	r0, r1, d8
 8007b6a:	f7f8 fb95 	bl	8000298 <__aeabi_dsub>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	4680      	mov	r8, r0
 8007b74:	4689      	mov	r9, r1
 8007b76:	f7f8 ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d0c0      	beq.n	8007b00 <_strtod_l+0x8b8>
 8007b7e:	e618      	b.n	80077b2 <_strtod_l+0x56a>
 8007b80:	fffffc02 	.word	0xfffffc02
 8007b84:	7ff00000 	.word	0x7ff00000
 8007b88:	39500000 	.word	0x39500000
 8007b8c:	000fffff 	.word	0x000fffff
 8007b90:	7fefffff 	.word	0x7fefffff
 8007b94:	0800bdd0 	.word	0x0800bdd0
 8007b98:	4659      	mov	r1, fp
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f003 fa0a 	bl	800afb4 <__ratio>
 8007ba0:	ec57 6b10 	vmov	r6, r7, d0
 8007ba4:	ee10 0a10 	vmov	r0, s0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 ffa6 	bl	8000b00 <__aeabi_dcmple>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d071      	beq.n	8007c9c <_strtod_l+0xa54>
 8007bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d17c      	bne.n	8007cb8 <_strtod_l+0xa70>
 8007bbe:	f1b8 0f00 	cmp.w	r8, #0
 8007bc2:	d15a      	bne.n	8007c7a <_strtod_l+0xa32>
 8007bc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d15d      	bne.n	8007c88 <_strtod_l+0xa40>
 8007bcc:	4b90      	ldr	r3, [pc, #576]	; (8007e10 <_strtod_l+0xbc8>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ff8a 	bl	8000aec <__aeabi_dcmplt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d15c      	bne.n	8007c96 <_strtod_l+0xa4e>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	4639      	mov	r1, r7
 8007be0:	4b8c      	ldr	r3, [pc, #560]	; (8007e14 <_strtod_l+0xbcc>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f7f8 fd10 	bl	8000608 <__aeabi_dmul>
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007bf0:	9606      	str	r6, [sp, #24]
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007bfc:	4b86      	ldr	r3, [pc, #536]	; (8007e18 <_strtod_l+0xbd0>)
 8007bfe:	ea0a 0303 	and.w	r3, sl, r3
 8007c02:	930d      	str	r3, [sp, #52]	; 0x34
 8007c04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c06:	4b85      	ldr	r3, [pc, #532]	; (8007e1c <_strtod_l+0xbd4>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	f040 8090 	bne.w	8007d2e <_strtod_l+0xae6>
 8007c0e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007c12:	ec49 8b10 	vmov	d0, r8, r9
 8007c16:	f003 f903 	bl	800ae20 <__ulp>
 8007c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c1e:	ec51 0b10 	vmov	r0, r1, d0
 8007c22:	f7f8 fcf1 	bl	8000608 <__aeabi_dmul>
 8007c26:	4642      	mov	r2, r8
 8007c28:	464b      	mov	r3, r9
 8007c2a:	f7f8 fb37 	bl	800029c <__adddf3>
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4979      	ldr	r1, [pc, #484]	; (8007e18 <_strtod_l+0xbd0>)
 8007c32:	4a7b      	ldr	r2, [pc, #492]	; (8007e20 <_strtod_l+0xbd8>)
 8007c34:	4019      	ands	r1, r3
 8007c36:	4291      	cmp	r1, r2
 8007c38:	4680      	mov	r8, r0
 8007c3a:	d944      	bls.n	8007cc6 <_strtod_l+0xa7e>
 8007c3c:	ee18 2a90 	vmov	r2, s17
 8007c40:	4b78      	ldr	r3, [pc, #480]	; (8007e24 <_strtod_l+0xbdc>)
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d104      	bne.n	8007c50 <_strtod_l+0xa08>
 8007c46:	ee18 3a10 	vmov	r3, s16
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	f43f ad40 	beq.w	80076d0 <_strtod_l+0x488>
 8007c50:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007e24 <_strtod_l+0xbdc>
 8007c54:	f04f 38ff 	mov.w	r8, #4294967295
 8007c58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f002 fdb4 	bl	800a7c8 <_Bfree>
 8007c60:	9905      	ldr	r1, [sp, #20]
 8007c62:	4620      	mov	r0, r4
 8007c64:	f002 fdb0 	bl	800a7c8 <_Bfree>
 8007c68:	4659      	mov	r1, fp
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f002 fdac 	bl	800a7c8 <_Bfree>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4620      	mov	r0, r4
 8007c74:	f002 fda8 	bl	800a7c8 <_Bfree>
 8007c78:	e609      	b.n	800788e <_strtod_l+0x646>
 8007c7a:	f1b8 0f01 	cmp.w	r8, #1
 8007c7e:	d103      	bne.n	8007c88 <_strtod_l+0xa40>
 8007c80:	f1b9 0f00 	cmp.w	r9, #0
 8007c84:	f43f ad95 	beq.w	80077b2 <_strtod_l+0x56a>
 8007c88:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007de0 <_strtod_l+0xb98>
 8007c8c:	4f60      	ldr	r7, [pc, #384]	; (8007e10 <_strtod_l+0xbc8>)
 8007c8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c92:	2600      	movs	r6, #0
 8007c94:	e7ae      	b.n	8007bf4 <_strtod_l+0x9ac>
 8007c96:	4f5f      	ldr	r7, [pc, #380]	; (8007e14 <_strtod_l+0xbcc>)
 8007c98:	2600      	movs	r6, #0
 8007c9a:	e7a7      	b.n	8007bec <_strtod_l+0x9a4>
 8007c9c:	4b5d      	ldr	r3, [pc, #372]	; (8007e14 <_strtod_l+0xbcc>)
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d09c      	beq.n	8007bec <_strtod_l+0x9a4>
 8007cb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007cb6:	e79d      	b.n	8007bf4 <_strtod_l+0x9ac>
 8007cb8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007de8 <_strtod_l+0xba0>
 8007cbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cc0:	ec57 6b17 	vmov	r6, r7, d7
 8007cc4:	e796      	b.n	8007bf4 <_strtod_l+0x9ac>
 8007cc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	46ca      	mov	sl, r9
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1c2      	bne.n	8007c58 <_strtod_l+0xa10>
 8007cd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd8:	0d1b      	lsrs	r3, r3, #20
 8007cda:	051b      	lsls	r3, r3, #20
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d1bb      	bne.n	8007c58 <_strtod_l+0xa10>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fff0 	bl	8000cc8 <__aeabi_d2lz>
 8007ce8:	f7f8 fc60 	bl	80005ac <__aeabi_l2d>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fad0 	bl	8000298 <__aeabi_dsub>
 8007cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cfe:	ea43 0308 	orr.w	r3, r3, r8
 8007d02:	4313      	orrs	r3, r2
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	d054      	beq.n	8007db4 <_strtod_l+0xb6c>
 8007d0a:	a339      	add	r3, pc, #228	; (adr r3, 8007df0 <_strtod_l+0xba8>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 feec 	bl	8000aec <__aeabi_dcmplt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f47f ace5 	bne.w	80076e4 <_strtod_l+0x49c>
 8007d1a:	a337      	add	r3, pc, #220	; (adr r3, 8007df8 <_strtod_l+0xbb0>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 ff00 	bl	8000b28 <__aeabi_dcmpgt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d095      	beq.n	8007c58 <_strtod_l+0xa10>
 8007d2c:	e4da      	b.n	80076e4 <_strtod_l+0x49c>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	b333      	cbz	r3, 8007d80 <_strtod_l+0xb38>
 8007d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d38:	d822      	bhi.n	8007d80 <_strtod_l+0xb38>
 8007d3a:	a331      	add	r3, pc, #196	; (adr r3, 8007e00 <_strtod_l+0xbb8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fedc 	bl	8000b00 <__aeabi_dcmple>
 8007d48:	b1a0      	cbz	r0, 8007d74 <_strtod_l+0xb2c>
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7f8 ff33 	bl	8000bb8 <__aeabi_d2uiz>
 8007d52:	2801      	cmp	r0, #1
 8007d54:	bf38      	it	cc
 8007d56:	2001      	movcc	r0, #1
 8007d58:	f7f8 fbdc 	bl	8000514 <__aeabi_ui2d>
 8007d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	bb23      	cbnz	r3, 8007dae <_strtod_l+0xb66>
 8007d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d68:	9010      	str	r0, [sp, #64]	; 0x40
 8007d6a:	9311      	str	r3, [sp, #68]	; 0x44
 8007d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d84:	eeb0 0a48 	vmov.f32	s0, s16
 8007d88:	eef0 0a68 	vmov.f32	s1, s17
 8007d8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007d90:	f003 f846 	bl	800ae20 <__ulp>
 8007d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d98:	ec53 2b10 	vmov	r2, r3, d0
 8007d9c:	f7f8 fc34 	bl	8000608 <__aeabi_dmul>
 8007da0:	ec53 2b18 	vmov	r2, r3, d8
 8007da4:	f7f8 fa7a 	bl	800029c <__adddf3>
 8007da8:	4680      	mov	r8, r0
 8007daa:	4689      	mov	r9, r1
 8007dac:	e78d      	b.n	8007cca <_strtod_l+0xa82>
 8007dae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007db2:	e7db      	b.n	8007d6c <_strtod_l+0xb24>
 8007db4:	a314      	add	r3, pc, #80	; (adr r3, 8007e08 <_strtod_l+0xbc0>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f7f8 fe97 	bl	8000aec <__aeabi_dcmplt>
 8007dbe:	e7b3      	b.n	8007d28 <_strtod_l+0xae0>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	f7ff ba7c 	b.w	80072c6 <_strtod_l+0x7e>
 8007dce:	2a65      	cmp	r2, #101	; 0x65
 8007dd0:	f43f ab75 	beq.w	80074be <_strtod_l+0x276>
 8007dd4:	2a45      	cmp	r2, #69	; 0x45
 8007dd6:	f43f ab72 	beq.w	80074be <_strtod_l+0x276>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f7ff bbaa 	b.w	8007534 <_strtod_l+0x2ec>
 8007de0:	00000000 	.word	0x00000000
 8007de4:	bff00000 	.word	0xbff00000
 8007de8:	00000000 	.word	0x00000000
 8007dec:	3ff00000 	.word	0x3ff00000
 8007df0:	94a03595 	.word	0x94a03595
 8007df4:	3fdfffff 	.word	0x3fdfffff
 8007df8:	35afe535 	.word	0x35afe535
 8007dfc:	3fe00000 	.word	0x3fe00000
 8007e00:	ffc00000 	.word	0xffc00000
 8007e04:	41dfffff 	.word	0x41dfffff
 8007e08:	94a03595 	.word	0x94a03595
 8007e0c:	3fcfffff 	.word	0x3fcfffff
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	3fe00000 	.word	0x3fe00000
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	7fe00000 	.word	0x7fe00000
 8007e20:	7c9fffff 	.word	0x7c9fffff
 8007e24:	7fefffff 	.word	0x7fefffff

08007e28 <_strtod_r>:
 8007e28:	4b01      	ldr	r3, [pc, #4]	; (8007e30 <_strtod_r+0x8>)
 8007e2a:	f7ff ba0d 	b.w	8007248 <_strtod_l>
 8007e2e:	bf00      	nop
 8007e30:	20000028 	.word	0x20000028

08007e34 <strtof>:
 8007e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e38:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007efc <strtof+0xc8>
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <strtof+0xb4>)
 8007e3e:	460a      	mov	r2, r1
 8007e40:	ed2d 8b02 	vpush	{d8}
 8007e44:	4601      	mov	r1, r0
 8007e46:	f8d8 0000 	ldr.w	r0, [r8]
 8007e4a:	f7ff f9fd 	bl	8007248 <_strtod_l>
 8007e4e:	ec55 4b10 	vmov	r4, r5, d0
 8007e52:	ee10 2a10 	vmov	r2, s0
 8007e56:	ee10 0a10 	vmov	r0, s0
 8007e5a:	462b      	mov	r3, r5
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fe6d 	bl	8000b3c <__aeabi_dcmpun>
 8007e62:	b190      	cbz	r0, 8007e8a <strtof+0x56>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	4821      	ldr	r0, [pc, #132]	; (8007eec <strtof+0xb8>)
 8007e68:	da09      	bge.n	8007e7e <strtof+0x4a>
 8007e6a:	f001 fa19 	bl	80092a0 <nanf>
 8007e6e:	eeb1 8a40 	vneg.f32	s16, s0
 8007e72:	eeb0 0a48 	vmov.f32	s0, s16
 8007e76:	ecbd 8b02 	vpop	{d8}
 8007e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7e:	ecbd 8b02 	vpop	{d8}
 8007e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e86:	f001 ba0b 	b.w	80092a0 <nanf>
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7f8 feb3 	bl	8000bf8 <__aeabi_d2f>
 8007e92:	ee08 0a10 	vmov	s16, r0
 8007e96:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007ef0 <strtof+0xbc>
 8007e9a:	eeb0 7ac8 	vabs.f32	s14, s16
 8007e9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8007ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea6:	dd11      	ble.n	8007ecc <strtof+0x98>
 8007ea8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007eac:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <strtof+0xc0>)
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 fe41 	bl	8000b3c <__aeabi_dcmpun>
 8007eba:	b980      	cbnz	r0, 8007ede <strtof+0xaa>
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <strtof+0xc0>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	f7f8 fe1b 	bl	8000b00 <__aeabi_dcmple>
 8007eca:	b940      	cbnz	r0, 8007ede <strtof+0xaa>
 8007ecc:	ee18 3a10 	vmov	r3, s16
 8007ed0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007ed4:	d1cd      	bne.n	8007e72 <strtof+0x3e>
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <strtof+0xc4>)
 8007ed8:	402b      	ands	r3, r5
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0c9      	beq.n	8007e72 <strtof+0x3e>
 8007ede:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee2:	2222      	movs	r2, #34	; 0x22
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e7c4      	b.n	8007e72 <strtof+0x3e>
 8007ee8:	20000028 	.word	0x20000028
 8007eec:	0800bee5 	.word	0x0800bee5
 8007ef0:	7f7fffff 	.word	0x7f7fffff
 8007ef4:	7fefffff 	.word	0x7fefffff
 8007ef8:	7ff00000 	.word	0x7ff00000
 8007efc:	200001e0 	.word	0x200001e0

08007f00 <__cvt>:
 8007f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	ec55 4b10 	vmov	r4, r5, d0
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	462b      	mov	r3, r5
 8007f10:	bfbb      	ittet	lt
 8007f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f16:	461d      	movlt	r5, r3
 8007f18:	2300      	movge	r3, #0
 8007f1a:	232d      	movlt	r3, #45	; 0x2d
 8007f1c:	700b      	strb	r3, [r1, #0]
 8007f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f24:	4691      	mov	r9, r2
 8007f26:	f023 0820 	bic.w	r8, r3, #32
 8007f2a:	bfbc      	itt	lt
 8007f2c:	4622      	movlt	r2, r4
 8007f2e:	4614      	movlt	r4, r2
 8007f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f34:	d005      	beq.n	8007f42 <__cvt+0x42>
 8007f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f3a:	d100      	bne.n	8007f3e <__cvt+0x3e>
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	2102      	movs	r1, #2
 8007f40:	e000      	b.n	8007f44 <__cvt+0x44>
 8007f42:	2103      	movs	r1, #3
 8007f44:	ab03      	add	r3, sp, #12
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	ab02      	add	r3, sp, #8
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	ec45 4b10 	vmov	d0, r4, r5
 8007f50:	4653      	mov	r3, sl
 8007f52:	4632      	mov	r2, r6
 8007f54:	f001 fa50 	bl	80093f8 <_dtoa_r>
 8007f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	d102      	bne.n	8007f66 <__cvt+0x66>
 8007f60:	f019 0f01 	tst.w	r9, #1
 8007f64:	d022      	beq.n	8007fac <__cvt+0xac>
 8007f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f6a:	eb07 0906 	add.w	r9, r7, r6
 8007f6e:	d110      	bne.n	8007f92 <__cvt+0x92>
 8007f70:	783b      	ldrb	r3, [r7, #0]
 8007f72:	2b30      	cmp	r3, #48	; 0x30
 8007f74:	d10a      	bne.n	8007f8c <__cvt+0x8c>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f82:	b918      	cbnz	r0, 8007f8c <__cvt+0x8c>
 8007f84:	f1c6 0601 	rsb	r6, r6, #1
 8007f88:	f8ca 6000 	str.w	r6, [sl]
 8007f8c:	f8da 3000 	ldr.w	r3, [sl]
 8007f90:	4499      	add	r9, r3
 8007f92:	2200      	movs	r2, #0
 8007f94:	2300      	movs	r3, #0
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f9e:	b108      	cbz	r0, 8007fa4 <__cvt+0xa4>
 8007fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fa4:	2230      	movs	r2, #48	; 0x30
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	454b      	cmp	r3, r9
 8007faa:	d307      	bcc.n	8007fbc <__cvt+0xbc>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fb0:	1bdb      	subs	r3, r3, r7
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	b004      	add	sp, #16
 8007fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbc:	1c59      	adds	r1, r3, #1
 8007fbe:	9103      	str	r1, [sp, #12]
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e7f0      	b.n	8007fa6 <__cvt+0xa6>

08007fc4 <__exponent>:
 8007fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	bfb8      	it	lt
 8007fcc:	4249      	neglt	r1, r1
 8007fce:	f803 2b02 	strb.w	r2, [r3], #2
 8007fd2:	bfb4      	ite	lt
 8007fd4:	222d      	movlt	r2, #45	; 0x2d
 8007fd6:	222b      	movge	r2, #43	; 0x2b
 8007fd8:	2909      	cmp	r1, #9
 8007fda:	7042      	strb	r2, [r0, #1]
 8007fdc:	dd2a      	ble.n	8008034 <__exponent+0x70>
 8007fde:	f10d 0207 	add.w	r2, sp, #7
 8007fe2:	4617      	mov	r7, r2
 8007fe4:	260a      	movs	r6, #10
 8007fe6:	4694      	mov	ip, r2
 8007fe8:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fec:	fb06 1415 	mls	r4, r6, r5, r1
 8007ff0:	3430      	adds	r4, #48	; 0x30
 8007ff2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	2c63      	cmp	r4, #99	; 0x63
 8007ffa:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ffe:	4629      	mov	r1, r5
 8008000:	dcf1      	bgt.n	8007fe6 <__exponent+0x22>
 8008002:	3130      	adds	r1, #48	; 0x30
 8008004:	f1ac 0402 	sub.w	r4, ip, #2
 8008008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800800c:	1c41      	adds	r1, r0, #1
 800800e:	4622      	mov	r2, r4
 8008010:	42ba      	cmp	r2, r7
 8008012:	d30a      	bcc.n	800802a <__exponent+0x66>
 8008014:	f10d 0209 	add.w	r2, sp, #9
 8008018:	eba2 020c 	sub.w	r2, r2, ip
 800801c:	42bc      	cmp	r4, r7
 800801e:	bf88      	it	hi
 8008020:	2200      	movhi	r2, #0
 8008022:	4413      	add	r3, r2
 8008024:	1a18      	subs	r0, r3, r0
 8008026:	b003      	add	sp, #12
 8008028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800802e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008032:	e7ed      	b.n	8008010 <__exponent+0x4c>
 8008034:	2330      	movs	r3, #48	; 0x30
 8008036:	3130      	adds	r1, #48	; 0x30
 8008038:	7083      	strb	r3, [r0, #2]
 800803a:	70c1      	strb	r1, [r0, #3]
 800803c:	1d03      	adds	r3, r0, #4
 800803e:	e7f1      	b.n	8008024 <__exponent+0x60>

08008040 <_printf_float>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	ed2d 8b02 	vpush	{d8}
 8008048:	b08d      	sub	sp, #52	; 0x34
 800804a:	460c      	mov	r4, r1
 800804c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008050:	4616      	mov	r6, r2
 8008052:	461f      	mov	r7, r3
 8008054:	4605      	mov	r5, r0
 8008056:	f001 f885 	bl	8009164 <_localeconv_r>
 800805a:	f8d0 a000 	ldr.w	sl, [r0]
 800805e:	4650      	mov	r0, sl
 8008060:	f7f8 f90e 	bl	8000280 <strlen>
 8008064:	2300      	movs	r3, #0
 8008066:	930a      	str	r3, [sp, #40]	; 0x28
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	9305      	str	r3, [sp, #20]
 800806c:	f8d8 3000 	ldr.w	r3, [r8]
 8008070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008074:	3307      	adds	r3, #7
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	f103 0208 	add.w	r2, r3, #8
 800807e:	f8c8 2000 	str.w	r2, [r8]
 8008082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800808a:	9307      	str	r3, [sp, #28]
 800808c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008090:	ee08 0a10 	vmov	s16, r0
 8008094:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800809c:	4b9e      	ldr	r3, [pc, #632]	; (8008318 <_printf_float+0x2d8>)
 800809e:	f04f 32ff 	mov.w	r2, #4294967295
 80080a2:	f7f8 fd4b 	bl	8000b3c <__aeabi_dcmpun>
 80080a6:	bb88      	cbnz	r0, 800810c <_printf_float+0xcc>
 80080a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ac:	4b9a      	ldr	r3, [pc, #616]	; (8008318 <_printf_float+0x2d8>)
 80080ae:	f04f 32ff 	mov.w	r2, #4294967295
 80080b2:	f7f8 fd25 	bl	8000b00 <__aeabi_dcmple>
 80080b6:	bb48      	cbnz	r0, 800810c <_printf_float+0xcc>
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	4640      	mov	r0, r8
 80080be:	4649      	mov	r1, r9
 80080c0:	f7f8 fd14 	bl	8000aec <__aeabi_dcmplt>
 80080c4:	b110      	cbz	r0, 80080cc <_printf_float+0x8c>
 80080c6:	232d      	movs	r3, #45	; 0x2d
 80080c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080cc:	4a93      	ldr	r2, [pc, #588]	; (800831c <_printf_float+0x2dc>)
 80080ce:	4b94      	ldr	r3, [pc, #592]	; (8008320 <_printf_float+0x2e0>)
 80080d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080d4:	bf94      	ite	ls
 80080d6:	4690      	movls	r8, r2
 80080d8:	4698      	movhi	r8, r3
 80080da:	2303      	movs	r3, #3
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	9b05      	ldr	r3, [sp, #20]
 80080e0:	f023 0304 	bic.w	r3, r3, #4
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	f04f 0900 	mov.w	r9, #0
 80080ea:	9700      	str	r7, [sp, #0]
 80080ec:	4633      	mov	r3, r6
 80080ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80080f0:	4621      	mov	r1, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f9da 	bl	80084ac <_printf_common>
 80080f8:	3001      	adds	r0, #1
 80080fa:	f040 8090 	bne.w	800821e <_printf_float+0x1de>
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	b00d      	add	sp, #52	; 0x34
 8008104:	ecbd 8b02 	vpop	{d8}
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 fd12 	bl	8000b3c <__aeabi_dcmpun>
 8008118:	b140      	cbz	r0, 800812c <_printf_float+0xec>
 800811a:	464b      	mov	r3, r9
 800811c:	2b00      	cmp	r3, #0
 800811e:	bfbc      	itt	lt
 8008120:	232d      	movlt	r3, #45	; 0x2d
 8008122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008126:	4a7f      	ldr	r2, [pc, #508]	; (8008324 <_printf_float+0x2e4>)
 8008128:	4b7f      	ldr	r3, [pc, #508]	; (8008328 <_printf_float+0x2e8>)
 800812a:	e7d1      	b.n	80080d0 <_printf_float+0x90>
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008132:	9206      	str	r2, [sp, #24]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	d13f      	bne.n	80081b8 <_printf_float+0x178>
 8008138:	2306      	movs	r3, #6
 800813a:	6063      	str	r3, [r4, #4]
 800813c:	9b05      	ldr	r3, [sp, #20]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008144:	2300      	movs	r3, #0
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	ab0a      	add	r3, sp, #40	; 0x28
 800814a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800814e:	ab09      	add	r3, sp, #36	; 0x24
 8008150:	ec49 8b10 	vmov	d0, r8, r9
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800815c:	4628      	mov	r0, r5
 800815e:	f7ff fecf 	bl	8007f00 <__cvt>
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008166:	2b47      	cmp	r3, #71	; 0x47
 8008168:	4680      	mov	r8, r0
 800816a:	d108      	bne.n	800817e <_printf_float+0x13e>
 800816c:	1cc8      	adds	r0, r1, #3
 800816e:	db02      	blt.n	8008176 <_printf_float+0x136>
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	4299      	cmp	r1, r3
 8008174:	dd41      	ble.n	80081fa <_printf_float+0x1ba>
 8008176:	f1ab 0302 	sub.w	r3, fp, #2
 800817a:	fa5f fb83 	uxtb.w	fp, r3
 800817e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008182:	d820      	bhi.n	80081c6 <_printf_float+0x186>
 8008184:	3901      	subs	r1, #1
 8008186:	465a      	mov	r2, fp
 8008188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800818c:	9109      	str	r1, [sp, #36]	; 0x24
 800818e:	f7ff ff19 	bl	8007fc4 <__exponent>
 8008192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008194:	1813      	adds	r3, r2, r0
 8008196:	2a01      	cmp	r2, #1
 8008198:	4681      	mov	r9, r0
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	dc02      	bgt.n	80081a4 <_printf_float+0x164>
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	07d2      	lsls	r2, r2, #31
 80081a2:	d501      	bpl.n	80081a8 <_printf_float+0x168>
 80081a4:	3301      	adds	r3, #1
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d09c      	beq.n	80080ea <_printf_float+0xaa>
 80081b0:	232d      	movs	r3, #45	; 0x2d
 80081b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b6:	e798      	b.n	80080ea <_printf_float+0xaa>
 80081b8:	9a06      	ldr	r2, [sp, #24]
 80081ba:	2a47      	cmp	r2, #71	; 0x47
 80081bc:	d1be      	bne.n	800813c <_printf_float+0xfc>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1bc      	bne.n	800813c <_printf_float+0xfc>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e7b9      	b.n	800813a <_printf_float+0xfa>
 80081c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081ca:	d118      	bne.n	80081fe <_printf_float+0x1be>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	dd0b      	ble.n	80081ea <_printf_float+0x1aa>
 80081d2:	6121      	str	r1, [r4, #16]
 80081d4:	b913      	cbnz	r3, 80081dc <_printf_float+0x19c>
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	07d0      	lsls	r0, r2, #31
 80081da:	d502      	bpl.n	80081e2 <_printf_float+0x1a2>
 80081dc:	3301      	adds	r3, #1
 80081de:	440b      	add	r3, r1
 80081e0:	6123      	str	r3, [r4, #16]
 80081e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80081e4:	f04f 0900 	mov.w	r9, #0
 80081e8:	e7de      	b.n	80081a8 <_printf_float+0x168>
 80081ea:	b913      	cbnz	r3, 80081f2 <_printf_float+0x1b2>
 80081ec:	6822      	ldr	r2, [r4, #0]
 80081ee:	07d2      	lsls	r2, r2, #31
 80081f0:	d501      	bpl.n	80081f6 <_printf_float+0x1b6>
 80081f2:	3302      	adds	r3, #2
 80081f4:	e7f4      	b.n	80081e0 <_printf_float+0x1a0>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7f2      	b.n	80081e0 <_printf_float+0x1a0>
 80081fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	4299      	cmp	r1, r3
 8008202:	db05      	blt.n	8008210 <_printf_float+0x1d0>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	6121      	str	r1, [r4, #16]
 8008208:	07d8      	lsls	r0, r3, #31
 800820a:	d5ea      	bpl.n	80081e2 <_printf_float+0x1a2>
 800820c:	1c4b      	adds	r3, r1, #1
 800820e:	e7e7      	b.n	80081e0 <_printf_float+0x1a0>
 8008210:	2900      	cmp	r1, #0
 8008212:	bfd4      	ite	le
 8008214:	f1c1 0202 	rsble	r2, r1, #2
 8008218:	2201      	movgt	r2, #1
 800821a:	4413      	add	r3, r2
 800821c:	e7e0      	b.n	80081e0 <_printf_float+0x1a0>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	055a      	lsls	r2, r3, #21
 8008222:	d407      	bmi.n	8008234 <_printf_float+0x1f4>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	4642      	mov	r2, r8
 8008228:	4631      	mov	r1, r6
 800822a:	4628      	mov	r0, r5
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	d12c      	bne.n	800828c <_printf_float+0x24c>
 8008232:	e764      	b.n	80080fe <_printf_float+0xbe>
 8008234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008238:	f240 80e0 	bls.w	80083fc <_printf_float+0x3bc>
 800823c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	f7f8 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8008248:	2800      	cmp	r0, #0
 800824a:	d034      	beq.n	80082b6 <_printf_float+0x276>
 800824c:	4a37      	ldr	r2, [pc, #220]	; (800832c <_printf_float+0x2ec>)
 800824e:	2301      	movs	r3, #1
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	f43f af51 	beq.w	80080fe <_printf_float+0xbe>
 800825c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008260:	429a      	cmp	r2, r3
 8008262:	db02      	blt.n	800826a <_printf_float+0x22a>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	07d8      	lsls	r0, r3, #31
 8008268:	d510      	bpl.n	800828c <_printf_float+0x24c>
 800826a:	ee18 3a10 	vmov	r3, s16
 800826e:	4652      	mov	r2, sl
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	f43f af41 	beq.w	80080fe <_printf_float+0xbe>
 800827c:	f04f 0800 	mov.w	r8, #0
 8008280:	f104 091a 	add.w	r9, r4, #26
 8008284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	4543      	cmp	r3, r8
 800828a:	dc09      	bgt.n	80082a0 <_printf_float+0x260>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	079b      	lsls	r3, r3, #30
 8008290:	f100 8107 	bmi.w	80084a2 <_printf_float+0x462>
 8008294:	68e0      	ldr	r0, [r4, #12]
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	4298      	cmp	r0, r3
 800829a:	bfb8      	it	lt
 800829c:	4618      	movlt	r0, r3
 800829e:	e730      	b.n	8008102 <_printf_float+0xc2>
 80082a0:	2301      	movs	r3, #1
 80082a2:	464a      	mov	r2, r9
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af27 	beq.w	80080fe <_printf_float+0xbe>
 80082b0:	f108 0801 	add.w	r8, r8, #1
 80082b4:	e7e6      	b.n	8008284 <_printf_float+0x244>
 80082b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc39      	bgt.n	8008330 <_printf_float+0x2f0>
 80082bc:	4a1b      	ldr	r2, [pc, #108]	; (800832c <_printf_float+0x2ec>)
 80082be:	2301      	movs	r3, #1
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f af19 	beq.w	80080fe <_printf_float+0xbe>
 80082cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082d0:	4313      	orrs	r3, r2
 80082d2:	d102      	bne.n	80082da <_printf_float+0x29a>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	07d9      	lsls	r1, r3, #31
 80082d8:	d5d8      	bpl.n	800828c <_printf_float+0x24c>
 80082da:	ee18 3a10 	vmov	r3, s16
 80082de:	4652      	mov	r2, sl
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	f43f af09 	beq.w	80080fe <_printf_float+0xbe>
 80082ec:	f04f 0900 	mov.w	r9, #0
 80082f0:	f104 0a1a 	add.w	sl, r4, #26
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	425b      	negs	r3, r3
 80082f8:	454b      	cmp	r3, r9
 80082fa:	dc01      	bgt.n	8008300 <_printf_float+0x2c0>
 80082fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fe:	e792      	b.n	8008226 <_printf_float+0x1e6>
 8008300:	2301      	movs	r3, #1
 8008302:	4652      	mov	r2, sl
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	f43f aef7 	beq.w	80080fe <_printf_float+0xbe>
 8008310:	f109 0901 	add.w	r9, r9, #1
 8008314:	e7ee      	b.n	80082f4 <_printf_float+0x2b4>
 8008316:	bf00      	nop
 8008318:	7fefffff 	.word	0x7fefffff
 800831c:	0800bdf8 	.word	0x0800bdf8
 8008320:	0800bdfc 	.word	0x0800bdfc
 8008324:	0800be00 	.word	0x0800be00
 8008328:	0800be04 	.word	0x0800be04
 800832c:	0800be08 	.word	0x0800be08
 8008330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008334:	429a      	cmp	r2, r3
 8008336:	bfa8      	it	ge
 8008338:	461a      	movge	r2, r3
 800833a:	2a00      	cmp	r2, #0
 800833c:	4691      	mov	r9, r2
 800833e:	dc37      	bgt.n	80083b0 <_printf_float+0x370>
 8008340:	f04f 0b00 	mov.w	fp, #0
 8008344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008348:	f104 021a 	add.w	r2, r4, #26
 800834c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	eba3 0309 	sub.w	r3, r3, r9
 8008354:	455b      	cmp	r3, fp
 8008356:	dc33      	bgt.n	80083c0 <_printf_float+0x380>
 8008358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800835c:	429a      	cmp	r2, r3
 800835e:	db3b      	blt.n	80083d8 <_printf_float+0x398>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	07da      	lsls	r2, r3, #31
 8008364:	d438      	bmi.n	80083d8 <_printf_float+0x398>
 8008366:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800836a:	eba2 0903 	sub.w	r9, r2, r3
 800836e:	9b05      	ldr	r3, [sp, #20]
 8008370:	1ad2      	subs	r2, r2, r3
 8008372:	4591      	cmp	r9, r2
 8008374:	bfa8      	it	ge
 8008376:	4691      	movge	r9, r2
 8008378:	f1b9 0f00 	cmp.w	r9, #0
 800837c:	dc35      	bgt.n	80083ea <_printf_float+0x3aa>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008386:	f104 0a1a 	add.w	sl, r4, #26
 800838a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	eba3 0309 	sub.w	r3, r3, r9
 8008394:	4543      	cmp	r3, r8
 8008396:	f77f af79 	ble.w	800828c <_printf_float+0x24c>
 800839a:	2301      	movs	r3, #1
 800839c:	4652      	mov	r2, sl
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	f43f aeaa 	beq.w	80080fe <_printf_float+0xbe>
 80083aa:	f108 0801 	add.w	r8, r8, #1
 80083ae:	e7ec      	b.n	800838a <_printf_float+0x34a>
 80083b0:	4613      	mov	r3, r2
 80083b2:	4631      	mov	r1, r6
 80083b4:	4642      	mov	r2, r8
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	d1c0      	bne.n	8008340 <_printf_float+0x300>
 80083be:	e69e      	b.n	80080fe <_printf_float+0xbe>
 80083c0:	2301      	movs	r3, #1
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	9205      	str	r2, [sp, #20]
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f ae97 	beq.w	80080fe <_printf_float+0xbe>
 80083d0:	9a05      	ldr	r2, [sp, #20]
 80083d2:	f10b 0b01 	add.w	fp, fp, #1
 80083d6:	e7b9      	b.n	800834c <_printf_float+0x30c>
 80083d8:	ee18 3a10 	vmov	r3, s16
 80083dc:	4652      	mov	r2, sl
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	d1be      	bne.n	8008366 <_printf_float+0x326>
 80083e8:	e689      	b.n	80080fe <_printf_float+0xbe>
 80083ea:	9a05      	ldr	r2, [sp, #20]
 80083ec:	464b      	mov	r3, r9
 80083ee:	4442      	add	r2, r8
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	d1c1      	bne.n	800837e <_printf_float+0x33e>
 80083fa:	e680      	b.n	80080fe <_printf_float+0xbe>
 80083fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083fe:	2a01      	cmp	r2, #1
 8008400:	dc01      	bgt.n	8008406 <_printf_float+0x3c6>
 8008402:	07db      	lsls	r3, r3, #31
 8008404:	d53a      	bpl.n	800847c <_printf_float+0x43c>
 8008406:	2301      	movs	r3, #1
 8008408:	4642      	mov	r2, r8
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	f43f ae74 	beq.w	80080fe <_printf_float+0xbe>
 8008416:	ee18 3a10 	vmov	r3, s16
 800841a:	4652      	mov	r2, sl
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f ae6b 	beq.w	80080fe <_printf_float+0xbe>
 8008428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800842c:	2200      	movs	r2, #0
 800842e:	2300      	movs	r3, #0
 8008430:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008434:	f7f8 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8008438:	b9d8      	cbnz	r0, 8008472 <_printf_float+0x432>
 800843a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800843e:	f108 0201 	add.w	r2, r8, #1
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	d10e      	bne.n	800846a <_printf_float+0x42a>
 800844c:	e657      	b.n	80080fe <_printf_float+0xbe>
 800844e:	2301      	movs	r3, #1
 8008450:	4652      	mov	r2, sl
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f ae50 	beq.w	80080fe <_printf_float+0xbe>
 800845e:	f108 0801 	add.w	r8, r8, #1
 8008462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008464:	3b01      	subs	r3, #1
 8008466:	4543      	cmp	r3, r8
 8008468:	dcf1      	bgt.n	800844e <_printf_float+0x40e>
 800846a:	464b      	mov	r3, r9
 800846c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008470:	e6da      	b.n	8008228 <_printf_float+0x1e8>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	f104 0a1a 	add.w	sl, r4, #26
 800847a:	e7f2      	b.n	8008462 <_printf_float+0x422>
 800847c:	2301      	movs	r3, #1
 800847e:	4642      	mov	r2, r8
 8008480:	e7df      	b.n	8008442 <_printf_float+0x402>
 8008482:	2301      	movs	r3, #1
 8008484:	464a      	mov	r2, r9
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	f43f ae36 	beq.w	80080fe <_printf_float+0xbe>
 8008492:	f108 0801 	add.w	r8, r8, #1
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800849a:	1a5b      	subs	r3, r3, r1
 800849c:	4543      	cmp	r3, r8
 800849e:	dcf0      	bgt.n	8008482 <_printf_float+0x442>
 80084a0:	e6f8      	b.n	8008294 <_printf_float+0x254>
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	f104 0919 	add.w	r9, r4, #25
 80084aa:	e7f4      	b.n	8008496 <_printf_float+0x456>

080084ac <_printf_common>:
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	4616      	mov	r6, r2
 80084b2:	4699      	mov	r9, r3
 80084b4:	688a      	ldr	r2, [r1, #8]
 80084b6:	690b      	ldr	r3, [r1, #16]
 80084b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084bc:	4293      	cmp	r3, r2
 80084be:	bfb8      	it	lt
 80084c0:	4613      	movlt	r3, r2
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084c8:	4607      	mov	r7, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b10a      	cbz	r2, 80084d2 <_printf_common+0x26>
 80084ce:	3301      	adds	r3, #1
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	0699      	lsls	r1, r3, #26
 80084d6:	bf42      	ittt	mi
 80084d8:	6833      	ldrmi	r3, [r6, #0]
 80084da:	3302      	addmi	r3, #2
 80084dc:	6033      	strmi	r3, [r6, #0]
 80084de:	6825      	ldr	r5, [r4, #0]
 80084e0:	f015 0506 	ands.w	r5, r5, #6
 80084e4:	d106      	bne.n	80084f4 <_printf_common+0x48>
 80084e6:	f104 0a19 	add.w	sl, r4, #25
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	6832      	ldr	r2, [r6, #0]
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dc26      	bgt.n	8008542 <_printf_common+0x96>
 80084f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084f8:	1e13      	subs	r3, r2, #0
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	bf18      	it	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	0692      	lsls	r2, r2, #26
 8008502:	d42b      	bmi.n	800855c <_printf_common+0xb0>
 8008504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008508:	4649      	mov	r1, r9
 800850a:	4638      	mov	r0, r7
 800850c:	47c0      	blx	r8
 800850e:	3001      	adds	r0, #1
 8008510:	d01e      	beq.n	8008550 <_printf_common+0xa4>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	f003 0306 	and.w	r3, r3, #6
 800851a:	2b04      	cmp	r3, #4
 800851c:	bf02      	ittt	eq
 800851e:	68e5      	ldreq	r5, [r4, #12]
 8008520:	6833      	ldreq	r3, [r6, #0]
 8008522:	1aed      	subeq	r5, r5, r3
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	bf0c      	ite	eq
 8008528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800852c:	2500      	movne	r5, #0
 800852e:	4293      	cmp	r3, r2
 8008530:	bfc4      	itt	gt
 8008532:	1a9b      	subgt	r3, r3, r2
 8008534:	18ed      	addgt	r5, r5, r3
 8008536:	2600      	movs	r6, #0
 8008538:	341a      	adds	r4, #26
 800853a:	42b5      	cmp	r5, r6
 800853c:	d11a      	bne.n	8008574 <_printf_common+0xc8>
 800853e:	2000      	movs	r0, #0
 8008540:	e008      	b.n	8008554 <_printf_common+0xa8>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4649      	mov	r1, r9
 8008548:	4638      	mov	r0, r7
 800854a:	47c0      	blx	r8
 800854c:	3001      	adds	r0, #1
 800854e:	d103      	bne.n	8008558 <_printf_common+0xac>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	3501      	adds	r5, #1
 800855a:	e7c6      	b.n	80084ea <_printf_common+0x3e>
 800855c:	18e1      	adds	r1, r4, r3
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	2030      	movs	r0, #48	; 0x30
 8008562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008566:	4422      	add	r2, r4
 8008568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800856c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008570:	3302      	adds	r3, #2
 8008572:	e7c7      	b.n	8008504 <_printf_common+0x58>
 8008574:	2301      	movs	r3, #1
 8008576:	4622      	mov	r2, r4
 8008578:	4649      	mov	r1, r9
 800857a:	4638      	mov	r0, r7
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d0e6      	beq.n	8008550 <_printf_common+0xa4>
 8008582:	3601      	adds	r6, #1
 8008584:	e7d9      	b.n	800853a <_printf_common+0x8e>
	...

08008588 <_printf_i>:
 8008588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	7e0f      	ldrb	r7, [r1, #24]
 800858e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008590:	2f78      	cmp	r7, #120	; 0x78
 8008592:	4691      	mov	r9, r2
 8008594:	4680      	mov	r8, r0
 8008596:	460c      	mov	r4, r1
 8008598:	469a      	mov	sl, r3
 800859a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800859e:	d807      	bhi.n	80085b0 <_printf_i+0x28>
 80085a0:	2f62      	cmp	r7, #98	; 0x62
 80085a2:	d80a      	bhi.n	80085ba <_printf_i+0x32>
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	f000 80d4 	beq.w	8008752 <_printf_i+0x1ca>
 80085aa:	2f58      	cmp	r7, #88	; 0x58
 80085ac:	f000 80c0 	beq.w	8008730 <_printf_i+0x1a8>
 80085b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085b8:	e03a      	b.n	8008630 <_printf_i+0xa8>
 80085ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085be:	2b15      	cmp	r3, #21
 80085c0:	d8f6      	bhi.n	80085b0 <_printf_i+0x28>
 80085c2:	a101      	add	r1, pc, #4	; (adr r1, 80085c8 <_printf_i+0x40>)
 80085c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c8:	08008621 	.word	0x08008621
 80085cc:	08008635 	.word	0x08008635
 80085d0:	080085b1 	.word	0x080085b1
 80085d4:	080085b1 	.word	0x080085b1
 80085d8:	080085b1 	.word	0x080085b1
 80085dc:	080085b1 	.word	0x080085b1
 80085e0:	08008635 	.word	0x08008635
 80085e4:	080085b1 	.word	0x080085b1
 80085e8:	080085b1 	.word	0x080085b1
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	08008739 	.word	0x08008739
 80085f8:	08008661 	.word	0x08008661
 80085fc:	080086f3 	.word	0x080086f3
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	0800875b 	.word	0x0800875b
 800860c:	080085b1 	.word	0x080085b1
 8008610:	08008661 	.word	0x08008661
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	080086fb 	.word	0x080086fb
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	602a      	str	r2, [r5, #0]
 8008628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800862c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008630:	2301      	movs	r3, #1
 8008632:	e09f      	b.n	8008774 <_printf_i+0x1ec>
 8008634:	6820      	ldr	r0, [r4, #0]
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	0607      	lsls	r7, r0, #24
 800863a:	f103 0104 	add.w	r1, r3, #4
 800863e:	6029      	str	r1, [r5, #0]
 8008640:	d501      	bpl.n	8008646 <_printf_i+0xbe>
 8008642:	681e      	ldr	r6, [r3, #0]
 8008644:	e003      	b.n	800864e <_printf_i+0xc6>
 8008646:	0646      	lsls	r6, r0, #25
 8008648:	d5fb      	bpl.n	8008642 <_printf_i+0xba>
 800864a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800864e:	2e00      	cmp	r6, #0
 8008650:	da03      	bge.n	800865a <_printf_i+0xd2>
 8008652:	232d      	movs	r3, #45	; 0x2d
 8008654:	4276      	negs	r6, r6
 8008656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865a:	485a      	ldr	r0, [pc, #360]	; (80087c4 <_printf_i+0x23c>)
 800865c:	230a      	movs	r3, #10
 800865e:	e012      	b.n	8008686 <_printf_i+0xfe>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	1d19      	adds	r1, r3, #4
 8008666:	6029      	str	r1, [r5, #0]
 8008668:	0605      	lsls	r5, r0, #24
 800866a:	d501      	bpl.n	8008670 <_printf_i+0xe8>
 800866c:	681e      	ldr	r6, [r3, #0]
 800866e:	e002      	b.n	8008676 <_printf_i+0xee>
 8008670:	0641      	lsls	r1, r0, #25
 8008672:	d5fb      	bpl.n	800866c <_printf_i+0xe4>
 8008674:	881e      	ldrh	r6, [r3, #0]
 8008676:	4853      	ldr	r0, [pc, #332]	; (80087c4 <_printf_i+0x23c>)
 8008678:	2f6f      	cmp	r7, #111	; 0x6f
 800867a:	bf0c      	ite	eq
 800867c:	2308      	moveq	r3, #8
 800867e:	230a      	movne	r3, #10
 8008680:	2100      	movs	r1, #0
 8008682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008686:	6865      	ldr	r5, [r4, #4]
 8008688:	60a5      	str	r5, [r4, #8]
 800868a:	2d00      	cmp	r5, #0
 800868c:	bfa2      	ittt	ge
 800868e:	6821      	ldrge	r1, [r4, #0]
 8008690:	f021 0104 	bicge.w	r1, r1, #4
 8008694:	6021      	strge	r1, [r4, #0]
 8008696:	b90e      	cbnz	r6, 800869c <_printf_i+0x114>
 8008698:	2d00      	cmp	r5, #0
 800869a:	d04b      	beq.n	8008734 <_printf_i+0x1ac>
 800869c:	4615      	mov	r5, r2
 800869e:	fbb6 f1f3 	udiv	r1, r6, r3
 80086a2:	fb03 6711 	mls	r7, r3, r1, r6
 80086a6:	5dc7      	ldrb	r7, [r0, r7]
 80086a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086ac:	4637      	mov	r7, r6
 80086ae:	42bb      	cmp	r3, r7
 80086b0:	460e      	mov	r6, r1
 80086b2:	d9f4      	bls.n	800869e <_printf_i+0x116>
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d10b      	bne.n	80086d0 <_printf_i+0x148>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	07de      	lsls	r6, r3, #31
 80086bc:	d508      	bpl.n	80086d0 <_printf_i+0x148>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	6861      	ldr	r1, [r4, #4]
 80086c2:	4299      	cmp	r1, r3
 80086c4:	bfde      	ittt	le
 80086c6:	2330      	movle	r3, #48	; 0x30
 80086c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086d0:	1b52      	subs	r2, r2, r5
 80086d2:	6122      	str	r2, [r4, #16]
 80086d4:	f8cd a000 	str.w	sl, [sp]
 80086d8:	464b      	mov	r3, r9
 80086da:	aa03      	add	r2, sp, #12
 80086dc:	4621      	mov	r1, r4
 80086de:	4640      	mov	r0, r8
 80086e0:	f7ff fee4 	bl	80084ac <_printf_common>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d14a      	bne.n	800877e <_printf_i+0x1f6>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	b004      	add	sp, #16
 80086ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f043 0320 	orr.w	r3, r3, #32
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	4833      	ldr	r0, [pc, #204]	; (80087c8 <_printf_i+0x240>)
 80086fc:	2778      	movs	r7, #120	; 0x78
 80086fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	6829      	ldr	r1, [r5, #0]
 8008706:	061f      	lsls	r7, r3, #24
 8008708:	f851 6b04 	ldr.w	r6, [r1], #4
 800870c:	d402      	bmi.n	8008714 <_printf_i+0x18c>
 800870e:	065f      	lsls	r7, r3, #25
 8008710:	bf48      	it	mi
 8008712:	b2b6      	uxthmi	r6, r6
 8008714:	07df      	lsls	r7, r3, #31
 8008716:	bf48      	it	mi
 8008718:	f043 0320 	orrmi.w	r3, r3, #32
 800871c:	6029      	str	r1, [r5, #0]
 800871e:	bf48      	it	mi
 8008720:	6023      	strmi	r3, [r4, #0]
 8008722:	b91e      	cbnz	r6, 800872c <_printf_i+0x1a4>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	f023 0320 	bic.w	r3, r3, #32
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	2310      	movs	r3, #16
 800872e:	e7a7      	b.n	8008680 <_printf_i+0xf8>
 8008730:	4824      	ldr	r0, [pc, #144]	; (80087c4 <_printf_i+0x23c>)
 8008732:	e7e4      	b.n	80086fe <_printf_i+0x176>
 8008734:	4615      	mov	r5, r2
 8008736:	e7bd      	b.n	80086b4 <_printf_i+0x12c>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	6826      	ldr	r6, [r4, #0]
 800873c:	6961      	ldr	r1, [r4, #20]
 800873e:	1d18      	adds	r0, r3, #4
 8008740:	6028      	str	r0, [r5, #0]
 8008742:	0635      	lsls	r5, r6, #24
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	d501      	bpl.n	800874c <_printf_i+0x1c4>
 8008748:	6019      	str	r1, [r3, #0]
 800874a:	e002      	b.n	8008752 <_printf_i+0x1ca>
 800874c:	0670      	lsls	r0, r6, #25
 800874e:	d5fb      	bpl.n	8008748 <_printf_i+0x1c0>
 8008750:	8019      	strh	r1, [r3, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	4615      	mov	r5, r2
 8008758:	e7bc      	b.n	80086d4 <_printf_i+0x14c>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	602a      	str	r2, [r5, #0]
 8008760:	681d      	ldr	r5, [r3, #0]
 8008762:	6862      	ldr	r2, [r4, #4]
 8008764:	2100      	movs	r1, #0
 8008766:	4628      	mov	r0, r5
 8008768:	f7f7 fd3a 	bl	80001e0 <memchr>
 800876c:	b108      	cbz	r0, 8008772 <_printf_i+0x1ea>
 800876e:	1b40      	subs	r0, r0, r5
 8008770:	6060      	str	r0, [r4, #4]
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	2300      	movs	r3, #0
 8008778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877c:	e7aa      	b.n	80086d4 <_printf_i+0x14c>
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	462a      	mov	r2, r5
 8008782:	4649      	mov	r1, r9
 8008784:	4640      	mov	r0, r8
 8008786:	47d0      	blx	sl
 8008788:	3001      	adds	r0, #1
 800878a:	d0ad      	beq.n	80086e8 <_printf_i+0x160>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	079b      	lsls	r3, r3, #30
 8008790:	d413      	bmi.n	80087ba <_printf_i+0x232>
 8008792:	68e0      	ldr	r0, [r4, #12]
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	4298      	cmp	r0, r3
 8008798:	bfb8      	it	lt
 800879a:	4618      	movlt	r0, r3
 800879c:	e7a6      	b.n	80086ec <_printf_i+0x164>
 800879e:	2301      	movs	r3, #1
 80087a0:	4632      	mov	r2, r6
 80087a2:	4649      	mov	r1, r9
 80087a4:	4640      	mov	r0, r8
 80087a6:	47d0      	blx	sl
 80087a8:	3001      	adds	r0, #1
 80087aa:	d09d      	beq.n	80086e8 <_printf_i+0x160>
 80087ac:	3501      	adds	r5, #1
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	9903      	ldr	r1, [sp, #12]
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dcf2      	bgt.n	800879e <_printf_i+0x216>
 80087b8:	e7eb      	b.n	8008792 <_printf_i+0x20a>
 80087ba:	2500      	movs	r5, #0
 80087bc:	f104 0619 	add.w	r6, r4, #25
 80087c0:	e7f5      	b.n	80087ae <_printf_i+0x226>
 80087c2:	bf00      	nop
 80087c4:	0800be0a 	.word	0x0800be0a
 80087c8:	0800be1b 	.word	0x0800be1b

080087cc <_scanf_float>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	b087      	sub	sp, #28
 80087d2:	4617      	mov	r7, r2
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	688b      	ldr	r3, [r1, #8]
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087de:	bf83      	ittte	hi
 80087e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087e4:	195b      	addhi	r3, r3, r5
 80087e6:	9302      	strhi	r3, [sp, #8]
 80087e8:	2300      	movls	r3, #0
 80087ea:	bf86      	itte	hi
 80087ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087f0:	608b      	strhi	r3, [r1, #8]
 80087f2:	9302      	strls	r3, [sp, #8]
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	468b      	mov	fp, r1
 80087f8:	2500      	movs	r5, #0
 80087fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8008802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008806:	4680      	mov	r8, r0
 8008808:	460c      	mov	r4, r1
 800880a:	465e      	mov	r6, fp
 800880c:	46aa      	mov	sl, r5
 800880e:	46a9      	mov	r9, r5
 8008810:	9501      	str	r5, [sp, #4]
 8008812:	68a2      	ldr	r2, [r4, #8]
 8008814:	b152      	cbz	r2, 800882c <_scanf_float+0x60>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b4e      	cmp	r3, #78	; 0x4e
 800881c:	d864      	bhi.n	80088e8 <_scanf_float+0x11c>
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	d83c      	bhi.n	800889c <_scanf_float+0xd0>
 8008822:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008826:	b2c8      	uxtb	r0, r1
 8008828:	280e      	cmp	r0, #14
 800882a:	d93a      	bls.n	80088a2 <_scanf_float+0xd6>
 800882c:	f1b9 0f00 	cmp.w	r9, #0
 8008830:	d003      	beq.n	800883a <_scanf_float+0x6e>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883e:	f1ba 0f01 	cmp.w	sl, #1
 8008842:	f200 8113 	bhi.w	8008a6c <_scanf_float+0x2a0>
 8008846:	455e      	cmp	r6, fp
 8008848:	f200 8105 	bhi.w	8008a56 <_scanf_float+0x28a>
 800884c:	2501      	movs	r5, #1
 800884e:	4628      	mov	r0, r5
 8008850:	b007      	add	sp, #28
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800885a:	2a0d      	cmp	r2, #13
 800885c:	d8e6      	bhi.n	800882c <_scanf_float+0x60>
 800885e:	a101      	add	r1, pc, #4	; (adr r1, 8008864 <_scanf_float+0x98>)
 8008860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008864:	080089a3 	.word	0x080089a3
 8008868:	0800882d 	.word	0x0800882d
 800886c:	0800882d 	.word	0x0800882d
 8008870:	0800882d 	.word	0x0800882d
 8008874:	08008a03 	.word	0x08008a03
 8008878:	080089db 	.word	0x080089db
 800887c:	0800882d 	.word	0x0800882d
 8008880:	0800882d 	.word	0x0800882d
 8008884:	080089b1 	.word	0x080089b1
 8008888:	0800882d 	.word	0x0800882d
 800888c:	0800882d 	.word	0x0800882d
 8008890:	0800882d 	.word	0x0800882d
 8008894:	0800882d 	.word	0x0800882d
 8008898:	08008969 	.word	0x08008969
 800889c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088a0:	e7db      	b.n	800885a <_scanf_float+0x8e>
 80088a2:	290e      	cmp	r1, #14
 80088a4:	d8c2      	bhi.n	800882c <_scanf_float+0x60>
 80088a6:	a001      	add	r0, pc, #4	; (adr r0, 80088ac <_scanf_float+0xe0>)
 80088a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088ac:	0800895b 	.word	0x0800895b
 80088b0:	0800882d 	.word	0x0800882d
 80088b4:	0800895b 	.word	0x0800895b
 80088b8:	080089ef 	.word	0x080089ef
 80088bc:	0800882d 	.word	0x0800882d
 80088c0:	08008909 	.word	0x08008909
 80088c4:	08008945 	.word	0x08008945
 80088c8:	08008945 	.word	0x08008945
 80088cc:	08008945 	.word	0x08008945
 80088d0:	08008945 	.word	0x08008945
 80088d4:	08008945 	.word	0x08008945
 80088d8:	08008945 	.word	0x08008945
 80088dc:	08008945 	.word	0x08008945
 80088e0:	08008945 	.word	0x08008945
 80088e4:	08008945 	.word	0x08008945
 80088e8:	2b6e      	cmp	r3, #110	; 0x6e
 80088ea:	d809      	bhi.n	8008900 <_scanf_float+0x134>
 80088ec:	2b60      	cmp	r3, #96	; 0x60
 80088ee:	d8b2      	bhi.n	8008856 <_scanf_float+0x8a>
 80088f0:	2b54      	cmp	r3, #84	; 0x54
 80088f2:	d077      	beq.n	80089e4 <_scanf_float+0x218>
 80088f4:	2b59      	cmp	r3, #89	; 0x59
 80088f6:	d199      	bne.n	800882c <_scanf_float+0x60>
 80088f8:	2d07      	cmp	r5, #7
 80088fa:	d197      	bne.n	800882c <_scanf_float+0x60>
 80088fc:	2508      	movs	r5, #8
 80088fe:	e029      	b.n	8008954 <_scanf_float+0x188>
 8008900:	2b74      	cmp	r3, #116	; 0x74
 8008902:	d06f      	beq.n	80089e4 <_scanf_float+0x218>
 8008904:	2b79      	cmp	r3, #121	; 0x79
 8008906:	e7f6      	b.n	80088f6 <_scanf_float+0x12a>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	05c8      	lsls	r0, r1, #23
 800890c:	d51a      	bpl.n	8008944 <_scanf_float+0x178>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008914:	6021      	str	r1, [r4, #0]
 8008916:	f109 0901 	add.w	r9, r9, #1
 800891a:	b11b      	cbz	r3, 8008924 <_scanf_float+0x158>
 800891c:	3b01      	subs	r3, #1
 800891e:	3201      	adds	r2, #1
 8008920:	9302      	str	r3, [sp, #8]
 8008922:	60a2      	str	r2, [r4, #8]
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	3b01      	subs	r3, #1
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	3301      	adds	r3, #1
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3b01      	subs	r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	f340 8084 	ble.w	8008a44 <_scanf_float+0x278>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	e766      	b.n	8008812 <_scanf_float+0x46>
 8008944:	eb1a 0f05 	cmn.w	sl, r5
 8008948:	f47f af70 	bne.w	800882c <_scanf_float+0x60>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	f806 3b01 	strb.w	r3, [r6], #1
 8008958:	e7e4      	b.n	8008924 <_scanf_float+0x158>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	0610      	lsls	r0, r2, #24
 800895e:	f57f af65 	bpl.w	800882c <_scanf_float+0x60>
 8008962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008966:	e7f4      	b.n	8008952 <_scanf_float+0x186>
 8008968:	f1ba 0f00 	cmp.w	sl, #0
 800896c:	d10e      	bne.n	800898c <_scanf_float+0x1c0>
 800896e:	f1b9 0f00 	cmp.w	r9, #0
 8008972:	d10e      	bne.n	8008992 <_scanf_float+0x1c6>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800897a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800897e:	d108      	bne.n	8008992 <_scanf_float+0x1c6>
 8008980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008984:	6022      	str	r2, [r4, #0]
 8008986:	f04f 0a01 	mov.w	sl, #1
 800898a:	e7e3      	b.n	8008954 <_scanf_float+0x188>
 800898c:	f1ba 0f02 	cmp.w	sl, #2
 8008990:	d055      	beq.n	8008a3e <_scanf_float+0x272>
 8008992:	2d01      	cmp	r5, #1
 8008994:	d002      	beq.n	800899c <_scanf_float+0x1d0>
 8008996:	2d04      	cmp	r5, #4
 8008998:	f47f af48 	bne.w	800882c <_scanf_float+0x60>
 800899c:	3501      	adds	r5, #1
 800899e:	b2ed      	uxtb	r5, r5
 80089a0:	e7d8      	b.n	8008954 <_scanf_float+0x188>
 80089a2:	f1ba 0f01 	cmp.w	sl, #1
 80089a6:	f47f af41 	bne.w	800882c <_scanf_float+0x60>
 80089aa:	f04f 0a02 	mov.w	sl, #2
 80089ae:	e7d1      	b.n	8008954 <_scanf_float+0x188>
 80089b0:	b97d      	cbnz	r5, 80089d2 <_scanf_float+0x206>
 80089b2:	f1b9 0f00 	cmp.w	r9, #0
 80089b6:	f47f af3c 	bne.w	8008832 <_scanf_float+0x66>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089c4:	f47f af39 	bne.w	800883a <_scanf_float+0x6e>
 80089c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	2501      	movs	r5, #1
 80089d0:	e7c0      	b.n	8008954 <_scanf_float+0x188>
 80089d2:	2d03      	cmp	r5, #3
 80089d4:	d0e2      	beq.n	800899c <_scanf_float+0x1d0>
 80089d6:	2d05      	cmp	r5, #5
 80089d8:	e7de      	b.n	8008998 <_scanf_float+0x1cc>
 80089da:	2d02      	cmp	r5, #2
 80089dc:	f47f af26 	bne.w	800882c <_scanf_float+0x60>
 80089e0:	2503      	movs	r5, #3
 80089e2:	e7b7      	b.n	8008954 <_scanf_float+0x188>
 80089e4:	2d06      	cmp	r5, #6
 80089e6:	f47f af21 	bne.w	800882c <_scanf_float+0x60>
 80089ea:	2507      	movs	r5, #7
 80089ec:	e7b2      	b.n	8008954 <_scanf_float+0x188>
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	0591      	lsls	r1, r2, #22
 80089f2:	f57f af1b 	bpl.w	800882c <_scanf_float+0x60>
 80089f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a00:	e7a8      	b.n	8008954 <_scanf_float+0x188>
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a0c:	d006      	beq.n	8008a1c <_scanf_float+0x250>
 8008a0e:	0550      	lsls	r0, r2, #21
 8008a10:	f57f af0c 	bpl.w	800882c <_scanf_float+0x60>
 8008a14:	f1b9 0f00 	cmp.w	r9, #0
 8008a18:	f43f af0f 	beq.w	800883a <_scanf_float+0x6e>
 8008a1c:	0591      	lsls	r1, r2, #22
 8008a1e:	bf58      	it	pl
 8008a20:	9901      	ldrpl	r1, [sp, #4]
 8008a22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a26:	bf58      	it	pl
 8008a28:	eba9 0101 	subpl.w	r1, r9, r1
 8008a2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a30:	bf58      	it	pl
 8008a32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	e78a      	b.n	8008954 <_scanf_float+0x188>
 8008a3e:	f04f 0a03 	mov.w	sl, #3
 8008a42:	e787      	b.n	8008954 <_scanf_float+0x188>
 8008a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4798      	blx	r3
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f aedf 	beq.w	8008812 <_scanf_float+0x46>
 8008a54:	e6ea      	b.n	800882c <_scanf_float+0x60>
 8008a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4640      	mov	r0, r8
 8008a62:	4798      	blx	r3
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	6123      	str	r3, [r4, #16]
 8008a6a:	e6ec      	b.n	8008846 <_scanf_float+0x7a>
 8008a6c:	1e6b      	subs	r3, r5, #1
 8008a6e:	2b06      	cmp	r3, #6
 8008a70:	d825      	bhi.n	8008abe <_scanf_float+0x2f2>
 8008a72:	2d02      	cmp	r5, #2
 8008a74:	d836      	bhi.n	8008ae4 <_scanf_float+0x318>
 8008a76:	455e      	cmp	r6, fp
 8008a78:	f67f aee8 	bls.w	800884c <_scanf_float+0x80>
 8008a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a84:	463a      	mov	r2, r7
 8008a86:	4640      	mov	r0, r8
 8008a88:	4798      	blx	r3
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	6123      	str	r3, [r4, #16]
 8008a90:	e7f1      	b.n	8008a76 <_scanf_float+0x2aa>
 8008a92:	9802      	ldr	r0, [sp, #8]
 8008a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a9c:	9002      	str	r0, [sp, #8]
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4798      	blx	r3
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aae:	fa5f fa8a 	uxtb.w	sl, sl
 8008ab2:	f1ba 0f02 	cmp.w	sl, #2
 8008ab6:	d1ec      	bne.n	8008a92 <_scanf_float+0x2c6>
 8008ab8:	3d03      	subs	r5, #3
 8008aba:	b2ed      	uxtb	r5, r5
 8008abc:	1b76      	subs	r6, r6, r5
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	05da      	lsls	r2, r3, #23
 8008ac2:	d52f      	bpl.n	8008b24 <_scanf_float+0x358>
 8008ac4:	055b      	lsls	r3, r3, #21
 8008ac6:	d510      	bpl.n	8008aea <_scanf_float+0x31e>
 8008ac8:	455e      	cmp	r6, fp
 8008aca:	f67f aebf 	bls.w	800884c <_scanf_float+0x80>
 8008ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4798      	blx	r3
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	e7f1      	b.n	8008ac8 <_scanf_float+0x2fc>
 8008ae4:	46aa      	mov	sl, r5
 8008ae6:	9602      	str	r6, [sp, #8]
 8008ae8:	e7df      	b.n	8008aaa <_scanf_float+0x2de>
 8008aea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	2965      	cmp	r1, #101	; 0x65
 8008af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008af6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	d00c      	beq.n	8008b18 <_scanf_float+0x34c>
 8008afe:	2945      	cmp	r1, #69	; 0x45
 8008b00:	d00a      	beq.n	8008b18 <_scanf_float+0x34c>
 8008b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b06:	463a      	mov	r2, r7
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4798      	blx	r3
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	1eb5      	subs	r5, r6, #2
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b1c:	463a      	mov	r2, r7
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4798      	blx	r3
 8008b22:	462e      	mov	r6, r5
 8008b24:	6825      	ldr	r5, [r4, #0]
 8008b26:	f015 0510 	ands.w	r5, r5, #16
 8008b2a:	d158      	bne.n	8008bde <_scanf_float+0x412>
 8008b2c:	7035      	strb	r5, [r6, #0]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b38:	d11c      	bne.n	8008b74 <_scanf_float+0x3a8>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	454b      	cmp	r3, r9
 8008b3e:	eba3 0209 	sub.w	r2, r3, r9
 8008b42:	d124      	bne.n	8008b8e <_scanf_float+0x3c2>
 8008b44:	2200      	movs	r2, #0
 8008b46:	4659      	mov	r1, fp
 8008b48:	4640      	mov	r0, r8
 8008b4a:	f7ff f96d 	bl	8007e28 <_strtod_r>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	6821      	ldr	r1, [r4, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f011 0f02 	tst.w	r1, #2
 8008b58:	ec57 6b10 	vmov	r6, r7, d0
 8008b5c:	f103 0204 	add.w	r2, r3, #4
 8008b60:	d020      	beq.n	8008ba4 <_scanf_float+0x3d8>
 8008b62:	9903      	ldr	r1, [sp, #12]
 8008b64:	600a      	str	r2, [r1, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	e9c3 6700 	strd	r6, r7, [r3]
 8008b6c:	68e3      	ldr	r3, [r4, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60e3      	str	r3, [r4, #12]
 8008b72:	e66c      	b.n	800884e <_scanf_float+0x82>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0e4      	beq.n	8008b44 <_scanf_float+0x378>
 8008b7a:	9905      	ldr	r1, [sp, #20]
 8008b7c:	230a      	movs	r3, #10
 8008b7e:	462a      	mov	r2, r5
 8008b80:	3101      	adds	r1, #1
 8008b82:	4640      	mov	r0, r8
 8008b84:	f002 fb10 	bl	800b1a8 <_strtol_r>
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	9e05      	ldr	r6, [sp, #20]
 8008b8c:	1ac2      	subs	r2, r0, r3
 8008b8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b92:	429e      	cmp	r6, r3
 8008b94:	bf28      	it	cs
 8008b96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b9a:	4912      	ldr	r1, [pc, #72]	; (8008be4 <_scanf_float+0x418>)
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f955 	bl	8008e4c <siprintf>
 8008ba2:	e7cf      	b.n	8008b44 <_scanf_float+0x378>
 8008ba4:	f011 0f04 	tst.w	r1, #4
 8008ba8:	9903      	ldr	r1, [sp, #12]
 8008baa:	600a      	str	r2, [r1, #0]
 8008bac:	d1db      	bne.n	8008b66 <_scanf_float+0x39a>
 8008bae:	f8d3 8000 	ldr.w	r8, [r3]
 8008bb2:	ee10 2a10 	vmov	r2, s0
 8008bb6:	ee10 0a10 	vmov	r0, s0
 8008bba:	463b      	mov	r3, r7
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 ffbd 	bl	8000b3c <__aeabi_dcmpun>
 8008bc2:	b128      	cbz	r0, 8008bd0 <_scanf_float+0x404>
 8008bc4:	4808      	ldr	r0, [pc, #32]	; (8008be8 <_scanf_float+0x41c>)
 8008bc6:	f000 fb6b 	bl	80092a0 <nanf>
 8008bca:	ed88 0a00 	vstr	s0, [r8]
 8008bce:	e7cd      	b.n	8008b6c <_scanf_float+0x3a0>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f8 f810 	bl	8000bf8 <__aeabi_d2f>
 8008bd8:	f8c8 0000 	str.w	r0, [r8]
 8008bdc:	e7c6      	b.n	8008b6c <_scanf_float+0x3a0>
 8008bde:	2500      	movs	r5, #0
 8008be0:	e635      	b.n	800884e <_scanf_float+0x82>
 8008be2:	bf00      	nop
 8008be4:	0800be2c 	.word	0x0800be2c
 8008be8:	0800bee5 	.word	0x0800bee5

08008bec <std>:
 8008bec:	2300      	movs	r3, #0
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bfa:	6083      	str	r3, [r0, #8]
 8008bfc:	8181      	strh	r1, [r0, #12]
 8008bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8008c00:	81c2      	strh	r2, [r0, #14]
 8008c02:	6183      	str	r3, [r0, #24]
 8008c04:	4619      	mov	r1, r3
 8008c06:	2208      	movs	r2, #8
 8008c08:	305c      	adds	r0, #92	; 0x5c
 8008c0a:	f000 fa17 	bl	800903c <memset>
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <std+0x58>)
 8008c10:	6263      	str	r3, [r4, #36]	; 0x24
 8008c12:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <std+0x5c>)
 8008c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <std+0x60>)
 8008c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <std+0x64>)
 8008c1c:	6323      	str	r3, [r4, #48]	; 0x30
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <std+0x68>)
 8008c20:	6224      	str	r4, [r4, #32]
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d006      	beq.n	8008c34 <std+0x48>
 8008c26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c2a:	4294      	cmp	r4, r2
 8008c2c:	d002      	beq.n	8008c34 <std+0x48>
 8008c2e:	33d0      	adds	r3, #208	; 0xd0
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d105      	bne.n	8008c40 <std+0x54>
 8008c34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3c:	f000 bb16 	b.w	800926c <__retarget_lock_init_recursive>
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	08008e8d 	.word	0x08008e8d
 8008c48:	08008eaf 	.word	0x08008eaf
 8008c4c:	08008ee7 	.word	0x08008ee7
 8008c50:	08008f0b 	.word	0x08008f0b
 8008c54:	20000538 	.word	0x20000538

08008c58 <stdio_exit_handler>:
 8008c58:	4a02      	ldr	r2, [pc, #8]	; (8008c64 <stdio_exit_handler+0xc>)
 8008c5a:	4903      	ldr	r1, [pc, #12]	; (8008c68 <stdio_exit_handler+0x10>)
 8008c5c:	4803      	ldr	r0, [pc, #12]	; (8008c6c <stdio_exit_handler+0x14>)
 8008c5e:	f000 b869 	b.w	8008d34 <_fwalk_sglue>
 8008c62:	bf00      	nop
 8008c64:	2000001c 	.word	0x2000001c
 8008c68:	0800b80d 	.word	0x0800b80d
 8008c6c:	20000194 	.word	0x20000194

08008c70 <cleanup_stdio>:
 8008c70:	6841      	ldr	r1, [r0, #4]
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <cleanup_stdio+0x34>)
 8008c74:	4299      	cmp	r1, r3
 8008c76:	b510      	push	{r4, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	d001      	beq.n	8008c80 <cleanup_stdio+0x10>
 8008c7c:	f002 fdc6 	bl	800b80c <_fflush_r>
 8008c80:	68a1      	ldr	r1, [r4, #8]
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <cleanup_stdio+0x38>)
 8008c84:	4299      	cmp	r1, r3
 8008c86:	d002      	beq.n	8008c8e <cleanup_stdio+0x1e>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f002 fdbf 	bl	800b80c <_fflush_r>
 8008c8e:	68e1      	ldr	r1, [r4, #12]
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <cleanup_stdio+0x3c>)
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d004      	beq.n	8008ca0 <cleanup_stdio+0x30>
 8008c96:	4620      	mov	r0, r4
 8008c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c9c:	f002 bdb6 	b.w	800b80c <_fflush_r>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000538 	.word	0x20000538
 8008ca8:	200005a0 	.word	0x200005a0
 8008cac:	20000608 	.word	0x20000608

08008cb0 <global_stdio_init.part.0>:
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <global_stdio_init.part.0+0x30>)
 8008cb4:	4c0b      	ldr	r4, [pc, #44]	; (8008ce4 <global_stdio_init.part.0+0x34>)
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ce8 <global_stdio_init.part.0+0x38>)
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	f7ff ff94 	bl	8008bec <std>
 8008cc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cc8:	2201      	movs	r2, #1
 8008cca:	2109      	movs	r1, #9
 8008ccc:	f7ff ff8e 	bl	8008bec <std>
 8008cd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cda:	2112      	movs	r1, #18
 8008cdc:	f7ff bf86 	b.w	8008bec <std>
 8008ce0:	20000670 	.word	0x20000670
 8008ce4:	20000538 	.word	0x20000538
 8008ce8:	08008c59 	.word	0x08008c59

08008cec <__sfp_lock_acquire>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sfp_lock_acquire+0x8>)
 8008cee:	f000 babe 	b.w	800926e <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20000679 	.word	0x20000679

08008cf8 <__sfp_lock_release>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__sfp_lock_release+0x8>)
 8008cfa:	f000 bab9 	b.w	8009270 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20000679 	.word	0x20000679

08008d04 <__sinit>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	f7ff fff0 	bl	8008cec <__sfp_lock_acquire>
 8008d0c:	6a23      	ldr	r3, [r4, #32]
 8008d0e:	b11b      	cbz	r3, 8008d18 <__sinit+0x14>
 8008d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d14:	f7ff bff0 	b.w	8008cf8 <__sfp_lock_release>
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <__sinit+0x28>)
 8008d1a:	6223      	str	r3, [r4, #32]
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <__sinit+0x2c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f5      	bne.n	8008d10 <__sinit+0xc>
 8008d24:	f7ff ffc4 	bl	8008cb0 <global_stdio_init.part.0>
 8008d28:	e7f2      	b.n	8008d10 <__sinit+0xc>
 8008d2a:	bf00      	nop
 8008d2c:	08008c71 	.word	0x08008c71
 8008d30:	20000670 	.word	0x20000670

08008d34 <_fwalk_sglue>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	4607      	mov	r7, r0
 8008d3a:	4688      	mov	r8, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	2600      	movs	r6, #0
 8008d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d44:	f1b9 0901 	subs.w	r9, r9, #1
 8008d48:	d505      	bpl.n	8008d56 <_fwalk_sglue+0x22>
 8008d4a:	6824      	ldr	r4, [r4, #0]
 8008d4c:	2c00      	cmp	r4, #0
 8008d4e:	d1f7      	bne.n	8008d40 <_fwalk_sglue+0xc>
 8008d50:	4630      	mov	r0, r6
 8008d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d907      	bls.n	8008d6c <_fwalk_sglue+0x38>
 8008d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d60:	3301      	adds	r3, #1
 8008d62:	d003      	beq.n	8008d6c <_fwalk_sglue+0x38>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4638      	mov	r0, r7
 8008d68:	47c0      	blx	r8
 8008d6a:	4306      	orrs	r6, r0
 8008d6c:	3568      	adds	r5, #104	; 0x68
 8008d6e:	e7e9      	b.n	8008d44 <_fwalk_sglue+0x10>

08008d70 <iprintf>:
 8008d70:	b40f      	push	{r0, r1, r2, r3}
 8008d72:	b507      	push	{r0, r1, r2, lr}
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <iprintf+0x20>)
 8008d76:	ab04      	add	r3, sp, #16
 8008d78:	6808      	ldr	r0, [r1, #0]
 8008d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7e:	6881      	ldr	r1, [r0, #8]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	f002 fba3 	bl	800b4cc <_vfiprintf_r>
 8008d86:	b003      	add	sp, #12
 8008d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d8c:	b004      	add	sp, #16
 8008d8e:	4770      	bx	lr
 8008d90:	200001e0 	.word	0x200001e0

08008d94 <_puts_r>:
 8008d94:	6a03      	ldr	r3, [r0, #32]
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	6884      	ldr	r4, [r0, #8]
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	b90b      	cbnz	r3, 8008da4 <_puts_r+0x10>
 8008da0:	f7ff ffb0 	bl	8008d04 <__sinit>
 8008da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d405      	bmi.n	8008db6 <_puts_r+0x22>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	0598      	lsls	r0, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_puts_r+0x22>
 8008db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008db2:	f000 fa5c 	bl	800926e <__retarget_lock_acquire_recursive>
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	0719      	lsls	r1, r3, #28
 8008dba:	d513      	bpl.n	8008de4 <_puts_r+0x50>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	b18b      	cbz	r3, 8008de4 <_puts_r+0x50>
 8008dc0:	3e01      	subs	r6, #1
 8008dc2:	68a3      	ldr	r3, [r4, #8]
 8008dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	b9e9      	cbnz	r1, 8008e0a <_puts_r+0x76>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da2e      	bge.n	8008e30 <_puts_r+0x9c>
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	210a      	movs	r1, #10
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f000 f89b 	bl	8008f12 <__swbuf_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d007      	beq.n	8008df0 <_puts_r+0x5c>
 8008de0:	250a      	movs	r5, #10
 8008de2:	e007      	b.n	8008df4 <_puts_r+0x60>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 f8d0 	bl	8008f8c <__swsetup_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0e7      	beq.n	8008dc0 <_puts_r+0x2c>
 8008df0:	f04f 35ff 	mov.w	r5, #4294967295
 8008df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df6:	07da      	lsls	r2, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_puts_r+0x72>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	059b      	lsls	r3, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_puts_r+0x72>
 8008e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e02:	f000 fa35 	bl	8009270 <__retarget_lock_release_recursive>
 8008e06:	4628      	mov	r0, r5
 8008e08:	bd70      	pop	{r4, r5, r6, pc}
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da04      	bge.n	8008e18 <_puts_r+0x84>
 8008e0e:	69a2      	ldr	r2, [r4, #24]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	dc06      	bgt.n	8008e22 <_puts_r+0x8e>
 8008e14:	290a      	cmp	r1, #10
 8008e16:	d004      	beq.n	8008e22 <_puts_r+0x8e>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	6022      	str	r2, [r4, #0]
 8008e1e:	7019      	strb	r1, [r3, #0]
 8008e20:	e7cf      	b.n	8008dc2 <_puts_r+0x2e>
 8008e22:	4622      	mov	r2, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f000 f874 	bl	8008f12 <__swbuf_r>
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	d1c9      	bne.n	8008dc2 <_puts_r+0x2e>
 8008e2e:	e7df      	b.n	8008df0 <_puts_r+0x5c>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	250a      	movs	r5, #10
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	701d      	strb	r5, [r3, #0]
 8008e3a:	e7db      	b.n	8008df4 <_puts_r+0x60>

08008e3c <puts>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <puts+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f7ff bfa7 	b.w	8008d94 <_puts_r>
 8008e46:	bf00      	nop
 8008e48:	200001e0 	.word	0x200001e0

08008e4c <siprintf>:
 8008e4c:	b40e      	push	{r1, r2, r3}
 8008e4e:	b500      	push	{lr}
 8008e50:	b09c      	sub	sp, #112	; 0x70
 8008e52:	ab1d      	add	r3, sp, #116	; 0x74
 8008e54:	9002      	str	r0, [sp, #8]
 8008e56:	9006      	str	r0, [sp, #24]
 8008e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e5c:	4809      	ldr	r0, [pc, #36]	; (8008e84 <siprintf+0x38>)
 8008e5e:	9107      	str	r1, [sp, #28]
 8008e60:	9104      	str	r1, [sp, #16]
 8008e62:	4909      	ldr	r1, [pc, #36]	; (8008e88 <siprintf+0x3c>)
 8008e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e68:	9105      	str	r1, [sp, #20]
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	a902      	add	r1, sp, #8
 8008e70:	f002 fa04 	bl	800b27c <_svfiprintf_r>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	b01c      	add	sp, #112	; 0x70
 8008e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e80:	b003      	add	sp, #12
 8008e82:	4770      	bx	lr
 8008e84:	200001e0 	.word	0x200001e0
 8008e88:	ffff0208 	.word	0xffff0208

08008e8c <__sread>:
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	460c      	mov	r4, r1
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	f000 f98c 	bl	80091b0 <_read_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	bfab      	itete	ge
 8008e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008ea0:	181b      	addge	r3, r3, r0
 8008ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ea6:	bfac      	ite	ge
 8008ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eaa:	81a3      	strhlt	r3, [r4, #12]
 8008eac:	bd10      	pop	{r4, pc}

08008eae <__swrite>:
 8008eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	898b      	ldrh	r3, [r1, #12]
 8008eb6:	05db      	lsls	r3, r3, #23
 8008eb8:	4605      	mov	r5, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	d505      	bpl.n	8008ecc <__swrite+0x1e>
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f000 f960 	bl	800918c <_lseek_r>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	4632      	mov	r2, r6
 8008eda:	463b      	mov	r3, r7
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	f000 b987 	b.w	80091f4 <_write_r>

08008ee6 <__sseek>:
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	460c      	mov	r4, r1
 8008eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eee:	f000 f94d 	bl	800918c <_lseek_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	bf15      	itete	ne
 8008ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f02:	81a3      	strheq	r3, [r4, #12]
 8008f04:	bf18      	it	ne
 8008f06:	81a3      	strhne	r3, [r4, #12]
 8008f08:	bd10      	pop	{r4, pc}

08008f0a <__sclose>:
 8008f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0e:	f000 b92d 	b.w	800916c <_close_r>

08008f12 <__swbuf_r>:
 8008f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f14:	460e      	mov	r6, r1
 8008f16:	4614      	mov	r4, r2
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <__swbuf_r+0x12>
 8008f1c:	6a03      	ldr	r3, [r0, #32]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <__swbuf_r+0x12>
 8008f20:	f7ff fef0 	bl	8008d04 <__sinit>
 8008f24:	69a3      	ldr	r3, [r4, #24]
 8008f26:	60a3      	str	r3, [r4, #8]
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	071a      	lsls	r2, r3, #28
 8008f2c:	d525      	bpl.n	8008f7a <__swbuf_r+0x68>
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	b31b      	cbz	r3, 8008f7a <__swbuf_r+0x68>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	1a98      	subs	r0, r3, r2
 8008f38:	6963      	ldr	r3, [r4, #20]
 8008f3a:	b2f6      	uxtb	r6, r6
 8008f3c:	4283      	cmp	r3, r0
 8008f3e:	4637      	mov	r7, r6
 8008f40:	dc04      	bgt.n	8008f4c <__swbuf_r+0x3a>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f002 fc61 	bl	800b80c <_fflush_r>
 8008f4a:	b9e0      	cbnz	r0, 8008f86 <__swbuf_r+0x74>
 8008f4c:	68a3      	ldr	r3, [r4, #8]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	60a3      	str	r3, [r4, #8]
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	701e      	strb	r6, [r3, #0]
 8008f5a:	6962      	ldr	r2, [r4, #20]
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d004      	beq.n	8008f6c <__swbuf_r+0x5a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	07db      	lsls	r3, r3, #31
 8008f66:	d506      	bpl.n	8008f76 <__swbuf_r+0x64>
 8008f68:	2e0a      	cmp	r6, #10
 8008f6a:	d104      	bne.n	8008f76 <__swbuf_r+0x64>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f002 fc4c 	bl	800b80c <_fflush_r>
 8008f74:	b938      	cbnz	r0, 8008f86 <__swbuf_r+0x74>
 8008f76:	4638      	mov	r0, r7
 8008f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f805 	bl	8008f8c <__swsetup_r>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d0d5      	beq.n	8008f32 <__swbuf_r+0x20>
 8008f86:	f04f 37ff 	mov.w	r7, #4294967295
 8008f8a:	e7f4      	b.n	8008f76 <__swbuf_r+0x64>

08008f8c <__swsetup_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4b2a      	ldr	r3, [pc, #168]	; (8009038 <__swsetup_r+0xac>)
 8008f90:	4605      	mov	r5, r0
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	460c      	mov	r4, r1
 8008f96:	b118      	cbz	r0, 8008fa0 <__swsetup_r+0x14>
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <__swsetup_r+0x14>
 8008f9c:	f7ff feb2 	bl	8008d04 <__sinit>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa6:	0718      	lsls	r0, r3, #28
 8008fa8:	d422      	bmi.n	8008ff0 <__swsetup_r+0x64>
 8008faa:	06d9      	lsls	r1, r3, #27
 8008fac:	d407      	bmi.n	8008fbe <__swsetup_r+0x32>
 8008fae:	2309      	movs	r3, #9
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	e034      	b.n	8009028 <__swsetup_r+0x9c>
 8008fbe:	0758      	lsls	r0, r3, #29
 8008fc0:	d512      	bpl.n	8008fe8 <__swsetup_r+0x5c>
 8008fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc4:	b141      	cbz	r1, 8008fd8 <__swsetup_r+0x4c>
 8008fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	d002      	beq.n	8008fd4 <__swsetup_r+0x48>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f001 f804 	bl	8009fdc <_free_r>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6363      	str	r3, [r4, #52]	; 0x34
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6063      	str	r3, [r4, #4]
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f043 0308 	orr.w	r3, r3, #8
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	b94b      	cbnz	r3, 8009008 <__swsetup_r+0x7c>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffe:	d003      	beq.n	8009008 <__swsetup_r+0x7c>
 8009000:	4621      	mov	r1, r4
 8009002:	4628      	mov	r0, r5
 8009004:	f002 fc62 	bl	800b8cc <__smakebuf_r>
 8009008:	89a0      	ldrh	r0, [r4, #12]
 800900a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800900e:	f010 0301 	ands.w	r3, r0, #1
 8009012:	d00a      	beq.n	800902a <__swsetup_r+0x9e>
 8009014:	2300      	movs	r3, #0
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	6963      	ldr	r3, [r4, #20]
 800901a:	425b      	negs	r3, r3
 800901c:	61a3      	str	r3, [r4, #24]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	b943      	cbnz	r3, 8009034 <__swsetup_r+0xa8>
 8009022:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009026:	d1c4      	bne.n	8008fb2 <__swsetup_r+0x26>
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	0781      	lsls	r1, r0, #30
 800902c:	bf58      	it	pl
 800902e:	6963      	ldrpl	r3, [r4, #20]
 8009030:	60a3      	str	r3, [r4, #8]
 8009032:	e7f4      	b.n	800901e <__swsetup_r+0x92>
 8009034:	2000      	movs	r0, #0
 8009036:	e7f7      	b.n	8009028 <__swsetup_r+0x9c>
 8009038:	200001e0 	.word	0x200001e0

0800903c <memset>:
 800903c:	4402      	add	r2, r0
 800903e:	4603      	mov	r3, r0
 8009040:	4293      	cmp	r3, r2
 8009042:	d100      	bne.n	8009046 <memset+0xa>
 8009044:	4770      	bx	lr
 8009046:	f803 1b01 	strb.w	r1, [r3], #1
 800904a:	e7f9      	b.n	8009040 <memset+0x4>

0800904c <strdup>:
 800904c:	4b02      	ldr	r3, [pc, #8]	; (8009058 <strdup+0xc>)
 800904e:	4601      	mov	r1, r0
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	f000 b803 	b.w	800905c <_strdup_r>
 8009056:	bf00      	nop
 8009058:	200001e0 	.word	0x200001e0

0800905c <_strdup_r>:
 800905c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	460d      	mov	r5, r1
 8009064:	f7f7 f90c 	bl	8000280 <strlen>
 8009068:	1c42      	adds	r2, r0, #1
 800906a:	4611      	mov	r1, r2
 800906c:	4620      	mov	r0, r4
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	f7fe f842 	bl	80070f8 <_malloc_r>
 8009074:	4604      	mov	r4, r0
 8009076:	b118      	cbz	r0, 8009080 <_strdup_r+0x24>
 8009078:	9a01      	ldr	r2, [sp, #4]
 800907a:	4629      	mov	r1, r5
 800907c:	f000 f8f9 	bl	8009272 <memcpy>
 8009080:	4620      	mov	r0, r4
 8009082:	b003      	add	sp, #12
 8009084:	bd30      	pop	{r4, r5, pc}

08009086 <strncmp>:
 8009086:	b510      	push	{r4, lr}
 8009088:	b16a      	cbz	r2, 80090a6 <strncmp+0x20>
 800908a:	3901      	subs	r1, #1
 800908c:	1884      	adds	r4, r0, r2
 800908e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009092:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009096:	429a      	cmp	r2, r3
 8009098:	d103      	bne.n	80090a2 <strncmp+0x1c>
 800909a:	42a0      	cmp	r0, r4
 800909c:	d001      	beq.n	80090a2 <strncmp+0x1c>
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d1f5      	bne.n	800908e <strncmp+0x8>
 80090a2:	1ad0      	subs	r0, r2, r3
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	4610      	mov	r0, r2
 80090a8:	e7fc      	b.n	80090a4 <strncmp+0x1e>
	...

080090ac <strtok>:
 80090ac:	4b16      	ldr	r3, [pc, #88]	; (8009108 <strtok+0x5c>)
 80090ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090b0:	681e      	ldr	r6, [r3, #0]
 80090b2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80090b4:	4605      	mov	r5, r0
 80090b6:	b9fc      	cbnz	r4, 80090f8 <strtok+0x4c>
 80090b8:	2050      	movs	r0, #80	; 0x50
 80090ba:	9101      	str	r1, [sp, #4]
 80090bc:	f7fd ffec 	bl	8007098 <malloc>
 80090c0:	9901      	ldr	r1, [sp, #4]
 80090c2:	6470      	str	r0, [r6, #68]	; 0x44
 80090c4:	4602      	mov	r2, r0
 80090c6:	b920      	cbnz	r0, 80090d2 <strtok+0x26>
 80090c8:	4b10      	ldr	r3, [pc, #64]	; (800910c <strtok+0x60>)
 80090ca:	4811      	ldr	r0, [pc, #68]	; (8009110 <strtok+0x64>)
 80090cc:	215b      	movs	r1, #91	; 0x5b
 80090ce:	f000 f8ed 	bl	80092ac <__assert_func>
 80090d2:	e9c0 4400 	strd	r4, r4, [r0]
 80090d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80090da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80090de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80090e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80090e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80090ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80090ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80090f2:	6184      	str	r4, [r0, #24]
 80090f4:	7704      	strb	r4, [r0, #28]
 80090f6:	6244      	str	r4, [r0, #36]	; 0x24
 80090f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80090fa:	2301      	movs	r3, #1
 80090fc:	4628      	mov	r0, r5
 80090fe:	b002      	add	sp, #8
 8009100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009104:	f000 b806 	b.w	8009114 <__strtok_r>
 8009108:	200001e0 	.word	0x200001e0
 800910c:	0800be31 	.word	0x0800be31
 8009110:	0800be48 	.word	0x0800be48

08009114 <__strtok_r>:
 8009114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009116:	b908      	cbnz	r0, 800911c <__strtok_r+0x8>
 8009118:	6810      	ldr	r0, [r2, #0]
 800911a:	b188      	cbz	r0, 8009140 <__strtok_r+0x2c>
 800911c:	4604      	mov	r4, r0
 800911e:	4620      	mov	r0, r4
 8009120:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009124:	460f      	mov	r7, r1
 8009126:	f817 6b01 	ldrb.w	r6, [r7], #1
 800912a:	b91e      	cbnz	r6, 8009134 <__strtok_r+0x20>
 800912c:	b965      	cbnz	r5, 8009148 <__strtok_r+0x34>
 800912e:	6015      	str	r5, [r2, #0]
 8009130:	4628      	mov	r0, r5
 8009132:	e005      	b.n	8009140 <__strtok_r+0x2c>
 8009134:	42b5      	cmp	r5, r6
 8009136:	d1f6      	bne.n	8009126 <__strtok_r+0x12>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f0      	bne.n	800911e <__strtok_r+0xa>
 800913c:	6014      	str	r4, [r2, #0]
 800913e:	7003      	strb	r3, [r0, #0]
 8009140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009142:	461c      	mov	r4, r3
 8009144:	e00c      	b.n	8009160 <__strtok_r+0x4c>
 8009146:	b915      	cbnz	r5, 800914e <__strtok_r+0x3a>
 8009148:	f814 3b01 	ldrb.w	r3, [r4], #1
 800914c:	460e      	mov	r6, r1
 800914e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009152:	42ab      	cmp	r3, r5
 8009154:	d1f7      	bne.n	8009146 <__strtok_r+0x32>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0f3      	beq.n	8009142 <__strtok_r+0x2e>
 800915a:	2300      	movs	r3, #0
 800915c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	e7ed      	b.n	8009140 <__strtok_r+0x2c>

08009164 <_localeconv_r>:
 8009164:	4800      	ldr	r0, [pc, #0]	; (8009168 <_localeconv_r+0x4>)
 8009166:	4770      	bx	lr
 8009168:	20000118 	.word	0x20000118

0800916c <_close_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d06      	ldr	r5, [pc, #24]	; (8009188 <_close_r+0x1c>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	f7f9 fe03 	bl	8002d82 <_close>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_close_r+0x1a>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_close_r+0x1a>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	20000674 	.word	0x20000674

0800918c <_lseek_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	; (80091ac <_lseek_r+0x20>)
 8009190:	4604      	mov	r4, r0
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	2200      	movs	r2, #0
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7f9 fe18 	bl	8002dd0 <_lseek>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_lseek_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_lseek_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20000674 	.word	0x20000674

080091b0 <_read_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_read_r+0x20>)
 80091b4:	4604      	mov	r4, r0
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7f9 fda6 	bl	8002d10 <_read>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_read_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_read_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000674 	.word	0x20000674

080091d4 <_sbrk_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_sbrk_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f9 fe04 	bl	8002dec <_sbrk>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_sbrk_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_sbrk_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000674 	.word	0x20000674

080091f4 <_write_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_write_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f9 fda1 	bl	8002d4a <_write>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_write_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_write_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20000674 	.word	0x20000674

08009218 <__errno>:
 8009218:	4b01      	ldr	r3, [pc, #4]	; (8009220 <__errno+0x8>)
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	200001e0 	.word	0x200001e0

08009224 <__libc_init_array>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4d0d      	ldr	r5, [pc, #52]	; (800925c <__libc_init_array+0x38>)
 8009228:	4c0d      	ldr	r4, [pc, #52]	; (8009260 <__libc_init_array+0x3c>)
 800922a:	1b64      	subs	r4, r4, r5
 800922c:	10a4      	asrs	r4, r4, #2
 800922e:	2600      	movs	r6, #0
 8009230:	42a6      	cmp	r6, r4
 8009232:	d109      	bne.n	8009248 <__libc_init_array+0x24>
 8009234:	4d0b      	ldr	r5, [pc, #44]	; (8009264 <__libc_init_array+0x40>)
 8009236:	4c0c      	ldr	r4, [pc, #48]	; (8009268 <__libc_init_array+0x44>)
 8009238:	f002 fc58 	bl	800baec <_init>
 800923c:	1b64      	subs	r4, r4, r5
 800923e:	10a4      	asrs	r4, r4, #2
 8009240:	2600      	movs	r6, #0
 8009242:	42a6      	cmp	r6, r4
 8009244:	d105      	bne.n	8009252 <__libc_init_array+0x2e>
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	f855 3b04 	ldr.w	r3, [r5], #4
 800924c:	4798      	blx	r3
 800924e:	3601      	adds	r6, #1
 8009250:	e7ee      	b.n	8009230 <__libc_init_array+0xc>
 8009252:	f855 3b04 	ldr.w	r3, [r5], #4
 8009256:	4798      	blx	r3
 8009258:	3601      	adds	r6, #1
 800925a:	e7f2      	b.n	8009242 <__libc_init_array+0x1e>
 800925c:	0800c230 	.word	0x0800c230
 8009260:	0800c230 	.word	0x0800c230
 8009264:	0800c230 	.word	0x0800c230
 8009268:	0800c234 	.word	0x0800c234

0800926c <__retarget_lock_init_recursive>:
 800926c:	4770      	bx	lr

0800926e <__retarget_lock_acquire_recursive>:
 800926e:	4770      	bx	lr

08009270 <__retarget_lock_release_recursive>:
 8009270:	4770      	bx	lr

08009272 <memcpy>:
 8009272:	440a      	add	r2, r1
 8009274:	4291      	cmp	r1, r2
 8009276:	f100 33ff 	add.w	r3, r0, #4294967295
 800927a:	d100      	bne.n	800927e <memcpy+0xc>
 800927c:	4770      	bx	lr
 800927e:	b510      	push	{r4, lr}
 8009280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009288:	4291      	cmp	r1, r2
 800928a:	d1f9      	bne.n	8009280 <memcpy+0xe>
 800928c:	bd10      	pop	{r4, pc}
	...

08009290 <nan>:
 8009290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009298 <nan+0x8>
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	00000000 	.word	0x00000000
 800929c:	7ff80000 	.word	0x7ff80000

080092a0 <nanf>:
 80092a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092a8 <nanf+0x8>
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	7fc00000 	.word	0x7fc00000

080092ac <__assert_func>:
 80092ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ae:	4614      	mov	r4, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <__assert_func+0x2c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4605      	mov	r5, r0
 80092b8:	68d8      	ldr	r0, [r3, #12]
 80092ba:	b14c      	cbz	r4, 80092d0 <__assert_func+0x24>
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <__assert_func+0x30>)
 80092be:	9100      	str	r1, [sp, #0]
 80092c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c4:	4906      	ldr	r1, [pc, #24]	; (80092e0 <__assert_func+0x34>)
 80092c6:	462b      	mov	r3, r5
 80092c8:	f002 fac8 	bl	800b85c <fiprintf>
 80092cc:	f002 fb76 	bl	800b9bc <abort>
 80092d0:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <__assert_func+0x38>)
 80092d2:	461c      	mov	r4, r3
 80092d4:	e7f3      	b.n	80092be <__assert_func+0x12>
 80092d6:	bf00      	nop
 80092d8:	200001e0 	.word	0x200001e0
 80092dc:	0800beaa 	.word	0x0800beaa
 80092e0:	0800beb7 	.word	0x0800beb7
 80092e4:	0800bee5 	.word	0x0800bee5

080092e8 <quorem>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	6903      	ldr	r3, [r0, #16]
 80092ee:	690c      	ldr	r4, [r1, #16]
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	4607      	mov	r7, r0
 80092f4:	db7e      	blt.n	80093f4 <quorem+0x10c>
 80092f6:	3c01      	subs	r4, #1
 80092f8:	f101 0814 	add.w	r8, r1, #20
 80092fc:	f100 0514 	add.w	r5, r0, #20
 8009300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800930a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800930e:	3301      	adds	r3, #1
 8009310:	429a      	cmp	r2, r3
 8009312:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009316:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800931a:	fbb2 f6f3 	udiv	r6, r2, r3
 800931e:	d331      	bcc.n	8009384 <quorem+0x9c>
 8009320:	f04f 0e00 	mov.w	lr, #0
 8009324:	4640      	mov	r0, r8
 8009326:	46ac      	mov	ip, r5
 8009328:	46f2      	mov	sl, lr
 800932a:	f850 2b04 	ldr.w	r2, [r0], #4
 800932e:	b293      	uxth	r3, r2
 8009330:	fb06 e303 	mla	r3, r6, r3, lr
 8009334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009338:	0c1a      	lsrs	r2, r3, #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ebaa 0303 	sub.w	r3, sl, r3
 8009340:	f8dc a000 	ldr.w	sl, [ip]
 8009344:	fa13 f38a 	uxtah	r3, r3, sl
 8009348:	fb06 220e 	mla	r2, r6, lr, r2
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009354:	b292      	uxth	r2, r2
 8009356:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800935a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800935e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009362:	4581      	cmp	r9, r0
 8009364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009368:	f84c 3b04 	str.w	r3, [ip], #4
 800936c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009370:	d2db      	bcs.n	800932a <quorem+0x42>
 8009372:	f855 300b 	ldr.w	r3, [r5, fp]
 8009376:	b92b      	cbnz	r3, 8009384 <quorem+0x9c>
 8009378:	9b01      	ldr	r3, [sp, #4]
 800937a:	3b04      	subs	r3, #4
 800937c:	429d      	cmp	r5, r3
 800937e:	461a      	mov	r2, r3
 8009380:	d32c      	bcc.n	80093dc <quorem+0xf4>
 8009382:	613c      	str	r4, [r7, #16]
 8009384:	4638      	mov	r0, r7
 8009386:	f001 fca5 	bl	800acd4 <__mcmp>
 800938a:	2800      	cmp	r0, #0
 800938c:	db22      	blt.n	80093d4 <quorem+0xec>
 800938e:	3601      	adds	r6, #1
 8009390:	4629      	mov	r1, r5
 8009392:	2000      	movs	r0, #0
 8009394:	f858 2b04 	ldr.w	r2, [r8], #4
 8009398:	f8d1 c000 	ldr.w	ip, [r1]
 800939c:	b293      	uxth	r3, r2
 800939e:	1ac3      	subs	r3, r0, r3
 80093a0:	0c12      	lsrs	r2, r2, #16
 80093a2:	fa13 f38c 	uxtah	r3, r3, ip
 80093a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80093aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093b4:	45c1      	cmp	r9, r8
 80093b6:	f841 3b04 	str.w	r3, [r1], #4
 80093ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093be:	d2e9      	bcs.n	8009394 <quorem+0xac>
 80093c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093c8:	b922      	cbnz	r2, 80093d4 <quorem+0xec>
 80093ca:	3b04      	subs	r3, #4
 80093cc:	429d      	cmp	r5, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	d30a      	bcc.n	80093e8 <quorem+0x100>
 80093d2:	613c      	str	r4, [r7, #16]
 80093d4:	4630      	mov	r0, r6
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	3b04      	subs	r3, #4
 80093e0:	2a00      	cmp	r2, #0
 80093e2:	d1ce      	bne.n	8009382 <quorem+0x9a>
 80093e4:	3c01      	subs	r4, #1
 80093e6:	e7c9      	b.n	800937c <quorem+0x94>
 80093e8:	6812      	ldr	r2, [r2, #0]
 80093ea:	3b04      	subs	r3, #4
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	d1f0      	bne.n	80093d2 <quorem+0xea>
 80093f0:	3c01      	subs	r4, #1
 80093f2:	e7eb      	b.n	80093cc <quorem+0xe4>
 80093f4:	2000      	movs	r0, #0
 80093f6:	e7ee      	b.n	80093d6 <quorem+0xee>

080093f8 <_dtoa_r>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	ed2d 8b04 	vpush	{d8-d9}
 8009400:	69c5      	ldr	r5, [r0, #28]
 8009402:	b093      	sub	sp, #76	; 0x4c
 8009404:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009408:	ec57 6b10 	vmov	r6, r7, d0
 800940c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009410:	9107      	str	r1, [sp, #28]
 8009412:	4604      	mov	r4, r0
 8009414:	920a      	str	r2, [sp, #40]	; 0x28
 8009416:	930d      	str	r3, [sp, #52]	; 0x34
 8009418:	b975      	cbnz	r5, 8009438 <_dtoa_r+0x40>
 800941a:	2010      	movs	r0, #16
 800941c:	f7fd fe3c 	bl	8007098 <malloc>
 8009420:	4602      	mov	r2, r0
 8009422:	61e0      	str	r0, [r4, #28]
 8009424:	b920      	cbnz	r0, 8009430 <_dtoa_r+0x38>
 8009426:	4bae      	ldr	r3, [pc, #696]	; (80096e0 <_dtoa_r+0x2e8>)
 8009428:	21ef      	movs	r1, #239	; 0xef
 800942a:	48ae      	ldr	r0, [pc, #696]	; (80096e4 <_dtoa_r+0x2ec>)
 800942c:	f7ff ff3e 	bl	80092ac <__assert_func>
 8009430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009434:	6005      	str	r5, [r0, #0]
 8009436:	60c5      	str	r5, [r0, #12]
 8009438:	69e3      	ldr	r3, [r4, #28]
 800943a:	6819      	ldr	r1, [r3, #0]
 800943c:	b151      	cbz	r1, 8009454 <_dtoa_r+0x5c>
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	604a      	str	r2, [r1, #4]
 8009442:	2301      	movs	r3, #1
 8009444:	4093      	lsls	r3, r2
 8009446:	608b      	str	r3, [r1, #8]
 8009448:	4620      	mov	r0, r4
 800944a:	f001 f9bd 	bl	800a7c8 <_Bfree>
 800944e:	69e3      	ldr	r3, [r4, #28]
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	1e3b      	subs	r3, r7, #0
 8009456:	bfbb      	ittet	lt
 8009458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800945c:	9303      	strlt	r3, [sp, #12]
 800945e:	2300      	movge	r3, #0
 8009460:	2201      	movlt	r2, #1
 8009462:	bfac      	ite	ge
 8009464:	f8c8 3000 	strge.w	r3, [r8]
 8009468:	f8c8 2000 	strlt.w	r2, [r8]
 800946c:	4b9e      	ldr	r3, [pc, #632]	; (80096e8 <_dtoa_r+0x2f0>)
 800946e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009472:	ea33 0308 	bics.w	r3, r3, r8
 8009476:	d11b      	bne.n	80094b0 <_dtoa_r+0xb8>
 8009478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800947a:	f242 730f 	movw	r3, #9999	; 0x270f
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009484:	4333      	orrs	r3, r6
 8009486:	f000 8593 	beq.w	8009fb0 <_dtoa_r+0xbb8>
 800948a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800948c:	b963      	cbnz	r3, 80094a8 <_dtoa_r+0xb0>
 800948e:	4b97      	ldr	r3, [pc, #604]	; (80096ec <_dtoa_r+0x2f4>)
 8009490:	e027      	b.n	80094e2 <_dtoa_r+0xea>
 8009492:	4b97      	ldr	r3, [pc, #604]	; (80096f0 <_dtoa_r+0x2f8>)
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	9800      	ldr	r0, [sp, #0]
 800949e:	b013      	add	sp, #76	; 0x4c
 80094a0:	ecbd 8b04 	vpop	{d8-d9}
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	4b90      	ldr	r3, [pc, #576]	; (80096ec <_dtoa_r+0x2f4>)
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	3303      	adds	r3, #3
 80094ae:	e7f3      	b.n	8009498 <_dtoa_r+0xa0>
 80094b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094b4:	2200      	movs	r2, #0
 80094b6:	ec51 0b17 	vmov	r0, r1, d7
 80094ba:	eeb0 8a47 	vmov.f32	s16, s14
 80094be:	eef0 8a67 	vmov.f32	s17, s15
 80094c2:	2300      	movs	r3, #0
 80094c4:	f7f7 fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c8:	4681      	mov	r9, r0
 80094ca:	b160      	cbz	r0, 80094e6 <_dtoa_r+0xee>
 80094cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ce:	2301      	movs	r3, #1
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8568 	beq.w	8009faa <_dtoa_r+0xbb2>
 80094da:	4b86      	ldr	r3, [pc, #536]	; (80096f4 <_dtoa_r+0x2fc>)
 80094dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	e7da      	b.n	800949c <_dtoa_r+0xa4>
 80094e6:	aa10      	add	r2, sp, #64	; 0x40
 80094e8:	a911      	add	r1, sp, #68	; 0x44
 80094ea:	4620      	mov	r0, r4
 80094ec:	eeb0 0a48 	vmov.f32	s0, s16
 80094f0:	eef0 0a68 	vmov.f32	s1, s17
 80094f4:	f001 fd04 	bl	800af00 <__d2b>
 80094f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80094fc:	4682      	mov	sl, r0
 80094fe:	2d00      	cmp	r5, #0
 8009500:	d07f      	beq.n	8009602 <_dtoa_r+0x20a>
 8009502:	ee18 3a90 	vmov	r3, s17
 8009506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800950a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800950e:	ec51 0b18 	vmov	r0, r1, d8
 8009512:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800951a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800951e:	4619      	mov	r1, r3
 8009520:	2200      	movs	r2, #0
 8009522:	4b75      	ldr	r3, [pc, #468]	; (80096f8 <_dtoa_r+0x300>)
 8009524:	f7f6 feb8 	bl	8000298 <__aeabi_dsub>
 8009528:	a367      	add	r3, pc, #412	; (adr r3, 80096c8 <_dtoa_r+0x2d0>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f7 f86b 	bl	8000608 <__aeabi_dmul>
 8009532:	a367      	add	r3, pc, #412	; (adr r3, 80096d0 <_dtoa_r+0x2d8>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 feb0 	bl	800029c <__adddf3>
 800953c:	4606      	mov	r6, r0
 800953e:	4628      	mov	r0, r5
 8009540:	460f      	mov	r7, r1
 8009542:	f7f6 fff7 	bl	8000534 <__aeabi_i2d>
 8009546:	a364      	add	r3, pc, #400	; (adr r3, 80096d8 <_dtoa_r+0x2e0>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f7f7 f85c 	bl	8000608 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f6 fea0 	bl	800029c <__adddf3>
 800955c:	4606      	mov	r6, r0
 800955e:	460f      	mov	r7, r1
 8009560:	f7f7 fb02 	bl	8000b68 <__aeabi_d2iz>
 8009564:	2200      	movs	r2, #0
 8009566:	4683      	mov	fp, r0
 8009568:	2300      	movs	r3, #0
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7f7 fabd 	bl	8000aec <__aeabi_dcmplt>
 8009572:	b148      	cbz	r0, 8009588 <_dtoa_r+0x190>
 8009574:	4658      	mov	r0, fp
 8009576:	f7f6 ffdd 	bl	8000534 <__aeabi_i2d>
 800957a:	4632      	mov	r2, r6
 800957c:	463b      	mov	r3, r7
 800957e:	f7f7 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8009582:	b908      	cbnz	r0, 8009588 <_dtoa_r+0x190>
 8009584:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009588:	f1bb 0f16 	cmp.w	fp, #22
 800958c:	d857      	bhi.n	800963e <_dtoa_r+0x246>
 800958e:	4b5b      	ldr	r3, [pc, #364]	; (80096fc <_dtoa_r+0x304>)
 8009590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	ec51 0b18 	vmov	r0, r1, d8
 800959c:	f7f7 faa6 	bl	8000aec <__aeabi_dcmplt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d04e      	beq.n	8009642 <_dtoa_r+0x24a>
 80095a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095a8:	2300      	movs	r3, #0
 80095aa:	930c      	str	r3, [sp, #48]	; 0x30
 80095ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ae:	1b5b      	subs	r3, r3, r5
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	bf45      	ittet	mi
 80095b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80095b8:	9305      	strmi	r3, [sp, #20]
 80095ba:	2300      	movpl	r3, #0
 80095bc:	2300      	movmi	r3, #0
 80095be:	9206      	str	r2, [sp, #24]
 80095c0:	bf54      	ite	pl
 80095c2:	9305      	strpl	r3, [sp, #20]
 80095c4:	9306      	strmi	r3, [sp, #24]
 80095c6:	f1bb 0f00 	cmp.w	fp, #0
 80095ca:	db3c      	blt.n	8009646 <_dtoa_r+0x24e>
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80095d2:	445b      	add	r3, fp
 80095d4:	9306      	str	r3, [sp, #24]
 80095d6:	2300      	movs	r3, #0
 80095d8:	9308      	str	r3, [sp, #32]
 80095da:	9b07      	ldr	r3, [sp, #28]
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d868      	bhi.n	80096b2 <_dtoa_r+0x2ba>
 80095e0:	2b05      	cmp	r3, #5
 80095e2:	bfc4      	itt	gt
 80095e4:	3b04      	subgt	r3, #4
 80095e6:	9307      	strgt	r3, [sp, #28]
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	f1a3 0302 	sub.w	r3, r3, #2
 80095ee:	bfcc      	ite	gt
 80095f0:	2500      	movgt	r5, #0
 80095f2:	2501      	movle	r5, #1
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	f200 8085 	bhi.w	8009704 <_dtoa_r+0x30c>
 80095fa:	e8df f003 	tbb	[pc, r3]
 80095fe:	3b2e      	.short	0x3b2e
 8009600:	5839      	.short	0x5839
 8009602:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009606:	441d      	add	r5, r3
 8009608:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800960c:	2b20      	cmp	r3, #32
 800960e:	bfc1      	itttt	gt
 8009610:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009614:	fa08 f803 	lslgt.w	r8, r8, r3
 8009618:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800961c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009620:	bfd6      	itet	le
 8009622:	f1c3 0320 	rsble	r3, r3, #32
 8009626:	ea48 0003 	orrgt.w	r0, r8, r3
 800962a:	fa06 f003 	lslle.w	r0, r6, r3
 800962e:	f7f6 ff71 	bl	8000514 <__aeabi_ui2d>
 8009632:	2201      	movs	r2, #1
 8009634:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009638:	3d01      	subs	r5, #1
 800963a:	920e      	str	r2, [sp, #56]	; 0x38
 800963c:	e76f      	b.n	800951e <_dtoa_r+0x126>
 800963e:	2301      	movs	r3, #1
 8009640:	e7b3      	b.n	80095aa <_dtoa_r+0x1b2>
 8009642:	900c      	str	r0, [sp, #48]	; 0x30
 8009644:	e7b2      	b.n	80095ac <_dtoa_r+0x1b4>
 8009646:	9b05      	ldr	r3, [sp, #20]
 8009648:	eba3 030b 	sub.w	r3, r3, fp
 800964c:	9305      	str	r3, [sp, #20]
 800964e:	f1cb 0300 	rsb	r3, fp, #0
 8009652:	9308      	str	r3, [sp, #32]
 8009654:	2300      	movs	r3, #0
 8009656:	930b      	str	r3, [sp, #44]	; 0x2c
 8009658:	e7bf      	b.n	80095da <_dtoa_r+0x1e2>
 800965a:	2300      	movs	r3, #0
 800965c:	9309      	str	r3, [sp, #36]	; 0x24
 800965e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009660:	2b00      	cmp	r3, #0
 8009662:	dc52      	bgt.n	800970a <_dtoa_r+0x312>
 8009664:	2301      	movs	r3, #1
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	9304      	str	r3, [sp, #16]
 800966a:	461a      	mov	r2, r3
 800966c:	920a      	str	r2, [sp, #40]	; 0x28
 800966e:	e00b      	b.n	8009688 <_dtoa_r+0x290>
 8009670:	2301      	movs	r3, #1
 8009672:	e7f3      	b.n	800965c <_dtoa_r+0x264>
 8009674:	2300      	movs	r3, #0
 8009676:	9309      	str	r3, [sp, #36]	; 0x24
 8009678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967a:	445b      	add	r3, fp
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	2b01      	cmp	r3, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	bfb8      	it	lt
 8009686:	2301      	movlt	r3, #1
 8009688:	69e0      	ldr	r0, [r4, #28]
 800968a:	2100      	movs	r1, #0
 800968c:	2204      	movs	r2, #4
 800968e:	f102 0614 	add.w	r6, r2, #20
 8009692:	429e      	cmp	r6, r3
 8009694:	d93d      	bls.n	8009712 <_dtoa_r+0x31a>
 8009696:	6041      	str	r1, [r0, #4]
 8009698:	4620      	mov	r0, r4
 800969a:	f001 f855 	bl	800a748 <_Balloc>
 800969e:	9000      	str	r0, [sp, #0]
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d139      	bne.n	8009718 <_dtoa_r+0x320>
 80096a4:	4b16      	ldr	r3, [pc, #88]	; (8009700 <_dtoa_r+0x308>)
 80096a6:	4602      	mov	r2, r0
 80096a8:	f240 11af 	movw	r1, #431	; 0x1af
 80096ac:	e6bd      	b.n	800942a <_dtoa_r+0x32>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7e1      	b.n	8009676 <_dtoa_r+0x27e>
 80096b2:	2501      	movs	r5, #1
 80096b4:	2300      	movs	r3, #0
 80096b6:	9307      	str	r3, [sp, #28]
 80096b8:	9509      	str	r5, [sp, #36]	; 0x24
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	2200      	movs	r2, #0
 80096c4:	2312      	movs	r3, #18
 80096c6:	e7d1      	b.n	800966c <_dtoa_r+0x274>
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	0800be31 	.word	0x0800be31
 80096e4:	0800bef3 	.word	0x0800bef3
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0800beef 	.word	0x0800beef
 80096f0:	0800bee6 	.word	0x0800bee6
 80096f4:	0800be09 	.word	0x0800be09
 80096f8:	3ff80000 	.word	0x3ff80000
 80096fc:	0800c040 	.word	0x0800c040
 8009700:	0800bf4b 	.word	0x0800bf4b
 8009704:	2301      	movs	r3, #1
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	e7d7      	b.n	80096ba <_dtoa_r+0x2c2>
 800970a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	e7ba      	b.n	8009688 <_dtoa_r+0x290>
 8009712:	3101      	adds	r1, #1
 8009714:	0052      	lsls	r2, r2, #1
 8009716:	e7ba      	b.n	800968e <_dtoa_r+0x296>
 8009718:	69e3      	ldr	r3, [r4, #28]
 800971a:	9a00      	ldr	r2, [sp, #0]
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	2b0e      	cmp	r3, #14
 8009722:	f200 80a8 	bhi.w	8009876 <_dtoa_r+0x47e>
 8009726:	2d00      	cmp	r5, #0
 8009728:	f000 80a5 	beq.w	8009876 <_dtoa_r+0x47e>
 800972c:	f1bb 0f00 	cmp.w	fp, #0
 8009730:	dd38      	ble.n	80097a4 <_dtoa_r+0x3ac>
 8009732:	4bc0      	ldr	r3, [pc, #768]	; (8009a34 <_dtoa_r+0x63c>)
 8009734:	f00b 020f 	and.w	r2, fp, #15
 8009738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800973c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009740:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009744:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009748:	d019      	beq.n	800977e <_dtoa_r+0x386>
 800974a:	4bbb      	ldr	r3, [pc, #748]	; (8009a38 <_dtoa_r+0x640>)
 800974c:	ec51 0b18 	vmov	r0, r1, d8
 8009750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009754:	f7f7 f882 	bl	800085c <__aeabi_ddiv>
 8009758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800975c:	f008 080f 	and.w	r8, r8, #15
 8009760:	2503      	movs	r5, #3
 8009762:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009a38 <_dtoa_r+0x640>
 8009766:	f1b8 0f00 	cmp.w	r8, #0
 800976a:	d10a      	bne.n	8009782 <_dtoa_r+0x38a>
 800976c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009770:	4632      	mov	r2, r6
 8009772:	463b      	mov	r3, r7
 8009774:	f7f7 f872 	bl	800085c <__aeabi_ddiv>
 8009778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800977c:	e02b      	b.n	80097d6 <_dtoa_r+0x3de>
 800977e:	2502      	movs	r5, #2
 8009780:	e7ef      	b.n	8009762 <_dtoa_r+0x36a>
 8009782:	f018 0f01 	tst.w	r8, #1
 8009786:	d008      	beq.n	800979a <_dtoa_r+0x3a2>
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009790:	f7f6 ff3a 	bl	8000608 <__aeabi_dmul>
 8009794:	3501      	adds	r5, #1
 8009796:	4606      	mov	r6, r0
 8009798:	460f      	mov	r7, r1
 800979a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800979e:	f109 0908 	add.w	r9, r9, #8
 80097a2:	e7e0      	b.n	8009766 <_dtoa_r+0x36e>
 80097a4:	f000 809f 	beq.w	80098e6 <_dtoa_r+0x4ee>
 80097a8:	f1cb 0600 	rsb	r6, fp, #0
 80097ac:	4ba1      	ldr	r3, [pc, #644]	; (8009a34 <_dtoa_r+0x63c>)
 80097ae:	4fa2      	ldr	r7, [pc, #648]	; (8009a38 <_dtoa_r+0x640>)
 80097b0:	f006 020f 	and.w	r2, r6, #15
 80097b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	ec51 0b18 	vmov	r0, r1, d8
 80097c0:	f7f6 ff22 	bl	8000608 <__aeabi_dmul>
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	1136      	asrs	r6, r6, #4
 80097ca:	2300      	movs	r3, #0
 80097cc:	2502      	movs	r5, #2
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d17e      	bne.n	80098d0 <_dtoa_r+0x4d8>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1d0      	bne.n	8009778 <_dtoa_r+0x380>
 80097d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 8084 	beq.w	80098ea <_dtoa_r+0x4f2>
 80097e2:	4b96      	ldr	r3, [pc, #600]	; (8009a3c <_dtoa_r+0x644>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	f7f7 f97f 	bl	8000aec <__aeabi_dcmplt>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d07b      	beq.n	80098ea <_dtoa_r+0x4f2>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d078      	beq.n	80098ea <_dtoa_r+0x4f2>
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dd39      	ble.n	8009872 <_dtoa_r+0x47a>
 80097fe:	4b90      	ldr	r3, [pc, #576]	; (8009a40 <_dtoa_r+0x648>)
 8009800:	2200      	movs	r2, #0
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 feff 	bl	8000608 <__aeabi_dmul>
 800980a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980e:	9e01      	ldr	r6, [sp, #4]
 8009810:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009814:	3501      	adds	r5, #1
 8009816:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800981a:	4628      	mov	r0, r5
 800981c:	f7f6 fe8a 	bl	8000534 <__aeabi_i2d>
 8009820:	4642      	mov	r2, r8
 8009822:	464b      	mov	r3, r9
 8009824:	f7f6 fef0 	bl	8000608 <__aeabi_dmul>
 8009828:	4b86      	ldr	r3, [pc, #536]	; (8009a44 <_dtoa_r+0x64c>)
 800982a:	2200      	movs	r2, #0
 800982c:	f7f6 fd36 	bl	800029c <__adddf3>
 8009830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009838:	9303      	str	r3, [sp, #12]
 800983a:	2e00      	cmp	r6, #0
 800983c:	d158      	bne.n	80098f0 <_dtoa_r+0x4f8>
 800983e:	4b82      	ldr	r3, [pc, #520]	; (8009a48 <_dtoa_r+0x650>)
 8009840:	2200      	movs	r2, #0
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fd27 	bl	8000298 <__aeabi_dsub>
 800984a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800984e:	4680      	mov	r8, r0
 8009850:	4689      	mov	r9, r1
 8009852:	f7f7 f969 	bl	8000b28 <__aeabi_dcmpgt>
 8009856:	2800      	cmp	r0, #0
 8009858:	f040 8296 	bne.w	8009d88 <_dtoa_r+0x990>
 800985c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009860:	4640      	mov	r0, r8
 8009862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009866:	4649      	mov	r1, r9
 8009868:	f7f7 f940 	bl	8000aec <__aeabi_dcmplt>
 800986c:	2800      	cmp	r0, #0
 800986e:	f040 8289 	bne.w	8009d84 <_dtoa_r+0x98c>
 8009872:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009878:	2b00      	cmp	r3, #0
 800987a:	f2c0 814e 	blt.w	8009b1a <_dtoa_r+0x722>
 800987e:	f1bb 0f0e 	cmp.w	fp, #14
 8009882:	f300 814a 	bgt.w	8009b1a <_dtoa_r+0x722>
 8009886:	4b6b      	ldr	r3, [pc, #428]	; (8009a34 <_dtoa_r+0x63c>)
 8009888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800988c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	f280 80dc 	bge.w	8009a50 <_dtoa_r+0x658>
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f300 80d8 	bgt.w	8009a50 <_dtoa_r+0x658>
 80098a0:	f040 826f 	bne.w	8009d82 <_dtoa_r+0x98a>
 80098a4:	4b68      	ldr	r3, [pc, #416]	; (8009a48 <_dtoa_r+0x650>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f6 feac 	bl	8000608 <__aeabi_dmul>
 80098b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098b4:	f7f7 f92e 	bl	8000b14 <__aeabi_dcmpge>
 80098b8:	9e04      	ldr	r6, [sp, #16]
 80098ba:	4637      	mov	r7, r6
 80098bc:	2800      	cmp	r0, #0
 80098be:	f040 8245 	bne.w	8009d4c <_dtoa_r+0x954>
 80098c2:	9d00      	ldr	r5, [sp, #0]
 80098c4:	2331      	movs	r3, #49	; 0x31
 80098c6:	f805 3b01 	strb.w	r3, [r5], #1
 80098ca:	f10b 0b01 	add.w	fp, fp, #1
 80098ce:	e241      	b.n	8009d54 <_dtoa_r+0x95c>
 80098d0:	07f2      	lsls	r2, r6, #31
 80098d2:	d505      	bpl.n	80098e0 <_dtoa_r+0x4e8>
 80098d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d8:	f7f6 fe96 	bl	8000608 <__aeabi_dmul>
 80098dc:	3501      	adds	r5, #1
 80098de:	2301      	movs	r3, #1
 80098e0:	1076      	asrs	r6, r6, #1
 80098e2:	3708      	adds	r7, #8
 80098e4:	e773      	b.n	80097ce <_dtoa_r+0x3d6>
 80098e6:	2502      	movs	r5, #2
 80098e8:	e775      	b.n	80097d6 <_dtoa_r+0x3de>
 80098ea:	9e04      	ldr	r6, [sp, #16]
 80098ec:	465f      	mov	r7, fp
 80098ee:	e792      	b.n	8009816 <_dtoa_r+0x41e>
 80098f0:	9900      	ldr	r1, [sp, #0]
 80098f2:	4b50      	ldr	r3, [pc, #320]	; (8009a34 <_dtoa_r+0x63c>)
 80098f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098f8:	4431      	add	r1, r6
 80098fa:	9102      	str	r1, [sp, #8]
 80098fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098fe:	eeb0 9a47 	vmov.f32	s18, s14
 8009902:	eef0 9a67 	vmov.f32	s19, s15
 8009906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800990a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990e:	2900      	cmp	r1, #0
 8009910:	d044      	beq.n	800999c <_dtoa_r+0x5a4>
 8009912:	494e      	ldr	r1, [pc, #312]	; (8009a4c <_dtoa_r+0x654>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f6 ffa1 	bl	800085c <__aeabi_ddiv>
 800991a:	ec53 2b19 	vmov	r2, r3, d9
 800991e:	f7f6 fcbb 	bl	8000298 <__aeabi_dsub>
 8009922:	9d00      	ldr	r5, [sp, #0]
 8009924:	ec41 0b19 	vmov	d9, r0, r1
 8009928:	4649      	mov	r1, r9
 800992a:	4640      	mov	r0, r8
 800992c:	f7f7 f91c 	bl	8000b68 <__aeabi_d2iz>
 8009930:	4606      	mov	r6, r0
 8009932:	f7f6 fdff 	bl	8000534 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f6 fcab 	bl	8000298 <__aeabi_dsub>
 8009942:	3630      	adds	r6, #48	; 0x30
 8009944:	f805 6b01 	strb.w	r6, [r5], #1
 8009948:	ec53 2b19 	vmov	r2, r3, d9
 800994c:	4680      	mov	r8, r0
 800994e:	4689      	mov	r9, r1
 8009950:	f7f7 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8009954:	2800      	cmp	r0, #0
 8009956:	d164      	bne.n	8009a22 <_dtoa_r+0x62a>
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	4937      	ldr	r1, [pc, #220]	; (8009a3c <_dtoa_r+0x644>)
 800995e:	2000      	movs	r0, #0
 8009960:	f7f6 fc9a 	bl	8000298 <__aeabi_dsub>
 8009964:	ec53 2b19 	vmov	r2, r3, d9
 8009968:	f7f7 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	f040 80b6 	bne.w	8009ade <_dtoa_r+0x6e6>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	429d      	cmp	r5, r3
 8009976:	f43f af7c 	beq.w	8009872 <_dtoa_r+0x47a>
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <_dtoa_r+0x648>)
 800997c:	ec51 0b19 	vmov	r0, r1, d9
 8009980:	2200      	movs	r2, #0
 8009982:	f7f6 fe41 	bl	8000608 <__aeabi_dmul>
 8009986:	4b2e      	ldr	r3, [pc, #184]	; (8009a40 <_dtoa_r+0x648>)
 8009988:	ec41 0b19 	vmov	d9, r0, r1
 800998c:	2200      	movs	r2, #0
 800998e:	4640      	mov	r0, r8
 8009990:	4649      	mov	r1, r9
 8009992:	f7f6 fe39 	bl	8000608 <__aeabi_dmul>
 8009996:	4680      	mov	r8, r0
 8009998:	4689      	mov	r9, r1
 800999a:	e7c5      	b.n	8009928 <_dtoa_r+0x530>
 800999c:	ec51 0b17 	vmov	r0, r1, d7
 80099a0:	f7f6 fe32 	bl	8000608 <__aeabi_dmul>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	9d00      	ldr	r5, [sp, #0]
 80099a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099aa:	ec41 0b19 	vmov	d9, r0, r1
 80099ae:	4649      	mov	r1, r9
 80099b0:	4640      	mov	r0, r8
 80099b2:	f7f7 f8d9 	bl	8000b68 <__aeabi_d2iz>
 80099b6:	4606      	mov	r6, r0
 80099b8:	f7f6 fdbc 	bl	8000534 <__aeabi_i2d>
 80099bc:	3630      	adds	r6, #48	; 0x30
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	f7f6 fc67 	bl	8000298 <__aeabi_dsub>
 80099ca:	f805 6b01 	strb.w	r6, [r5], #1
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	429d      	cmp	r5, r3
 80099d2:	4680      	mov	r8, r0
 80099d4:	4689      	mov	r9, r1
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	d124      	bne.n	8009a26 <_dtoa_r+0x62e>
 80099dc:	4b1b      	ldr	r3, [pc, #108]	; (8009a4c <_dtoa_r+0x654>)
 80099de:	ec51 0b19 	vmov	r0, r1, d9
 80099e2:	f7f6 fc5b 	bl	800029c <__adddf3>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	f7f7 f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d173      	bne.n	8009ade <_dtoa_r+0x6e6>
 80099f6:	ec53 2b19 	vmov	r2, r3, d9
 80099fa:	4914      	ldr	r1, [pc, #80]	; (8009a4c <_dtoa_r+0x654>)
 80099fc:	2000      	movs	r0, #0
 80099fe:	f7f6 fc4b 	bl	8000298 <__aeabi_dsub>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	f7f7 f86f 	bl	8000aec <__aeabi_dcmplt>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f43f af2f 	beq.w	8009872 <_dtoa_r+0x47a>
 8009a14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a16:	1e6b      	subs	r3, r5, #1
 8009a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a1e:	2b30      	cmp	r3, #48	; 0x30
 8009a20:	d0f8      	beq.n	8009a14 <_dtoa_r+0x61c>
 8009a22:	46bb      	mov	fp, r7
 8009a24:	e04a      	b.n	8009abc <_dtoa_r+0x6c4>
 8009a26:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <_dtoa_r+0x648>)
 8009a28:	f7f6 fdee 	bl	8000608 <__aeabi_dmul>
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	4689      	mov	r9, r1
 8009a30:	e7bd      	b.n	80099ae <_dtoa_r+0x5b6>
 8009a32:	bf00      	nop
 8009a34:	0800c040 	.word	0x0800c040
 8009a38:	0800c018 	.word	0x0800c018
 8009a3c:	3ff00000 	.word	0x3ff00000
 8009a40:	40240000 	.word	0x40240000
 8009a44:	401c0000 	.word	0x401c0000
 8009a48:	40140000 	.word	0x40140000
 8009a4c:	3fe00000 	.word	0x3fe00000
 8009a50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a54:	9d00      	ldr	r5, [sp, #0]
 8009a56:	4642      	mov	r2, r8
 8009a58:	464b      	mov	r3, r9
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fefd 	bl	800085c <__aeabi_ddiv>
 8009a62:	f7f7 f881 	bl	8000b68 <__aeabi_d2iz>
 8009a66:	9001      	str	r0, [sp, #4]
 8009a68:	f7f6 fd64 	bl	8000534 <__aeabi_i2d>
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	464b      	mov	r3, r9
 8009a70:	f7f6 fdca 	bl	8000608 <__aeabi_dmul>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fc0c 	bl	8000298 <__aeabi_dsub>
 8009a80:	9e01      	ldr	r6, [sp, #4]
 8009a82:	9f04      	ldr	r7, [sp, #16]
 8009a84:	3630      	adds	r6, #48	; 0x30
 8009a86:	f805 6b01 	strb.w	r6, [r5], #1
 8009a8a:	9e00      	ldr	r6, [sp, #0]
 8009a8c:	1bae      	subs	r6, r5, r6
 8009a8e:	42b7      	cmp	r7, r6
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	d134      	bne.n	8009b00 <_dtoa_r+0x708>
 8009a96:	f7f6 fc01 	bl	800029c <__adddf3>
 8009a9a:	4642      	mov	r2, r8
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	460f      	mov	r7, r1
 8009aa2:	f7f7 f841 	bl	8000b28 <__aeabi_dcmpgt>
 8009aa6:	b9c8      	cbnz	r0, 8009adc <_dtoa_r+0x6e4>
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	464b      	mov	r3, r9
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f7f7 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab4:	b110      	cbz	r0, 8009abc <_dtoa_r+0x6c4>
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d40f      	bmi.n	8009adc <_dtoa_r+0x6e4>
 8009abc:	4651      	mov	r1, sl
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f000 fe82 	bl	800a7c8 <_Bfree>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ac8:	702b      	strb	r3, [r5, #0]
 8009aca:	f10b 0301 	add.w	r3, fp, #1
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f43f ace2 	beq.w	800949c <_dtoa_r+0xa4>
 8009ad8:	601d      	str	r5, [r3, #0]
 8009ada:	e4df      	b.n	800949c <_dtoa_r+0xa4>
 8009adc:	465f      	mov	r7, fp
 8009ade:	462b      	mov	r3, r5
 8009ae0:	461d      	mov	r5, r3
 8009ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae6:	2a39      	cmp	r2, #57	; 0x39
 8009ae8:	d106      	bne.n	8009af8 <_dtoa_r+0x700>
 8009aea:	9a00      	ldr	r2, [sp, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d1f7      	bne.n	8009ae0 <_dtoa_r+0x6e8>
 8009af0:	9900      	ldr	r1, [sp, #0]
 8009af2:	2230      	movs	r2, #48	; 0x30
 8009af4:	3701      	adds	r7, #1
 8009af6:	700a      	strb	r2, [r1, #0]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e790      	b.n	8009a22 <_dtoa_r+0x62a>
 8009b00:	4ba3      	ldr	r3, [pc, #652]	; (8009d90 <_dtoa_r+0x998>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd80 	bl	8000608 <__aeabi_dmul>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	f7f6 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d09e      	beq.n	8009a56 <_dtoa_r+0x65e>
 8009b18:	e7d0      	b.n	8009abc <_dtoa_r+0x6c4>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 80ca 	beq.w	8009cb6 <_dtoa_r+0x8be>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	2a01      	cmp	r2, #1
 8009b26:	f300 80ad 	bgt.w	8009c84 <_dtoa_r+0x88c>
 8009b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f000 80a5 	beq.w	8009c7c <_dtoa_r+0x884>
 8009b32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b36:	9e08      	ldr	r6, [sp, #32]
 8009b38:	9d05      	ldr	r5, [sp, #20]
 8009b3a:	9a05      	ldr	r2, [sp, #20]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	9205      	str	r2, [sp, #20]
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	2101      	movs	r1, #1
 8009b44:	441a      	add	r2, r3
 8009b46:	4620      	mov	r0, r4
 8009b48:	9206      	str	r2, [sp, #24]
 8009b4a:	f000 ff3d 	bl	800a9c8 <__i2b>
 8009b4e:	4607      	mov	r7, r0
 8009b50:	b165      	cbz	r5, 8009b6c <_dtoa_r+0x774>
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd09      	ble.n	8009b6c <_dtoa_r+0x774>
 8009b58:	42ab      	cmp	r3, r5
 8009b5a:	9a05      	ldr	r2, [sp, #20]
 8009b5c:	bfa8      	it	ge
 8009b5e:	462b      	movge	r3, r5
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	9205      	str	r2, [sp, #20]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	1aed      	subs	r5, r5, r3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	b1f3      	cbz	r3, 8009bae <_dtoa_r+0x7b6>
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80a3 	beq.w	8009cbe <_dtoa_r+0x8c6>
 8009b78:	2e00      	cmp	r6, #0
 8009b7a:	dd10      	ble.n	8009b9e <_dtoa_r+0x7a6>
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 ffe1 	bl	800ab48 <__pow5mult>
 8009b86:	4652      	mov	r2, sl
 8009b88:	4601      	mov	r1, r0
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 ff31 	bl	800a9f4 <__multiply>
 8009b92:	4651      	mov	r1, sl
 8009b94:	4680      	mov	r8, r0
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fe16 	bl	800a7c8 <_Bfree>
 8009b9c:	46c2      	mov	sl, r8
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	1b9a      	subs	r2, r3, r6
 8009ba2:	d004      	beq.n	8009bae <_dtoa_r+0x7b6>
 8009ba4:	4651      	mov	r1, sl
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 ffce 	bl	800ab48 <__pow5mult>
 8009bac:	4682      	mov	sl, r0
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 ff09 	bl	800a9c8 <__i2b>
 8009bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	4606      	mov	r6, r0
 8009bbc:	f340 8081 	ble.w	8009cc2 <_dtoa_r+0x8ca>
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f000 ffbf 	bl	800ab48 <__pow5mult>
 8009bca:	9b07      	ldr	r3, [sp, #28]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	4606      	mov	r6, r0
 8009bd0:	dd7a      	ble.n	8009cc8 <_dtoa_r+0x8d0>
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	6933      	ldr	r3, [r6, #16]
 8009bd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bdc:	6918      	ldr	r0, [r3, #16]
 8009bde:	f000 fea5 	bl	800a92c <__hi0bits>
 8009be2:	f1c0 0020 	rsb	r0, r0, #32
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	4418      	add	r0, r3
 8009bea:	f010 001f 	ands.w	r0, r0, #31
 8009bee:	f000 8094 	beq.w	8009d1a <_dtoa_r+0x922>
 8009bf2:	f1c0 0320 	rsb	r3, r0, #32
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	f340 8085 	ble.w	8009d06 <_dtoa_r+0x90e>
 8009bfc:	9b05      	ldr	r3, [sp, #20]
 8009bfe:	f1c0 001c 	rsb	r0, r0, #28
 8009c02:	4403      	add	r3, r0
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	4403      	add	r3, r0
 8009c0a:	4405      	add	r5, r0
 8009c0c:	9306      	str	r3, [sp, #24]
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dd05      	ble.n	8009c20 <_dtoa_r+0x828>
 8009c14:	4651      	mov	r1, sl
 8009c16:	461a      	mov	r2, r3
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 ffef 	bl	800abfc <__lshift>
 8009c1e:	4682      	mov	sl, r0
 8009c20:	9b06      	ldr	r3, [sp, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dd05      	ble.n	8009c32 <_dtoa_r+0x83a>
 8009c26:	4631      	mov	r1, r6
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 ffe6 	bl	800abfc <__lshift>
 8009c30:	4606      	mov	r6, r0
 8009c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d072      	beq.n	8009d1e <_dtoa_r+0x926>
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	f001 f84a 	bl	800acd4 <__mcmp>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	da6c      	bge.n	8009d1e <_dtoa_r+0x926>
 8009c44:	2300      	movs	r3, #0
 8009c46:	4651      	mov	r1, sl
 8009c48:	220a      	movs	r2, #10
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fdde 	bl	800a80c <__multadd>
 8009c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c56:	4682      	mov	sl, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 81b0 	beq.w	8009fbe <_dtoa_r+0xbc6>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	4639      	mov	r1, r7
 8009c62:	220a      	movs	r2, #10
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fdd1 	bl	800a80c <__multadd>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	4607      	mov	r7, r0
 8009c70:	f300 8096 	bgt.w	8009da0 <_dtoa_r+0x9a8>
 8009c74:	9b07      	ldr	r3, [sp, #28]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	dc59      	bgt.n	8009d2e <_dtoa_r+0x936>
 8009c7a:	e091      	b.n	8009da0 <_dtoa_r+0x9a8>
 8009c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c82:	e758      	b.n	8009b36 <_dtoa_r+0x73e>
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	1e5e      	subs	r6, r3, #1
 8009c88:	9b08      	ldr	r3, [sp, #32]
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	bfbf      	itttt	lt
 8009c8e:	9b08      	ldrlt	r3, [sp, #32]
 8009c90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009c92:	9608      	strlt	r6, [sp, #32]
 8009c94:	1af3      	sublt	r3, r6, r3
 8009c96:	bfb4      	ite	lt
 8009c98:	18d2      	addlt	r2, r2, r3
 8009c9a:	1b9e      	subge	r6, r3, r6
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	bfbc      	itt	lt
 8009ca0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009ca2:	2600      	movlt	r6, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfb7      	itett	lt
 8009ca8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009cac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009cb0:	1a9d      	sublt	r5, r3, r2
 8009cb2:	2300      	movlt	r3, #0
 8009cb4:	e741      	b.n	8009b3a <_dtoa_r+0x742>
 8009cb6:	9e08      	ldr	r6, [sp, #32]
 8009cb8:	9d05      	ldr	r5, [sp, #20]
 8009cba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009cbc:	e748      	b.n	8009b50 <_dtoa_r+0x758>
 8009cbe:	9a08      	ldr	r2, [sp, #32]
 8009cc0:	e770      	b.n	8009ba4 <_dtoa_r+0x7ac>
 8009cc2:	9b07      	ldr	r3, [sp, #28]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	dc19      	bgt.n	8009cfc <_dtoa_r+0x904>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	b9bb      	cbnz	r3, 8009cfc <_dtoa_r+0x904>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cd2:	b99b      	cbnz	r3, 8009cfc <_dtoa_r+0x904>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cda:	0d1b      	lsrs	r3, r3, #20
 8009cdc:	051b      	lsls	r3, r3, #20
 8009cde:	b183      	cbz	r3, 8009d02 <_dtoa_r+0x90a>
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	9b06      	ldr	r3, [sp, #24]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	9306      	str	r3, [sp, #24]
 8009cec:	f04f 0801 	mov.w	r8, #1
 8009cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f47f af6f 	bne.w	8009bd6 <_dtoa_r+0x7de>
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	e774      	b.n	8009be6 <_dtoa_r+0x7ee>
 8009cfc:	f04f 0800 	mov.w	r8, #0
 8009d00:	e7f6      	b.n	8009cf0 <_dtoa_r+0x8f8>
 8009d02:	4698      	mov	r8, r3
 8009d04:	e7f4      	b.n	8009cf0 <_dtoa_r+0x8f8>
 8009d06:	d082      	beq.n	8009c0e <_dtoa_r+0x816>
 8009d08:	9a05      	ldr	r2, [sp, #20]
 8009d0a:	331c      	adds	r3, #28
 8009d0c:	441a      	add	r2, r3
 8009d0e:	9205      	str	r2, [sp, #20]
 8009d10:	9a06      	ldr	r2, [sp, #24]
 8009d12:	441a      	add	r2, r3
 8009d14:	441d      	add	r5, r3
 8009d16:	9206      	str	r2, [sp, #24]
 8009d18:	e779      	b.n	8009c0e <_dtoa_r+0x816>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	e7f4      	b.n	8009d08 <_dtoa_r+0x910>
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dc37      	bgt.n	8009d94 <_dtoa_r+0x99c>
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	dd34      	ble.n	8009d94 <_dtoa_r+0x99c>
 8009d2a:	9b04      	ldr	r3, [sp, #16]
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	b963      	cbnz	r3, 8009d4c <_dtoa_r+0x954>
 8009d32:	4631      	mov	r1, r6
 8009d34:	2205      	movs	r2, #5
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 fd68 	bl	800a80c <__multadd>
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	4606      	mov	r6, r0
 8009d40:	4650      	mov	r0, sl
 8009d42:	f000 ffc7 	bl	800acd4 <__mcmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f73f adbb 	bgt.w	80098c2 <_dtoa_r+0x4ca>
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4e:	9d00      	ldr	r5, [sp, #0]
 8009d50:	ea6f 0b03 	mvn.w	fp, r3
 8009d54:	f04f 0800 	mov.w	r8, #0
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fd34 	bl	800a7c8 <_Bfree>
 8009d60:	2f00      	cmp	r7, #0
 8009d62:	f43f aeab 	beq.w	8009abc <_dtoa_r+0x6c4>
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d005      	beq.n	8009d78 <_dtoa_r+0x980>
 8009d6c:	45b8      	cmp	r8, r7
 8009d6e:	d003      	beq.n	8009d78 <_dtoa_r+0x980>
 8009d70:	4641      	mov	r1, r8
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fd28 	bl	800a7c8 <_Bfree>
 8009d78:	4639      	mov	r1, r7
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fd24 	bl	800a7c8 <_Bfree>
 8009d80:	e69c      	b.n	8009abc <_dtoa_r+0x6c4>
 8009d82:	2600      	movs	r6, #0
 8009d84:	4637      	mov	r7, r6
 8009d86:	e7e1      	b.n	8009d4c <_dtoa_r+0x954>
 8009d88:	46bb      	mov	fp, r7
 8009d8a:	4637      	mov	r7, r6
 8009d8c:	e599      	b.n	80098c2 <_dtoa_r+0x4ca>
 8009d8e:	bf00      	nop
 8009d90:	40240000 	.word	0x40240000
 8009d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 80c8 	beq.w	8009f2c <_dtoa_r+0xb34>
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	dd05      	ble.n	8009db0 <_dtoa_r+0x9b8>
 8009da4:	4639      	mov	r1, r7
 8009da6:	462a      	mov	r2, r5
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 ff27 	bl	800abfc <__lshift>
 8009dae:	4607      	mov	r7, r0
 8009db0:	f1b8 0f00 	cmp.w	r8, #0
 8009db4:	d05b      	beq.n	8009e6e <_dtoa_r+0xa76>
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fcc5 	bl	800a748 <_Balloc>
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	b928      	cbnz	r0, 8009dce <_dtoa_r+0x9d6>
 8009dc2:	4b83      	ldr	r3, [pc, #524]	; (8009fd0 <_dtoa_r+0xbd8>)
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009dca:	f7ff bb2e 	b.w	800942a <_dtoa_r+0x32>
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	3202      	adds	r2, #2
 8009dd2:	0092      	lsls	r2, r2, #2
 8009dd4:	f107 010c 	add.w	r1, r7, #12
 8009dd8:	300c      	adds	r0, #12
 8009dda:	f7ff fa4a 	bl	8009272 <memcpy>
 8009dde:	2201      	movs	r2, #1
 8009de0:	4629      	mov	r1, r5
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 ff0a 	bl	800abfc <__lshift>
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009df2:	4413      	add	r3, r2
 8009df4:	9308      	str	r3, [sp, #32]
 8009df6:	9b02      	ldr	r3, [sp, #8]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	46b8      	mov	r8, r7
 8009dfe:	9306      	str	r3, [sp, #24]
 8009e00:	4607      	mov	r7, r0
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	4631      	mov	r1, r6
 8009e06:	3b01      	subs	r3, #1
 8009e08:	4650      	mov	r0, sl
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	f7ff fa6c 	bl	80092e8 <quorem>
 8009e10:	4641      	mov	r1, r8
 8009e12:	9002      	str	r0, [sp, #8]
 8009e14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e18:	4650      	mov	r0, sl
 8009e1a:	f000 ff5b 	bl	800acd4 <__mcmp>
 8009e1e:	463a      	mov	r2, r7
 8009e20:	9005      	str	r0, [sp, #20]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 ff71 	bl	800ad0c <__mdiff>
 8009e2a:	68c2      	ldr	r2, [r0, #12]
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	bb02      	cbnz	r2, 8009e72 <_dtoa_r+0xa7a>
 8009e30:	4601      	mov	r1, r0
 8009e32:	4650      	mov	r0, sl
 8009e34:	f000 ff4e 	bl	800acd4 <__mcmp>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009e40:	f000 fcc2 	bl	800a7c8 <_Bfree>
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e48:	9d04      	ldr	r5, [sp, #16]
 8009e4a:	ea43 0102 	orr.w	r1, r3, r2
 8009e4e:	9b06      	ldr	r3, [sp, #24]
 8009e50:	4319      	orrs	r1, r3
 8009e52:	d110      	bne.n	8009e76 <_dtoa_r+0xa7e>
 8009e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e58:	d029      	beq.n	8009eae <_dtoa_r+0xab6>
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd02      	ble.n	8009e66 <_dtoa_r+0xa6e>
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	f883 9000 	strb.w	r9, [r3]
 8009e6c:	e774      	b.n	8009d58 <_dtoa_r+0x960>
 8009e6e:	4638      	mov	r0, r7
 8009e70:	e7ba      	b.n	8009de8 <_dtoa_r+0x9f0>
 8009e72:	2201      	movs	r2, #1
 8009e74:	e7e1      	b.n	8009e3a <_dtoa_r+0xa42>
 8009e76:	9b05      	ldr	r3, [sp, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	db04      	blt.n	8009e86 <_dtoa_r+0xa8e>
 8009e7c:	9907      	ldr	r1, [sp, #28]
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	9906      	ldr	r1, [sp, #24]
 8009e82:	430b      	orrs	r3, r1
 8009e84:	d120      	bne.n	8009ec8 <_dtoa_r+0xad0>
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	dded      	ble.n	8009e66 <_dtoa_r+0xa6e>
 8009e8a:	4651      	mov	r1, sl
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 feb4 	bl	800abfc <__lshift>
 8009e94:	4631      	mov	r1, r6
 8009e96:	4682      	mov	sl, r0
 8009e98:	f000 ff1c 	bl	800acd4 <__mcmp>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	dc03      	bgt.n	8009ea8 <_dtoa_r+0xab0>
 8009ea0:	d1e1      	bne.n	8009e66 <_dtoa_r+0xa6e>
 8009ea2:	f019 0f01 	tst.w	r9, #1
 8009ea6:	d0de      	beq.n	8009e66 <_dtoa_r+0xa6e>
 8009ea8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009eac:	d1d8      	bne.n	8009e60 <_dtoa_r+0xa68>
 8009eae:	9a01      	ldr	r2, [sp, #4]
 8009eb0:	2339      	movs	r3, #57	; 0x39
 8009eb2:	7013      	strb	r3, [r2, #0]
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ebe:	2a39      	cmp	r2, #57	; 0x39
 8009ec0:	d06c      	beq.n	8009f9c <_dtoa_r+0xba4>
 8009ec2:	3201      	adds	r2, #1
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	e747      	b.n	8009d58 <_dtoa_r+0x960>
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	dd07      	ble.n	8009edc <_dtoa_r+0xae4>
 8009ecc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ed0:	d0ed      	beq.n	8009eae <_dtoa_r+0xab6>
 8009ed2:	9a01      	ldr	r2, [sp, #4]
 8009ed4:	f109 0301 	add.w	r3, r9, #1
 8009ed8:	7013      	strb	r3, [r2, #0]
 8009eda:	e73d      	b.n	8009d58 <_dtoa_r+0x960>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	9a08      	ldr	r2, [sp, #32]
 8009ee0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d043      	beq.n	8009f70 <_dtoa_r+0xb78>
 8009ee8:	4651      	mov	r1, sl
 8009eea:	2300      	movs	r3, #0
 8009eec:	220a      	movs	r2, #10
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fc8c 	bl	800a80c <__multadd>
 8009ef4:	45b8      	cmp	r8, r7
 8009ef6:	4682      	mov	sl, r0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	f04f 020a 	mov.w	r2, #10
 8009f00:	4641      	mov	r1, r8
 8009f02:	4620      	mov	r0, r4
 8009f04:	d107      	bne.n	8009f16 <_dtoa_r+0xb1e>
 8009f06:	f000 fc81 	bl	800a80c <__multadd>
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	3301      	adds	r3, #1
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	e775      	b.n	8009e02 <_dtoa_r+0xa0a>
 8009f16:	f000 fc79 	bl	800a80c <__multadd>
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	2300      	movs	r3, #0
 8009f20:	220a      	movs	r2, #10
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fc72 	bl	800a80c <__multadd>
 8009f28:	4607      	mov	r7, r0
 8009f2a:	e7f0      	b.n	8009f0e <_dtoa_r+0xb16>
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	9d00      	ldr	r5, [sp, #0]
 8009f32:	4631      	mov	r1, r6
 8009f34:	4650      	mov	r0, sl
 8009f36:	f7ff f9d7 	bl	80092e8 <quorem>
 8009f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	f805 9b01 	strb.w	r9, [r5], #1
 8009f44:	1aea      	subs	r2, r5, r3
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	dd07      	ble.n	8009f5c <_dtoa_r+0xb64>
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	2300      	movs	r3, #0
 8009f50:	220a      	movs	r2, #10
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fc5a 	bl	800a80c <__multadd>
 8009f58:	4682      	mov	sl, r0
 8009f5a:	e7ea      	b.n	8009f32 <_dtoa_r+0xb3a>
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfc8      	it	gt
 8009f62:	461d      	movgt	r5, r3
 8009f64:	9b00      	ldr	r3, [sp, #0]
 8009f66:	bfd8      	it	le
 8009f68:	2501      	movle	r5, #1
 8009f6a:	441d      	add	r5, r3
 8009f6c:	f04f 0800 	mov.w	r8, #0
 8009f70:	4651      	mov	r1, sl
 8009f72:	2201      	movs	r2, #1
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fe41 	bl	800abfc <__lshift>
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	f000 fea9 	bl	800acd4 <__mcmp>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	dc96      	bgt.n	8009eb4 <_dtoa_r+0xabc>
 8009f86:	d102      	bne.n	8009f8e <_dtoa_r+0xb96>
 8009f88:	f019 0f01 	tst.w	r9, #1
 8009f8c:	d192      	bne.n	8009eb4 <_dtoa_r+0xabc>
 8009f8e:	462b      	mov	r3, r5
 8009f90:	461d      	mov	r5, r3
 8009f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f96:	2a30      	cmp	r2, #48	; 0x30
 8009f98:	d0fa      	beq.n	8009f90 <_dtoa_r+0xb98>
 8009f9a:	e6dd      	b.n	8009d58 <_dtoa_r+0x960>
 8009f9c:	9a00      	ldr	r2, [sp, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d189      	bne.n	8009eb6 <_dtoa_r+0xabe>
 8009fa2:	f10b 0b01 	add.w	fp, fp, #1
 8009fa6:	2331      	movs	r3, #49	; 0x31
 8009fa8:	e796      	b.n	8009ed8 <_dtoa_r+0xae0>
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <_dtoa_r+0xbdc>)
 8009fac:	f7ff ba99 	b.w	80094e2 <_dtoa_r+0xea>
 8009fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f47f aa6d 	bne.w	8009492 <_dtoa_r+0x9a>
 8009fb8:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <_dtoa_r+0xbe0>)
 8009fba:	f7ff ba92 	b.w	80094e2 <_dtoa_r+0xea>
 8009fbe:	9b01      	ldr	r3, [sp, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dcb5      	bgt.n	8009f30 <_dtoa_r+0xb38>
 8009fc4:	9b07      	ldr	r3, [sp, #28]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	f73f aeb1 	bgt.w	8009d2e <_dtoa_r+0x936>
 8009fcc:	e7b0      	b.n	8009f30 <_dtoa_r+0xb38>
 8009fce:	bf00      	nop
 8009fd0:	0800bf4b 	.word	0x0800bf4b
 8009fd4:	0800be08 	.word	0x0800be08
 8009fd8:	0800bee6 	.word	0x0800bee6

08009fdc <_free_r>:
 8009fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	d044      	beq.n	800a06c <_free_r+0x90>
 8009fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe6:	9001      	str	r0, [sp, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f1a1 0404 	sub.w	r4, r1, #4
 8009fee:	bfb8      	it	lt
 8009ff0:	18e4      	addlt	r4, r4, r3
 8009ff2:	f7fd f901 	bl	80071f8 <__malloc_lock>
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <_free_r+0x94>)
 8009ff8:	9801      	ldr	r0, [sp, #4]
 8009ffa:	6813      	ldr	r3, [r2, #0]
 8009ffc:	b933      	cbnz	r3, 800a00c <_free_r+0x30>
 8009ffe:	6063      	str	r3, [r4, #4]
 800a000:	6014      	str	r4, [r2, #0]
 800a002:	b003      	add	sp, #12
 800a004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a008:	f7fd b8fc 	b.w	8007204 <__malloc_unlock>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d908      	bls.n	800a022 <_free_r+0x46>
 800a010:	6825      	ldr	r5, [r4, #0]
 800a012:	1961      	adds	r1, r4, r5
 800a014:	428b      	cmp	r3, r1
 800a016:	bf01      	itttt	eq
 800a018:	6819      	ldreq	r1, [r3, #0]
 800a01a:	685b      	ldreq	r3, [r3, #4]
 800a01c:	1949      	addeq	r1, r1, r5
 800a01e:	6021      	streq	r1, [r4, #0]
 800a020:	e7ed      	b.n	8009ffe <_free_r+0x22>
 800a022:	461a      	mov	r2, r3
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	b10b      	cbz	r3, 800a02c <_free_r+0x50>
 800a028:	42a3      	cmp	r3, r4
 800a02a:	d9fa      	bls.n	800a022 <_free_r+0x46>
 800a02c:	6811      	ldr	r1, [r2, #0]
 800a02e:	1855      	adds	r5, r2, r1
 800a030:	42a5      	cmp	r5, r4
 800a032:	d10b      	bne.n	800a04c <_free_r+0x70>
 800a034:	6824      	ldr	r4, [r4, #0]
 800a036:	4421      	add	r1, r4
 800a038:	1854      	adds	r4, r2, r1
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	6011      	str	r1, [r2, #0]
 800a03e:	d1e0      	bne.n	800a002 <_free_r+0x26>
 800a040:	681c      	ldr	r4, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	6053      	str	r3, [r2, #4]
 800a046:	440c      	add	r4, r1
 800a048:	6014      	str	r4, [r2, #0]
 800a04a:	e7da      	b.n	800a002 <_free_r+0x26>
 800a04c:	d902      	bls.n	800a054 <_free_r+0x78>
 800a04e:	230c      	movs	r3, #12
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	e7d6      	b.n	800a002 <_free_r+0x26>
 800a054:	6825      	ldr	r5, [r4, #0]
 800a056:	1961      	adds	r1, r4, r5
 800a058:	428b      	cmp	r3, r1
 800a05a:	bf04      	itt	eq
 800a05c:	6819      	ldreq	r1, [r3, #0]
 800a05e:	685b      	ldreq	r3, [r3, #4]
 800a060:	6063      	str	r3, [r4, #4]
 800a062:	bf04      	itt	eq
 800a064:	1949      	addeq	r1, r1, r5
 800a066:	6021      	streq	r1, [r4, #0]
 800a068:	6054      	str	r4, [r2, #4]
 800a06a:	e7ca      	b.n	800a002 <_free_r+0x26>
 800a06c:	b003      	add	sp, #12
 800a06e:	bd30      	pop	{r4, r5, pc}
 800a070:	20000530 	.word	0x20000530

0800a074 <rshift>:
 800a074:	6903      	ldr	r3, [r0, #16]
 800a076:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a07a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a07e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a082:	f100 0414 	add.w	r4, r0, #20
 800a086:	dd45      	ble.n	800a114 <rshift+0xa0>
 800a088:	f011 011f 	ands.w	r1, r1, #31
 800a08c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a090:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a094:	d10c      	bne.n	800a0b0 <rshift+0x3c>
 800a096:	f100 0710 	add.w	r7, r0, #16
 800a09a:	4629      	mov	r1, r5
 800a09c:	42b1      	cmp	r1, r6
 800a09e:	d334      	bcc.n	800a10a <rshift+0x96>
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	1eea      	subs	r2, r5, #3
 800a0a6:	4296      	cmp	r6, r2
 800a0a8:	bf38      	it	cc
 800a0aa:	2300      	movcc	r3, #0
 800a0ac:	4423      	add	r3, r4
 800a0ae:	e015      	b.n	800a0dc <rshift+0x68>
 800a0b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0b4:	f1c1 0820 	rsb	r8, r1, #32
 800a0b8:	40cf      	lsrs	r7, r1
 800a0ba:	f105 0e04 	add.w	lr, r5, #4
 800a0be:	46a1      	mov	r9, r4
 800a0c0:	4576      	cmp	r6, lr
 800a0c2:	46f4      	mov	ip, lr
 800a0c4:	d815      	bhi.n	800a0f2 <rshift+0x7e>
 800a0c6:	1a9a      	subs	r2, r3, r2
 800a0c8:	0092      	lsls	r2, r2, #2
 800a0ca:	3a04      	subs	r2, #4
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	42ae      	cmp	r6, r5
 800a0d0:	bf38      	it	cc
 800a0d2:	2200      	movcc	r2, #0
 800a0d4:	18a3      	adds	r3, r4, r2
 800a0d6:	50a7      	str	r7, [r4, r2]
 800a0d8:	b107      	cbz	r7, 800a0dc <rshift+0x68>
 800a0da:	3304      	adds	r3, #4
 800a0dc:	1b1a      	subs	r2, r3, r4
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0e4:	bf08      	it	eq
 800a0e6:	2300      	moveq	r3, #0
 800a0e8:	6102      	str	r2, [r0, #16]
 800a0ea:	bf08      	it	eq
 800a0ec:	6143      	streq	r3, [r0, #20]
 800a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	f8dc c000 	ldr.w	ip, [ip]
 800a0f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0fa:	ea4c 0707 	orr.w	r7, ip, r7
 800a0fe:	f849 7b04 	str.w	r7, [r9], #4
 800a102:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a106:	40cf      	lsrs	r7, r1
 800a108:	e7da      	b.n	800a0c0 <rshift+0x4c>
 800a10a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a10e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a112:	e7c3      	b.n	800a09c <rshift+0x28>
 800a114:	4623      	mov	r3, r4
 800a116:	e7e1      	b.n	800a0dc <rshift+0x68>

0800a118 <__hexdig_fun>:
 800a118:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a11c:	2b09      	cmp	r3, #9
 800a11e:	d802      	bhi.n	800a126 <__hexdig_fun+0xe>
 800a120:	3820      	subs	r0, #32
 800a122:	b2c0      	uxtb	r0, r0
 800a124:	4770      	bx	lr
 800a126:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d801      	bhi.n	800a132 <__hexdig_fun+0x1a>
 800a12e:	3847      	subs	r0, #71	; 0x47
 800a130:	e7f7      	b.n	800a122 <__hexdig_fun+0xa>
 800a132:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a136:	2b05      	cmp	r3, #5
 800a138:	d801      	bhi.n	800a13e <__hexdig_fun+0x26>
 800a13a:	3827      	subs	r0, #39	; 0x27
 800a13c:	e7f1      	b.n	800a122 <__hexdig_fun+0xa>
 800a13e:	2000      	movs	r0, #0
 800a140:	4770      	bx	lr
	...

0800a144 <__gethex>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4617      	mov	r7, r2
 800a14a:	680a      	ldr	r2, [r1, #0]
 800a14c:	b085      	sub	sp, #20
 800a14e:	f102 0b02 	add.w	fp, r2, #2
 800a152:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a156:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a15a:	4681      	mov	r9, r0
 800a15c:	468a      	mov	sl, r1
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	32fe      	adds	r2, #254	; 0xfe
 800a162:	eb02 030b 	add.w	r3, r2, fp
 800a166:	46d8      	mov	r8, fp
 800a168:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	2830      	cmp	r0, #48	; 0x30
 800a170:	d0f7      	beq.n	800a162 <__gethex+0x1e>
 800a172:	f7ff ffd1 	bl	800a118 <__hexdig_fun>
 800a176:	4604      	mov	r4, r0
 800a178:	2800      	cmp	r0, #0
 800a17a:	d138      	bne.n	800a1ee <__gethex+0xaa>
 800a17c:	49a7      	ldr	r1, [pc, #668]	; (800a41c <__gethex+0x2d8>)
 800a17e:	2201      	movs	r2, #1
 800a180:	4640      	mov	r0, r8
 800a182:	f7fe ff80 	bl	8009086 <strncmp>
 800a186:	4606      	mov	r6, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	d169      	bne.n	800a260 <__gethex+0x11c>
 800a18c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a190:	465d      	mov	r5, fp
 800a192:	f7ff ffc1 	bl	800a118 <__hexdig_fun>
 800a196:	2800      	cmp	r0, #0
 800a198:	d064      	beq.n	800a264 <__gethex+0x120>
 800a19a:	465a      	mov	r2, fp
 800a19c:	7810      	ldrb	r0, [r2, #0]
 800a19e:	2830      	cmp	r0, #48	; 0x30
 800a1a0:	4690      	mov	r8, r2
 800a1a2:	f102 0201 	add.w	r2, r2, #1
 800a1a6:	d0f9      	beq.n	800a19c <__gethex+0x58>
 800a1a8:	f7ff ffb6 	bl	800a118 <__hexdig_fun>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	fab0 f480 	clz	r4, r0
 800a1b2:	0964      	lsrs	r4, r4, #5
 800a1b4:	465e      	mov	r6, fp
 800a1b6:	9301      	str	r3, [sp, #4]
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	4615      	mov	r5, r2
 800a1bc:	3201      	adds	r2, #1
 800a1be:	7828      	ldrb	r0, [r5, #0]
 800a1c0:	f7ff ffaa 	bl	800a118 <__hexdig_fun>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1f8      	bne.n	800a1ba <__gethex+0x76>
 800a1c8:	4994      	ldr	r1, [pc, #592]	; (800a41c <__gethex+0x2d8>)
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7fe ff5a 	bl	8009086 <strncmp>
 800a1d2:	b978      	cbnz	r0, 800a1f4 <__gethex+0xb0>
 800a1d4:	b946      	cbnz	r6, 800a1e8 <__gethex+0xa4>
 800a1d6:	1c6e      	adds	r6, r5, #1
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4615      	mov	r5, r2
 800a1dc:	3201      	adds	r2, #1
 800a1de:	7828      	ldrb	r0, [r5, #0]
 800a1e0:	f7ff ff9a 	bl	800a118 <__hexdig_fun>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d1f8      	bne.n	800a1da <__gethex+0x96>
 800a1e8:	1b73      	subs	r3, r6, r5
 800a1ea:	009e      	lsls	r6, r3, #2
 800a1ec:	e004      	b.n	800a1f8 <__gethex+0xb4>
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	4626      	mov	r6, r4
 800a1f2:	e7e1      	b.n	800a1b8 <__gethex+0x74>
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	d1f7      	bne.n	800a1e8 <__gethex+0xa4>
 800a1f8:	782b      	ldrb	r3, [r5, #0]
 800a1fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1fe:	2b50      	cmp	r3, #80	; 0x50
 800a200:	d13d      	bne.n	800a27e <__gethex+0x13a>
 800a202:	786b      	ldrb	r3, [r5, #1]
 800a204:	2b2b      	cmp	r3, #43	; 0x2b
 800a206:	d02f      	beq.n	800a268 <__gethex+0x124>
 800a208:	2b2d      	cmp	r3, #45	; 0x2d
 800a20a:	d031      	beq.n	800a270 <__gethex+0x12c>
 800a20c:	1c69      	adds	r1, r5, #1
 800a20e:	f04f 0b00 	mov.w	fp, #0
 800a212:	7808      	ldrb	r0, [r1, #0]
 800a214:	f7ff ff80 	bl	800a118 <__hexdig_fun>
 800a218:	1e42      	subs	r2, r0, #1
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	2a18      	cmp	r2, #24
 800a21e:	d82e      	bhi.n	800a27e <__gethex+0x13a>
 800a220:	f1a0 0210 	sub.w	r2, r0, #16
 800a224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a228:	f7ff ff76 	bl	800a118 <__hexdig_fun>
 800a22c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a230:	fa5f fc8c 	uxtb.w	ip, ip
 800a234:	f1bc 0f18 	cmp.w	ip, #24
 800a238:	d91d      	bls.n	800a276 <__gethex+0x132>
 800a23a:	f1bb 0f00 	cmp.w	fp, #0
 800a23e:	d000      	beq.n	800a242 <__gethex+0xfe>
 800a240:	4252      	negs	r2, r2
 800a242:	4416      	add	r6, r2
 800a244:	f8ca 1000 	str.w	r1, [sl]
 800a248:	b1dc      	cbz	r4, 800a282 <__gethex+0x13e>
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bf14      	ite	ne
 800a250:	f04f 0800 	movne.w	r8, #0
 800a254:	f04f 0806 	moveq.w	r8, #6
 800a258:	4640      	mov	r0, r8
 800a25a:	b005      	add	sp, #20
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	4645      	mov	r5, r8
 800a262:	4626      	mov	r6, r4
 800a264:	2401      	movs	r4, #1
 800a266:	e7c7      	b.n	800a1f8 <__gethex+0xb4>
 800a268:	f04f 0b00 	mov.w	fp, #0
 800a26c:	1ca9      	adds	r1, r5, #2
 800a26e:	e7d0      	b.n	800a212 <__gethex+0xce>
 800a270:	f04f 0b01 	mov.w	fp, #1
 800a274:	e7fa      	b.n	800a26c <__gethex+0x128>
 800a276:	230a      	movs	r3, #10
 800a278:	fb03 0002 	mla	r0, r3, r2, r0
 800a27c:	e7d0      	b.n	800a220 <__gethex+0xdc>
 800a27e:	4629      	mov	r1, r5
 800a280:	e7e0      	b.n	800a244 <__gethex+0x100>
 800a282:	eba5 0308 	sub.w	r3, r5, r8
 800a286:	3b01      	subs	r3, #1
 800a288:	4621      	mov	r1, r4
 800a28a:	2b07      	cmp	r3, #7
 800a28c:	dc0a      	bgt.n	800a2a4 <__gethex+0x160>
 800a28e:	4648      	mov	r0, r9
 800a290:	f000 fa5a 	bl	800a748 <_Balloc>
 800a294:	4604      	mov	r4, r0
 800a296:	b940      	cbnz	r0, 800a2aa <__gethex+0x166>
 800a298:	4b61      	ldr	r3, [pc, #388]	; (800a420 <__gethex+0x2dc>)
 800a29a:	4602      	mov	r2, r0
 800a29c:	21e4      	movs	r1, #228	; 0xe4
 800a29e:	4861      	ldr	r0, [pc, #388]	; (800a424 <__gethex+0x2e0>)
 800a2a0:	f7ff f804 	bl	80092ac <__assert_func>
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	105b      	asrs	r3, r3, #1
 800a2a8:	e7ef      	b.n	800a28a <__gethex+0x146>
 800a2aa:	f100 0a14 	add.w	sl, r0, #20
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	495a      	ldr	r1, [pc, #360]	; (800a41c <__gethex+0x2d8>)
 800a2b2:	f8cd a004 	str.w	sl, [sp, #4]
 800a2b6:	469b      	mov	fp, r3
 800a2b8:	45a8      	cmp	r8, r5
 800a2ba:	d342      	bcc.n	800a342 <__gethex+0x1fe>
 800a2bc:	9801      	ldr	r0, [sp, #4]
 800a2be:	f840 bb04 	str.w	fp, [r0], #4
 800a2c2:	eba0 000a 	sub.w	r0, r0, sl
 800a2c6:	1080      	asrs	r0, r0, #2
 800a2c8:	6120      	str	r0, [r4, #16]
 800a2ca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a2ce:	4658      	mov	r0, fp
 800a2d0:	f000 fb2c 	bl	800a92c <__hi0bits>
 800a2d4:	683d      	ldr	r5, [r7, #0]
 800a2d6:	eba8 0000 	sub.w	r0, r8, r0
 800a2da:	42a8      	cmp	r0, r5
 800a2dc:	dd59      	ble.n	800a392 <__gethex+0x24e>
 800a2de:	eba0 0805 	sub.w	r8, r0, r5
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 febb 	bl	800b060 <__any_on>
 800a2ea:	4683      	mov	fp, r0
 800a2ec:	b1b8      	cbz	r0, 800a31e <__gethex+0x1da>
 800a2ee:	f108 33ff 	add.w	r3, r8, #4294967295
 800a2f2:	1159      	asrs	r1, r3, #5
 800a2f4:	f003 021f 	and.w	r2, r3, #31
 800a2f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2fc:	f04f 0b01 	mov.w	fp, #1
 800a300:	fa0b f202 	lsl.w	r2, fp, r2
 800a304:	420a      	tst	r2, r1
 800a306:	d00a      	beq.n	800a31e <__gethex+0x1da>
 800a308:	455b      	cmp	r3, fp
 800a30a:	dd06      	ble.n	800a31a <__gethex+0x1d6>
 800a30c:	f1a8 0102 	sub.w	r1, r8, #2
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fea5 	bl	800b060 <__any_on>
 800a316:	2800      	cmp	r0, #0
 800a318:	d138      	bne.n	800a38c <__gethex+0x248>
 800a31a:	f04f 0b02 	mov.w	fp, #2
 800a31e:	4641      	mov	r1, r8
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff fea7 	bl	800a074 <rshift>
 800a326:	4446      	add	r6, r8
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	42b3      	cmp	r3, r6
 800a32c:	da41      	bge.n	800a3b2 <__gethex+0x26e>
 800a32e:	4621      	mov	r1, r4
 800a330:	4648      	mov	r0, r9
 800a332:	f000 fa49 	bl	800a7c8 <_Bfree>
 800a336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a338:	2300      	movs	r3, #0
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a340:	e78a      	b.n	800a258 <__gethex+0x114>
 800a342:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a346:	2a2e      	cmp	r2, #46	; 0x2e
 800a348:	d014      	beq.n	800a374 <__gethex+0x230>
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d106      	bne.n	800a35c <__gethex+0x218>
 800a34e:	9b01      	ldr	r3, [sp, #4]
 800a350:	f843 bb04 	str.w	fp, [r3], #4
 800a354:	f04f 0b00 	mov.w	fp, #0
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	465b      	mov	r3, fp
 800a35c:	7828      	ldrb	r0, [r5, #0]
 800a35e:	9303      	str	r3, [sp, #12]
 800a360:	f7ff feda 	bl	800a118 <__hexdig_fun>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	f000 000f 	and.w	r0, r0, #15
 800a36a:	4098      	lsls	r0, r3
 800a36c:	ea4b 0b00 	orr.w	fp, fp, r0
 800a370:	3304      	adds	r3, #4
 800a372:	e7a1      	b.n	800a2b8 <__gethex+0x174>
 800a374:	45a8      	cmp	r8, r5
 800a376:	d8e8      	bhi.n	800a34a <__gethex+0x206>
 800a378:	2201      	movs	r2, #1
 800a37a:	4628      	mov	r0, r5
 800a37c:	9303      	str	r3, [sp, #12]
 800a37e:	f7fe fe82 	bl	8009086 <strncmp>
 800a382:	4926      	ldr	r1, [pc, #152]	; (800a41c <__gethex+0x2d8>)
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	2800      	cmp	r0, #0
 800a388:	d1df      	bne.n	800a34a <__gethex+0x206>
 800a38a:	e795      	b.n	800a2b8 <__gethex+0x174>
 800a38c:	f04f 0b03 	mov.w	fp, #3
 800a390:	e7c5      	b.n	800a31e <__gethex+0x1da>
 800a392:	da0b      	bge.n	800a3ac <__gethex+0x268>
 800a394:	eba5 0800 	sub.w	r8, r5, r0
 800a398:	4621      	mov	r1, r4
 800a39a:	4642      	mov	r2, r8
 800a39c:	4648      	mov	r0, r9
 800a39e:	f000 fc2d 	bl	800abfc <__lshift>
 800a3a2:	eba6 0608 	sub.w	r6, r6, r8
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	f100 0a14 	add.w	sl, r0, #20
 800a3ac:	f04f 0b00 	mov.w	fp, #0
 800a3b0:	e7ba      	b.n	800a328 <__gethex+0x1e4>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	dd73      	ble.n	800a4a0 <__gethex+0x35c>
 800a3b8:	1b9e      	subs	r6, r3, r6
 800a3ba:	42b5      	cmp	r5, r6
 800a3bc:	dc34      	bgt.n	800a428 <__gethex+0x2e4>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d023      	beq.n	800a40c <__gethex+0x2c8>
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d025      	beq.n	800a414 <__gethex+0x2d0>
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d115      	bne.n	800a3f8 <__gethex+0x2b4>
 800a3cc:	42b5      	cmp	r5, r6
 800a3ce:	d113      	bne.n	800a3f8 <__gethex+0x2b4>
 800a3d0:	2d01      	cmp	r5, #1
 800a3d2:	d10b      	bne.n	800a3ec <__gethex+0x2a8>
 800a3d4:	9a02      	ldr	r2, [sp, #8]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	2301      	movs	r3, #1
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	f8ca 3000 	str.w	r3, [sl]
 800a3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a3e8:	601c      	str	r4, [r3, #0]
 800a3ea:	e735      	b.n	800a258 <__gethex+0x114>
 800a3ec:	1e69      	subs	r1, r5, #1
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 fe36 	bl	800b060 <__any_on>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d1ed      	bne.n	800a3d4 <__gethex+0x290>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	f000 f9e4 	bl	800a7c8 <_Bfree>
 800a400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a402:	2300      	movs	r3, #0
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a40a:	e725      	b.n	800a258 <__gethex+0x114>
 800a40c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f2      	bne.n	800a3f8 <__gethex+0x2b4>
 800a412:	e7df      	b.n	800a3d4 <__gethex+0x290>
 800a414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1dc      	bne.n	800a3d4 <__gethex+0x290>
 800a41a:	e7ed      	b.n	800a3f8 <__gethex+0x2b4>
 800a41c:	0800bda0 	.word	0x0800bda0
 800a420:	0800bf4b 	.word	0x0800bf4b
 800a424:	0800bf5c 	.word	0x0800bf5c
 800a428:	f106 38ff 	add.w	r8, r6, #4294967295
 800a42c:	f1bb 0f00 	cmp.w	fp, #0
 800a430:	d133      	bne.n	800a49a <__gethex+0x356>
 800a432:	f1b8 0f00 	cmp.w	r8, #0
 800a436:	d004      	beq.n	800a442 <__gethex+0x2fe>
 800a438:	4641      	mov	r1, r8
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 fe10 	bl	800b060 <__any_on>
 800a440:	4683      	mov	fp, r0
 800a442:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a446:	2301      	movs	r3, #1
 800a448:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a44c:	f008 081f 	and.w	r8, r8, #31
 800a450:	fa03 f308 	lsl.w	r3, r3, r8
 800a454:	4213      	tst	r3, r2
 800a456:	4631      	mov	r1, r6
 800a458:	4620      	mov	r0, r4
 800a45a:	bf18      	it	ne
 800a45c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a460:	1bad      	subs	r5, r5, r6
 800a462:	f7ff fe07 	bl	800a074 <rshift>
 800a466:	687e      	ldr	r6, [r7, #4]
 800a468:	f04f 0802 	mov.w	r8, #2
 800a46c:	f1bb 0f00 	cmp.w	fp, #0
 800a470:	d04a      	beq.n	800a508 <__gethex+0x3c4>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d016      	beq.n	800a4a6 <__gethex+0x362>
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d018      	beq.n	800a4ae <__gethex+0x36a>
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d109      	bne.n	800a494 <__gethex+0x350>
 800a480:	f01b 0f02 	tst.w	fp, #2
 800a484:	d006      	beq.n	800a494 <__gethex+0x350>
 800a486:	f8da 3000 	ldr.w	r3, [sl]
 800a48a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a48e:	f01b 0f01 	tst.w	fp, #1
 800a492:	d10f      	bne.n	800a4b4 <__gethex+0x370>
 800a494:	f048 0810 	orr.w	r8, r8, #16
 800a498:	e036      	b.n	800a508 <__gethex+0x3c4>
 800a49a:	f04f 0b01 	mov.w	fp, #1
 800a49e:	e7d0      	b.n	800a442 <__gethex+0x2fe>
 800a4a0:	f04f 0801 	mov.w	r8, #1
 800a4a4:	e7e2      	b.n	800a46c <__gethex+0x328>
 800a4a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a8:	f1c3 0301 	rsb	r3, r3, #1
 800a4ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0ef      	beq.n	800a494 <__gethex+0x350>
 800a4b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4b8:	f104 0214 	add.w	r2, r4, #20
 800a4bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4694      	mov	ip, r2
 800a4ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a4d2:	d01e      	beq.n	800a512 <__gethex+0x3ce>
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	f8cc 1000 	str.w	r1, [ip]
 800a4da:	f1b8 0f02 	cmp.w	r8, #2
 800a4de:	f104 0214 	add.w	r2, r4, #20
 800a4e2:	d13d      	bne.n	800a560 <__gethex+0x41c>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	42ab      	cmp	r3, r5
 800a4ea:	d10b      	bne.n	800a504 <__gethex+0x3c0>
 800a4ec:	1169      	asrs	r1, r5, #5
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	f005 051f 	and.w	r5, r5, #31
 800a4f4:	fa03 f505 	lsl.w	r5, r3, r5
 800a4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4fc:	421d      	tst	r5, r3
 800a4fe:	bf18      	it	ne
 800a500:	f04f 0801 	movne.w	r8, #1
 800a504:	f048 0820 	orr.w	r8, r8, #32
 800a508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a50a:	601c      	str	r4, [r3, #0]
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	601e      	str	r6, [r3, #0]
 800a510:	e6a2      	b.n	800a258 <__gethex+0x114>
 800a512:	4290      	cmp	r0, r2
 800a514:	f842 3c04 	str.w	r3, [r2, #-4]
 800a518:	d8d6      	bhi.n	800a4c8 <__gethex+0x384>
 800a51a:	68a2      	ldr	r2, [r4, #8]
 800a51c:	4593      	cmp	fp, r2
 800a51e:	db17      	blt.n	800a550 <__gethex+0x40c>
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	4648      	mov	r0, r9
 800a524:	3101      	adds	r1, #1
 800a526:	f000 f90f 	bl	800a748 <_Balloc>
 800a52a:	4682      	mov	sl, r0
 800a52c:	b918      	cbnz	r0, 800a536 <__gethex+0x3f2>
 800a52e:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <__gethex+0x458>)
 800a530:	4602      	mov	r2, r0
 800a532:	2184      	movs	r1, #132	; 0x84
 800a534:	e6b3      	b.n	800a29e <__gethex+0x15a>
 800a536:	6922      	ldr	r2, [r4, #16]
 800a538:	3202      	adds	r2, #2
 800a53a:	f104 010c 	add.w	r1, r4, #12
 800a53e:	0092      	lsls	r2, r2, #2
 800a540:	300c      	adds	r0, #12
 800a542:	f7fe fe96 	bl	8009272 <memcpy>
 800a546:	4621      	mov	r1, r4
 800a548:	4648      	mov	r0, r9
 800a54a:	f000 f93d 	bl	800a7c8 <_Bfree>
 800a54e:	4654      	mov	r4, sl
 800a550:	6922      	ldr	r2, [r4, #16]
 800a552:	1c51      	adds	r1, r2, #1
 800a554:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a558:	6121      	str	r1, [r4, #16]
 800a55a:	2101      	movs	r1, #1
 800a55c:	6151      	str	r1, [r2, #20]
 800a55e:	e7bc      	b.n	800a4da <__gethex+0x396>
 800a560:	6921      	ldr	r1, [r4, #16]
 800a562:	4559      	cmp	r1, fp
 800a564:	dd0b      	ble.n	800a57e <__gethex+0x43a>
 800a566:	2101      	movs	r1, #1
 800a568:	4620      	mov	r0, r4
 800a56a:	f7ff fd83 	bl	800a074 <rshift>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	3601      	adds	r6, #1
 800a572:	42b3      	cmp	r3, r6
 800a574:	f6ff aedb 	blt.w	800a32e <__gethex+0x1ea>
 800a578:	f04f 0801 	mov.w	r8, #1
 800a57c:	e7c2      	b.n	800a504 <__gethex+0x3c0>
 800a57e:	f015 051f 	ands.w	r5, r5, #31
 800a582:	d0f9      	beq.n	800a578 <__gethex+0x434>
 800a584:	9b01      	ldr	r3, [sp, #4]
 800a586:	441a      	add	r2, r3
 800a588:	f1c5 0520 	rsb	r5, r5, #32
 800a58c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a590:	f000 f9cc 	bl	800a92c <__hi0bits>
 800a594:	42a8      	cmp	r0, r5
 800a596:	dbe6      	blt.n	800a566 <__gethex+0x422>
 800a598:	e7ee      	b.n	800a578 <__gethex+0x434>
 800a59a:	bf00      	nop
 800a59c:	0800bf4b 	.word	0x0800bf4b

0800a5a0 <L_shift>:
 800a5a0:	f1c2 0208 	rsb	r2, r2, #8
 800a5a4:	0092      	lsls	r2, r2, #2
 800a5a6:	b570      	push	{r4, r5, r6, lr}
 800a5a8:	f1c2 0620 	rsb	r6, r2, #32
 800a5ac:	6843      	ldr	r3, [r0, #4]
 800a5ae:	6804      	ldr	r4, [r0, #0]
 800a5b0:	fa03 f506 	lsl.w	r5, r3, r6
 800a5b4:	432c      	orrs	r4, r5
 800a5b6:	40d3      	lsrs	r3, r2
 800a5b8:	6004      	str	r4, [r0, #0]
 800a5ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5be:	4288      	cmp	r0, r1
 800a5c0:	d3f4      	bcc.n	800a5ac <L_shift+0xc>
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}

0800a5c4 <__match>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	6803      	ldr	r3, [r0, #0]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ce:	b914      	cbnz	r4, 800a5d6 <__match+0x12>
 800a5d0:	6003      	str	r3, [r0, #0]
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	bd30      	pop	{r4, r5, pc}
 800a5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5de:	2d19      	cmp	r5, #25
 800a5e0:	bf98      	it	ls
 800a5e2:	3220      	addls	r2, #32
 800a5e4:	42a2      	cmp	r2, r4
 800a5e6:	d0f0      	beq.n	800a5ca <__match+0x6>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e7f3      	b.n	800a5d4 <__match+0x10>

0800a5ec <__hexnan>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	680b      	ldr	r3, [r1, #0]
 800a5f2:	6801      	ldr	r1, [r0, #0]
 800a5f4:	115e      	asrs	r6, r3, #5
 800a5f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5fa:	f013 031f 	ands.w	r3, r3, #31
 800a5fe:	b087      	sub	sp, #28
 800a600:	bf18      	it	ne
 800a602:	3604      	addne	r6, #4
 800a604:	2500      	movs	r5, #0
 800a606:	1f37      	subs	r7, r6, #4
 800a608:	4682      	mov	sl, r0
 800a60a:	4690      	mov	r8, r2
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a612:	46b9      	mov	r9, r7
 800a614:	463c      	mov	r4, r7
 800a616:	9502      	str	r5, [sp, #8]
 800a618:	46ab      	mov	fp, r5
 800a61a:	784a      	ldrb	r2, [r1, #1]
 800a61c:	1c4b      	adds	r3, r1, #1
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	b342      	cbz	r2, 800a674 <__hexnan+0x88>
 800a622:	4610      	mov	r0, r2
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	9204      	str	r2, [sp, #16]
 800a628:	f7ff fd76 	bl	800a118 <__hexdig_fun>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d14f      	bne.n	800a6d0 <__hexnan+0xe4>
 800a630:	9a04      	ldr	r2, [sp, #16]
 800a632:	9905      	ldr	r1, [sp, #20]
 800a634:	2a20      	cmp	r2, #32
 800a636:	d818      	bhi.n	800a66a <__hexnan+0x7e>
 800a638:	9b02      	ldr	r3, [sp, #8]
 800a63a:	459b      	cmp	fp, r3
 800a63c:	dd13      	ble.n	800a666 <__hexnan+0x7a>
 800a63e:	454c      	cmp	r4, r9
 800a640:	d206      	bcs.n	800a650 <__hexnan+0x64>
 800a642:	2d07      	cmp	r5, #7
 800a644:	dc04      	bgt.n	800a650 <__hexnan+0x64>
 800a646:	462a      	mov	r2, r5
 800a648:	4649      	mov	r1, r9
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff ffa8 	bl	800a5a0 <L_shift>
 800a650:	4544      	cmp	r4, r8
 800a652:	d950      	bls.n	800a6f6 <__hexnan+0x10a>
 800a654:	2300      	movs	r3, #0
 800a656:	f1a4 0904 	sub.w	r9, r4, #4
 800a65a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a65e:	f8cd b008 	str.w	fp, [sp, #8]
 800a662:	464c      	mov	r4, r9
 800a664:	461d      	mov	r5, r3
 800a666:	9903      	ldr	r1, [sp, #12]
 800a668:	e7d7      	b.n	800a61a <__hexnan+0x2e>
 800a66a:	2a29      	cmp	r2, #41	; 0x29
 800a66c:	d155      	bne.n	800a71a <__hexnan+0x12e>
 800a66e:	3102      	adds	r1, #2
 800a670:	f8ca 1000 	str.w	r1, [sl]
 800a674:	f1bb 0f00 	cmp.w	fp, #0
 800a678:	d04f      	beq.n	800a71a <__hexnan+0x12e>
 800a67a:	454c      	cmp	r4, r9
 800a67c:	d206      	bcs.n	800a68c <__hexnan+0xa0>
 800a67e:	2d07      	cmp	r5, #7
 800a680:	dc04      	bgt.n	800a68c <__hexnan+0xa0>
 800a682:	462a      	mov	r2, r5
 800a684:	4649      	mov	r1, r9
 800a686:	4620      	mov	r0, r4
 800a688:	f7ff ff8a 	bl	800a5a0 <L_shift>
 800a68c:	4544      	cmp	r4, r8
 800a68e:	d934      	bls.n	800a6fa <__hexnan+0x10e>
 800a690:	f1a8 0204 	sub.w	r2, r8, #4
 800a694:	4623      	mov	r3, r4
 800a696:	f853 1b04 	ldr.w	r1, [r3], #4
 800a69a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a69e:	429f      	cmp	r7, r3
 800a6a0:	d2f9      	bcs.n	800a696 <__hexnan+0xaa>
 800a6a2:	1b3b      	subs	r3, r7, r4
 800a6a4:	f023 0303 	bic.w	r3, r3, #3
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	3e03      	subs	r6, #3
 800a6ac:	3401      	adds	r4, #1
 800a6ae:	42a6      	cmp	r6, r4
 800a6b0:	bf38      	it	cc
 800a6b2:	2304      	movcc	r3, #4
 800a6b4:	4443      	add	r3, r8
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f843 2b04 	str.w	r2, [r3], #4
 800a6bc:	429f      	cmp	r7, r3
 800a6be:	d2fb      	bcs.n	800a6b8 <__hexnan+0xcc>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	b91b      	cbnz	r3, 800a6cc <__hexnan+0xe0>
 800a6c4:	4547      	cmp	r7, r8
 800a6c6:	d126      	bne.n	800a716 <__hexnan+0x12a>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	2005      	movs	r0, #5
 800a6ce:	e025      	b.n	800a71c <__hexnan+0x130>
 800a6d0:	3501      	adds	r5, #1
 800a6d2:	2d08      	cmp	r5, #8
 800a6d4:	f10b 0b01 	add.w	fp, fp, #1
 800a6d8:	dd06      	ble.n	800a6e8 <__hexnan+0xfc>
 800a6da:	4544      	cmp	r4, r8
 800a6dc:	d9c3      	bls.n	800a666 <__hexnan+0x7a>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6e4:	2501      	movs	r5, #1
 800a6e6:	3c04      	subs	r4, #4
 800a6e8:	6822      	ldr	r2, [r4, #0]
 800a6ea:	f000 000f 	and.w	r0, r0, #15
 800a6ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6f2:	6020      	str	r0, [r4, #0]
 800a6f4:	e7b7      	b.n	800a666 <__hexnan+0x7a>
 800a6f6:	2508      	movs	r5, #8
 800a6f8:	e7b5      	b.n	800a666 <__hexnan+0x7a>
 800a6fa:	9b01      	ldr	r3, [sp, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0df      	beq.n	800a6c0 <__hexnan+0xd4>
 800a700:	f1c3 0320 	rsb	r3, r3, #32
 800a704:	f04f 32ff 	mov.w	r2, #4294967295
 800a708:	40da      	lsrs	r2, r3
 800a70a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a70e:	4013      	ands	r3, r2
 800a710:	f846 3c04 	str.w	r3, [r6, #-4]
 800a714:	e7d4      	b.n	800a6c0 <__hexnan+0xd4>
 800a716:	3f04      	subs	r7, #4
 800a718:	e7d2      	b.n	800a6c0 <__hexnan+0xd4>
 800a71a:	2004      	movs	r0, #4
 800a71c:	b007      	add	sp, #28
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a722 <__ascii_mbtowc>:
 800a722:	b082      	sub	sp, #8
 800a724:	b901      	cbnz	r1, 800a728 <__ascii_mbtowc+0x6>
 800a726:	a901      	add	r1, sp, #4
 800a728:	b142      	cbz	r2, 800a73c <__ascii_mbtowc+0x1a>
 800a72a:	b14b      	cbz	r3, 800a740 <__ascii_mbtowc+0x1e>
 800a72c:	7813      	ldrb	r3, [r2, #0]
 800a72e:	600b      	str	r3, [r1, #0]
 800a730:	7812      	ldrb	r2, [r2, #0]
 800a732:	1e10      	subs	r0, r2, #0
 800a734:	bf18      	it	ne
 800a736:	2001      	movne	r0, #1
 800a738:	b002      	add	sp, #8
 800a73a:	4770      	bx	lr
 800a73c:	4610      	mov	r0, r2
 800a73e:	e7fb      	b.n	800a738 <__ascii_mbtowc+0x16>
 800a740:	f06f 0001 	mvn.w	r0, #1
 800a744:	e7f8      	b.n	800a738 <__ascii_mbtowc+0x16>
	...

0800a748 <_Balloc>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	69c6      	ldr	r6, [r0, #28]
 800a74c:	4604      	mov	r4, r0
 800a74e:	460d      	mov	r5, r1
 800a750:	b976      	cbnz	r6, 800a770 <_Balloc+0x28>
 800a752:	2010      	movs	r0, #16
 800a754:	f7fc fca0 	bl	8007098 <malloc>
 800a758:	4602      	mov	r2, r0
 800a75a:	61e0      	str	r0, [r4, #28]
 800a75c:	b920      	cbnz	r0, 800a768 <_Balloc+0x20>
 800a75e:	4b18      	ldr	r3, [pc, #96]	; (800a7c0 <_Balloc+0x78>)
 800a760:	4818      	ldr	r0, [pc, #96]	; (800a7c4 <_Balloc+0x7c>)
 800a762:	216b      	movs	r1, #107	; 0x6b
 800a764:	f7fe fda2 	bl	80092ac <__assert_func>
 800a768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a76c:	6006      	str	r6, [r0, #0]
 800a76e:	60c6      	str	r6, [r0, #12]
 800a770:	69e6      	ldr	r6, [r4, #28]
 800a772:	68f3      	ldr	r3, [r6, #12]
 800a774:	b183      	cbz	r3, 800a798 <_Balloc+0x50>
 800a776:	69e3      	ldr	r3, [r4, #28]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a77e:	b9b8      	cbnz	r0, 800a7b0 <_Balloc+0x68>
 800a780:	2101      	movs	r1, #1
 800a782:	fa01 f605 	lsl.w	r6, r1, r5
 800a786:	1d72      	adds	r2, r6, #5
 800a788:	0092      	lsls	r2, r2, #2
 800a78a:	4620      	mov	r0, r4
 800a78c:	f001 f91d 	bl	800b9ca <_calloc_r>
 800a790:	b160      	cbz	r0, 800a7ac <_Balloc+0x64>
 800a792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a796:	e00e      	b.n	800a7b6 <_Balloc+0x6e>
 800a798:	2221      	movs	r2, #33	; 0x21
 800a79a:	2104      	movs	r1, #4
 800a79c:	4620      	mov	r0, r4
 800a79e:	f001 f914 	bl	800b9ca <_calloc_r>
 800a7a2:	69e3      	ldr	r3, [r4, #28]
 800a7a4:	60f0      	str	r0, [r6, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e4      	bne.n	800a776 <_Balloc+0x2e>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	6802      	ldr	r2, [r0, #0]
 800a7b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7bc:	e7f7      	b.n	800a7ae <_Balloc+0x66>
 800a7be:	bf00      	nop
 800a7c0:	0800be31 	.word	0x0800be31
 800a7c4:	0800bfbc 	.word	0x0800bfbc

0800a7c8 <_Bfree>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	69c6      	ldr	r6, [r0, #28]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b976      	cbnz	r6, 800a7f0 <_Bfree+0x28>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f7fc fc60 	bl	8007098 <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	61e8      	str	r0, [r5, #28]
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_Bfree+0x20>
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <_Bfree+0x3c>)
 800a7e0:	4809      	ldr	r0, [pc, #36]	; (800a808 <_Bfree+0x40>)
 800a7e2:	218f      	movs	r1, #143	; 0x8f
 800a7e4:	f7fe fd62 	bl	80092ac <__assert_func>
 800a7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7ec:	6006      	str	r6, [r0, #0]
 800a7ee:	60c6      	str	r6, [r0, #12]
 800a7f0:	b13c      	cbz	r4, 800a802 <_Bfree+0x3a>
 800a7f2:	69eb      	ldr	r3, [r5, #28]
 800a7f4:	6862      	ldr	r2, [r4, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7fc:	6021      	str	r1, [r4, #0]
 800a7fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	0800be31 	.word	0x0800be31
 800a808:	0800bfbc 	.word	0x0800bfbc

0800a80c <__multadd>:
 800a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	690d      	ldr	r5, [r1, #16]
 800a812:	4607      	mov	r7, r0
 800a814:	460c      	mov	r4, r1
 800a816:	461e      	mov	r6, r3
 800a818:	f101 0c14 	add.w	ip, r1, #20
 800a81c:	2000      	movs	r0, #0
 800a81e:	f8dc 3000 	ldr.w	r3, [ip]
 800a822:	b299      	uxth	r1, r3
 800a824:	fb02 6101 	mla	r1, r2, r1, r6
 800a828:	0c1e      	lsrs	r6, r3, #16
 800a82a:	0c0b      	lsrs	r3, r1, #16
 800a82c:	fb02 3306 	mla	r3, r2, r6, r3
 800a830:	b289      	uxth	r1, r1
 800a832:	3001      	adds	r0, #1
 800a834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a838:	4285      	cmp	r5, r0
 800a83a:	f84c 1b04 	str.w	r1, [ip], #4
 800a83e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a842:	dcec      	bgt.n	800a81e <__multadd+0x12>
 800a844:	b30e      	cbz	r6, 800a88a <__multadd+0x7e>
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dc19      	bgt.n	800a880 <__multadd+0x74>
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	4638      	mov	r0, r7
 800a850:	3101      	adds	r1, #1
 800a852:	f7ff ff79 	bl	800a748 <_Balloc>
 800a856:	4680      	mov	r8, r0
 800a858:	b928      	cbnz	r0, 800a866 <__multadd+0x5a>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <__multadd+0x84>)
 800a85e:	480d      	ldr	r0, [pc, #52]	; (800a894 <__multadd+0x88>)
 800a860:	21ba      	movs	r1, #186	; 0xba
 800a862:	f7fe fd23 	bl	80092ac <__assert_func>
 800a866:	6922      	ldr	r2, [r4, #16]
 800a868:	3202      	adds	r2, #2
 800a86a:	f104 010c 	add.w	r1, r4, #12
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	300c      	adds	r0, #12
 800a872:	f7fe fcfe 	bl	8009272 <memcpy>
 800a876:	4621      	mov	r1, r4
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff ffa5 	bl	800a7c8 <_Bfree>
 800a87e:	4644      	mov	r4, r8
 800a880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a884:	3501      	adds	r5, #1
 800a886:	615e      	str	r6, [r3, #20]
 800a888:	6125      	str	r5, [r4, #16]
 800a88a:	4620      	mov	r0, r4
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	0800bf4b 	.word	0x0800bf4b
 800a894:	0800bfbc 	.word	0x0800bfbc

0800a898 <__s2b>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	4615      	mov	r5, r2
 800a8a0:	461f      	mov	r7, r3
 800a8a2:	2209      	movs	r2, #9
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	db09      	blt.n	800a8c8 <__s2b+0x30>
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ff47 	bl	800a748 <_Balloc>
 800a8ba:	b940      	cbnz	r0, 800a8ce <__s2b+0x36>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	4b19      	ldr	r3, [pc, #100]	; (800a924 <__s2b+0x8c>)
 800a8c0:	4819      	ldr	r0, [pc, #100]	; (800a928 <__s2b+0x90>)
 800a8c2:	21d3      	movs	r1, #211	; 0xd3
 800a8c4:	f7fe fcf2 	bl	80092ac <__assert_func>
 800a8c8:	0052      	lsls	r2, r2, #1
 800a8ca:	3101      	adds	r1, #1
 800a8cc:	e7f0      	b.n	800a8b0 <__s2b+0x18>
 800a8ce:	9b08      	ldr	r3, [sp, #32]
 800a8d0:	6143      	str	r3, [r0, #20]
 800a8d2:	2d09      	cmp	r5, #9
 800a8d4:	f04f 0301 	mov.w	r3, #1
 800a8d8:	6103      	str	r3, [r0, #16]
 800a8da:	dd16      	ble.n	800a90a <__s2b+0x72>
 800a8dc:	f104 0909 	add.w	r9, r4, #9
 800a8e0:	46c8      	mov	r8, r9
 800a8e2:	442c      	add	r4, r5
 800a8e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	3b30      	subs	r3, #48	; 0x30
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff8c 	bl	800a80c <__multadd>
 800a8f4:	45a0      	cmp	r8, r4
 800a8f6:	d1f5      	bne.n	800a8e4 <__s2b+0x4c>
 800a8f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a8fc:	444c      	add	r4, r9
 800a8fe:	1b2d      	subs	r5, r5, r4
 800a900:	1963      	adds	r3, r4, r5
 800a902:	42bb      	cmp	r3, r7
 800a904:	db04      	blt.n	800a910 <__s2b+0x78>
 800a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90a:	340a      	adds	r4, #10
 800a90c:	2509      	movs	r5, #9
 800a90e:	e7f6      	b.n	800a8fe <__s2b+0x66>
 800a910:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a914:	4601      	mov	r1, r0
 800a916:	3b30      	subs	r3, #48	; 0x30
 800a918:	220a      	movs	r2, #10
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff76 	bl	800a80c <__multadd>
 800a920:	e7ee      	b.n	800a900 <__s2b+0x68>
 800a922:	bf00      	nop
 800a924:	0800bf4b 	.word	0x0800bf4b
 800a928:	0800bfbc 	.word	0x0800bfbc

0800a92c <__hi0bits>:
 800a92c:	0c03      	lsrs	r3, r0, #16
 800a92e:	041b      	lsls	r3, r3, #16
 800a930:	b9d3      	cbnz	r3, 800a968 <__hi0bits+0x3c>
 800a932:	0400      	lsls	r0, r0, #16
 800a934:	2310      	movs	r3, #16
 800a936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a93a:	bf04      	itt	eq
 800a93c:	0200      	lsleq	r0, r0, #8
 800a93e:	3308      	addeq	r3, #8
 800a940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a944:	bf04      	itt	eq
 800a946:	0100      	lsleq	r0, r0, #4
 800a948:	3304      	addeq	r3, #4
 800a94a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a94e:	bf04      	itt	eq
 800a950:	0080      	lsleq	r0, r0, #2
 800a952:	3302      	addeq	r3, #2
 800a954:	2800      	cmp	r0, #0
 800a956:	db05      	blt.n	800a964 <__hi0bits+0x38>
 800a958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a95c:	f103 0301 	add.w	r3, r3, #1
 800a960:	bf08      	it	eq
 800a962:	2320      	moveq	r3, #32
 800a964:	4618      	mov	r0, r3
 800a966:	4770      	bx	lr
 800a968:	2300      	movs	r3, #0
 800a96a:	e7e4      	b.n	800a936 <__hi0bits+0xa>

0800a96c <__lo0bits>:
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	f013 0207 	ands.w	r2, r3, #7
 800a972:	d00c      	beq.n	800a98e <__lo0bits+0x22>
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d422      	bmi.n	800a9be <__lo0bits+0x52>
 800a978:	079a      	lsls	r2, r3, #30
 800a97a:	bf49      	itett	mi
 800a97c:	085b      	lsrmi	r3, r3, #1
 800a97e:	089b      	lsrpl	r3, r3, #2
 800a980:	6003      	strmi	r3, [r0, #0]
 800a982:	2201      	movmi	r2, #1
 800a984:	bf5c      	itt	pl
 800a986:	6003      	strpl	r3, [r0, #0]
 800a988:	2202      	movpl	r2, #2
 800a98a:	4610      	mov	r0, r2
 800a98c:	4770      	bx	lr
 800a98e:	b299      	uxth	r1, r3
 800a990:	b909      	cbnz	r1, 800a996 <__lo0bits+0x2a>
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	2210      	movs	r2, #16
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	b909      	cbnz	r1, 800a99e <__lo0bits+0x32>
 800a99a:	3208      	adds	r2, #8
 800a99c:	0a1b      	lsrs	r3, r3, #8
 800a99e:	0719      	lsls	r1, r3, #28
 800a9a0:	bf04      	itt	eq
 800a9a2:	091b      	lsreq	r3, r3, #4
 800a9a4:	3204      	addeq	r2, #4
 800a9a6:	0799      	lsls	r1, r3, #30
 800a9a8:	bf04      	itt	eq
 800a9aa:	089b      	lsreq	r3, r3, #2
 800a9ac:	3202      	addeq	r2, #2
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d403      	bmi.n	800a9ba <__lo0bits+0x4e>
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	f102 0201 	add.w	r2, r2, #1
 800a9b8:	d003      	beq.n	800a9c2 <__lo0bits+0x56>
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	e7e5      	b.n	800a98a <__lo0bits+0x1e>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e7e3      	b.n	800a98a <__lo0bits+0x1e>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	e7e1      	b.n	800a98a <__lo0bits+0x1e>
	...

0800a9c8 <__i2b>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	f7ff febb 	bl	800a748 <_Balloc>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	b928      	cbnz	r0, 800a9e2 <__i2b+0x1a>
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <__i2b+0x24>)
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <__i2b+0x28>)
 800a9da:	f240 1145 	movw	r1, #325	; 0x145
 800a9de:	f7fe fc65 	bl	80092ac <__assert_func>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	6144      	str	r4, [r0, #20]
 800a9e6:	6103      	str	r3, [r0, #16]
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800bf4b 	.word	0x0800bf4b
 800a9f0:	0800bfbc 	.word	0x0800bfbc

0800a9f4 <__multiply>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	4691      	mov	r9, r2
 800a9fa:	690a      	ldr	r2, [r1, #16]
 800a9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	bfb8      	it	lt
 800aa04:	460b      	movlt	r3, r1
 800aa06:	460c      	mov	r4, r1
 800aa08:	bfbc      	itt	lt
 800aa0a:	464c      	movlt	r4, r9
 800aa0c:	4699      	movlt	r9, r3
 800aa0e:	6927      	ldr	r7, [r4, #16]
 800aa10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	6861      	ldr	r1, [r4, #4]
 800aa18:	eb07 060a 	add.w	r6, r7, sl
 800aa1c:	42b3      	cmp	r3, r6
 800aa1e:	b085      	sub	sp, #20
 800aa20:	bfb8      	it	lt
 800aa22:	3101      	addlt	r1, #1
 800aa24:	f7ff fe90 	bl	800a748 <_Balloc>
 800aa28:	b930      	cbnz	r0, 800aa38 <__multiply+0x44>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <__multiply+0x14c>)
 800aa2e:	4845      	ldr	r0, [pc, #276]	; (800ab44 <__multiply+0x150>)
 800aa30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa34:	f7fe fc3a 	bl	80092ac <__assert_func>
 800aa38:	f100 0514 	add.w	r5, r0, #20
 800aa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa40:	462b      	mov	r3, r5
 800aa42:	2200      	movs	r2, #0
 800aa44:	4543      	cmp	r3, r8
 800aa46:	d321      	bcc.n	800aa8c <__multiply+0x98>
 800aa48:	f104 0314 	add.w	r3, r4, #20
 800aa4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa50:	f109 0314 	add.w	r3, r9, #20
 800aa54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	1b3a      	subs	r2, r7, r4
 800aa5c:	3a15      	subs	r2, #21
 800aa5e:	f022 0203 	bic.w	r2, r2, #3
 800aa62:	3204      	adds	r2, #4
 800aa64:	f104 0115 	add.w	r1, r4, #21
 800aa68:	428f      	cmp	r7, r1
 800aa6a:	bf38      	it	cc
 800aa6c:	2204      	movcc	r2, #4
 800aa6e:	9201      	str	r2, [sp, #4]
 800aa70:	9a02      	ldr	r2, [sp, #8]
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d80c      	bhi.n	800aa92 <__multiply+0x9e>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	dd03      	ble.n	800aa84 <__multiply+0x90>
 800aa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d05b      	beq.n	800ab3c <__multiply+0x148>
 800aa84:	6106      	str	r6, [r0, #16]
 800aa86:	b005      	add	sp, #20
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8c:	f843 2b04 	str.w	r2, [r3], #4
 800aa90:	e7d8      	b.n	800aa44 <__multiply+0x50>
 800aa92:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa96:	f1ba 0f00 	cmp.w	sl, #0
 800aa9a:	d024      	beq.n	800aae6 <__multiply+0xf2>
 800aa9c:	f104 0e14 	add.w	lr, r4, #20
 800aaa0:	46a9      	mov	r9, r5
 800aaa2:	f04f 0c00 	mov.w	ip, #0
 800aaa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaaa:	f8d9 1000 	ldr.w	r1, [r9]
 800aaae:	fa1f fb82 	uxth.w	fp, r2
 800aab2:	b289      	uxth	r1, r1
 800aab4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aabc:	f8d9 2000 	ldr.w	r2, [r9]
 800aac0:	4461      	add	r1, ip
 800aac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aac6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aace:	b289      	uxth	r1, r1
 800aad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aad4:	4577      	cmp	r7, lr
 800aad6:	f849 1b04 	str.w	r1, [r9], #4
 800aada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aade:	d8e2      	bhi.n	800aaa6 <__multiply+0xb2>
 800aae0:	9a01      	ldr	r2, [sp, #4]
 800aae2:	f845 c002 	str.w	ip, [r5, r2]
 800aae6:	9a03      	ldr	r2, [sp, #12]
 800aae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aaec:	3304      	adds	r3, #4
 800aaee:	f1b9 0f00 	cmp.w	r9, #0
 800aaf2:	d021      	beq.n	800ab38 <__multiply+0x144>
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	f104 0c14 	add.w	ip, r4, #20
 800aafa:	46ae      	mov	lr, r5
 800aafc:	f04f 0a00 	mov.w	sl, #0
 800ab00:	f8bc b000 	ldrh.w	fp, [ip]
 800ab04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab08:	fb09 220b 	mla	r2, r9, fp, r2
 800ab0c:	4452      	add	r2, sl
 800ab0e:	b289      	uxth	r1, r1
 800ab10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab14:	f84e 1b04 	str.w	r1, [lr], #4
 800ab18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab20:	f8be 1000 	ldrh.w	r1, [lr]
 800ab24:	fb09 110a 	mla	r1, r9, sl, r1
 800ab28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab2c:	4567      	cmp	r7, ip
 800ab2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab32:	d8e5      	bhi.n	800ab00 <__multiply+0x10c>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	50a9      	str	r1, [r5, r2]
 800ab38:	3504      	adds	r5, #4
 800ab3a:	e799      	b.n	800aa70 <__multiply+0x7c>
 800ab3c:	3e01      	subs	r6, #1
 800ab3e:	e79b      	b.n	800aa78 <__multiply+0x84>
 800ab40:	0800bf4b 	.word	0x0800bf4b
 800ab44:	0800bfbc 	.word	0x0800bfbc

0800ab48 <__pow5mult>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	4615      	mov	r5, r2
 800ab4e:	f012 0203 	ands.w	r2, r2, #3
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	d007      	beq.n	800ab68 <__pow5mult+0x20>
 800ab58:	4c25      	ldr	r4, [pc, #148]	; (800abf0 <__pow5mult+0xa8>)
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab62:	f7ff fe53 	bl	800a80c <__multadd>
 800ab66:	4607      	mov	r7, r0
 800ab68:	10ad      	asrs	r5, r5, #2
 800ab6a:	d03d      	beq.n	800abe8 <__pow5mult+0xa0>
 800ab6c:	69f4      	ldr	r4, [r6, #28]
 800ab6e:	b97c      	cbnz	r4, 800ab90 <__pow5mult+0x48>
 800ab70:	2010      	movs	r0, #16
 800ab72:	f7fc fa91 	bl	8007098 <malloc>
 800ab76:	4602      	mov	r2, r0
 800ab78:	61f0      	str	r0, [r6, #28]
 800ab7a:	b928      	cbnz	r0, 800ab88 <__pow5mult+0x40>
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <__pow5mult+0xac>)
 800ab7e:	481e      	ldr	r0, [pc, #120]	; (800abf8 <__pow5mult+0xb0>)
 800ab80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab84:	f7fe fb92 	bl	80092ac <__assert_func>
 800ab88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab8c:	6004      	str	r4, [r0, #0]
 800ab8e:	60c4      	str	r4, [r0, #12]
 800ab90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab98:	b94c      	cbnz	r4, 800abae <__pow5mult+0x66>
 800ab9a:	f240 2171 	movw	r1, #625	; 0x271
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff12 	bl	800a9c8 <__i2b>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abaa:	4604      	mov	r4, r0
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	f04f 0900 	mov.w	r9, #0
 800abb2:	07eb      	lsls	r3, r5, #31
 800abb4:	d50a      	bpl.n	800abcc <__pow5mult+0x84>
 800abb6:	4639      	mov	r1, r7
 800abb8:	4622      	mov	r2, r4
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff ff1a 	bl	800a9f4 <__multiply>
 800abc0:	4639      	mov	r1, r7
 800abc2:	4680      	mov	r8, r0
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff fdff 	bl	800a7c8 <_Bfree>
 800abca:	4647      	mov	r7, r8
 800abcc:	106d      	asrs	r5, r5, #1
 800abce:	d00b      	beq.n	800abe8 <__pow5mult+0xa0>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	b938      	cbnz	r0, 800abe4 <__pow5mult+0x9c>
 800abd4:	4622      	mov	r2, r4
 800abd6:	4621      	mov	r1, r4
 800abd8:	4630      	mov	r0, r6
 800abda:	f7ff ff0b 	bl	800a9f4 <__multiply>
 800abde:	6020      	str	r0, [r4, #0]
 800abe0:	f8c0 9000 	str.w	r9, [r0]
 800abe4:	4604      	mov	r4, r0
 800abe6:	e7e4      	b.n	800abb2 <__pow5mult+0x6a>
 800abe8:	4638      	mov	r0, r7
 800abea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abee:	bf00      	nop
 800abf0:	0800c108 	.word	0x0800c108
 800abf4:	0800be31 	.word	0x0800be31
 800abf8:	0800bfbc 	.word	0x0800bfbc

0800abfc <__lshift>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	460c      	mov	r4, r1
 800ac02:	6849      	ldr	r1, [r1, #4]
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	4691      	mov	r9, r2
 800ac10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac14:	f108 0601 	add.w	r6, r8, #1
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	db0b      	blt.n	800ac34 <__lshift+0x38>
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff fd93 	bl	800a748 <_Balloc>
 800ac22:	4605      	mov	r5, r0
 800ac24:	b948      	cbnz	r0, 800ac3a <__lshift+0x3e>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b28      	ldr	r3, [pc, #160]	; (800accc <__lshift+0xd0>)
 800ac2a:	4829      	ldr	r0, [pc, #164]	; (800acd0 <__lshift+0xd4>)
 800ac2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac30:	f7fe fb3c 	bl	80092ac <__assert_func>
 800ac34:	3101      	adds	r1, #1
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	e7ee      	b.n	800ac18 <__lshift+0x1c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f100 0114 	add.w	r1, r0, #20
 800ac40:	f100 0210 	add.w	r2, r0, #16
 800ac44:	4618      	mov	r0, r3
 800ac46:	4553      	cmp	r3, sl
 800ac48:	db33      	blt.n	800acb2 <__lshift+0xb6>
 800ac4a:	6920      	ldr	r0, [r4, #16]
 800ac4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac50:	f104 0314 	add.w	r3, r4, #20
 800ac54:	f019 091f 	ands.w	r9, r9, #31
 800ac58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac60:	d02b      	beq.n	800acba <__lshift+0xbe>
 800ac62:	f1c9 0e20 	rsb	lr, r9, #32
 800ac66:	468a      	mov	sl, r1
 800ac68:	2200      	movs	r2, #0
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac70:	4310      	orrs	r0, r2
 800ac72:	f84a 0b04 	str.w	r0, [sl], #4
 800ac76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7a:	459c      	cmp	ip, r3
 800ac7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac80:	d8f3      	bhi.n	800ac6a <__lshift+0x6e>
 800ac82:	ebac 0304 	sub.w	r3, ip, r4
 800ac86:	3b15      	subs	r3, #21
 800ac88:	f023 0303 	bic.w	r3, r3, #3
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	f104 0015 	add.w	r0, r4, #21
 800ac92:	4584      	cmp	ip, r0
 800ac94:	bf38      	it	cc
 800ac96:	2304      	movcc	r3, #4
 800ac98:	50ca      	str	r2, [r1, r3]
 800ac9a:	b10a      	cbz	r2, 800aca0 <__lshift+0xa4>
 800ac9c:	f108 0602 	add.w	r6, r8, #2
 800aca0:	3e01      	subs	r6, #1
 800aca2:	4638      	mov	r0, r7
 800aca4:	612e      	str	r6, [r5, #16]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff fd8e 	bl	800a7c8 <_Bfree>
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb6:	3301      	adds	r3, #1
 800acb8:	e7c5      	b.n	800ac46 <__lshift+0x4a>
 800acba:	3904      	subs	r1, #4
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc4:	459c      	cmp	ip, r3
 800acc6:	d8f9      	bhi.n	800acbc <__lshift+0xc0>
 800acc8:	e7ea      	b.n	800aca0 <__lshift+0xa4>
 800acca:	bf00      	nop
 800accc:	0800bf4b 	.word	0x0800bf4b
 800acd0:	0800bfbc 	.word	0x0800bfbc

0800acd4 <__mcmp>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	6902      	ldr	r2, [r0, #16]
 800acd8:	690c      	ldr	r4, [r1, #16]
 800acda:	1b12      	subs	r2, r2, r4
 800acdc:	d10e      	bne.n	800acfc <__mcmp+0x28>
 800acde:	f100 0314 	add.w	r3, r0, #20
 800ace2:	3114      	adds	r1, #20
 800ace4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ace8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acf4:	42a5      	cmp	r5, r4
 800acf6:	d003      	beq.n	800ad00 <__mcmp+0x2c>
 800acf8:	d305      	bcc.n	800ad06 <__mcmp+0x32>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4610      	mov	r0, r2
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	4283      	cmp	r3, r0
 800ad02:	d3f3      	bcc.n	800acec <__mcmp+0x18>
 800ad04:	e7fa      	b.n	800acfc <__mcmp+0x28>
 800ad06:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0a:	e7f7      	b.n	800acfc <__mcmp+0x28>

0800ad0c <__mdiff>:
 800ad0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	4606      	mov	r6, r0
 800ad14:	4611      	mov	r1, r2
 800ad16:	4620      	mov	r0, r4
 800ad18:	4690      	mov	r8, r2
 800ad1a:	f7ff ffdb 	bl	800acd4 <__mcmp>
 800ad1e:	1e05      	subs	r5, r0, #0
 800ad20:	d110      	bne.n	800ad44 <__mdiff+0x38>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff fd0f 	bl	800a748 <_Balloc>
 800ad2a:	b930      	cbnz	r0, 800ad3a <__mdiff+0x2e>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__mdiff+0x10c>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f240 2137 	movw	r1, #567	; 0x237
 800ad34:	4839      	ldr	r0, [pc, #228]	; (800ae1c <__mdiff+0x110>)
 800ad36:	f7fe fab9 	bl	80092ac <__assert_func>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	bfa4      	itt	ge
 800ad46:	4643      	movge	r3, r8
 800ad48:	46a0      	movge	r8, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad50:	bfa6      	itte	ge
 800ad52:	461c      	movge	r4, r3
 800ad54:	2500      	movge	r5, #0
 800ad56:	2501      	movlt	r5, #1
 800ad58:	f7ff fcf6 	bl	800a748 <_Balloc>
 800ad5c:	b920      	cbnz	r0, 800ad68 <__mdiff+0x5c>
 800ad5e:	4b2e      	ldr	r3, [pc, #184]	; (800ae18 <__mdiff+0x10c>)
 800ad60:	4602      	mov	r2, r0
 800ad62:	f240 2145 	movw	r1, #581	; 0x245
 800ad66:	e7e5      	b.n	800ad34 <__mdiff+0x28>
 800ad68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad6c:	6926      	ldr	r6, [r4, #16]
 800ad6e:	60c5      	str	r5, [r0, #12]
 800ad70:	f104 0914 	add.w	r9, r4, #20
 800ad74:	f108 0514 	add.w	r5, r8, #20
 800ad78:	f100 0e14 	add.w	lr, r0, #20
 800ad7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad84:	f108 0210 	add.w	r2, r8, #16
 800ad88:	46f2      	mov	sl, lr
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad94:	fa11 f88b 	uxtah	r8, r1, fp
 800ad98:	b299      	uxth	r1, r3
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	eba8 0801 	sub.w	r8, r8, r1
 800ada0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ada4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ada8:	fa1f f888 	uxth.w	r8, r8
 800adac:	1419      	asrs	r1, r3, #16
 800adae:	454e      	cmp	r6, r9
 800adb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adb4:	f84a 3b04 	str.w	r3, [sl], #4
 800adb8:	d8e8      	bhi.n	800ad8c <__mdiff+0x80>
 800adba:	1b33      	subs	r3, r6, r4
 800adbc:	3b15      	subs	r3, #21
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	3304      	adds	r3, #4
 800adc4:	3415      	adds	r4, #21
 800adc6:	42a6      	cmp	r6, r4
 800adc8:	bf38      	it	cc
 800adca:	2304      	movcc	r3, #4
 800adcc:	441d      	add	r5, r3
 800adce:	4473      	add	r3, lr
 800add0:	469e      	mov	lr, r3
 800add2:	462e      	mov	r6, r5
 800add4:	4566      	cmp	r6, ip
 800add6:	d30e      	bcc.n	800adf6 <__mdiff+0xea>
 800add8:	f10c 0203 	add.w	r2, ip, #3
 800addc:	1b52      	subs	r2, r2, r5
 800adde:	f022 0203 	bic.w	r2, r2, #3
 800ade2:	3d03      	subs	r5, #3
 800ade4:	45ac      	cmp	ip, r5
 800ade6:	bf38      	it	cc
 800ade8:	2200      	movcc	r2, #0
 800adea:	4413      	add	r3, r2
 800adec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adf0:	b17a      	cbz	r2, 800ae12 <__mdiff+0x106>
 800adf2:	6107      	str	r7, [r0, #16]
 800adf4:	e7a4      	b.n	800ad40 <__mdiff+0x34>
 800adf6:	f856 8b04 	ldr.w	r8, [r6], #4
 800adfa:	fa11 f288 	uxtah	r2, r1, r8
 800adfe:	1414      	asrs	r4, r2, #16
 800ae00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae04:	b292      	uxth	r2, r2
 800ae06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae0a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae0e:	1421      	asrs	r1, r4, #16
 800ae10:	e7e0      	b.n	800add4 <__mdiff+0xc8>
 800ae12:	3f01      	subs	r7, #1
 800ae14:	e7ea      	b.n	800adec <__mdiff+0xe0>
 800ae16:	bf00      	nop
 800ae18:	0800bf4b 	.word	0x0800bf4b
 800ae1c:	0800bfbc 	.word	0x0800bfbc

0800ae20 <__ulp>:
 800ae20:	b082      	sub	sp, #8
 800ae22:	ed8d 0b00 	vstr	d0, [sp]
 800ae26:	9a01      	ldr	r2, [sp, #4]
 800ae28:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <__ulp+0x48>)
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dc08      	bgt.n	800ae46 <__ulp+0x26>
 800ae34:	425b      	negs	r3, r3
 800ae36:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae3e:	da04      	bge.n	800ae4a <__ulp+0x2a>
 800ae40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae44:	4113      	asrs	r3, r2
 800ae46:	2200      	movs	r2, #0
 800ae48:	e008      	b.n	800ae5c <__ulp+0x3c>
 800ae4a:	f1a2 0314 	sub.w	r3, r2, #20
 800ae4e:	2b1e      	cmp	r3, #30
 800ae50:	bfda      	itte	le
 800ae52:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae56:	40da      	lsrle	r2, r3
 800ae58:	2201      	movgt	r2, #1
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	ec41 0b10 	vmov	d0, r0, r1
 800ae64:	b002      	add	sp, #8
 800ae66:	4770      	bx	lr
 800ae68:	7ff00000 	.word	0x7ff00000

0800ae6c <__b2d>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	6906      	ldr	r6, [r0, #16]
 800ae72:	f100 0814 	add.w	r8, r0, #20
 800ae76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae7a:	1f37      	subs	r7, r6, #4
 800ae7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae80:	4610      	mov	r0, r2
 800ae82:	f7ff fd53 	bl	800a92c <__hi0bits>
 800ae86:	f1c0 0320 	rsb	r3, r0, #32
 800ae8a:	280a      	cmp	r0, #10
 800ae8c:	600b      	str	r3, [r1, #0]
 800ae8e:	491b      	ldr	r1, [pc, #108]	; (800aefc <__b2d+0x90>)
 800ae90:	dc15      	bgt.n	800aebe <__b2d+0x52>
 800ae92:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae96:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae9a:	45b8      	cmp	r8, r7
 800ae9c:	ea43 0501 	orr.w	r5, r3, r1
 800aea0:	bf34      	ite	cc
 800aea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aea6:	2300      	movcs	r3, #0
 800aea8:	3015      	adds	r0, #21
 800aeaa:	fa02 f000 	lsl.w	r0, r2, r0
 800aeae:	fa23 f30c 	lsr.w	r3, r3, ip
 800aeb2:	4303      	orrs	r3, r0
 800aeb4:	461c      	mov	r4, r3
 800aeb6:	ec45 4b10 	vmov	d0, r4, r5
 800aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebe:	45b8      	cmp	r8, r7
 800aec0:	bf3a      	itte	cc
 800aec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aec6:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeca:	2300      	movcs	r3, #0
 800aecc:	380b      	subs	r0, #11
 800aece:	d012      	beq.n	800aef6 <__b2d+0x8a>
 800aed0:	f1c0 0120 	rsb	r1, r0, #32
 800aed4:	fa23 f401 	lsr.w	r4, r3, r1
 800aed8:	4082      	lsls	r2, r0
 800aeda:	4322      	orrs	r2, r4
 800aedc:	4547      	cmp	r7, r8
 800aede:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aee2:	bf8c      	ite	hi
 800aee4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aee8:	2200      	movls	r2, #0
 800aeea:	4083      	lsls	r3, r0
 800aeec:	40ca      	lsrs	r2, r1
 800aeee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aef2:	4313      	orrs	r3, r2
 800aef4:	e7de      	b.n	800aeb4 <__b2d+0x48>
 800aef6:	ea42 0501 	orr.w	r5, r2, r1
 800aefa:	e7db      	b.n	800aeb4 <__b2d+0x48>
 800aefc:	3ff00000 	.word	0x3ff00000

0800af00 <__d2b>:
 800af00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af04:	460f      	mov	r7, r1
 800af06:	2101      	movs	r1, #1
 800af08:	ec59 8b10 	vmov	r8, r9, d0
 800af0c:	4616      	mov	r6, r2
 800af0e:	f7ff fc1b 	bl	800a748 <_Balloc>
 800af12:	4604      	mov	r4, r0
 800af14:	b930      	cbnz	r0, 800af24 <__d2b+0x24>
 800af16:	4602      	mov	r2, r0
 800af18:	4b24      	ldr	r3, [pc, #144]	; (800afac <__d2b+0xac>)
 800af1a:	4825      	ldr	r0, [pc, #148]	; (800afb0 <__d2b+0xb0>)
 800af1c:	f240 310f 	movw	r1, #783	; 0x30f
 800af20:	f7fe f9c4 	bl	80092ac <__assert_func>
 800af24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af2c:	bb2d      	cbnz	r5, 800af7a <__d2b+0x7a>
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	f1b8 0300 	subs.w	r3, r8, #0
 800af34:	d026      	beq.n	800af84 <__d2b+0x84>
 800af36:	4668      	mov	r0, sp
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	f7ff fd17 	bl	800a96c <__lo0bits>
 800af3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af42:	b1e8      	cbz	r0, 800af80 <__d2b+0x80>
 800af44:	f1c0 0320 	rsb	r3, r0, #32
 800af48:	fa02 f303 	lsl.w	r3, r2, r3
 800af4c:	430b      	orrs	r3, r1
 800af4e:	40c2      	lsrs	r2, r0
 800af50:	6163      	str	r3, [r4, #20]
 800af52:	9201      	str	r2, [sp, #4]
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	61a3      	str	r3, [r4, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bf14      	ite	ne
 800af5c:	2202      	movne	r2, #2
 800af5e:	2201      	moveq	r2, #1
 800af60:	6122      	str	r2, [r4, #16]
 800af62:	b1bd      	cbz	r5, 800af94 <__d2b+0x94>
 800af64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af68:	4405      	add	r5, r0
 800af6a:	603d      	str	r5, [r7, #0]
 800af6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af70:	6030      	str	r0, [r6, #0]
 800af72:	4620      	mov	r0, r4
 800af74:	b003      	add	sp, #12
 800af76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af7e:	e7d6      	b.n	800af2e <__d2b+0x2e>
 800af80:	6161      	str	r1, [r4, #20]
 800af82:	e7e7      	b.n	800af54 <__d2b+0x54>
 800af84:	a801      	add	r0, sp, #4
 800af86:	f7ff fcf1 	bl	800a96c <__lo0bits>
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	6163      	str	r3, [r4, #20]
 800af8e:	3020      	adds	r0, #32
 800af90:	2201      	movs	r2, #1
 800af92:	e7e5      	b.n	800af60 <__d2b+0x60>
 800af94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af9c:	6038      	str	r0, [r7, #0]
 800af9e:	6918      	ldr	r0, [r3, #16]
 800afa0:	f7ff fcc4 	bl	800a92c <__hi0bits>
 800afa4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afa8:	e7e2      	b.n	800af70 <__d2b+0x70>
 800afaa:	bf00      	nop
 800afac:	0800bf4b 	.word	0x0800bf4b
 800afb0:	0800bfbc 	.word	0x0800bfbc

0800afb4 <__ratio>:
 800afb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	4688      	mov	r8, r1
 800afba:	4669      	mov	r1, sp
 800afbc:	4681      	mov	r9, r0
 800afbe:	f7ff ff55 	bl	800ae6c <__b2d>
 800afc2:	a901      	add	r1, sp, #4
 800afc4:	4640      	mov	r0, r8
 800afc6:	ec55 4b10 	vmov	r4, r5, d0
 800afca:	f7ff ff4f 	bl	800ae6c <__b2d>
 800afce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afd6:	eba3 0c02 	sub.w	ip, r3, r2
 800afda:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afe4:	ec51 0b10 	vmov	r0, r1, d0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfd6      	itet	le
 800afec:	460a      	movle	r2, r1
 800afee:	462a      	movgt	r2, r5
 800aff0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aff4:	468b      	mov	fp, r1
 800aff6:	462f      	mov	r7, r5
 800aff8:	bfd4      	ite	le
 800affa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800affe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b002:	4620      	mov	r0, r4
 800b004:	ee10 2a10 	vmov	r2, s0
 800b008:	465b      	mov	r3, fp
 800b00a:	4639      	mov	r1, r7
 800b00c:	f7f5 fc26 	bl	800085c <__aeabi_ddiv>
 800b010:	ec41 0b10 	vmov	d0, r0, r1
 800b014:	b003      	add	sp, #12
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b01a <__copybits>:
 800b01a:	3901      	subs	r1, #1
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	1149      	asrs	r1, r1, #5
 800b020:	6914      	ldr	r4, [r2, #16]
 800b022:	3101      	adds	r1, #1
 800b024:	f102 0314 	add.w	r3, r2, #20
 800b028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b02c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b030:	1f05      	subs	r5, r0, #4
 800b032:	42a3      	cmp	r3, r4
 800b034:	d30c      	bcc.n	800b050 <__copybits+0x36>
 800b036:	1aa3      	subs	r3, r4, r2
 800b038:	3b11      	subs	r3, #17
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	3211      	adds	r2, #17
 800b040:	42a2      	cmp	r2, r4
 800b042:	bf88      	it	hi
 800b044:	2300      	movhi	r3, #0
 800b046:	4418      	add	r0, r3
 800b048:	2300      	movs	r3, #0
 800b04a:	4288      	cmp	r0, r1
 800b04c:	d305      	bcc.n	800b05a <__copybits+0x40>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	f853 6b04 	ldr.w	r6, [r3], #4
 800b054:	f845 6f04 	str.w	r6, [r5, #4]!
 800b058:	e7eb      	b.n	800b032 <__copybits+0x18>
 800b05a:	f840 3b04 	str.w	r3, [r0], #4
 800b05e:	e7f4      	b.n	800b04a <__copybits+0x30>

0800b060 <__any_on>:
 800b060:	f100 0214 	add.w	r2, r0, #20
 800b064:	6900      	ldr	r0, [r0, #16]
 800b066:	114b      	asrs	r3, r1, #5
 800b068:	4298      	cmp	r0, r3
 800b06a:	b510      	push	{r4, lr}
 800b06c:	db11      	blt.n	800b092 <__any_on+0x32>
 800b06e:	dd0a      	ble.n	800b086 <__any_on+0x26>
 800b070:	f011 011f 	ands.w	r1, r1, #31
 800b074:	d007      	beq.n	800b086 <__any_on+0x26>
 800b076:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b07a:	fa24 f001 	lsr.w	r0, r4, r1
 800b07e:	fa00 f101 	lsl.w	r1, r0, r1
 800b082:	428c      	cmp	r4, r1
 800b084:	d10b      	bne.n	800b09e <__any_on+0x3e>
 800b086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d803      	bhi.n	800b096 <__any_on+0x36>
 800b08e:	2000      	movs	r0, #0
 800b090:	bd10      	pop	{r4, pc}
 800b092:	4603      	mov	r3, r0
 800b094:	e7f7      	b.n	800b086 <__any_on+0x26>
 800b096:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b09a:	2900      	cmp	r1, #0
 800b09c:	d0f5      	beq.n	800b08a <__any_on+0x2a>
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7f6      	b.n	800b090 <__any_on+0x30>
	...

0800b0a4 <_strtol_l.constprop.0>:
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0aa:	d001      	beq.n	800b0b0 <_strtol_l.constprop.0+0xc>
 800b0ac:	2b24      	cmp	r3, #36	; 0x24
 800b0ae:	d906      	bls.n	800b0be <_strtol_l.constprop.0+0x1a>
 800b0b0:	f7fe f8b2 	bl	8009218 <__errno>
 800b0b4:	2316      	movs	r3, #22
 800b0b6:	6003      	str	r3, [r0, #0]
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b1a4 <_strtol_l.constprop.0+0x100>
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	462e      	mov	r6, r5
 800b0c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b0ce:	f017 0708 	ands.w	r7, r7, #8
 800b0d2:	d1f7      	bne.n	800b0c4 <_strtol_l.constprop.0+0x20>
 800b0d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b0d6:	d132      	bne.n	800b13e <_strtol_l.constprop.0+0x9a>
 800b0d8:	782c      	ldrb	r4, [r5, #0]
 800b0da:	2701      	movs	r7, #1
 800b0dc:	1cb5      	adds	r5, r6, #2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05b      	beq.n	800b19a <_strtol_l.constprop.0+0xf6>
 800b0e2:	2b10      	cmp	r3, #16
 800b0e4:	d109      	bne.n	800b0fa <_strtol_l.constprop.0+0x56>
 800b0e6:	2c30      	cmp	r4, #48	; 0x30
 800b0e8:	d107      	bne.n	800b0fa <_strtol_l.constprop.0+0x56>
 800b0ea:	782c      	ldrb	r4, [r5, #0]
 800b0ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b0f0:	2c58      	cmp	r4, #88	; 0x58
 800b0f2:	d14d      	bne.n	800b190 <_strtol_l.constprop.0+0xec>
 800b0f4:	786c      	ldrb	r4, [r5, #1]
 800b0f6:	2310      	movs	r3, #16
 800b0f8:	3502      	adds	r5, #2
 800b0fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b0fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800b102:	f04f 0e00 	mov.w	lr, #0
 800b106:	fbb8 f9f3 	udiv	r9, r8, r3
 800b10a:	4676      	mov	r6, lr
 800b10c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b110:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b114:	f1bc 0f09 	cmp.w	ip, #9
 800b118:	d816      	bhi.n	800b148 <_strtol_l.constprop.0+0xa4>
 800b11a:	4664      	mov	r4, ip
 800b11c:	42a3      	cmp	r3, r4
 800b11e:	dd24      	ble.n	800b16a <_strtol_l.constprop.0+0xc6>
 800b120:	f1be 3fff 	cmp.w	lr, #4294967295
 800b124:	d008      	beq.n	800b138 <_strtol_l.constprop.0+0x94>
 800b126:	45b1      	cmp	r9, r6
 800b128:	d31c      	bcc.n	800b164 <_strtol_l.constprop.0+0xc0>
 800b12a:	d101      	bne.n	800b130 <_strtol_l.constprop.0+0x8c>
 800b12c:	45a2      	cmp	sl, r4
 800b12e:	db19      	blt.n	800b164 <_strtol_l.constprop.0+0xc0>
 800b130:	fb06 4603 	mla	r6, r6, r3, r4
 800b134:	f04f 0e01 	mov.w	lr, #1
 800b138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b13c:	e7e8      	b.n	800b110 <_strtol_l.constprop.0+0x6c>
 800b13e:	2c2b      	cmp	r4, #43	; 0x2b
 800b140:	bf04      	itt	eq
 800b142:	782c      	ldrbeq	r4, [r5, #0]
 800b144:	1cb5      	addeq	r5, r6, #2
 800b146:	e7ca      	b.n	800b0de <_strtol_l.constprop.0+0x3a>
 800b148:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b14c:	f1bc 0f19 	cmp.w	ip, #25
 800b150:	d801      	bhi.n	800b156 <_strtol_l.constprop.0+0xb2>
 800b152:	3c37      	subs	r4, #55	; 0x37
 800b154:	e7e2      	b.n	800b11c <_strtol_l.constprop.0+0x78>
 800b156:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b15a:	f1bc 0f19 	cmp.w	ip, #25
 800b15e:	d804      	bhi.n	800b16a <_strtol_l.constprop.0+0xc6>
 800b160:	3c57      	subs	r4, #87	; 0x57
 800b162:	e7db      	b.n	800b11c <_strtol_l.constprop.0+0x78>
 800b164:	f04f 3eff 	mov.w	lr, #4294967295
 800b168:	e7e6      	b.n	800b138 <_strtol_l.constprop.0+0x94>
 800b16a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b16e:	d105      	bne.n	800b17c <_strtol_l.constprop.0+0xd8>
 800b170:	2322      	movs	r3, #34	; 0x22
 800b172:	6003      	str	r3, [r0, #0]
 800b174:	4646      	mov	r6, r8
 800b176:	b942      	cbnz	r2, 800b18a <_strtol_l.constprop.0+0xe6>
 800b178:	4630      	mov	r0, r6
 800b17a:	e79e      	b.n	800b0ba <_strtol_l.constprop.0+0x16>
 800b17c:	b107      	cbz	r7, 800b180 <_strtol_l.constprop.0+0xdc>
 800b17e:	4276      	negs	r6, r6
 800b180:	2a00      	cmp	r2, #0
 800b182:	d0f9      	beq.n	800b178 <_strtol_l.constprop.0+0xd4>
 800b184:	f1be 0f00 	cmp.w	lr, #0
 800b188:	d000      	beq.n	800b18c <_strtol_l.constprop.0+0xe8>
 800b18a:	1e69      	subs	r1, r5, #1
 800b18c:	6011      	str	r1, [r2, #0]
 800b18e:	e7f3      	b.n	800b178 <_strtol_l.constprop.0+0xd4>
 800b190:	2430      	movs	r4, #48	; 0x30
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1b1      	bne.n	800b0fa <_strtol_l.constprop.0+0x56>
 800b196:	2308      	movs	r3, #8
 800b198:	e7af      	b.n	800b0fa <_strtol_l.constprop.0+0x56>
 800b19a:	2c30      	cmp	r4, #48	; 0x30
 800b19c:	d0a5      	beq.n	800b0ea <_strtol_l.constprop.0+0x46>
 800b19e:	230a      	movs	r3, #10
 800b1a0:	e7ab      	b.n	800b0fa <_strtol_l.constprop.0+0x56>
 800b1a2:	bf00      	nop
 800b1a4:	0800c115 	.word	0x0800c115

0800b1a8 <_strtol_r>:
 800b1a8:	f7ff bf7c 	b.w	800b0a4 <_strtol_l.constprop.0>

0800b1ac <__ascii_wctomb>:
 800b1ac:	b149      	cbz	r1, 800b1c2 <__ascii_wctomb+0x16>
 800b1ae:	2aff      	cmp	r2, #255	; 0xff
 800b1b0:	bf85      	ittet	hi
 800b1b2:	238a      	movhi	r3, #138	; 0x8a
 800b1b4:	6003      	strhi	r3, [r0, #0]
 800b1b6:	700a      	strbls	r2, [r1, #0]
 800b1b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1bc:	bf98      	it	ls
 800b1be:	2001      	movls	r0, #1
 800b1c0:	4770      	bx	lr
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4770      	bx	lr

0800b1c6 <__ssputs_r>:
 800b1c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ca:	688e      	ldr	r6, [r1, #8]
 800b1cc:	461f      	mov	r7, r3
 800b1ce:	42be      	cmp	r6, r7
 800b1d0:	680b      	ldr	r3, [r1, #0]
 800b1d2:	4682      	mov	sl, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	4690      	mov	r8, r2
 800b1d8:	d82c      	bhi.n	800b234 <__ssputs_r+0x6e>
 800b1da:	898a      	ldrh	r2, [r1, #12]
 800b1dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1e0:	d026      	beq.n	800b230 <__ssputs_r+0x6a>
 800b1e2:	6965      	ldr	r5, [r4, #20]
 800b1e4:	6909      	ldr	r1, [r1, #16]
 800b1e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ea:	eba3 0901 	sub.w	r9, r3, r1
 800b1ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1f2:	1c7b      	adds	r3, r7, #1
 800b1f4:	444b      	add	r3, r9
 800b1f6:	106d      	asrs	r5, r5, #1
 800b1f8:	429d      	cmp	r5, r3
 800b1fa:	bf38      	it	cc
 800b1fc:	461d      	movcc	r5, r3
 800b1fe:	0553      	lsls	r3, r2, #21
 800b200:	d527      	bpl.n	800b252 <__ssputs_r+0x8c>
 800b202:	4629      	mov	r1, r5
 800b204:	f7fb ff78 	bl	80070f8 <_malloc_r>
 800b208:	4606      	mov	r6, r0
 800b20a:	b360      	cbz	r0, 800b266 <__ssputs_r+0xa0>
 800b20c:	6921      	ldr	r1, [r4, #16]
 800b20e:	464a      	mov	r2, r9
 800b210:	f7fe f82f 	bl	8009272 <memcpy>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b21e:	81a3      	strh	r3, [r4, #12]
 800b220:	6126      	str	r6, [r4, #16]
 800b222:	6165      	str	r5, [r4, #20]
 800b224:	444e      	add	r6, r9
 800b226:	eba5 0509 	sub.w	r5, r5, r9
 800b22a:	6026      	str	r6, [r4, #0]
 800b22c:	60a5      	str	r5, [r4, #8]
 800b22e:	463e      	mov	r6, r7
 800b230:	42be      	cmp	r6, r7
 800b232:	d900      	bls.n	800b236 <__ssputs_r+0x70>
 800b234:	463e      	mov	r6, r7
 800b236:	6820      	ldr	r0, [r4, #0]
 800b238:	4632      	mov	r2, r6
 800b23a:	4641      	mov	r1, r8
 800b23c:	f000 fb82 	bl	800b944 <memmove>
 800b240:	68a3      	ldr	r3, [r4, #8]
 800b242:	1b9b      	subs	r3, r3, r6
 800b244:	60a3      	str	r3, [r4, #8]
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	4433      	add	r3, r6
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	2000      	movs	r0, #0
 800b24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b252:	462a      	mov	r2, r5
 800b254:	f000 fbcf 	bl	800b9f6 <_realloc_r>
 800b258:	4606      	mov	r6, r0
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d1e0      	bne.n	800b220 <__ssputs_r+0x5a>
 800b25e:	6921      	ldr	r1, [r4, #16]
 800b260:	4650      	mov	r0, sl
 800b262:	f7fe febb 	bl	8009fdc <_free_r>
 800b266:	230c      	movs	r3, #12
 800b268:	f8ca 3000 	str.w	r3, [sl]
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	e7e9      	b.n	800b24e <__ssputs_r+0x88>
	...

0800b27c <_svfiprintf_r>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	4698      	mov	r8, r3
 800b282:	898b      	ldrh	r3, [r1, #12]
 800b284:	061b      	lsls	r3, r3, #24
 800b286:	b09d      	sub	sp, #116	; 0x74
 800b288:	4607      	mov	r7, r0
 800b28a:	460d      	mov	r5, r1
 800b28c:	4614      	mov	r4, r2
 800b28e:	d50e      	bpl.n	800b2ae <_svfiprintf_r+0x32>
 800b290:	690b      	ldr	r3, [r1, #16]
 800b292:	b963      	cbnz	r3, 800b2ae <_svfiprintf_r+0x32>
 800b294:	2140      	movs	r1, #64	; 0x40
 800b296:	f7fb ff2f 	bl	80070f8 <_malloc_r>
 800b29a:	6028      	str	r0, [r5, #0]
 800b29c:	6128      	str	r0, [r5, #16]
 800b29e:	b920      	cbnz	r0, 800b2aa <_svfiprintf_r+0x2e>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	e0d0      	b.n	800b44c <_svfiprintf_r+0x1d0>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	616b      	str	r3, [r5, #20]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b2:	2320      	movs	r3, #32
 800b2b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2bc:	2330      	movs	r3, #48	; 0x30
 800b2be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b464 <_svfiprintf_r+0x1e8>
 800b2c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c6:	f04f 0901 	mov.w	r9, #1
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	469a      	mov	sl, r3
 800b2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d2:	b10a      	cbz	r2, 800b2d8 <_svfiprintf_r+0x5c>
 800b2d4:	2a25      	cmp	r2, #37	; 0x25
 800b2d6:	d1f9      	bne.n	800b2cc <_svfiprintf_r+0x50>
 800b2d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2dc:	d00b      	beq.n	800b2f6 <_svfiprintf_r+0x7a>
 800b2de:	465b      	mov	r3, fp
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff ff6e 	bl	800b1c6 <__ssputs_r>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f000 80a9 	beq.w	800b442 <_svfiprintf_r+0x1c6>
 800b2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f2:	445a      	add	r2, fp
 800b2f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 80a1 	beq.w	800b442 <_svfiprintf_r+0x1c6>
 800b300:	2300      	movs	r3, #0
 800b302:	f04f 32ff 	mov.w	r2, #4294967295
 800b306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30a:	f10a 0a01 	add.w	sl, sl, #1
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b316:	931a      	str	r3, [sp, #104]	; 0x68
 800b318:	4654      	mov	r4, sl
 800b31a:	2205      	movs	r2, #5
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	4850      	ldr	r0, [pc, #320]	; (800b464 <_svfiprintf_r+0x1e8>)
 800b322:	f7f4 ff5d 	bl	80001e0 <memchr>
 800b326:	9a04      	ldr	r2, [sp, #16]
 800b328:	b9d8      	cbnz	r0, 800b362 <_svfiprintf_r+0xe6>
 800b32a:	06d0      	lsls	r0, r2, #27
 800b32c:	bf44      	itt	mi
 800b32e:	2320      	movmi	r3, #32
 800b330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b334:	0711      	lsls	r1, r2, #28
 800b336:	bf44      	itt	mi
 800b338:	232b      	movmi	r3, #43	; 0x2b
 800b33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b33e:	f89a 3000 	ldrb.w	r3, [sl]
 800b342:	2b2a      	cmp	r3, #42	; 0x2a
 800b344:	d015      	beq.n	800b372 <_svfiprintf_r+0xf6>
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	4654      	mov	r4, sl
 800b34a:	2000      	movs	r0, #0
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	4621      	mov	r1, r4
 800b352:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b356:	3b30      	subs	r3, #48	; 0x30
 800b358:	2b09      	cmp	r3, #9
 800b35a:	d94d      	bls.n	800b3f8 <_svfiprintf_r+0x17c>
 800b35c:	b1b0      	cbz	r0, 800b38c <_svfiprintf_r+0x110>
 800b35e:	9207      	str	r2, [sp, #28]
 800b360:	e014      	b.n	800b38c <_svfiprintf_r+0x110>
 800b362:	eba0 0308 	sub.w	r3, r0, r8
 800b366:	fa09 f303 	lsl.w	r3, r9, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	46a2      	mov	sl, r4
 800b370:	e7d2      	b.n	800b318 <_svfiprintf_r+0x9c>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	1d19      	adds	r1, r3, #4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	9103      	str	r1, [sp, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfbb      	ittet	lt
 800b37e:	425b      	neglt	r3, r3
 800b380:	f042 0202 	orrlt.w	r2, r2, #2
 800b384:	9307      	strge	r3, [sp, #28]
 800b386:	9307      	strlt	r3, [sp, #28]
 800b388:	bfb8      	it	lt
 800b38a:	9204      	strlt	r2, [sp, #16]
 800b38c:	7823      	ldrb	r3, [r4, #0]
 800b38e:	2b2e      	cmp	r3, #46	; 0x2e
 800b390:	d10c      	bne.n	800b3ac <_svfiprintf_r+0x130>
 800b392:	7863      	ldrb	r3, [r4, #1]
 800b394:	2b2a      	cmp	r3, #42	; 0x2a
 800b396:	d134      	bne.n	800b402 <_svfiprintf_r+0x186>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	9203      	str	r2, [sp, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bfb8      	it	lt
 800b3a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a8:	3402      	adds	r4, #2
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b474 <_svfiprintf_r+0x1f8>
 800b3b0:	7821      	ldrb	r1, [r4, #0]
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	f7f4 ff13 	bl	80001e0 <memchr>
 800b3ba:	b138      	cbz	r0, 800b3cc <_svfiprintf_r+0x150>
 800b3bc:	9b04      	ldr	r3, [sp, #16]
 800b3be:	eba0 000a 	sub.w	r0, r0, sl
 800b3c2:	2240      	movs	r2, #64	; 0x40
 800b3c4:	4082      	lsls	r2, r0
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	3401      	adds	r4, #1
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d0:	4825      	ldr	r0, [pc, #148]	; (800b468 <_svfiprintf_r+0x1ec>)
 800b3d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d6:	2206      	movs	r2, #6
 800b3d8:	f7f4 ff02 	bl	80001e0 <memchr>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d038      	beq.n	800b452 <_svfiprintf_r+0x1d6>
 800b3e0:	4b22      	ldr	r3, [pc, #136]	; (800b46c <_svfiprintf_r+0x1f0>)
 800b3e2:	bb1b      	cbnz	r3, 800b42c <_svfiprintf_r+0x1b0>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	3307      	adds	r3, #7
 800b3e8:	f023 0307 	bic.w	r3, r3, #7
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	4433      	add	r3, r6
 800b3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f6:	e768      	b.n	800b2ca <_svfiprintf_r+0x4e>
 800b3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	2001      	movs	r0, #1
 800b400:	e7a6      	b.n	800b350 <_svfiprintf_r+0xd4>
 800b402:	2300      	movs	r3, #0
 800b404:	3401      	adds	r4, #1
 800b406:	9305      	str	r3, [sp, #20]
 800b408:	4619      	mov	r1, r3
 800b40a:	f04f 0c0a 	mov.w	ip, #10
 800b40e:	4620      	mov	r0, r4
 800b410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b414:	3a30      	subs	r2, #48	; 0x30
 800b416:	2a09      	cmp	r2, #9
 800b418:	d903      	bls.n	800b422 <_svfiprintf_r+0x1a6>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0c6      	beq.n	800b3ac <_svfiprintf_r+0x130>
 800b41e:	9105      	str	r1, [sp, #20]
 800b420:	e7c4      	b.n	800b3ac <_svfiprintf_r+0x130>
 800b422:	fb0c 2101 	mla	r1, ip, r1, r2
 800b426:	4604      	mov	r4, r0
 800b428:	2301      	movs	r3, #1
 800b42a:	e7f0      	b.n	800b40e <_svfiprintf_r+0x192>
 800b42c:	ab03      	add	r3, sp, #12
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	462a      	mov	r2, r5
 800b432:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <_svfiprintf_r+0x1f4>)
 800b434:	a904      	add	r1, sp, #16
 800b436:	4638      	mov	r0, r7
 800b438:	f7fc fe02 	bl	8008040 <_printf_float>
 800b43c:	1c42      	adds	r2, r0, #1
 800b43e:	4606      	mov	r6, r0
 800b440:	d1d6      	bne.n	800b3f0 <_svfiprintf_r+0x174>
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	065b      	lsls	r3, r3, #25
 800b446:	f53f af2d 	bmi.w	800b2a4 <_svfiprintf_r+0x28>
 800b44a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b44c:	b01d      	add	sp, #116	; 0x74
 800b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b452:	ab03      	add	r3, sp, #12
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	462a      	mov	r2, r5
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <_svfiprintf_r+0x1f4>)
 800b45a:	a904      	add	r1, sp, #16
 800b45c:	4638      	mov	r0, r7
 800b45e:	f7fd f893 	bl	8008588 <_printf_i>
 800b462:	e7eb      	b.n	800b43c <_svfiprintf_r+0x1c0>
 800b464:	0800c215 	.word	0x0800c215
 800b468:	0800c21f 	.word	0x0800c21f
 800b46c:	08008041 	.word	0x08008041
 800b470:	0800b1c7 	.word	0x0800b1c7
 800b474:	0800c21b 	.word	0x0800c21b

0800b478 <__sfputc_r>:
 800b478:	6893      	ldr	r3, [r2, #8]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	b410      	push	{r4}
 800b480:	6093      	str	r3, [r2, #8]
 800b482:	da08      	bge.n	800b496 <__sfputc_r+0x1e>
 800b484:	6994      	ldr	r4, [r2, #24]
 800b486:	42a3      	cmp	r3, r4
 800b488:	db01      	blt.n	800b48e <__sfputc_r+0x16>
 800b48a:	290a      	cmp	r1, #10
 800b48c:	d103      	bne.n	800b496 <__sfputc_r+0x1e>
 800b48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b492:	f7fd bd3e 	b.w	8008f12 <__swbuf_r>
 800b496:	6813      	ldr	r3, [r2, #0]
 800b498:	1c58      	adds	r0, r3, #1
 800b49a:	6010      	str	r0, [r2, #0]
 800b49c:	7019      	strb	r1, [r3, #0]
 800b49e:	4608      	mov	r0, r1
 800b4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <__sfputs_r>:
 800b4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	460f      	mov	r7, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	18d5      	adds	r5, r2, r3
 800b4b0:	42ac      	cmp	r4, r5
 800b4b2:	d101      	bne.n	800b4b8 <__sfputs_r+0x12>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e007      	b.n	800b4c8 <__sfputs_r+0x22>
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	463a      	mov	r2, r7
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f7ff ffda 	bl	800b478 <__sfputc_r>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d1f3      	bne.n	800b4b0 <__sfputs_r+0xa>
 800b4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4cc <_vfiprintf_r>:
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	b09d      	sub	sp, #116	; 0x74
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	4698      	mov	r8, r3
 800b4d8:	4606      	mov	r6, r0
 800b4da:	b118      	cbz	r0, 800b4e4 <_vfiprintf_r+0x18>
 800b4dc:	6a03      	ldr	r3, [r0, #32]
 800b4de:	b90b      	cbnz	r3, 800b4e4 <_vfiprintf_r+0x18>
 800b4e0:	f7fd fc10 	bl	8008d04 <__sinit>
 800b4e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_vfiprintf_r+0x2a>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	059a      	lsls	r2, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_vfiprintf_r+0x2a>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4f2:	f7fd febc 	bl	800926e <__retarget_lock_acquire_recursive>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	071b      	lsls	r3, r3, #28
 800b4fa:	d501      	bpl.n	800b500 <_vfiprintf_r+0x34>
 800b4fc:	692b      	ldr	r3, [r5, #16]
 800b4fe:	b99b      	cbnz	r3, 800b528 <_vfiprintf_r+0x5c>
 800b500:	4629      	mov	r1, r5
 800b502:	4630      	mov	r0, r6
 800b504:	f7fd fd42 	bl	8008f8c <__swsetup_r>
 800b508:	b170      	cbz	r0, 800b528 <_vfiprintf_r+0x5c>
 800b50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b50c:	07dc      	lsls	r4, r3, #31
 800b50e:	d504      	bpl.n	800b51a <_vfiprintf_r+0x4e>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b01d      	add	sp, #116	; 0x74
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	0598      	lsls	r0, r3, #22
 800b51e:	d4f7      	bmi.n	800b510 <_vfiprintf_r+0x44>
 800b520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b522:	f7fd fea5 	bl	8009270 <__retarget_lock_release_recursive>
 800b526:	e7f3      	b.n	800b510 <_vfiprintf_r+0x44>
 800b528:	2300      	movs	r3, #0
 800b52a:	9309      	str	r3, [sp, #36]	; 0x24
 800b52c:	2320      	movs	r3, #32
 800b52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b532:	f8cd 800c 	str.w	r8, [sp, #12]
 800b536:	2330      	movs	r3, #48	; 0x30
 800b538:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6ec <_vfiprintf_r+0x220>
 800b53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b540:	f04f 0901 	mov.w	r9, #1
 800b544:	4623      	mov	r3, r4
 800b546:	469a      	mov	sl, r3
 800b548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54c:	b10a      	cbz	r2, 800b552 <_vfiprintf_r+0x86>
 800b54e:	2a25      	cmp	r2, #37	; 0x25
 800b550:	d1f9      	bne.n	800b546 <_vfiprintf_r+0x7a>
 800b552:	ebba 0b04 	subs.w	fp, sl, r4
 800b556:	d00b      	beq.n	800b570 <_vfiprintf_r+0xa4>
 800b558:	465b      	mov	r3, fp
 800b55a:	4622      	mov	r2, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ffa1 	bl	800b4a6 <__sfputs_r>
 800b564:	3001      	adds	r0, #1
 800b566:	f000 80a9 	beq.w	800b6bc <_vfiprintf_r+0x1f0>
 800b56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b56c:	445a      	add	r2, fp
 800b56e:	9209      	str	r2, [sp, #36]	; 0x24
 800b570:	f89a 3000 	ldrb.w	r3, [sl]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80a1 	beq.w	800b6bc <_vfiprintf_r+0x1f0>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b584:	f10a 0a01 	add.w	sl, sl, #1
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b590:	931a      	str	r3, [sp, #104]	; 0x68
 800b592:	4654      	mov	r4, sl
 800b594:	2205      	movs	r2, #5
 800b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59a:	4854      	ldr	r0, [pc, #336]	; (800b6ec <_vfiprintf_r+0x220>)
 800b59c:	f7f4 fe20 	bl	80001e0 <memchr>
 800b5a0:	9a04      	ldr	r2, [sp, #16]
 800b5a2:	b9d8      	cbnz	r0, 800b5dc <_vfiprintf_r+0x110>
 800b5a4:	06d1      	lsls	r1, r2, #27
 800b5a6:	bf44      	itt	mi
 800b5a8:	2320      	movmi	r3, #32
 800b5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ae:	0713      	lsls	r3, r2, #28
 800b5b0:	bf44      	itt	mi
 800b5b2:	232b      	movmi	r3, #43	; 0x2b
 800b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5be:	d015      	beq.n	800b5ec <_vfiprintf_r+0x120>
 800b5c0:	9a07      	ldr	r2, [sp, #28]
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f04f 0c0a 	mov.w	ip, #10
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d0:	3b30      	subs	r3, #48	; 0x30
 800b5d2:	2b09      	cmp	r3, #9
 800b5d4:	d94d      	bls.n	800b672 <_vfiprintf_r+0x1a6>
 800b5d6:	b1b0      	cbz	r0, 800b606 <_vfiprintf_r+0x13a>
 800b5d8:	9207      	str	r2, [sp, #28]
 800b5da:	e014      	b.n	800b606 <_vfiprintf_r+0x13a>
 800b5dc:	eba0 0308 	sub.w	r3, r0, r8
 800b5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	46a2      	mov	sl, r4
 800b5ea:	e7d2      	b.n	800b592 <_vfiprintf_r+0xc6>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	1d19      	adds	r1, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9103      	str	r1, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfbb      	ittet	lt
 800b5f8:	425b      	neglt	r3, r3
 800b5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b5fe:	9307      	strge	r3, [sp, #28]
 800b600:	9307      	strlt	r3, [sp, #28]
 800b602:	bfb8      	it	lt
 800b604:	9204      	strlt	r2, [sp, #16]
 800b606:	7823      	ldrb	r3, [r4, #0]
 800b608:	2b2e      	cmp	r3, #46	; 0x2e
 800b60a:	d10c      	bne.n	800b626 <_vfiprintf_r+0x15a>
 800b60c:	7863      	ldrb	r3, [r4, #1]
 800b60e:	2b2a      	cmp	r3, #42	; 0x2a
 800b610:	d134      	bne.n	800b67c <_vfiprintf_r+0x1b0>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9203      	str	r2, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfb8      	it	lt
 800b61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b622:	3402      	adds	r4, #2
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6fc <_vfiprintf_r+0x230>
 800b62a:	7821      	ldrb	r1, [r4, #0]
 800b62c:	2203      	movs	r2, #3
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 fdd6 	bl	80001e0 <memchr>
 800b634:	b138      	cbz	r0, 800b646 <_vfiprintf_r+0x17a>
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	eba0 000a 	sub.w	r0, r0, sl
 800b63c:	2240      	movs	r2, #64	; 0x40
 800b63e:	4082      	lsls	r2, r0
 800b640:	4313      	orrs	r3, r2
 800b642:	3401      	adds	r4, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64a:	4829      	ldr	r0, [pc, #164]	; (800b6f0 <_vfiprintf_r+0x224>)
 800b64c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b650:	2206      	movs	r2, #6
 800b652:	f7f4 fdc5 	bl	80001e0 <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d03f      	beq.n	800b6da <_vfiprintf_r+0x20e>
 800b65a:	4b26      	ldr	r3, [pc, #152]	; (800b6f4 <_vfiprintf_r+0x228>)
 800b65c:	bb1b      	cbnz	r3, 800b6a6 <_vfiprintf_r+0x1da>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	f023 0307 	bic.w	r3, r3, #7
 800b666:	3308      	adds	r3, #8
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66c:	443b      	add	r3, r7
 800b66e:	9309      	str	r3, [sp, #36]	; 0x24
 800b670:	e768      	b.n	800b544 <_vfiprintf_r+0x78>
 800b672:	fb0c 3202 	mla	r2, ip, r2, r3
 800b676:	460c      	mov	r4, r1
 800b678:	2001      	movs	r0, #1
 800b67a:	e7a6      	b.n	800b5ca <_vfiprintf_r+0xfe>
 800b67c:	2300      	movs	r3, #0
 800b67e:	3401      	adds	r4, #1
 800b680:	9305      	str	r3, [sp, #20]
 800b682:	4619      	mov	r1, r3
 800b684:	f04f 0c0a 	mov.w	ip, #10
 800b688:	4620      	mov	r0, r4
 800b68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68e:	3a30      	subs	r2, #48	; 0x30
 800b690:	2a09      	cmp	r2, #9
 800b692:	d903      	bls.n	800b69c <_vfiprintf_r+0x1d0>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0c6      	beq.n	800b626 <_vfiprintf_r+0x15a>
 800b698:	9105      	str	r1, [sp, #20]
 800b69a:	e7c4      	b.n	800b626 <_vfiprintf_r+0x15a>
 800b69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e7f0      	b.n	800b688 <_vfiprintf_r+0x1bc>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <_vfiprintf_r+0x22c>)
 800b6ae:	a904      	add	r1, sp, #16
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7fc fcc5 	bl	8008040 <_printf_float>
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	1c78      	adds	r0, r7, #1
 800b6ba:	d1d6      	bne.n	800b66a <_vfiprintf_r+0x19e>
 800b6bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6be:	07d9      	lsls	r1, r3, #31
 800b6c0:	d405      	bmi.n	800b6ce <_vfiprintf_r+0x202>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	059a      	lsls	r2, r3, #22
 800b6c6:	d402      	bmi.n	800b6ce <_vfiprintf_r+0x202>
 800b6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ca:	f7fd fdd1 	bl	8009270 <__retarget_lock_release_recursive>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	065b      	lsls	r3, r3, #25
 800b6d2:	f53f af1d 	bmi.w	800b510 <_vfiprintf_r+0x44>
 800b6d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6d8:	e71c      	b.n	800b514 <_vfiprintf_r+0x48>
 800b6da:	ab03      	add	r3, sp, #12
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <_vfiprintf_r+0x22c>)
 800b6e2:	a904      	add	r1, sp, #16
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7fc ff4f 	bl	8008588 <_printf_i>
 800b6ea:	e7e4      	b.n	800b6b6 <_vfiprintf_r+0x1ea>
 800b6ec:	0800c215 	.word	0x0800c215
 800b6f0:	0800c21f 	.word	0x0800c21f
 800b6f4:	08008041 	.word	0x08008041
 800b6f8:	0800b4a7 	.word	0x0800b4a7
 800b6fc:	0800c21b 	.word	0x0800c21b

0800b700 <__sflush_r>:
 800b700:	898a      	ldrh	r2, [r1, #12]
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	4605      	mov	r5, r0
 800b708:	0710      	lsls	r0, r2, #28
 800b70a:	460c      	mov	r4, r1
 800b70c:	d458      	bmi.n	800b7c0 <__sflush_r+0xc0>
 800b70e:	684b      	ldr	r3, [r1, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	dc05      	bgt.n	800b720 <__sflush_r+0x20>
 800b714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	dc02      	bgt.n	800b720 <__sflush_r+0x20>
 800b71a:	2000      	movs	r0, #0
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b722:	2e00      	cmp	r6, #0
 800b724:	d0f9      	beq.n	800b71a <__sflush_r+0x1a>
 800b726:	2300      	movs	r3, #0
 800b728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b72c:	682f      	ldr	r7, [r5, #0]
 800b72e:	6a21      	ldr	r1, [r4, #32]
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	d032      	beq.n	800b79a <__sflush_r+0x9a>
 800b734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	075a      	lsls	r2, r3, #29
 800b73a:	d505      	bpl.n	800b748 <__sflush_r+0x48>
 800b73c:	6863      	ldr	r3, [r4, #4]
 800b73e:	1ac0      	subs	r0, r0, r3
 800b740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b742:	b10b      	cbz	r3, 800b748 <__sflush_r+0x48>
 800b744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b746:	1ac0      	subs	r0, r0, r3
 800b748:	2300      	movs	r3, #0
 800b74a:	4602      	mov	r2, r0
 800b74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b74e:	6a21      	ldr	r1, [r4, #32]
 800b750:	4628      	mov	r0, r5
 800b752:	47b0      	blx	r6
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	d106      	bne.n	800b768 <__sflush_r+0x68>
 800b75a:	6829      	ldr	r1, [r5, #0]
 800b75c:	291d      	cmp	r1, #29
 800b75e:	d82b      	bhi.n	800b7b8 <__sflush_r+0xb8>
 800b760:	4a29      	ldr	r2, [pc, #164]	; (800b808 <__sflush_r+0x108>)
 800b762:	410a      	asrs	r2, r1
 800b764:	07d6      	lsls	r6, r2, #31
 800b766:	d427      	bmi.n	800b7b8 <__sflush_r+0xb8>
 800b768:	2200      	movs	r2, #0
 800b76a:	6062      	str	r2, [r4, #4]
 800b76c:	04d9      	lsls	r1, r3, #19
 800b76e:	6922      	ldr	r2, [r4, #16]
 800b770:	6022      	str	r2, [r4, #0]
 800b772:	d504      	bpl.n	800b77e <__sflush_r+0x7e>
 800b774:	1c42      	adds	r2, r0, #1
 800b776:	d101      	bne.n	800b77c <__sflush_r+0x7c>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b903      	cbnz	r3, 800b77e <__sflush_r+0x7e>
 800b77c:	6560      	str	r0, [r4, #84]	; 0x54
 800b77e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b780:	602f      	str	r7, [r5, #0]
 800b782:	2900      	cmp	r1, #0
 800b784:	d0c9      	beq.n	800b71a <__sflush_r+0x1a>
 800b786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b78a:	4299      	cmp	r1, r3
 800b78c:	d002      	beq.n	800b794 <__sflush_r+0x94>
 800b78e:	4628      	mov	r0, r5
 800b790:	f7fe fc24 	bl	8009fdc <_free_r>
 800b794:	2000      	movs	r0, #0
 800b796:	6360      	str	r0, [r4, #52]	; 0x34
 800b798:	e7c0      	b.n	800b71c <__sflush_r+0x1c>
 800b79a:	2301      	movs	r3, #1
 800b79c:	4628      	mov	r0, r5
 800b79e:	47b0      	blx	r6
 800b7a0:	1c41      	adds	r1, r0, #1
 800b7a2:	d1c8      	bne.n	800b736 <__sflush_r+0x36>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0c5      	beq.n	800b736 <__sflush_r+0x36>
 800b7aa:	2b1d      	cmp	r3, #29
 800b7ac:	d001      	beq.n	800b7b2 <__sflush_r+0xb2>
 800b7ae:	2b16      	cmp	r3, #22
 800b7b0:	d101      	bne.n	800b7b6 <__sflush_r+0xb6>
 800b7b2:	602f      	str	r7, [r5, #0]
 800b7b4:	e7b1      	b.n	800b71a <__sflush_r+0x1a>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	e7ad      	b.n	800b71c <__sflush_r+0x1c>
 800b7c0:	690f      	ldr	r7, [r1, #16]
 800b7c2:	2f00      	cmp	r7, #0
 800b7c4:	d0a9      	beq.n	800b71a <__sflush_r+0x1a>
 800b7c6:	0793      	lsls	r3, r2, #30
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	bf08      	it	eq
 800b7cc:	694b      	ldreq	r3, [r1, #20]
 800b7ce:	600f      	str	r7, [r1, #0]
 800b7d0:	bf18      	it	ne
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	eba6 0807 	sub.w	r8, r6, r7
 800b7d8:	608b      	str	r3, [r1, #8]
 800b7da:	f1b8 0f00 	cmp.w	r8, #0
 800b7de:	dd9c      	ble.n	800b71a <__sflush_r+0x1a>
 800b7e0:	6a21      	ldr	r1, [r4, #32]
 800b7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e4:	4643      	mov	r3, r8
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b0      	blx	r6
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dc06      	bgt.n	800b7fe <__sflush_r+0xfe>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e78e      	b.n	800b71c <__sflush_r+0x1c>
 800b7fe:	4407      	add	r7, r0
 800b800:	eba8 0800 	sub.w	r8, r8, r0
 800b804:	e7e9      	b.n	800b7da <__sflush_r+0xda>
 800b806:	bf00      	nop
 800b808:	dfbffffe 	.word	0xdfbffffe

0800b80c <_fflush_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	4605      	mov	r5, r0
 800b812:	460c      	mov	r4, r1
 800b814:	b913      	cbnz	r3, 800b81c <_fflush_r+0x10>
 800b816:	2500      	movs	r5, #0
 800b818:	4628      	mov	r0, r5
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	b118      	cbz	r0, 800b826 <_fflush_r+0x1a>
 800b81e:	6a03      	ldr	r3, [r0, #32]
 800b820:	b90b      	cbnz	r3, 800b826 <_fflush_r+0x1a>
 800b822:	f7fd fa6f 	bl	8008d04 <__sinit>
 800b826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d0f3      	beq.n	800b816 <_fflush_r+0xa>
 800b82e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b830:	07d0      	lsls	r0, r2, #31
 800b832:	d404      	bmi.n	800b83e <_fflush_r+0x32>
 800b834:	0599      	lsls	r1, r3, #22
 800b836:	d402      	bmi.n	800b83e <_fflush_r+0x32>
 800b838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b83a:	f7fd fd18 	bl	800926e <__retarget_lock_acquire_recursive>
 800b83e:	4628      	mov	r0, r5
 800b840:	4621      	mov	r1, r4
 800b842:	f7ff ff5d 	bl	800b700 <__sflush_r>
 800b846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b848:	07da      	lsls	r2, r3, #31
 800b84a:	4605      	mov	r5, r0
 800b84c:	d4e4      	bmi.n	800b818 <_fflush_r+0xc>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	059b      	lsls	r3, r3, #22
 800b852:	d4e1      	bmi.n	800b818 <_fflush_r+0xc>
 800b854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b856:	f7fd fd0b 	bl	8009270 <__retarget_lock_release_recursive>
 800b85a:	e7dd      	b.n	800b818 <_fflush_r+0xc>

0800b85c <fiprintf>:
 800b85c:	b40e      	push	{r1, r2, r3}
 800b85e:	b503      	push	{r0, r1, lr}
 800b860:	4601      	mov	r1, r0
 800b862:	ab03      	add	r3, sp, #12
 800b864:	4805      	ldr	r0, [pc, #20]	; (800b87c <fiprintf+0x20>)
 800b866:	f853 2b04 	ldr.w	r2, [r3], #4
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	f7ff fe2d 	bl	800b4cc <_vfiprintf_r>
 800b872:	b002      	add	sp, #8
 800b874:	f85d eb04 	ldr.w	lr, [sp], #4
 800b878:	b003      	add	sp, #12
 800b87a:	4770      	bx	lr
 800b87c:	200001e0 	.word	0x200001e0

0800b880 <__swhatbuf_r>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	460c      	mov	r4, r1
 800b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b888:	2900      	cmp	r1, #0
 800b88a:	b096      	sub	sp, #88	; 0x58
 800b88c:	4615      	mov	r5, r2
 800b88e:	461e      	mov	r6, r3
 800b890:	da0d      	bge.n	800b8ae <__swhatbuf_r+0x2e>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b898:	f04f 0100 	mov.w	r1, #0
 800b89c:	bf0c      	ite	eq
 800b89e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8a2:	2340      	movne	r3, #64	; 0x40
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	6031      	str	r1, [r6, #0]
 800b8a8:	602b      	str	r3, [r5, #0]
 800b8aa:	b016      	add	sp, #88	; 0x58
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
 800b8ae:	466a      	mov	r2, sp
 800b8b0:	f000 f862 	bl	800b978 <_fstat_r>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	dbec      	blt.n	800b892 <__swhatbuf_r+0x12>
 800b8b8:	9901      	ldr	r1, [sp, #4]
 800b8ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8c2:	4259      	negs	r1, r3
 800b8c4:	4159      	adcs	r1, r3
 800b8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ca:	e7eb      	b.n	800b8a4 <__swhatbuf_r+0x24>

0800b8cc <__smakebuf_r>:
 800b8cc:	898b      	ldrh	r3, [r1, #12]
 800b8ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d0:	079d      	lsls	r5, r3, #30
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	d507      	bpl.n	800b8e8 <__smakebuf_r+0x1c>
 800b8d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	6123      	str	r3, [r4, #16]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	6163      	str	r3, [r4, #20]
 800b8e4:	b002      	add	sp, #8
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	ab01      	add	r3, sp, #4
 800b8ea:	466a      	mov	r2, sp
 800b8ec:	f7ff ffc8 	bl	800b880 <__swhatbuf_r>
 800b8f0:	9900      	ldr	r1, [sp, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7fb fbff 	bl	80070f8 <_malloc_r>
 800b8fa:	b948      	cbnz	r0, 800b910 <__smakebuf_r+0x44>
 800b8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b900:	059a      	lsls	r2, r3, #22
 800b902:	d4ef      	bmi.n	800b8e4 <__smakebuf_r+0x18>
 800b904:	f023 0303 	bic.w	r3, r3, #3
 800b908:	f043 0302 	orr.w	r3, r3, #2
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	e7e3      	b.n	800b8d8 <__smakebuf_r+0xc>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	6020      	str	r0, [r4, #0]
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	9b00      	ldr	r3, [sp, #0]
 800b91c:	6163      	str	r3, [r4, #20]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	6120      	str	r0, [r4, #16]
 800b922:	b15b      	cbz	r3, 800b93c <__smakebuf_r+0x70>
 800b924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 f837 	bl	800b99c <_isatty_r>
 800b92e:	b128      	cbz	r0, 800b93c <__smakebuf_r+0x70>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f023 0303 	bic.w	r3, r3, #3
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	431d      	orrs	r5, r3
 800b940:	81a5      	strh	r5, [r4, #12]
 800b942:	e7cf      	b.n	800b8e4 <__smakebuf_r+0x18>

0800b944 <memmove>:
 800b944:	4288      	cmp	r0, r1
 800b946:	b510      	push	{r4, lr}
 800b948:	eb01 0402 	add.w	r4, r1, r2
 800b94c:	d902      	bls.n	800b954 <memmove+0x10>
 800b94e:	4284      	cmp	r4, r0
 800b950:	4623      	mov	r3, r4
 800b952:	d807      	bhi.n	800b964 <memmove+0x20>
 800b954:	1e43      	subs	r3, r0, #1
 800b956:	42a1      	cmp	r1, r4
 800b958:	d008      	beq.n	800b96c <memmove+0x28>
 800b95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b962:	e7f8      	b.n	800b956 <memmove+0x12>
 800b964:	4402      	add	r2, r0
 800b966:	4601      	mov	r1, r0
 800b968:	428a      	cmp	r2, r1
 800b96a:	d100      	bne.n	800b96e <memmove+0x2a>
 800b96c:	bd10      	pop	{r4, pc}
 800b96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b976:	e7f7      	b.n	800b968 <memmove+0x24>

0800b978 <_fstat_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d07      	ldr	r5, [pc, #28]	; (800b998 <_fstat_r+0x20>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	4611      	mov	r1, r2
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	f7f7 fa08 	bl	8002d9a <_fstat>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	d102      	bne.n	800b994 <_fstat_r+0x1c>
 800b98e:	682b      	ldr	r3, [r5, #0]
 800b990:	b103      	cbz	r3, 800b994 <_fstat_r+0x1c>
 800b992:	6023      	str	r3, [r4, #0]
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	bf00      	nop
 800b998:	20000674 	.word	0x20000674

0800b99c <_isatty_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_isatty_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7f7 fa07 	bl	8002dba <_isatty>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_isatty_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_isatty_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	20000674 	.word	0x20000674

0800b9bc <abort>:
 800b9bc:	b508      	push	{r3, lr}
 800b9be:	2006      	movs	r0, #6
 800b9c0:	f000 f870 	bl	800baa4 <raise>
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f7f7 f999 	bl	8002cfc <_exit>

0800b9ca <_calloc_r>:
 800b9ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9cc:	fba1 2402 	umull	r2, r4, r1, r2
 800b9d0:	b94c      	cbnz	r4, 800b9e6 <_calloc_r+0x1c>
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	9201      	str	r2, [sp, #4]
 800b9d6:	f7fb fb8f 	bl	80070f8 <_malloc_r>
 800b9da:	9a01      	ldr	r2, [sp, #4]
 800b9dc:	4605      	mov	r5, r0
 800b9de:	b930      	cbnz	r0, 800b9ee <_calloc_r+0x24>
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	b003      	add	sp, #12
 800b9e4:	bd30      	pop	{r4, r5, pc}
 800b9e6:	220c      	movs	r2, #12
 800b9e8:	6002      	str	r2, [r0, #0]
 800b9ea:	2500      	movs	r5, #0
 800b9ec:	e7f8      	b.n	800b9e0 <_calloc_r+0x16>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f7fd fb24 	bl	800903c <memset>
 800b9f4:	e7f4      	b.n	800b9e0 <_calloc_r+0x16>

0800b9f6 <_realloc_r>:
 800b9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fa:	4680      	mov	r8, r0
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	460e      	mov	r6, r1
 800ba00:	b921      	cbnz	r1, 800ba0c <_realloc_r+0x16>
 800ba02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	4611      	mov	r1, r2
 800ba08:	f7fb bb76 	b.w	80070f8 <_malloc_r>
 800ba0c:	b92a      	cbnz	r2, 800ba1a <_realloc_r+0x24>
 800ba0e:	f7fe fae5 	bl	8009fdc <_free_r>
 800ba12:	4625      	mov	r5, r4
 800ba14:	4628      	mov	r0, r5
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1a:	f000 f85f 	bl	800badc <_malloc_usable_size_r>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4607      	mov	r7, r0
 800ba22:	d802      	bhi.n	800ba2a <_realloc_r+0x34>
 800ba24:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba28:	d812      	bhi.n	800ba50 <_realloc_r+0x5a>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	f7fb fb63 	bl	80070f8 <_malloc_r>
 800ba32:	4605      	mov	r5, r0
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d0ed      	beq.n	800ba14 <_realloc_r+0x1e>
 800ba38:	42bc      	cmp	r4, r7
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	bf28      	it	cs
 800ba40:	463a      	movcs	r2, r7
 800ba42:	f7fd fc16 	bl	8009272 <memcpy>
 800ba46:	4631      	mov	r1, r6
 800ba48:	4640      	mov	r0, r8
 800ba4a:	f7fe fac7 	bl	8009fdc <_free_r>
 800ba4e:	e7e1      	b.n	800ba14 <_realloc_r+0x1e>
 800ba50:	4635      	mov	r5, r6
 800ba52:	e7df      	b.n	800ba14 <_realloc_r+0x1e>

0800ba54 <_raise_r>:
 800ba54:	291f      	cmp	r1, #31
 800ba56:	b538      	push	{r3, r4, r5, lr}
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	d904      	bls.n	800ba68 <_raise_r+0x14>
 800ba5e:	2316      	movs	r3, #22
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba6a:	b112      	cbz	r2, 800ba72 <_raise_r+0x1e>
 800ba6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba70:	b94b      	cbnz	r3, 800ba86 <_raise_r+0x32>
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 f830 	bl	800bad8 <_getpid_r>
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba82:	f000 b817 	b.w	800bab4 <_kill_r>
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d00a      	beq.n	800baa0 <_raise_r+0x4c>
 800ba8a:	1c59      	adds	r1, r3, #1
 800ba8c:	d103      	bne.n	800ba96 <_raise_r+0x42>
 800ba8e:	2316      	movs	r3, #22
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	2001      	movs	r0, #1
 800ba94:	e7e7      	b.n	800ba66 <_raise_r+0x12>
 800ba96:	2400      	movs	r4, #0
 800ba98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	4798      	blx	r3
 800baa0:	2000      	movs	r0, #0
 800baa2:	e7e0      	b.n	800ba66 <_raise_r+0x12>

0800baa4 <raise>:
 800baa4:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <raise+0xc>)
 800baa6:	4601      	mov	r1, r0
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	f7ff bfd3 	b.w	800ba54 <_raise_r>
 800baae:	bf00      	nop
 800bab0:	200001e0 	.word	0x200001e0

0800bab4 <_kill_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	; (800bad4 <_kill_r+0x20>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	4611      	mov	r1, r2
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f7f7 f90b 	bl	8002cdc <_kill>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d102      	bne.n	800bad0 <_kill_r+0x1c>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	b103      	cbz	r3, 800bad0 <_kill_r+0x1c>
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	bf00      	nop
 800bad4:	20000674 	.word	0x20000674

0800bad8 <_getpid_r>:
 800bad8:	f7f7 b8f8 	b.w	8002ccc <_getpid>

0800badc <_malloc_usable_size_r>:
 800badc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae0:	1f18      	subs	r0, r3, #4
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bfbc      	itt	lt
 800bae6:	580b      	ldrlt	r3, [r1, r0]
 800bae8:	18c0      	addlt	r0, r0, r3
 800baea:	4770      	bx	lr

0800baec <_init>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	bf00      	nop
 800baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf2:	bc08      	pop	{r3}
 800baf4:	469e      	mov	lr, r3
 800baf6:	4770      	bx	lr

0800baf8 <_fini>:
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	bf00      	nop
 800bafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafe:	bc08      	pop	{r3}
 800bb00:	469e      	mov	lr, r3
 800bb02:	4770      	bx	lr
