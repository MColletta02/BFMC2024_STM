
LaneKeepingV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800bd18  0800bd18  0001bd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b8  0800c4b8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b8  0800c4b8  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4c0  0800c4c0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4c4  0800c4c4  0001c4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001f0  0800c6b8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800c6b8  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001367c  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c4  00000000  00000000  0003389c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e8f  00000000  00000000  00038470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a58  00000000  00000000  000522ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef31  00000000  00000000  00067d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a8  00000000  00000000  00106cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bcfc 	.word	0x0800bcfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800bcfc 	.word	0x0800bcfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <DegreeSec2RPM>:
#include <DC_motor.h>

float DegreeSec2RPM(float speed_degsec){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = speed_degsec * 60/360;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001040 <DegreeSec2RPM+0x38>
 800101a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800101e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001044 <DegreeSec2RPM+0x3c>
 8001022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	ee07 3a90 	vmov	s15, r3
}
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	42700000 	.word	0x42700000
 8001044:	43b40000 	.word	0x43b40000

08001048 <Voltage2Duty>:

float Voltage2Duty(float u){
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]

	float duty = 100*u/V_MAX;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80010ac <Voltage2Duty+0x64>
 800105a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800105e:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 800106a:	edd7 7a03 	vldr	s15, [r7, #12]
 800106e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010ac <Voltage2Duty+0x64>
 8001072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	dd02      	ble.n	8001082 <Voltage2Duty+0x3a>
		duty=100;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <Voltage2Duty+0x68>)
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e009      	b.n	8001096 <Voltage2Duty+0x4e>
	} else if(duty<0){
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	d502      	bpl.n	8001096 <Voltage2Duty+0x4e>
		duty = 0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	ee07 3a90 	vmov	s15, r3
}
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	42c80000 	.word	0x42c80000

080010b4 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;

	if(y_ref>=0){
 80010be:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	db02      	blt.n	80010d2 <Ref2Direction+0x1e>
		dir = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e001      	b.n	80010d6 <Ref2Direction+0x22>
	} else {
		dir = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <set_PWM_and_dir>:

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]

	TIM10->CCR1 = ((float)duty/100)*TIM10->ARR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001148 <set_PWM_and_dir+0x64>
 80010fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <set_PWM_and_dir+0x68>)
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <set_PWM_and_dir+0x68>)
 8001114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	635a      	str	r2, [r3, #52]	; 0x34

	if( dir == 0){
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <set_PWM_and_dir+0x4c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <set_PWM_and_dir+0x6c>)
 800112a:	f002 fc87 	bl	8003a3c <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 800112e:	e007      	b.n	8001140 <set_PWM_and_dir+0x5c>
	}else if ( dir == 1){
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d104      	bne.n	8001140 <set_PWM_and_dir+0x5c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <set_PWM_and_dir+0x6c>)
 800113c:	f002 fc7e 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	42c80000 	.word	0x42c80000
 800114c:	40014400 	.word	0x40014400
 8001150:	40020800 	.word	0x40020800

08001154 <init_PID>:
#include "PID.h"
#include <stdio.h>

void init_PID(PID* p, float Tc, float u_max, float u_min){
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001160:	edc7 0a01 	vstr	s1, [r7, #4]
 8001164:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	615a      	str	r2, [r3, #20]
	p->Iterm = 0;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
	p->e_old = 0;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	ed87 0a02 	vstr	s0, [r7, #8]
 80011a2:	edc7 0a01 	vstr	s1, [r7, #4]
 80011a6:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	609a      	str	r2, [r3, #8]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 80011c8:	b480      	push	{r7}
 80011ca:	b08b      	sub	sp, #44	; 0x2c
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011d4:	edc7 0a01 	vstr	s1, [r7, #4]
	float u;
	float newIterm;
	float e = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]

	e = r-y;
 80011de:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ea:	edc7 7a08 	vstr	s15, [r7, #32]


	float Pterm = p->Kp*e;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = p->Iterm + (p->Ki)*p->Tc*p->e_old;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ed93 7a07 	vldr	s14, [r3, #28]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	edd3 6a01 	vldr	s13, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001212:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edd3 7a06 	vldr	s15, [r3, #24]
 800121c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - p->e_old);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edd3 6a02 	vldr	s13, [r3, #8]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	edd3 7a03 	vldr	s15, [r3, #12]
 8001234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a06 	vldr	s15, [r3, #24]
 800123e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001242:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124a:	edc7 7a05 	vstr	s15, [r7, #20]

	p->e_old = e;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a3a      	ldr	r2, [r7, #32]
 8001252:	619a      	str	r2, [r3, #24]

	u = Pterm + newIterm + Dterm;
 8001254:	ed97 7a07 	vldr	s14, [r7, #28]
 8001258:	edd7 7a06 	vldr	s15, [r7, #24]
 800125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001260:	ed97 7a05 	vldr	s14, [r7, #20]
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u > p->u_max){
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001272:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	dd03      	ble.n	8001288 <PID_controller+0xc0>
		u = p->u_max;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
 8001286:	e010      	b.n	80012aa <PID_controller+0xe2>
	} else if(u < p->u_min){
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	edd3 7a05 	vldr	s15, [r3, #20]
 800128e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d503      	bpl.n	80012a4 <PID_controller+0xdc>
		u = p->u_min;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	e002      	b.n	80012aa <PID_controller+0xe2>
	} else {
		p->Iterm = newIterm;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	61da      	str	r2, [r3, #28]
	}

	//printf("errore: %.2f, y: %.2f, r: %.2f \r\n", e, y, r);

	return u;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	ee07 3a90 	vmov	s15, r3
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	372c      	adds	r7, #44	; 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <parseCSV>:


#define MAX_VALUES 5


void parseCSV(const char *csvString, float *values) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
    char *token;
    char *copy = strdup(csvString); // Make a copy of the string to avoid modifying the original
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f006 ff7a 	bl	80081c4 <strdup>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
    int index = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]

    token = strtok(copy, ",");
 80012d8:	4912      	ldr	r1, [pc, #72]	; (8001324 <parseCSV+0x64>)
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f007 fe14 	bl	8008f08 <strtok>
 80012e0:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 80012e2:	e012      	b.n	800130a <parseCSV+0x4a>
        values[index++] = strtof(token, NULL); // Convert token to float and store in the array
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	613a      	str	r2, [r7, #16]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	18d4      	adds	r4, r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f007 fdac 	bl	8008e50 <strtof>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	edc4 7a00 	vstr	s15, [r4]
        token = strtok(NULL, ",");
 8001300:	4908      	ldr	r1, [pc, #32]	; (8001324 <parseCSV+0x64>)
 8001302:	2000      	movs	r0, #0
 8001304:	f007 fe00 	bl	8008f08 <strtok>
 8001308:	6178      	str	r0, [r7, #20]
    while (token != NULL && index < MAX_VALUES) {
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <parseCSV+0x56>
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b04      	cmp	r3, #4
 8001314:	dde6      	ble.n	80012e4 <parseCSV+0x24>
    }

    free(copy); // Free the dynamically allocated memory for the copied string
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f005 ff18 	bl	800714c <free>
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	0800bd18 	.word	0x0800bd18

08001328 <mainSerialRead>:

//USART6 per la ricezione dei dati del Raspberry
void mainSerialRead(uint8_t *msg, uint32_t message_size) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0xFFFF;
 8001332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001336:	827b      	strh	r3, [r7, #18]
		uint8_t app = '\0';
 8001338:	2300      	movs	r3, #0
 800133a:	72fb      	strb	r3, [r7, #11]
		int msg_len = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]

		int i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

		while(app!='\n' && i <message_size-1){
 8001344:	e013      	b.n	800136e <mainSerialRead+0x46>
			HAL_UART_Receive(&huart6, &app, 1, timeout);
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	f107 010b 	add.w	r1, r7, #11
 800134c:	2201      	movs	r2, #1
 800134e:	4810      	ldr	r0, [pc, #64]	; (8001390 <mainSerialRead+0x68>)
 8001350:	f005 fb45 	bl	80069de <HAL_UART_Receive>

			if(app != '\n'){
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d006      	beq.n	8001368 <mainSerialRead+0x40>
				msg[i] = app;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7afa      	ldrb	r2, [r7, #11]
 8001362:	701a      	strb	r2, [r3, #0]
				msg_len = i;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	60fb      	str	r3, [r7, #12]
			}
			i++;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
		while(app!='\n' && i <message_size-1){
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	2b0a      	cmp	r3, #10
 8001372:	d004      	beq.n	800137e <mainSerialRead+0x56>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	429a      	cmp	r2, r3
 800137c:	d8e3      	bhi.n	8001346 <mainSerialRead+0x1e>
		}

		printf("%s\r\n",msg);
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <mainSerialRead+0x6c>)
 8001382:	f006 fe5b 	bl	800803c <iprintf>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000410 	.word	0x20000410
 8001394:	0800bd1c 	.word	0x0800bd1c

08001398 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4619      	mov	r1, r3
 80013a6:	2007      	movs	r0, #7
 80013a8:	f000 fa02 	bl	80017b0 <bno055_writeData>
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4619      	mov	r1, r3
 80013c2:	203d      	movs	r0, #61	; 0x3d
 80013c4:	f000 f9f4 	bl	80017b0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80013ce:	2013      	movs	r0, #19
 80013d0:	f000 f9e2 	bl	8001798 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80013d4:	e002      	b.n	80013dc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80013d6:	2007      	movs	r0, #7
 80013d8:	f000 f9de 	bl	8001798 <bno055_delay>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ffe3 	bl	80013b4 <bno055_setOperationMode>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80013f6:	200c      	movs	r0, #12
 80013f8:	f7ff ffdc 	bl	80013b4 <bno055_setOperationMode>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001404:	2120      	movs	r1, #32
 8001406:	203f      	movs	r0, #63	; 0x3f
 8001408:	f000 f9d2 	bl	80017b0 <bno055_writeData>
  bno055_delay(700);
 800140c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001410:	f000 f9c2 	bl	8001798 <bno055_delay>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  bno055_reset();
 800141e:	f7ff ffef 	bl	8001400 <bno055_reset>

  uint8_t id = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	2000      	movs	r0, #0
 800142e:	f000 faab 	bl	8001988 <bno055_readData>
  if (id != BNO055_ID) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2ba0      	cmp	r3, #160	; 0xa0
 8001436:	d004      	beq.n	8001442 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <bno055_setup+0x4c>)
 800143e:	f006 fdfd 	bl	800803c <iprintf>
  }
  bno055_setPage(0);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ffa8 	bl	8001398 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001448:	2100      	movs	r1, #0
 800144a:	203f      	movs	r0, #63	; 0x3f
 800144c:	f000 f9b0 	bl	80017b0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001450:	f7ff ffc8 	bl	80013e4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f000 f99f 	bl	8001798 <bno055_delay>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800bd24 	.word	0x0800bd24

08001468 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800146c:	b09e      	sub	sp, #120	; 0x78
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff ff8e 	bl	8001398 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800147c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001480:	2b20      	cmp	r3, #32
 8001482:	d108      	bne.n	8001496 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001484:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800148c:	2208      	movs	r2, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fa7a 	bl	8001988 <bno055_readData>
 8001494:	e007      	b.n	80014a6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001496:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800149a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800149e:	2206      	movs	r2, #6
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fa71 	bl	8001988 <bno055_readData>

  double scale = 1;
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <bno055_getVector+0x270>)
 80014ac:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80014b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b4:	2b0e      	cmp	r3, #14
 80014b6:	d109      	bne.n	80014cc <bno055_getVector+0x64>
    scale = magScale;
 80014b8:	4b88      	ldr	r3, [pc, #544]	; (80016dc <bno055_getVector+0x274>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f829 	bl	8000514 <__aeabi_ui2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80014ca:	e03e      	b.n	800154a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80014cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d007      	beq.n	80014e4 <bno055_getVector+0x7c>
 80014d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d8:	2b28      	cmp	r3, #40	; 0x28
 80014da:	d003      	beq.n	80014e4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80014dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014e0:	2b2e      	cmp	r3, #46	; 0x2e
 80014e2:	d109      	bne.n	80014f8 <bno055_getVector+0x90>
    scale = accelScale;
 80014e4:	4b7e      	ldr	r3, [pc, #504]	; (80016e0 <bno055_getVector+0x278>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f813 	bl	8000514 <__aeabi_ui2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80014f6:	e028      	b.n	800154a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b14      	cmp	r3, #20
 80014fe:	d109      	bne.n	8001514 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001500:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <bno055_getVector+0x27c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f805 	bl	8000514 <__aeabi_ui2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001512:	e01a      	b.n	800154a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001518:	2b1a      	cmp	r3, #26
 800151a:	d109      	bne.n	8001530 <bno055_getVector+0xc8>
    scale = eulerScale;
 800151c:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <bno055_getVector+0x280>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fff7 	bl	8000514 <__aeabi_ui2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800152e:	e00c      	b.n	800154a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001534:	2b20      	cmp	r3, #32
 8001536:	d108      	bne.n	800154a <bno055_getVector+0xe2>
    scale = quaScale;
 8001538:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <bno055_getVector+0x284>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffe9 	bl	8000514 <__aeabi_ui2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2220      	movs	r2, #32
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fe10 	bl	8007178 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800155c:	2b20      	cmp	r3, #32
 800155e:	d150      	bne.n	8001602 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001560:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffde 	bl	8000534 <__aeabi_i2d>
 8001578:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800157c:	f7ff f96e 	bl	800085c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001588:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffca 	bl	8000534 <__aeabi_i2d>
 80015a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80015b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffb6 	bl	8000534 <__aeabi_i2d>
 80015c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015cc:	f7ff f946 	bl	800085c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80015d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffa2 	bl	8000534 <__aeabi_i2d>
 80015f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015f4:	f7ff f932 	bl	800085c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001600:	e03b      	b.n	800167a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001602:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b21a      	sxth	r2, r3
 800160a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff8d 	bl	8000534 <__aeabi_i2d>
 800161a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800161e:	f7ff f91d 	bl	800085c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800162a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff79 	bl	8000534 <__aeabi_i2d>
 8001642:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001646:	f7ff f909 	bl	800085c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001652:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21a      	sxth	r2, r3
 800165a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21b      	sxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff65 	bl	8000534 <__aeabi_i2d>
 800166a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800166e:	f7ff f8f5 	bl	800085c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800167a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800167e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800168e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001692:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001696:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800169a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800169e:	ec49 8b14 	vmov	d4, r8, r9
 80016a2:	ec45 4b15 	vmov	d5, r4, r5
 80016a6:	ec41 0b16 	vmov	d6, r0, r1
 80016aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80016ae:	eeb0 0a44 	vmov.f32	s0, s8
 80016b2:	eef0 0a64 	vmov.f32	s1, s9
 80016b6:	eeb0 1a45 	vmov.f32	s2, s10
 80016ba:	eef0 1a65 	vmov.f32	s3, s11
 80016be:	eeb0 2a46 	vmov.f32	s4, s12
 80016c2:	eef0 2a66 	vmov.f32	s5, s13
 80016c6:	eeb0 3a47 	vmov.f32	s6, s14
 80016ca:	eef0 3a67 	vmov.f32	s7, s15
 80016ce:	3778      	adds	r7, #120	; 0x78
 80016d0:	46bd      	mov	sp, r7
 80016d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016d6:	bf00      	nop
 80016d8:	3ff00000 	.word	0x3ff00000
 80016dc:	20000006 	.word	0x20000006
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000002 	.word	0x20000002
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000008 	.word	0x20000008

080016f0 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 80016f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f4:	b090      	sub	sp, #64	; 0x40
 80016f6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80016f8:	2014      	movs	r0, #20
 80016fa:	f7ff feb5 	bl	8001468 <bno055_getVector>
 80016fe:	eeb0 4a40 	vmov.f32	s8, s0
 8001702:	eef0 4a60 	vmov.f32	s9, s1
 8001706:	eeb0 5a41 	vmov.f32	s10, s2
 800170a:	eef0 5a61 	vmov.f32	s11, s3
 800170e:	eeb0 6a42 	vmov.f32	s12, s4
 8001712:	eef0 6a62 	vmov.f32	s13, s5
 8001716:	eeb0 7a43 	vmov.f32	s14, s6
 800171a:	eef0 7a63 	vmov.f32	s15, s7
 800171e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001722:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001726:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800172a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800172e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001732:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001736:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800173a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800173e:	ec49 8b14 	vmov	d4, r8, r9
 8001742:	ec45 4b15 	vmov	d5, r4, r5
 8001746:	ec41 0b16 	vmov	d6, r0, r1
 800174a:	ec43 2b17 	vmov	d7, r2, r3
}
 800174e:	eeb0 0a44 	vmov.f32	s0, s8
 8001752:	eef0 0a64 	vmov.f32	s1, s9
 8001756:	eeb0 1a45 	vmov.f32	s2, s10
 800175a:	eef0 1a65 	vmov.f32	s3, s11
 800175e:	eeb0 2a46 	vmov.f32	s4, s12
 8001762:	eef0 2a66 	vmov.f32	s5, s13
 8001766:	eeb0 3a47 	vmov.f32	s6, s14
 800176a:	eef0 3a67 	vmov.f32	s7, s15
 800176e:	3740      	adds	r7, #64	; 0x40
 8001770:	46bd      	mov	sp, r7
 8001772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001778 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <bno055_assignI2C+0x1c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000020c 	.word	0x2000020c

08001798 <bno055_delay>:

void bno055_delay(int time) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fc2e 	bl	8003004 <HAL_Delay>
#endif
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	733b      	strb	r3, [r7, #12]
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80017c8:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <bno055_writeData+0x184>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	f107 020c 	add.w	r2, r7, #12
 80017d0:	230a      	movs	r3, #10
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2302      	movs	r3, #2
 80017d6:	2150      	movs	r1, #80	; 0x50
 80017d8:	f002 faa6 	bl	8003d28 <HAL_I2C_Master_Transmit>
 80017dc:	4603      	mov	r3, r0
 80017de:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a0 	beq.w	8001928 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d103      	bne.n	80017f6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80017ee:	4852      	ldr	r0, [pc, #328]	; (8001938 <bno055_writeData+0x188>)
 80017f0:	f006 fcaa 	bl	8008148 <puts>
 80017f4:	e012      	b.n	800181c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d103      	bne.n	8001804 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80017fc:	484f      	ldr	r0, [pc, #316]	; (800193c <bno055_writeData+0x18c>)
 80017fe:	f006 fca3 	bl	8008148 <puts>
 8001802:	e00b      	b.n	800181c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d103      	bne.n	8001812 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800180a:	484d      	ldr	r0, [pc, #308]	; (8001940 <bno055_writeData+0x190>)
 800180c:	f006 fc9c 	bl	8008148 <puts>
 8001810:	e004      	b.n	800181c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	4619      	mov	r1, r3
 8001816:	484b      	ldr	r0, [pc, #300]	; (8001944 <bno055_writeData+0x194>)
 8001818:	f006 fc10 	bl	800803c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800181c:	4b45      	ldr	r3, [pc, #276]	; (8001934 <bno055_writeData+0x184>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fee1 	bl	80045e8 <HAL_I2C_GetError>
 8001826:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d07e      	beq.n	800192c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d103      	bne.n	800183c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001834:	4844      	ldr	r0, [pc, #272]	; (8001948 <bno055_writeData+0x198>)
 8001836:	f006 fc87 	bl	8008148 <puts>
 800183a:	e021      	b.n	8001880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d103      	bne.n	800184a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001842:	4842      	ldr	r0, [pc, #264]	; (800194c <bno055_writeData+0x19c>)
 8001844:	f006 fc80 	bl	8008148 <puts>
 8001848:	e01a      	b.n	8001880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d103      	bne.n	8001858 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001850:	483f      	ldr	r0, [pc, #252]	; (8001950 <bno055_writeData+0x1a0>)
 8001852:	f006 fc79 	bl	8008148 <puts>
 8001856:	e013      	b.n	8001880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b08      	cmp	r3, #8
 800185c:	d103      	bne.n	8001866 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800185e:	483d      	ldr	r0, [pc, #244]	; (8001954 <bno055_writeData+0x1a4>)
 8001860:	f006 fc72 	bl	8008148 <puts>
 8001864:	e00c      	b.n	8001880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d103      	bne.n	8001874 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800186c:	483a      	ldr	r0, [pc, #232]	; (8001958 <bno055_writeData+0x1a8>)
 800186e:	f006 fc6b 	bl	8008148 <puts>
 8001872:	e005      	b.n	8001880 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	2b20      	cmp	r3, #32
 8001878:	d102      	bne.n	8001880 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800187a:	4838      	ldr	r0, [pc, #224]	; (800195c <bno055_writeData+0x1ac>)
 800187c:	f006 fc64 	bl	8008148 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001880:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <bno055_writeData+0x184>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fea1 	bl	80045cc <HAL_I2C_GetState>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001894:	4832      	ldr	r0, [pc, #200]	; (8001960 <bno055_writeData+0x1b0>)
 8001896:	f006 fc57 	bl	8008148 <puts>
 800189a:	e048      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d103      	bne.n	80018aa <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80018a2:	482f      	ldr	r0, [pc, #188]	; (8001960 <bno055_writeData+0x1b0>)
 80018a4:	f006 fc50 	bl	8008148 <puts>
 80018a8:	e041      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b24      	cmp	r3, #36	; 0x24
 80018ae:	d103      	bne.n	80018b8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80018b0:	482c      	ldr	r0, [pc, #176]	; (8001964 <bno055_writeData+0x1b4>)
 80018b2:	f006 fc49 	bl	8008148 <puts>
 80018b6:	e03a      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b21      	cmp	r3, #33	; 0x21
 80018bc:	d103      	bne.n	80018c6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <bno055_writeData+0x1b8>)
 80018c0:	f006 fc42 	bl	8008148 <puts>
 80018c4:	e033      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b22      	cmp	r3, #34	; 0x22
 80018ca:	d103      	bne.n	80018d4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80018cc:	4827      	ldr	r0, [pc, #156]	; (800196c <bno055_writeData+0x1bc>)
 80018ce:	f006 fc3b 	bl	8008148 <puts>
 80018d2:	e02c      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b28      	cmp	r3, #40	; 0x28
 80018d8:	d103      	bne.n	80018e2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <bno055_writeData+0x1c0>)
 80018dc:	f006 fc34 	bl	8008148 <puts>
 80018e0:	e025      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b29      	cmp	r3, #41	; 0x29
 80018e6:	d103      	bne.n	80018f0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80018e8:	4822      	ldr	r0, [pc, #136]	; (8001974 <bno055_writeData+0x1c4>)
 80018ea:	f006 fc2d 	bl	8008148 <puts>
 80018ee:	e01e      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b2a      	cmp	r3, #42	; 0x2a
 80018f4:	d103      	bne.n	80018fe <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80018f6:	4820      	ldr	r0, [pc, #128]	; (8001978 <bno055_writeData+0x1c8>)
 80018f8:	f006 fc26 	bl	8008148 <puts>
 80018fc:	e017      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	2b60      	cmp	r3, #96	; 0x60
 8001902:	d103      	bne.n	800190c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001904:	481d      	ldr	r0, [pc, #116]	; (800197c <bno055_writeData+0x1cc>)
 8001906:	f006 fc1f 	bl	8008148 <puts>
 800190a:	e010      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2ba0      	cmp	r3, #160	; 0xa0
 8001910:	d103      	bne.n	800191a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <bno055_writeData+0x1d0>)
 8001914:	f006 fc18 	bl	8008148 <puts>
 8001918:	e009      	b.n	800192e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2be0      	cmp	r3, #224	; 0xe0
 800191e:	d106      	bne.n	800192e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001920:	4818      	ldr	r0, [pc, #96]	; (8001984 <bno055_writeData+0x1d4>)
 8001922:	f006 fc11 	bl	8008148 <puts>
 8001926:	e002      	b.n	800192e <bno055_writeData+0x17e>
    return;
 8001928:	bf00      	nop
 800192a:	e000      	b.n	800192e <bno055_writeData+0x17e>
    return;
 800192c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000020c 	.word	0x2000020c
 8001938:	0800bd60 	.word	0x0800bd60
 800193c:	0800bd84 	.word	0x0800bd84
 8001940:	0800bdac 	.word	0x0800bdac
 8001944:	0800bdd0 	.word	0x0800bdd0
 8001948:	0800bde8 	.word	0x0800bde8
 800194c:	0800bdfc 	.word	0x0800bdfc
 8001950:	0800be10 	.word	0x0800be10
 8001954:	0800be24 	.word	0x0800be24
 8001958:	0800be38 	.word	0x0800be38
 800195c:	0800be4c 	.word	0x0800be4c
 8001960:	0800be64 	.word	0x0800be64
 8001964:	0800be7c 	.word	0x0800be7c
 8001968:	0800be90 	.word	0x0800be90
 800196c:	0800bea8 	.word	0x0800bea8
 8001970:	0800bec0 	.word	0x0800bec0
 8001974:	0800bed8 	.word	0x0800bed8
 8001978:	0800bef8 	.word	0x0800bef8
 800197c:	0800bf18 	.word	0x0800bf18
 8001980:	0800bf30 	.word	0x0800bf30
 8001984:	0800bf48 	.word	0x0800bf48

08001988 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <bno055_readData+0x84>)
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	1dfa      	adds	r2, r7, #7
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2150      	movs	r1, #80	; 0x50
 80019a6:	f002 f9bf 	bl	8003d28 <HAL_I2C_Master_Transmit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <bno055_readData+0x84>)
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2264      	movs	r2, #100	; 0x64
 80019b8:	9200      	str	r2, [sp, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	2150      	movs	r1, #80	; 0x50
 80019be:	f002 fab1 	bl	8003f24 <HAL_I2C_Master_Receive>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01a      	beq.n	8001a02 <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d103      	bne.n	80019da <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80019d2:	480f      	ldr	r0, [pc, #60]	; (8001a10 <bno055_readData+0x88>)
 80019d4:	f006 fbb8 	bl	8008148 <puts>
 80019d8:	e014      	b.n	8001a04 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d103      	bne.n	80019e8 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <bno055_readData+0x8c>)
 80019e2:	f006 fbb1 	bl	8008148 <puts>
 80019e6:	e00d      	b.n	8001a04 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d103      	bne.n	80019f6 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80019ee:	480a      	ldr	r0, [pc, #40]	; (8001a18 <bno055_readData+0x90>)
 80019f0:	f006 fbaa 	bl	8008148 <puts>
 80019f4:	e006      	b.n	8001a04 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4808      	ldr	r0, [pc, #32]	; (8001a1c <bno055_readData+0x94>)
 80019fc:	f006 fb1e 	bl	800803c <iprintf>
 8001a00:	e000      	b.n	8001a04 <bno055_readData+0x7c>
	    return;
 8001a02:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000020c 	.word	0x2000020c
 8001a10:	0800bd60 	.word	0x0800bd60
 8001a14:	0800bd84 	.word	0x0800bd84
 8001a18:	0800bdac 	.word	0x0800bdac
 8001a1c:	0800bdd0 	.word	0x0800bdd0

08001a20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a24:	b09b      	sub	sp, #108	; 0x6c
 8001a26:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a28:	f001 fa7a 	bl	8002f20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a2c:	f000 faea 	bl	8002004 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a30:	f000 fd90 	bl	8002554 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a34:	f000 fba4 	bl	8002180 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001a38:	f000 fbd0 	bl	80021dc <MX_TIM1_Init>
	MX_TIM10_Init();
 8001a3c:	f000 fcc4 	bl	80023c8 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001a40:	f000 fd10 	bl	8002464 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 8001a44:	f000 fd32 	bl	80024ac <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001a48:	f000 fc6a 	bl	8002320 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8001a4c:	f000 fd58 	bl	8002500 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001a50:	f000 fb44 	bl	80020dc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	//PWM Servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	48c4      	ldr	r0, [pc, #784]	; (8001d68 <main+0x348>)
 8001a58:	f003 fea4 	bl	80057a4 <HAL_TIM_PWM_Start>
	//PWM DC motor
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	48c3      	ldr	r0, [pc, #780]	; (8001d6c <main+0x34c>)
 8001a60:	f003 fea0 	bl	80057a4 <HAL_TIM_PWM_Start>
	//ENCODER TIMER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a64:	213c      	movs	r1, #60	; 0x3c
 8001a66:	48c2      	ldr	r0, [pc, #776]	; (8001d70 <main+0x350>)
 8001a68:	f003 fff2 	bl	8005a50 <HAL_TIM_Encoder_Start>
	//10ms TIMER
	HAL_TIM_Base_Start_IT(&htim11);
 8001a6c:	48c1      	ldr	r0, [pc, #772]	; (8001d74 <main+0x354>)
 8001a6e:	f003 fddd 	bl	800562c <HAL_TIM_Base_Start_IT>

	//PID traction
	init_PID(&pid_traction, TRACTION_SAMPLING_TIME, MAX_U_TRACTION,
 8001a72:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8001d78 <main+0x358>
 8001a76:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8001d7c <main+0x35c>
 8001a7a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8001d80 <main+0x360>
 8001a7e:	48c1      	ldr	r0, [pc, #772]	; (8001d84 <main+0x364>)
 8001a80:	f7ff fb68 	bl	8001154 <init_PID>
	MIN_U_TRACTION);
	tune_PID(&pid_traction, KP_TRACTION, KI_TRACTION, 0);
 8001a84:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 8001d88 <main+0x368>
 8001a88:	eddf 0ac0 	vldr	s1, [pc, #768]	; 8001d8c <main+0x36c>
 8001a8c:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8001d90 <main+0x370>
 8001a90:	48bc      	ldr	r0, [pc, #752]	; (8001d84 <main+0x364>)
 8001a92:	f7ff fb80 	bl	8001196 <tune_PID>

	//PID steering
	init_PID(&pid_steering, STEERING_SAMPLING_TIME, MAX_U_STEERING,
 8001a96:	eebb 1a07 	vmov.f32	s2, #183	; 0xc1b80000 -23.0
 8001a9a:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 8001a9e:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8001d80 <main+0x360>
 8001aa2:	48bc      	ldr	r0, [pc, #752]	; (8001d94 <main+0x374>)
 8001aa4:	f7ff fb56 	bl	8001154 <init_PID>
	MIN_U_STEERING);
	tune_PID(&pid_steering, KP_STEERING, KI_STEERING, 0);
 8001aa8:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8001d88 <main+0x368>
 8001aac:	eddf 0aba 	vldr	s1, [pc, #744]	; 8001d98 <main+0x378>
 8001ab0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001ab4:	48b7      	ldr	r0, [pc, #732]	; (8001d94 <main+0x374>)
 8001ab6:	f7ff fb6e 	bl	8001196 <tune_PID>

	// IMU BNO055 config
	HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1, 5, 1000);
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	2205      	movs	r2, #5
 8001ac0:	2150      	movs	r1, #80	; 0x50
 8001ac2:	48b6      	ldr	r0, [pc, #728]	; (8001d9c <main+0x37c>)
 8001ac4:	f002 fc54 	bl	8004370 <HAL_I2C_IsDeviceReady>
	bno055_assignI2C(&hi2c1);
 8001ac8:	48b4      	ldr	r0, [pc, #720]	; (8001d9c <main+0x37c>)
 8001aca:	f7ff fe55 	bl	8001778 <bno055_assignI2C>
	bno055_setup();
 8001ace:	f7ff fca3 	bl	8001418 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001ad2:	f7ff fc8e 	bl	80013f2 <bno055_setOperationModeNDOF>

	servo_motor(0);
 8001ad6:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8001d88 <main+0x368>
 8001ada:	f000 fe2d 	bl	8002738 <servo_motor>

	printf("Initialization Completed!\r\n");
 8001ade:	48b0      	ldr	r0, [pc, #704]	; (8001da0 <main+0x380>)
 8001ae0:	f006 fb32 	bl	8008148 <puts>
	//data.valid = 1;
	//data.offset = 0.0;
	//data.curvature_radius_ref_m = MAX_CURVATURE_RADIUS_FOR_STRAIGHT; //with r=1000000 the car goes straight
	//data.linear_speed_ref_m_s = 1.0;

	float RPM_2_m_s = (2 * M_PI / 60) * WHEEL_RADIUS
 8001ae4:	4baf      	ldr	r3, [pc, #700]	; (8001da4 <main+0x384>)
 8001ae6:	647b      	str	r3, [r7, #68]	; 0x44
			/ MOTOR_REVOLUTION_FOR_ONE_WHEEL_REVOLUTION;
	RPM_2_m_s = RPM_2_m_s * 0.787; // correzione aggiunta xk non andava a 1m/s ma a 0.82m/s
 8001ae8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001aea:	f7fe fd35 	bl	8000558 <__aeabi_f2d>
 8001aee:	a398      	add	r3, pc, #608	; (adr r3, 8001d50 <main+0x330>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd88 	bl	8000608 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f87a 	bl	8000bf8 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44

		/* USER CODE BEGIN 3 */

		//-------------------------------------------------------------
		//Leggo messaggio in entrata
		mainSerialRead(msg, sizeof(msg));
 8001b08:	212d      	movs	r1, #45	; 0x2d
 8001b0a:	48a7      	ldr	r0, [pc, #668]	; (8001da8 <main+0x388>)
 8001b0c:	f7ff fc0c 	bl	8001328 <mainSerialRead>
		//-------------------------------------------------------------

		//-------------------------------------------------------------
		//Interpreto il messaggio
		float floatArray[MAX_VALUES];
		parseCSV(msg, floatArray);
 8001b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b14:	4619      	mov	r1, r3
 8001b16:	48a4      	ldr	r0, [pc, #656]	; (8001da8 <main+0x388>)
 8001b18:	f7ff fbd2 	bl	80012c0 <parseCSV>
		data.enable = (int) floatArray[0];
 8001b1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b24:	ee17 2a90 	vmov	r2, s15
 8001b28:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <main+0x38c>)
 8001b2a:	601a      	str	r2, [r3, #0]
		data.valid = (int) floatArray[1];
 8001b2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 2a90 	vmov	r2, s15
 8001b38:	4b9c      	ldr	r3, [pc, #624]	; (8001dac <main+0x38c>)
 8001b3a:	605a      	str	r2, [r3, #4]
		data.curvature_radius_ref_m = floatArray[2];
 8001b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3e:	4a9b      	ldr	r2, [pc, #620]	; (8001dac <main+0x38c>)
 8001b40:	60d3      	str	r3, [r2, #12]
		data.offset = floatArray[3];
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	4a99      	ldr	r2, [pc, #612]	; (8001dac <main+0x38c>)
 8001b46:	6093      	str	r3, [r2, #8]
		data.linear_speed_ref_m_s = floatArray[4];
 8001b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4a:	4a98      	ldr	r2, [pc, #608]	; (8001dac <main+0x38c>)
 8001b4c:	6113      	str	r3, [r2, #16]

		printf("%d %d %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b4e:	4b97      	ldr	r3, [pc, #604]	; (8001dac <main+0x38c>)
 8001b50:	681e      	ldr	r6, [r3, #0]
 8001b52:	4b96      	ldr	r3, [pc, #600]	; (8001dac <main+0x38c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]
								data.curvature_radius_ref_m, data.offset,
 8001b58:	4b94      	ldr	r3, [pc, #592]	; (8001dac <main+0x38c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
		printf("%d %d %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcfb 	bl	8000558 <__aeabi_f2d>
 8001b62:	4682      	mov	sl, r0
 8001b64:	468b      	mov	fp, r1
								data.curvature_radius_ref_m, data.offset,
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <main+0x38c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
		printf("%d %d %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcf4 	bl	8000558 <__aeabi_f2d>
 8001b70:	e9c7 0100 	strd	r0, r1, [r7]
								data.linear_speed_ref_m_s);
 8001b74:	4b8d      	ldr	r3, [pc, #564]	; (8001dac <main+0x38c>)
 8001b76:	691b      	ldr	r3, [r3, #16]
		printf("%d %d %.2f %.2f %.2f\r\n", data.enable, data.valid,
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fced 	bl	8000558 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b86:	ed97 7b00 	vldr	d7, [r7]
 8001b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b8e:	e9cd ab00 	strd	sl, fp, [sp]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4631      	mov	r1, r6
 8001b96:	4886      	ldr	r0, [pc, #536]	; (8001db0 <main+0x390>)
 8001b98:	f006 fa50 	bl	800803c <iprintf>
		//-------------------------------------------------------------

		//-------------------------------------------------------------
		//Controllo
		if (data.enable == 1 /*&& HardwareEnable == 1*/) {
 8001b9c:	4b83      	ldr	r3, [pc, #524]	; (8001dac <main+0x38c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 8216 	bne.w	8001fd2 <main+0x5b2>
			if (Flag_10ms == 1) { //Car enabled from user
 8001ba6:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <main+0x394>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d1ac      	bne.n	8001b08 <main+0xe8>
				Flag_10ms = 0;
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <main+0x394>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

				//-------------------------------------------------------------
				//TRACTION control

				//Measure speed with encoder
				vehicleState.ref_count = TIM2->ARR / 2;
 8001bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <main+0x398>)
 8001bc0:	605a      	str	r2, [r3, #4]
				vehicleState.delta_count = vehicleState.counts
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <main+0x398>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
						- vehicleState.ref_count;
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <main+0x398>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	1ad3      	subs	r3, r2, r3
				vehicleState.delta_count = vehicleState.counts
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <main+0x398>)
 8001bce:	6093      	str	r3, [r2, #8]

				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001bd0:	4b79      	ldr	r3, [pc, #484]	; (8001db8 <main+0x398>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
						/ ((double) (ENCODER_PPR * ENCODER_COUNTING_MODE
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fca9 	bl	8000534 <__aeabi_i2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <main+0x39c>)
 8001be8:	f7fe fe38 	bl	800085c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f800 	bl	8000bf8 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
				vehicleState.delta_angle_deg = (vehicleState.delta_count * 360)
 8001bfa:	4a6f      	ldr	r2, [pc, #444]	; (8001db8 <main+0x398>)
 8001bfc:	60d3      	str	r3, [r2, #12]
								* GEARBOX_RATIO));
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <main+0x398>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
						/ ENCODER_SAMPLING_TIME;
 8001c08:	a353      	add	r3, pc, #332	; (adr r3, 8001d58 <main+0x338>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fe25 	bl	800085c <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffed 	bl	8000bf8 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
				vehicleState.motor_speed_deg_sec = vehicleState.delta_angle_deg
 8001c20:	4a65      	ldr	r2, [pc, #404]	; (8001db8 <main+0x398>)
 8001c22:	6113      	str	r3, [r2, #16]
				vehicleState.motor_speed_RPM = DegreeSec2RPM(
 8001c24:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <main+0x398>)
 8001c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	f7ff f9eb 	bl	8001008 <DegreeSec2RPM>
 8001c32:	eef0 7a40 	vmov.f32	s15, s0
 8001c36:	4b60      	ldr	r3, [pc, #384]	; (8001db8 <main+0x398>)
 8001c38:	edc3 7a05 	vstr	s15, [r3, #20]
						vehicleState.motor_speed_deg_sec);

				//Speed reference for motor
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <main+0x38c>)
 8001c3e:	edd3 6a04 	vldr	s13, [r3, #16]
						/ RPM_2_m_s;
 8001c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
				vehicleState.motor_speed_ref_RPM = data.linear_speed_ref_m_s
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <main+0x398>)
 8001c4c:	edc3 7a07 	vstr	s15, [r3, #28]

				vehicleState.motor_direction_ref = Ref2Direction(
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <main+0x398>)
 8001c52:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c56:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5a:	f7ff fa2b 	bl	80010b4 <Ref2Direction>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <main+0x398>)
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]
						vehicleState.motor_speed_ref_RPM);

				u_trazione = PID_controller(&pid_traction,
						abs(vehicleState.motor_speed_RPM),
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <main+0x398>)
 8001c6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bfb8      	it	lt
 8001c7a:	425b      	neglt	r3, r3
				u_trazione = PID_controller(&pid_traction,
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						abs(vehicleState.motor_speed_ref_RPM));
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <main+0x398>)
 8001c86:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8e:	ee17 3a90 	vmov	r3, s15
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bfb8      	it	lt
 8001c96:	425b      	neglt	r3, r3
				u_trazione = PID_controller(&pid_traction,
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	eef0 0a67 	vmov.f32	s1, s15
 8001ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca8:	4836      	ldr	r0, [pc, #216]	; (8001d84 <main+0x364>)
 8001caa:	f7ff fa8d 	bl	80011c8 <PID_controller>
 8001cae:	ee10 3a10 	vmov	r3, s0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4940      	ldr	r1, [pc, #256]	; (8001dc0 <main+0x3a0>)
 8001cbe:	e9c1 2300 	strd	r2, r3, [r1]

				set_PWM_and_dir((uint32_t) Voltage2Duty(u_trazione),
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <main+0x3a0>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe ff94 	bl	8000bf8 <__aeabi_d2f>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	ee00 3a10 	vmov	s0, r3
 8001cd6:	f7ff f9b7 	bl	8001048 <Voltage2Duty>
 8001cda:	eef0 7a40 	vmov.f32	s15, s0
 8001cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <main+0x398>)
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	ee17 0a90 	vmov	r0, s15
 8001cee:	f7ff f9f9 	bl	80010e4 <set_PWM_and_dir>
				 */
				//-------------------------------------------------------------
				//-------------------------------------------------------------
				//STEERING control
				//Get yawrate from IMU
				bno055_vector_t v = bno055_getVectorGyroscope();
 8001cf2:	f7ff fcfd 	bl	80016f0 <bno055_getVectorGyroscope>
 8001cf6:	eeb0 4a40 	vmov.f32	s8, s0
 8001cfa:	eef0 4a60 	vmov.f32	s9, s1
 8001cfe:	eeb0 5a41 	vmov.f32	s10, s2
 8001d02:	eef0 5a61 	vmov.f32	s11, s3
 8001d06:	eeb0 6a42 	vmov.f32	s12, s4
 8001d0a:	eef0 6a62 	vmov.f32	s13, s5
 8001d0e:	eeb0 7a43 	vmov.f32	s14, s6
 8001d12:	eef0 7a63 	vmov.f32	s15, s7
 8001d16:	ed87 4b04 	vstr	d4, [r7, #16]
 8001d1a:	ed87 5b06 	vstr	d5, [r7, #24]
 8001d1e:	ed87 6b08 	vstr	d6, [r7, #32]
 8001d22:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
				vehicleState.yaw_rate_deg_sec = v.z;
 8001d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d2a:	4923      	ldr	r1, [pc, #140]	; (8001db8 <main+0x398>)
 8001d2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <main+0x398>)
 8001d32:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
						* M_PI) / 180;
 8001d36:	a30a      	add	r3, pc, #40	; (adr r3, 8001d60 <main+0x340>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fc64 	bl	8000608 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	e03a      	b.n	8001dc4 <main+0x3a4>
 8001d4e:	bf00      	nop
 8001d50:	9fbe76c9 	.word	0x9fbe76c9
 8001d54:	3fe92f1a 	.word	0x3fe92f1a
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f847ae1 	.word	0x3f847ae1
 8001d60:	54442d18 	.word	0x54442d18
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	200002ac 	.word	0x200002ac
 8001d6c:	2000033c 	.word	0x2000033c
 8001d70:	200002f4 	.word	0x200002f4
 8001d74:	20000384 	.word	0x20000384
 8001d78:	c0266666 	.word	0xc0266666
 8001d7c:	40266666 	.word	0x40266666
 8001d80:	3c23d70a 	.word	0x3c23d70a
 8001d84:	200004a8 	.word	0x200004a8
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	3b9374bc 	.word	0x3b9374bc
 8001d90:	3a902de0 	.word	0x3a902de0
 8001d94:	200004c8 	.word	0x200004c8
 8001d98:	437a0000 	.word	0x437a0000
 8001d9c:	20000258 	.word	0x20000258
 8001da0:	0800bf60 	.word	0x0800bf60
 8001da4:	3a24b5be 	.word	0x3a24b5be
 8001da8:	20000500 	.word	0x20000500
 8001dac:	20000454 	.word	0x20000454
 8001db0:	0800bf7c 	.word	0x0800bf7c
 8001db4:	200004f8 	.word	0x200004f8
 8001db8:	20000468 	.word	0x20000468
 8001dbc:	40c00000 	.word	0x40c00000
 8001dc0:	200004e8 	.word	0x200004e8
 8001dc4:	4b89      	ldr	r3, [pc, #548]	; (8001fec <main+0x5cc>)
 8001dc6:	f7fe fd49 	bl	800085c <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
				vehicleState.yaw_rate_rad_sec = (vehicleState.yaw_rate_deg_sec
 8001dce:	4988      	ldr	r1, [pc, #544]	; (8001ff0 <main+0x5d0>)
 8001dd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				if (data.curvature_radius_ref_m
 8001dd4:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <main+0x5d4>)
 8001dd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	db38      	blt.n	8001e5a <main+0x43a>
						>= MAX_CURVATURE_RADIUS_FOR_STRAIGHT) {
					vehicleState.yaw_rate_ref_rad_sec = 0;
 8001de8:	4981      	ldr	r1, [pc, #516]	; (8001ff0 <main+0x5d0>)
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
							vehicleState.yaw_rate_rad_sec,
 8001df6:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <main+0x5d0>)
 8001df8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
					u_sterzo = PID_controller(&pid_steering,
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fefa 	bl	8000bf8 <__aeabi_d2f>
 8001e04:	4606      	mov	r6, r0
							vehicleState.yaw_rate_ref_rad_sec);
 8001e06:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <main+0x5d0>)
 8001e08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					u_sterzo = PID_controller(&pid_steering,
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fef2 	bl	8000bf8 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	ee00 3a90 	vmov	s1, r3
 8001e1a:	ee00 6a10 	vmov	s0, r6
 8001e1e:	4876      	ldr	r0, [pc, #472]	; (8001ff8 <main+0x5d8>)
 8001e20:	f7ff f9d2 	bl	80011c8 <PID_controller>
 8001e24:	ee10 3a10 	vmov	r3, s0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4972      	ldr	r1, [pc, #456]	; (8001ffc <main+0x5dc>)
 8001e34:	e9c1 2300 	strd	r2, r3, [r1]
					servo_motor(-u_sterzo); //minus because yawrate and steering are opposite
 8001e38:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <main+0x5dc>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fed9 	bl	8000bf8 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef1 7a67 	vneg.f32	s15, s15
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	f000 fc70 	bl	8002738 <servo_motor>
 8001e58:	e656      	b.n	8001b08 <main+0xe8>
				} else {
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001e5a:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <main+0x5d0>)
 8001e5c:	ed93 7a05 	vldr	s14, [r3, #20]
							* RPM_2_m_s;
 8001e60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e64:	ee67 7a27 	vmul.f32	s15, s14, s15
					vehicleState.linear_speed_m_s = vehicleState.motor_speed_RPM
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <main+0x5d0>)
 8001e6a:	edc3 7a06 	vstr	s15, [r3, #24]
					vehicleState.yaw_rate_ref_rad_sec =
							vehicleState.linear_speed_m_s
 8001e6e:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <main+0x5d0>)
 8001e70:	ed93 7a06 	vldr	s14, [r3, #24]
									/ data.curvature_radius_ref_m;
 8001e74:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <main+0x5d4>)
 8001e76:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e7e:	ee16 0a90 	vmov	r0, s13
 8001e82:	f7fe fb69 	bl	8000558 <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
					vehicleState.yaw_rate_ref_rad_sec =
 8001e8a:	4959      	ldr	r1, [pc, #356]	; (8001ff0 <main+0x5d0>)
 8001e8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

					float yaw_rate_ref_rad_sec_abs =
							vehicleState.yaw_rate_ref_rad_sec;
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <main+0x5d0>)
 8001e92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
					float yaw_rate_ref_rad_sec_abs =
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fead 	bl	8000bf8 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
					float yaw_rate_rad_sec_abs = vehicleState.yaw_rate_rad_sec;
 8001ea2:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <main+0x5d0>)
 8001ea4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fea4 	bl	8000bf8 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
					if (vehicleState.yaw_rate_ref_rad_sec < 0)
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <main+0x5d0>)
 8001eb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f7fe fe13 	bl	8000aec <__aeabi_dcmplt>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <main+0x4c8>
						yaw_rate_ref_rad_sec_abs =
								-vehicleState.yaw_rate_ref_rad_sec;
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <main+0x5d0>)
 8001ece:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fe8f 	bl	8000bf8 <__aeabi_d2f>
 8001eda:	4603      	mov	r3, r0
						yaw_rate_ref_rad_sec_abs =
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef1 7a67 	vneg.f32	s15, s15
 8001ee4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
					if (vehicleState.yaw_rate_rad_sec < 0)
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <main+0x5d0>)
 8001eea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	f7fe fdf9 	bl	8000aec <__aeabi_dcmplt>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <main+0x4fc>
						yaw_rate_rad_sec_abs = -vehicleState.yaw_rate_rad_sec;
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <main+0x5d0>)
 8001f02:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fe75 	bl	8000bf8 <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eef1 7a67 	vneg.f32	s15, s15
 8001f18:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

					u_sterzo = PID_controller(&pid_steering,
 8001f1c:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8001f20:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001f24:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <main+0x5d8>)
 8001f26:	f7ff f94f 	bl	80011c8 <PID_controller>
 8001f2a:	ee10 3a10 	vmov	r3, s0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb12 	bl	8000558 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4930      	ldr	r1, [pc, #192]	; (8001ffc <main+0x5dc>)
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]
							yaw_rate_rad_sec_abs, yaw_rate_ref_rad_sec_abs);

					//minus because yawrate and steering are opposite
					if (data.curvature_radius_ref_m >= 0 && u_sterzo > 0)
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <main+0x5d4>)
 8001f40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	db14      	blt.n	8001f78 <main+0x558>
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <main+0x5dc>)
 8001f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	f7fe fde4 	bl	8000b28 <__aeabi_dcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <main+0x558>
						u_sterzo *= -1.0;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <main+0x5dc>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <main+0x5dc>)
 8001f74:	e9c3 4500 	strd	r4, r5, [r3]
					if (data.curvature_radius_ref_m < 0 && u_sterzo < 0)
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <main+0x5d4>)
 8001f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	d514      	bpl.n	8001fb2 <main+0x592>
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <main+0x5dc>)
 8001f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	f7fe fda9 	bl	8000aec <__aeabi_dcmplt>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <main+0x592>
						u_sterzo *= -1.0;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <main+0x5dc>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <main+0x5dc>)
 8001fae:	e9c3 8900 	strd	r8, r9, [r3]

					servo_motor((int) u_sterzo);
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <main+0x5dc>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fdd4 	bl	8000b68 <__aeabi_d2iz>
 8001fc0:	ee07 0a90 	vmov	s15, r0
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	f000 fbb4 	bl	8002738 <servo_motor>
 8001fd0:	e59a      	b.n	8001b08 <main+0xe8>
						data.linear_speed_ref_m_s,
						vehicleState.motor_speed_ref_RPM,
						vehicleState.motor_speed_RPM, u_trazione);*/
			}
		} else {
			set_PWM_and_dir(0, vehicleState.motor_direction_ref);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <main+0x5d0>)
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff f882 	bl	80010e4 <set_PWM_and_dir>
			servo_motor(0);
 8001fe0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002000 <main+0x5e0>
 8001fe4:	f000 fba8 	bl	8002738 <servo_motor>
	while (1) {
 8001fe8:	e58e      	b.n	8001b08 <main+0xe8>
 8001fea:	bf00      	nop
 8001fec:	40668000 	.word	0x40668000
 8001ff0:	20000468 	.word	0x20000468
 8001ff4:	20000454 	.word	0x20000454
 8001ff8:	200004c8 	.word	0x200004c8
 8001ffc:	200004f0 	.word	0x200004f0
 8002000:	00000000 	.word	0x00000000

08002004 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	; 0x50
 8002008:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	2230      	movs	r2, #48	; 0x30
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f005 f8b0 	bl	8007178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <SystemClock_Config+0xd0>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <SystemClock_Config+0xd0>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <SystemClock_Config+0xd0>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <SystemClock_Config+0xd4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <SystemClock_Config+0xd4>)
 8002052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <SystemClock_Config+0xd4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002068:	2301      	movs	r3, #1
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800206c:	2310      	movs	r3, #16
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002070:	2302      	movs	r3, #2
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002074:	2300      	movs	r3, #0
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002078:	2310      	movs	r3, #16
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800207c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002082:	2304      	movs	r3, #4
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002086:	2307      	movs	r3, #7
 8002088:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800208a:	f107 0320 	add.w	r3, r7, #32
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fde4 	bl	8004c5c <HAL_RCC_OscConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <SystemClock_Config+0x9a>
		Error_Handler();
 800209a:	f000 fb45 	bl	8002728 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800209e:	230f      	movs	r3, #15
 80020a0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a2:	2302      	movs	r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ae:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2102      	movs	r1, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f846 	bl	800514c <HAL_RCC_ClockConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xc6>
		Error_Handler();
 80020c6:	f000 fb2f 	bl	8002728 <Error_Handler>
	}
}
 80020ca:	bf00      	nop
 80020cc:	3750      	adds	r7, #80	; 0x50
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020e2:	463b      	mov	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MX_ADC1_Init+0x98>)
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <MX_ADC1_Init+0x9c>)
 80020f2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_ADC1_Init+0x98>)
 80020f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020fa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_ADC1_Init+0x98>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_ADC1_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_ADC1_Init+0x98>)
 800210a:	2200      	movs	r2, #0
 800210c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_ADC1_Init+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_ADC1_Init+0x98>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_ADC1_Init+0x98>)
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <MX_ADC1_Init+0xa0>)
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_ADC1_Init+0x98>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_ADC1_Init+0x98>)
 800212a:	2201      	movs	r2, #1
 800212c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_ADC1_Init+0x98>)
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_ADC1_Init+0x98>)
 8002138:	2201      	movs	r2, #1
 800213a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_ADC1_Init+0x98>)
 800213e:	f000 ff85 	bl	800304c <HAL_ADC_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_ADC1_Init+0x70>
		Error_Handler();
 8002148:	f000 faee 	bl	8002728 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800214c:	230b      	movs	r3, #11
 800214e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002150:	2301      	movs	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_ADC1_Init+0x98>)
 800215e:	f000 ffb9 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_ADC1_Init+0x90>
		Error_Handler();
 8002168:	f000 fade 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000210 	.word	0x20000210
 8002178:	40012000 	.word	0x40012000
 800217c:	0f000001 	.word	0x0f000001

08002180 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <MX_I2C1_Init+0x54>)
 8002188:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_I2C1_Init+0x50>)
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_I2C1_Init+0x58>)
 800218e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_I2C1_Init+0x50>)
 800219e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_I2C1_Init+0x50>)
 80021be:	f001 fc6f 	bl	8003aa0 <HAL_I2C_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80021c8:	f000 faae 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000258 	.word	0x20000258
 80021d4:	40005400 	.word	0x40005400
 80021d8:	000186a0 	.word	0x000186a0

080021dc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b096      	sub	sp, #88	; 0x58
 80021e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	615a      	str	r2, [r3, #20]
 800220c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2220      	movs	r2, #32
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f004 ffaf 	bl	8007178 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <MX_TIM1_Init+0x13c>)
 800221c:	4a3f      	ldr	r2, [pc, #252]	; (800231c <MX_TIM1_Init+0x140>)
 800221e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1681 - 1;
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002222:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8002226:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <MX_TIM1_Init+0x13c>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1001 - 1;
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <MX_TIM1_Init+0x13c>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002248:	4833      	ldr	r0, [pc, #204]	; (8002318 <MX_TIM1_Init+0x13c>)
 800224a:	f003 f99f 	bl	800558c <HAL_TIM_Base_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002254:	f000 fa68 	bl	8002728 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800225e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002262:	4619      	mov	r1, r3
 8002264:	482c      	ldr	r0, [pc, #176]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002266:	f003 fe4b 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM1_Init+0x98>
		Error_Handler();
 8002270:	f000 fa5a 	bl	8002728 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002274:	4828      	ldr	r0, [pc, #160]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002276:	f003 fa3b 	bl	80056f0 <HAL_TIM_PWM_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8002280:	f000 fa52 	bl	8002728 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800228c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002290:	4619      	mov	r1, r3
 8002292:	4821      	ldr	r0, [pc, #132]	; (8002318 <MX_TIM1_Init+0x13c>)
 8002294:	f004 f9f0 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800229e:	f000 fa43 	bl	8002728 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a2:	2360      	movs	r3, #96	; 0x60
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ae:	2300      	movs	r3, #0
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <MX_TIM1_Init+0x13c>)
 80022c8:	f003 fd58 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80022d2:	f000 fa29 	bl	8002728 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ee:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	; (8002318 <MX_TIM1_Init+0x13c>)
 80022fa:	f004 fa2b 	bl	8006754 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8002304:	f000 fa10 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <MX_TIM1_Init+0x13c>)
 800230a:	f000 fbdb 	bl	8002ac4 <HAL_TIM_MspPostInit>

}
 800230e:	bf00      	nop
 8002310:	3758      	adds	r7, #88	; 0x58
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002ac 	.word	0x200002ac
 800231c:	40010000 	.word	0x40010000

08002320 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f004 ff22 	bl	8007178 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_TIM2_Init+0xa4>)
 800233e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002342:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MX_TIM2_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_TIM2_Init+0xa4>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295 - 1;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_TIM2_Init+0xa4>)
 8002352:	f06f 0201 	mvn.w	r2, #1
 8002356:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_TIM2_Init+0xa4>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM2_Init+0xa4>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002364:	2303      	movs	r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <MX_TIM2_Init+0xa4>)
 8002390:	f003 fab8 	bl	8005904 <HAL_TIM_Encoder_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800239a:	f000 f9c5 	bl	8002728 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <MX_TIM2_Init+0xa4>)
 80023ac:	f004 f964 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80023b6:	f000 f9b7 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	3730      	adds	r7, #48	; 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200002f4 	.word	0x200002f4

080023c8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_TIM10_Init+0x94>)
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <MX_TIM10_Init+0x98>)
 80023e4:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 84 - 1;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MX_TIM10_Init+0x94>)
 80023e8:	2253      	movs	r2, #83	; 0x53
 80023ea:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_TIM10_Init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000 - 1;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <MX_TIM10_Init+0x94>)
 80023f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023f8:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_TIM10_Init+0x94>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <MX_TIM10_Init+0x94>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002406:	4815      	ldr	r0, [pc, #84]	; (800245c <MX_TIM10_Init+0x94>)
 8002408:	f003 f8c0 	bl	800558c <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM10_Init+0x4e>
		Error_Handler();
 8002412:	f000 f989 	bl	8002728 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <MX_TIM10_Init+0x94>)
 8002418:	f003 f96a 	bl	80056f0 <HAL_TIM_PWM_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM10_Init+0x5e>
		Error_Handler();
 8002422:	f000 f981 	bl	8002728 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002426:	2360      	movs	r3, #96	; 0x60
 8002428:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	4619      	mov	r1, r3
 800243c:	4807      	ldr	r0, [pc, #28]	; (800245c <MX_TIM10_Init+0x94>)
 800243e:	f003 fc9d 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002448:	f000 f96e 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <MX_TIM10_Init+0x94>)
 800244e:	f000 fb39 	bl	8002ac4 <HAL_TIM_MspPostInit>

}
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000033c 	.word	0x2000033c
 8002460:	40014400 	.word	0x40014400

08002464 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_TIM11_Init+0x40>)
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <MX_TIM11_Init+0x44>)
 800246c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 120 - 1;
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <MX_TIM11_Init+0x40>)
 8002470:	2277      	movs	r2, #119	; 0x77
 8002472:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_TIM11_Init+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 7000 - 1;
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_TIM11_Init+0x40>)
 800247c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002480:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_TIM11_Init+0x40>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_TIM11_Init+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_TIM11_Init+0x40>)
 8002490:	f003 f87c 	bl	800558c <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM11_Init+0x3a>
		Error_Handler();
 800249a:	f000 f945 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000384 	.word	0x20000384
 80024a8:	40014800 	.word	0x40014800

080024ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_USART2_UART_Init+0x4c>)
 80024e4:	f004 f99c 	bl	8006820 <HAL_UART_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80024ee:	f000 f91b 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200003cc 	.word	0x200003cc
 80024fc:	40004400 	.word	0x40004400

08002500 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <MX_USART6_UART_Init+0x50>)
 8002508:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002538:	f004 f972 	bl	8006820 <HAL_UART_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002542:	f000 f8f1 	bl	8002728 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000410 	.word	0x20000410
 8002550:	40011400 	.word	0x40011400

08002554 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <MX_GPIO_Init+0xe0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <MX_GPIO_Init+0xe0>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <MX_GPIO_Init+0xe0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <MX_GPIO_Init+0xe0>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a29      	ldr	r2, [pc, #164]	; (8002634 <MX_GPIO_Init+0xe0>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <MX_GPIO_Init+0xe0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <MX_GPIO_Init+0xe0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2101      	movs	r1, #1
 80025de:	4816      	ldr	r0, [pc, #88]	; (8002638 <MX_GPIO_Init+0xe4>)
 80025e0:	f001 fa2c 	bl	8003a3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <MX_GPIO_Init+0xe4>)
 80025fc:	f001 f89a 	bl	8003734 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR_Pin */
	GPIO_InitStruct.Pin = DIR_Pin;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <MX_GPIO_Init+0xe4>)
 8002618:	f001 f88c 	bl	8003734 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2028      	movs	r0, #40	; 0x28
 8002622:	f001 f850 	bl	80036c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002626:	2028      	movs	r0, #40	; 0x28
 8002628:	f001 f869 	bl	80036fe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40020800 	.word	0x40020800

0800263c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Timer11 for temporization
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d12b      	bne.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0x68>
		Flag_10ms = 1;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

		//Encoder
		vehicleState.counts = TIM2->CNT;
 8002652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	461a      	mov	r2, r3
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800265c:	601a      	str	r2, [r3, #0]
		TIM2->CNT = TIM2->ARR / 2;
 800265e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	6253      	str	r3, [r2, #36]	; 0x24

		//References
		time_counter++;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002674:	6013      	str	r3, [r2, #0]

		if (time_counter == 200) {
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2bc8      	cmp	r3, #200	; 0xc8
 800267c:	d10a      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x58>
			data.curvature_radius_ref_m = 1.3; //2.2;//2.2; //1.3;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002680:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002682:	60da      	str	r2, [r3, #12]
			pid_steering.Iterm = 0;
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
			pid_steering.e_old = 0;
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
		}

		if (time_counter == 580) {
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 800269c:	d102      	bne.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0x68>
			data.enable = 0;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
		 data.enable = 0;
		 }
		 */

	}
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	20000384 	.word	0x20000384
 80026b4:	200004f8 	.word	0x200004f8
 80026b8:	20000468 	.word	0x20000468
 80026bc:	200004fc 	.word	0x200004fc
 80026c0:	20000454 	.word	0x20000454
 80026c4:	3fa66666 	.word	0x3fa66666
 80026c8:	200004c8 	.word	0x200004c8

080026cc <__io_putchar>:

//USART2 -> ST_Link UART for DEBUG with USB (e.g. PUTTY)
int __io_putchar(int ch) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80026d4:	1d39      	adds	r1, r7, #4
 80026d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026da:	2201      	movs	r2, #1
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <__io_putchar+0x20>)
 80026de:	f004 f8ec 	bl	80068ba <HAL_UART_Transmit>
	return ch;
 80026e2:	687b      	ldr	r3, [r7, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200003cc 	.word	0x200003cc

080026f0 <HAL_GPIO_EXTI_Callback>:

//BLUE user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d10a      	bne.n	8002718 <HAL_GPIO_EXTI_Callback+0x28>
		if (HardwareEnable == 0) {
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_GPIO_EXTI_Callback+0x34>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_GPIO_EXTI_Callback+0x22>
			HardwareEnable = 1;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_GPIO_EXTI_Callback+0x34>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
		} else {
			HardwareEnable = 0;
		}
	}
}
 8002710:	e002      	b.n	8002718 <HAL_GPIO_EXTI_Callback+0x28>
			HardwareEnable = 0;
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_GPIO_EXTI_Callback+0x34>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	2000000c 	.word	0x2000000c

08002728 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002730:	e7fe      	b.n	8002730 <Error_Handler+0x8>
 8002732:	0000      	movs	r0, r0
 8002734:	0000      	movs	r0, r0
	...

08002738 <servo_motor>:
#include "servo_motor.h"



void servo_motor(float angolo)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tic;
	tic = 0.02;
 8002742:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <servo_motor+0xb8>)
 8002744:	617b      	str	r3, [r7, #20]
	  float ccr;
	  float conv_angolo;

	  if(angolo < MIN_ANGOLO)
 8002746:	edd7 7a01 	vldr	s15, [r7, #4]
 800274a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800274e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	d502      	bpl.n	800275e <servo_motor+0x26>

		   angolo = MIN_ANGOLO;
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <servo_motor+0xbc>)
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e00a      	b.n	8002774 <servo_motor+0x3c>

	  else if (angolo > MAX_ANGOLO)
 800275e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002762:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	dd01      	ble.n	8002774 <servo_motor+0x3c>

		   angolo = MAX_ANGOLO;
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <servo_motor+0xc0>)
 8002772:	607b      	str	r3, [r7, #4]

	  conv_angolo = angolo + DRITTO;
 8002774:	edd7 7a01 	vldr	s15, [r7, #4]
 8002778:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80027fc <servo_motor+0xc4>
 800277c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002780:	edc7 7a04 	vstr	s15, [r7, #16]

	  ccr=(((0.01111*conv_angolo)+0.5)/tic);
 8002784:	6938      	ldr	r0, [r7, #16]
 8002786:	f7fd fee7 	bl	8000558 <__aeabi_f2d>
 800278a:	a317      	add	r3, pc, #92	; (adr r3, 80027e8 <servo_motor+0xb0>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff3a 	bl	8000608 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <servo_motor+0xc8>)
 80027a2:	f7fd fd7b 	bl	800029c <__adddf3>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4614      	mov	r4, r2
 80027ac:	461d      	mov	r5, r3
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7fd fed2 	bl	8000558 <__aeabi_f2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4620      	mov	r0, r4
 80027ba:	4629      	mov	r1, r5
 80027bc:	f7fe f84e 	bl	800085c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe fa16 	bl	8000bf8 <__aeabi_d2f>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1=ccr;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <servo_motor+0xcc>)
 80027d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027da:	ee17 2a90 	vmov	r2, s15
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdb0      	pop	{r4, r5, r7, pc}
 80027e8:	f544bb1b 	.word	0xf544bb1b
 80027ec:	3f86c0d6 	.word	0x3f86c0d6
 80027f0:	3ca3d70a 	.word	0x3ca3d70a
 80027f4:	c1f00000 	.word	0xc1f00000
 80027f8:	41f00000 	.word	0x41f00000
 80027fc:	42b80000 	.word	0x42b80000
 8002800:	3fe00000 	.word	0x3fe00000
 8002804:	40010000 	.word	0x40010000

08002808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_MspInit+0x4c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_MspInit+0x4c>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_MspInit+0x4c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <HAL_MspInit+0x4c>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002846:	2007      	movs	r0, #7
 8002848:	f000 ff32 	bl	80036b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_ADC_MspInit+0x7c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d127      	bne.n	80028ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028b2:	2302      	movs	r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b6:	2303      	movs	r3, #3
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_ADC_MspInit+0x84>)
 80028c6:	f000 ff35 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40012000 	.word	0x40012000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020800 	.word	0x40020800

080028e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_I2C_MspInit+0x84>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12b      	bne.n	800295a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_I2C_MspInit+0x88>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_A_Pin|I2C_B_Pin;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292e:	2304      	movs	r3, #4
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <HAL_I2C_MspInit+0x8c>)
 800293a:	f000 fefb 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_I2C_MspInit+0x88>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40005400 	.word	0x40005400
 8002968:	40023800 	.word	0x40023800
 800296c:	40020400 	.word	0x40020400

08002970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_TIM_Base_MspInit+0xb8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11e      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2018      	movs	r0, #24
 80029a4:	f000 fe8f 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80029a8:	2018      	movs	r0, #24
 80029aa:	f000 fea8 	bl	80036fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	201a      	movs	r0, #26
 80029b4:	f000 fe87 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029b8:	201a      	movs	r0, #26
 80029ba:	f000 fea0 	bl	80036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80029be:	e02e      	b.n	8002a1e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <HAL_TIM_Base_MspInit+0xc0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
}
 80029e6:	e01a      	b.n	8002a1e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_TIM_Base_MspInit+0xc4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d115      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_TIM_Base_MspInit+0xbc>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	201a      	movs	r0, #26
 8002a14:	f000 fe57 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a18:	201a      	movs	r0, #26
 8002a1a:	f000 fe70 	bl	80036fe <HAL_NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800

08002a38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d12b      	bne.n	8002ab2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8002a92:	2303      	movs	r3, #3
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002aae:	f000 fe41 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_TIM_MspPostInit+0xb4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d11f      	bne.n	8002b26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8002b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4818      	ldr	r0, [pc, #96]	; (8002b80 <HAL_TIM_MspPostInit+0xbc>)
 8002b20:	f000 fe08 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002b24:	e023      	b.n	8002b6e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_TIM_MspPostInit+0xc0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d11e      	bne.n	8002b6e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_TIM_MspPostInit+0xb8>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTORE_Pin;
 8002b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_MOTORE_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <HAL_TIM_MspPostInit+0xc4>)
 8002b6a:	f000 fde3 	bl	8003734 <HAL_GPIO_Init>
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40014400 	.word	0x40014400
 8002b88:	40020400 	.word	0x40020400

08002b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <HAL_UART_MspInit+0xe8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12c      	bne.n	8002c08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_1_Pin|USART_2_Pin;
 8002be6:	230c      	movs	r3, #12
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481e      	ldr	r0, [pc, #120]	; (8002c7c <HAL_UART_MspInit+0xf0>)
 8002c02:	f000 fd97 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c06:	e030      	b.n	8002c6a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_UART_MspInit+0xf4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d12b      	bne.n	8002c6a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_UART_MspInit+0xec>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c4a:	23c0      	movs	r3, #192	; 0xc0
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <HAL_UART_MspInit+0xf8>)
 8002c66:	f000 fd65 	bl	8003734 <HAL_GPIO_Init>
}
 8002c6a:	bf00      	nop
 8002c6c:	3730      	adds	r7, #48	; 0x30
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40004400 	.word	0x40004400
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40011400 	.word	0x40011400
 8002c84:	40020800 	.word	0x40020800

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd4:	f000 f976 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ce2:	f002 ff43 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200002ac 	.word	0x200002ac

08002cf0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf4:	4803      	ldr	r0, [pc, #12]	; (8002d04 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002cf6:	f002 ff39 	bl	8005b6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002cfa:	4803      	ldr	r0, [pc, #12]	; (8002d08 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002cfc:	f002 ff36 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200002ac 	.word	0x200002ac
 8002d08:	20000384 	.word	0x20000384

08002d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d14:	f000 feac 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return 1;
 8002d20:	2301      	movs	r3, #1
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_kill>:

int _kill(int pid, int sig)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d36:	f004 f9d7 	bl	80070e8 <__errno>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2216      	movs	r2, #22
 8002d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_exit>:

void _exit (int status)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ffe7 	bl	8002d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d5e:	e7fe      	b.n	8002d5e <_exit+0x12>

08002d60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e00a      	b.n	8002d88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d72:	f3af 8000 	nop.w
 8002d76:	4601      	mov	r1, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	60ba      	str	r2, [r7, #8]
 8002d7e:	b2ca      	uxtb	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbf0      	blt.n	8002d72 <_read+0x12>
  }

  return len;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e009      	b.n	8002dc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	60ba      	str	r2, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fc89 	bl	80026cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	dbf1      	blt.n	8002dac <_write+0x12>
  }
  return len;
 8002dc8:	687b      	ldr	r3, [r7, #4]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_close>:

int _close(int file)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfa:	605a      	str	r2, [r3, #4]
  return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_isatty>:

int _isatty(int file)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f004 f93c 	bl	80070e8 <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20018000 	.word	0x20018000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	20000530 	.word	0x20000530
 8002ea4:	20000548 	.word	0x20000548

08002ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <SystemInit+0x20>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <SystemInit+0x20>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ed2:	490e      	ldr	r1, [pc, #56]	; (8002f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ee8:	4c0b      	ldr	r4, [pc, #44]	; (8002f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef6:	f7ff ffd7 	bl	8002ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f004 f8fb 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efe:	f7fe fd8f 	bl	8001a20 <main>
  bx  lr    
 8002f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002f10:	0800c4c8 	.word	0x0800c4c8
  ldr r2, =_sbss
 8002f14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f18:	20000548 	.word	0x20000548

08002f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC_IRQHandler>
	...

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_Init+0x40>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_Init+0x40>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_Init+0x40>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f000 fbb1 	bl	80036b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f000 f808 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f54:	f7ff fc58 	bl	8002808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_InitTick+0x54>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_InitTick+0x58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fbc9 	bl	800371a <HAL_SYSTICK_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00e      	b.n	8002fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d80a      	bhi.n	8002fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f000 fb91 	bl	80036c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <HAL_InitTick+0x5c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	20000018 	.word	0x20000018
 8002fc0:	20000014 	.word	0x20000014

08002fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x20>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000018 	.word	0x20000018
 8002fe8:	20000534 	.word	0x20000534

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000534 	.word	0x20000534

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff ffee 	bl	8002fec <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_Delay+0x44>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302a:	bf00      	nop
 800302c:	f7ff ffde 	bl	8002fec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000018 	.word	0x20000018

0800304c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e033      	b.n	80030ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fbf4 	bl	8002858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003092:	f023 0302 	bic.w	r3, r3, #2
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f93a 	bl	8003318 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
 80030ba:	e001      	b.n	80030c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e105      	b.n	80032fc <HAL_ADC_ConfigChannel+0x228>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d925      	bls.n	800314c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	2207      	movs	r2, #7
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43da      	mvns	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68d9      	ldr	r1, [r3, #12]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	4603      	mov	r3, r0
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4403      	add	r3, r0
 800313e:	3b1e      	subs	r3, #30
 8003140:	409a      	lsls	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	e022      	b.n	8003192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	2207      	movs	r2, #7
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6919      	ldr	r1, [r3, #16]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	4603      	mov	r3, r0
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4403      	add	r3, r0
 8003188:	409a      	lsls	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d824      	bhi.n	80031e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b05      	subs	r3, #5
 80031ac:	221f      	movs	r2, #31
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b05      	subs	r3, #5
 80031d6:	fa00 f203 	lsl.w	r2, r0, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
 80031e2:	e04c      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d824      	bhi.n	8003236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b23      	subs	r3, #35	; 0x23
 80031fe:	221f      	movs	r2, #31
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43da      	mvns	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	400a      	ands	r2, r1
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	4618      	mov	r0, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b23      	subs	r3, #35	; 0x23
 8003228:	fa00 f203 	lsl.w	r2, r0, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	e023      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b41      	subs	r3, #65	; 0x41
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b41      	subs	r3, #65	; 0x41
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_ADC_ConfigChannel+0x234>)
 8003280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_ADC_ConfigChannel+0x238>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d109      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1cc>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d105      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_ADC_ConfigChannel+0x238>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d123      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x21e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d003      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x1e6>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b11      	cmp	r3, #17
 80032b8:	d11b      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d111      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_ADC_ConfigChannel+0x23c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_ADC_ConfigChannel+0x240>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	0c9a      	lsrs	r2, r3, #18
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032e4:	e002      	b.n	80032ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f9      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40012300 	.word	0x40012300
 800330c:	40012000 	.word	0x40012000
 8003310:	20000010 	.word	0x20000010
 8003314:	431bde83 	.word	0x431bde83

08003318 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003320:	4b79      	ldr	r3, [pc, #484]	; (8003508 <ADC_Init+0x1f0>)
 8003322:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	431a      	orrs	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003392:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	4a58      	ldr	r2, [pc, #352]	; (800350c <ADC_Init+0x1f4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6899      	ldr	r1, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e00f      	b.n	8003416 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003414:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0202 	bic.w	r2, r2, #2
 8003424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7e1b      	ldrb	r3, [r3, #24]
 8003430:	005a      	lsls	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003462:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	3b01      	subs	r3, #1
 8003470:	035a      	lsls	r2, r3, #13
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e007      	b.n	800348c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	051a      	lsls	r2, r3, #20
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ce:	025a      	lsls	r2, r3, #9
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	029a      	lsls	r2, r3, #10
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40012300 	.word	0x40012300
 800350c:	0f000001 	.word	0x0f000001

08003510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800352c:	4013      	ands	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	; (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <__NVIC_GetPriorityGrouping+0x18>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 0307 	and.w	r3, r3, #7
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db0b      	blt.n	800359e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4907      	ldr	r1, [pc, #28]	; (80035ac <__NVIC_EnableIRQ+0x38>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2001      	movs	r0, #1
 8003596:	fa00 f202 	lsl.w	r2, r0, r2
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	db0a      	blt.n	80035da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	490c      	ldr	r1, [pc, #48]	; (80035fc <__NVIC_SetPriority+0x4c>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	440b      	add	r3, r1
 80035d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d8:	e00a      	b.n	80035f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4908      	ldr	r1, [pc, #32]	; (8003600 <__NVIC_SetPriority+0x50>)
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	3b04      	subs	r3, #4
 80035e8:	0112      	lsls	r2, r2, #4
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	440b      	add	r3, r1
 80035ee:	761a      	strb	r2, [r3, #24]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f1c3 0307 	rsb	r3, r3, #7
 800361e:	2b04      	cmp	r3, #4
 8003620:	bf28      	it	cs
 8003622:	2304      	movcs	r3, #4
 8003624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3304      	adds	r3, #4
 800362a:	2b06      	cmp	r3, #6
 800362c:	d902      	bls.n	8003634 <NVIC_EncodePriority+0x30>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3b03      	subs	r3, #3
 8003632:	e000      	b.n	8003636 <NVIC_EncodePriority+0x32>
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	401a      	ands	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800364c:	f04f 31ff 	mov.w	r1, #4294967295
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43d9      	mvns	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	4313      	orrs	r3, r2
         );
}
 800365e:	4618      	mov	r0, r3
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367c:	d301      	bcc.n	8003682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367e:	2301      	movs	r3, #1
 8003680:	e00f      	b.n	80036a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <SysTick_Config+0x40>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368a:	210f      	movs	r1, #15
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f7ff ff8e 	bl	80035b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <SysTick_Config+0x40>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369a:	4b04      	ldr	r3, [pc, #16]	; (80036ac <SysTick_Config+0x40>)
 800369c:	2207      	movs	r2, #7
 800369e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000e010 	.word	0xe000e010

080036b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff29 	bl	8003510 <__NVIC_SetPriorityGrouping>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d8:	f7ff ff3e 	bl	8003558 <__NVIC_GetPriorityGrouping>
 80036dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff ff8e 	bl	8003604 <NVIC_EncodePriority>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff5d 	bl	80035b0 <__NVIC_SetPriority>
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff31 	bl	8003574 <__NVIC_EnableIRQ>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffa2 	bl	800366c <SysTick_Config>
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e159      	b.n	8003a04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8148 	bne.w	80039fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a2 	beq.w	80039fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a56      	ldr	r2, [pc, #344]	; (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b54      	ldr	r3, [pc, #336]	; (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d6:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_GPIO_Init+0x2ec>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a49      	ldr	r2, [pc, #292]	; (8003a24 <HAL_GPIO_Init+0x2f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x202>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a48      	ldr	r2, [pc, #288]	; (8003a28 <HAL_GPIO_Init+0x2f4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x1fe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a47      	ldr	r2, [pc, #284]	; (8003a2c <HAL_GPIO_Init+0x2f8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x1fa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a46      	ldr	r2, [pc, #280]	; (8003a30 <HAL_GPIO_Init+0x2fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x1f6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a45      	ldr	r2, [pc, #276]	; (8003a34 <HAL_GPIO_Init+0x300>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x1f2>
 8003922:	2304      	movs	r3, #4
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003926:	2307      	movs	r3, #7
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	; (8003a20 <HAL_GPIO_Init+0x2ec>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_GPIO_Init+0x304>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <HAL_GPIO_Init+0x304>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_GPIO_Init+0x304>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f aea2 	bls.w	8003750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40013c00 	.word	0x40013c00

08003a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a4c:	787b      	ldrb	r3, [r7, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a58:	e003      	b.n	8003a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	041a      	lsls	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	619a      	str	r2, [r3, #24]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fe2e 	bl	80026f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40013c00 	.word	0x40013c00

08003aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e12b      	b.n	8003d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fe ff0a 	bl	80028e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b04:	f001 fd1a 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8003b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a81      	ldr	r2, [pc, #516]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d807      	bhi.n	8003b24 <HAL_I2C_Init+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a80      	ldr	r2, [pc, #512]	; (8003d18 <HAL_I2C_Init+0x278>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e006      	b.n	8003b32 <HAL_I2C_Init+0x92>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a7d      	ldr	r2, [pc, #500]	; (8003d1c <HAL_I2C_Init+0x27c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0e7      	b.n	8003d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <HAL_I2C_Init+0x280>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9b      	lsrs	r3, r3, #18
 8003b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <HAL_I2C_Init+0xd4>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	e009      	b.n	8003b88 <HAL_I2C_Init+0xe8>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_I2C_Init+0x284>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	3301      	adds	r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	495c      	ldr	r1, [pc, #368]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	d819      	bhi.n	8003bdc <HAL_I2C_Init+0x13c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e59      	subs	r1, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_I2C_Init+0x138>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e59      	subs	r1, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	e051      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	e04f      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <HAL_I2C_Init+0x168>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_I2C_Init+0x18e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	0099      	lsls	r1, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Init+0x196>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e022      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10e      	bne.n	8003c5c <HAL_I2C_Init+0x1bc>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e58      	subs	r0, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	440b      	add	r3, r1
 8003c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5a:	e00f      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	6809      	ldr	r1, [r1, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6911      	ldr	r1, [r2, #16]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	000186a0 	.word	0x000186a0
 8003d18:	001e847f 	.word	0x001e847f
 8003d1c:	003d08ff 	.word	0x003d08ff
 8003d20:	431bde83 	.word	0x431bde83
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff f956 	bl	8002fec <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	f040 80e0 	bne.w	8003f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	4970      	ldr	r1, [pc, #448]	; (8003f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fda0 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0d3      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_I2C_Master_Transmit+0x50>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0cc      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d007      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2210      	movs	r2, #16
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de0:	8979      	ldrh	r1, [r7, #10]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fc0a 	bl	8004600 <I2C_MasterRequestWrite>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e08d      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e0c:	e066      	b.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fe1a 	bl	8004a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11b      	bne.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6a39      	ldr	r1, [r7, #32]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fe0a 	bl	8004ace <I2C_WaitOnBTFFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01a      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d194      	bne.n	8003e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	00100002 	.word	0x00100002
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
 8003f34:	4613      	mov	r3, r2
 8003f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff f858 	bl	8002fec <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 820b 	bne.w	8004362 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	497c      	ldr	r1, [pc, #496]	; (8004148 <HAL_I2C_Master_Receive+0x224>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fca2 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e1fe      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Receive+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e1f7      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2222      	movs	r2, #34	; 0x22
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	893a      	ldrh	r2, [r7, #8]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a5c      	ldr	r2, [pc, #368]	; (800414c <HAL_I2C_Master_Receive+0x228>)
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fb8e 	bl	8004704 <I2C_MasterRequestRead>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1b8      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d113      	bne.n	8004022 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e18c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	2b01      	cmp	r3, #1
 8004028:	d11b      	bne.n	8004062 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e16c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b02      	cmp	r3, #2
 8004068:	d11b      	bne.n	80040a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	e14c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040c8:	e138      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	f200 80f1 	bhi.w	80042b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d123      	bne.n	8004124 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fd35 	bl	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e139      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004122:	e10b      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	d14e      	bne.n	80041ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	4906      	ldr	r1, [pc, #24]	; (8004150 <HAL_I2C_Master_Receive+0x22c>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fbb2 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e10e      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
 8004146:	bf00      	nop
 8004148:	00100002 	.word	0x00100002
 800414c:	ffff0000 	.word	0xffff0000
 8004150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c8:	e0b8      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2200      	movs	r2, #0
 80041d2:	4966      	ldr	r1, [pc, #408]	; (800436c <HAL_I2C_Master_Receive+0x448>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fb63 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0bf      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2200      	movs	r2, #0
 800422e:	494f      	ldr	r1, [pc, #316]	; (800436c <HAL_I2C_Master_Receive+0x448>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fb35 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e091      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b4:	e042      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fc48 	bl	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e04c      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d118      	bne.n	800433c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f aec2 	bne.w	80040ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010004 	.word	0x00010004

08004370 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	460b      	mov	r3, r1
 800437e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7fe fe34 	bl	8002fec <HAL_GetTick>
 8004384:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 8111 	bne.w	80045ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2319      	movs	r3, #25
 800439e:	2201      	movs	r2, #1
 80043a0:	4988      	ldr	r1, [pc, #544]	; (80045c4 <HAL_I2C_IsDeviceReady+0x254>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa7c 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e104      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2C_IsDeviceReady+0x50>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0fd      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <HAL_I2C_IsDeviceReady+0x258>)
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fa3a 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004440:	d103      	bne.n	800444a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e0b6      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800445e:	f7fe fdc5 	bl	8002fec <HAL_GetTick>
 8004462:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004492:	e025      	b.n	80044e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe fdaa 	bl	8002fec <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <HAL_I2C_IsDeviceReady+0x13a>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	22a0      	movs	r2, #160	; 0xa0
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2ba0      	cmp	r3, #160	; 0xa0
 80044ea:	d005      	beq.n	80044f8 <HAL_I2C_IsDeviceReady+0x188>
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <HAL_I2C_IsDeviceReady+0x188>
 80044f2:	7dbb      	ldrb	r3, [r7, #22]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0cd      	beq.n	8004494 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d129      	bne.n	8004562 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2319      	movs	r3, #25
 800453a:	2201      	movs	r2, #1
 800453c:	4921      	ldr	r1, [pc, #132]	; (80045c4 <HAL_I2C_IsDeviceReady+0x254>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f9ae 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e036      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e02c      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2319      	movs	r3, #25
 8004582:	2201      	movs	r2, #1
 8004584:	490f      	ldr	r1, [pc, #60]	; (80045c4 <HAL_I2C_IsDeviceReady+0x254>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f98a 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e012      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3301      	adds	r3, #1
 800459a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	f4ff af32 	bcc.w	800440a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	00100002 	.word	0x00100002
 80045c8:	ffff0000 	.word	0xffff0000

080045cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	460b      	mov	r3, r1
 800460e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d006      	beq.n	800462a <I2C_MasterRequestWrite+0x2a>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d003      	beq.n	800462a <I2C_MasterRequestWrite+0x2a>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004628:	d108      	bne.n	800463c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00b      	b.n	8004654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b12      	cmp	r3, #18
 8004642:	d107      	bne.n	8004654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f91d 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	d103      	bne.n	8004684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e035      	b.n	80046f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d108      	bne.n	80046a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	e01b      	b.n	80046dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046a4:	897b      	ldrh	r3, [r7, #10]
 80046a6:	11db      	asrs	r3, r3, #7
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f063 030f 	orn	r3, r3, #15
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <I2C_MasterRequestWrite+0xfc>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f943 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e010      	b.n	80046f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4907      	ldr	r1, [pc, #28]	; (8004700 <I2C_MasterRequestWrite+0x100>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f933 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010008 	.word	0x00010008
 8004700:	00010002 	.word	0x00010002

08004704 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	460b      	mov	r3, r1
 8004712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004728:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d006      	beq.n	800473e <I2C_MasterRequestRead+0x3a>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d003      	beq.n	800473e <I2C_MasterRequestRead+0x3a>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800473c:	d108      	bne.n	8004750 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e00b      	b.n	8004768 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	2b11      	cmp	r3, #17
 8004756:	d107      	bne.n	8004768 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f893 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d103      	bne.n	8004798 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e079      	b.n	8004890 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d108      	bne.n	80047b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]
 80047b6:	e05f      	b.n	8004878 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	11db      	asrs	r3, r3, #7
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f063 030f 	orn	r3, r3, #15
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4930      	ldr	r1, [pc, #192]	; (8004898 <I2C_MasterRequestRead+0x194>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8b9 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e054      	b.n	8004890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4929      	ldr	r1, [pc, #164]	; (800489c <I2C_MasterRequestRead+0x198>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8a9 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e044      	b.n	8004890 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f831 	bl	80048a0 <I2C_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004852:	d103      	bne.n	800485c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e017      	b.n	8004890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004860:	897b      	ldrh	r3, [r7, #10]
 8004862:	11db      	asrs	r3, r3, #7
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f063 030e 	orn	r3, r3, #14
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <I2C_MasterRequestRead+0x198>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f865 	bl	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	00010008 	.word	0x00010008
 800489c:	00010002 	.word	0x00010002

080048a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b0:	e025      	b.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d021      	beq.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fe fb97 	bl	8002fec <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e023      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10d      	bne.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	e00c      	b.n	800493e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d0b6      	beq.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495c:	e051      	b.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d123      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e046      	b.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d021      	beq.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe fb15 	bl	8002fec <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e020      	b.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10c      	bne.n	8004a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e00b      	b.n	8004a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d18d      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a58:	e02d      	b.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f8ce 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e02d      	b.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d021      	beq.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fe fabb 	bl	8002fec <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e007      	b.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac0:	2b80      	cmp	r3, #128	; 0x80
 8004ac2:	d1ca      	bne.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ada:	e02d      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f88d 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e02d      	b.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d021      	beq.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7fe fa7a 	bl	8002fec <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e007      	b.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d1ca      	bne.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b5c:	e042      	b.n	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d119      	bne.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e029      	b.n	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7fe fa24 	bl	8002fec <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d116      	bne.n	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e007      	b.n	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d1b5      	bne.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d11b      	bne.n	8004c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e267      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d075      	beq.n	8004d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c7a:	4b88      	ldr	r3, [pc, #544]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d00c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c86:	4b85      	ldr	r3, [pc, #532]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d112      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c92:	4b82      	ldr	r3, [pc, #520]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05b      	beq.n	8004d64 <HAL_RCC_OscConfig+0x108>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d157      	bne.n	8004d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e242      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x74>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01d      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x98>
 8004cda:	4b70      	ldr	r3, [pc, #448]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6f      	ldr	r2, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b6d      	ldr	r3, [pc, #436]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6c      	ldr	r2, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0xb0>
 8004cf4:	4b69      	ldr	r3, [pc, #420]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fe f96a 	bl	8002fec <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fe f966 	bl	8002fec <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e207      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0xc0>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fe f956 	bl	8002fec <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe f952 	bl	8002fec <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e1f3      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	4b51      	ldr	r3, [pc, #324]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0xe8>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d063      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d11c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1c7      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	e03a      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fe f90b 	bl	8002fec <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fe f907 	bl	8002fec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1a8      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	e015      	b.n	8004e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_OscConfig+0x244>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fe f8ea 	bl	8002fec <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fe f8e6 	bl	8002fec <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e187      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d036      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fe f8ca 	bl	8002fec <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fe f8c6 	bl	8002fec <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e167      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x240>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x200>
 8004e7a:	e01b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x248>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7fe f8b3 	bl	8002fec <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fe f8af 	bl	8002fec <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d907      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e150      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470000 	.word	0x42470000
 8004ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8097 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a7c      	ldr	r2, [pc, #496]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b7a      	ldr	r3, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b77      	ldr	r3, [pc, #476]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	4b74      	ldr	r3, [pc, #464]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a73      	ldr	r2, [pc, #460]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fe f86f 	bl	8002fec <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fe f86b 	bl	8002fec <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e10c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCC_OscConfig+0x474>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x2ea>
 8004f38:	4b64      	ldr	r3, [pc, #400]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a63      	ldr	r2, [pc, #396]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x30c>
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a5e      	ldr	r2, [pc, #376]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x324>
 8004f68:	4b58      	ldr	r3, [pc, #352]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a57      	ldr	r2, [pc, #348]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b55      	ldr	r3, [pc, #340]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a54      	ldr	r2, [pc, #336]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fe f830 	bl	8002fec <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fe f82c 	bl	8002fec <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0cb      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RCC_OscConfig+0x334>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb4:	f7fe f81a 	bl	8002fec <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fe f816 	bl	8002fec <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0b5      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	4a38      	ldr	r2, [pc, #224]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a1 	beq.w	800513c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d05c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d141      	bne.n	8005092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fd ffea 	bl	8002fec <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd ffe6 	bl	8002fec <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e087      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	491b      	ldr	r1, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fd ffbf 	bl	8002fec <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005072:	f7fd ffbb 	bl	8002fec <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e05c      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x416>
 8005090:	e054      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd ffa8 	bl	8002fec <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fd ffa4 	bl	8002fec <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e045      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x444>
 80050be:	e03d      	b.n	800513c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e038      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x4ec>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d028      	beq.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d121      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d11a      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005110:	4293      	cmp	r3, r2
 8005112:	d111      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0cc      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b68      	ldr	r3, [pc, #416]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d90c      	bls.n	8005188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a0:	4b59      	ldr	r3, [pc, #356]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a58      	ldr	r2, [pc, #352]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b8:	4b53      	ldr	r3, [pc, #332]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	494d      	ldr	r1, [pc, #308]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d044      	beq.n	800526c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d119      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d003      	beq.n	800520a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005206:	2b03      	cmp	r3, #3
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520a:	4b3f      	ldr	r3, [pc, #252]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e06f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e067      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522a:	4b37      	ldr	r3, [pc, #220]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4934      	ldr	r1, [pc, #208]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800523c:	f7fd fed6 	bl	8002fec <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	e00a      	b.n	800525a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005244:	f7fd fed2 	bl	8002fec <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e04f      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525a:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 020c 	and.w	r2, r3, #12
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	429a      	cmp	r2, r3
 800526a:	d1eb      	bne.n	8005244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d20c      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4916      	ldr	r1, [pc, #88]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	490e      	ldr	r1, [pc, #56]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052d2:	f000 f821 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x1c0>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a09      	ldr	r2, [pc, #36]	; (8005310 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_RCC_ClockConfig+0x1c8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fe36 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023c00 	.word	0x40023c00
 8005308:	40023800 	.word	0x40023800
 800530c:	0800bf94 	.word	0x0800bf94
 8005310:	20000010 	.word	0x20000010
 8005314:	20000014 	.word	0x20000014

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800531c:	b094      	sub	sp, #80	; 0x50
 800531e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	2300      	movs	r3, #0
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	2300      	movs	r3, #0
 800532a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005330:	4b79      	ldr	r3, [pc, #484]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d00d      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x40>
 800533c:	2b08      	cmp	r3, #8
 800533e:	f200 80e1 	bhi.w	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
 8005346:	2b04      	cmp	r3, #4
 8005348:	d003      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x3a>
 800534a:	e0db      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b73      	ldr	r3, [pc, #460]	; (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 800534e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005350:	e0db      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005352:	4b73      	ldr	r3, [pc, #460]	; (8005520 <HAL_RCC_GetSysClockFreq+0x208>)
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005356:	e0d8      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005358:	4b6f      	ldr	r3, [pc, #444]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005362:	4b6d      	ldr	r3, [pc, #436]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d063      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b6a      	ldr	r3, [pc, #424]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	2200      	movs	r2, #0
 8005376:	63bb      	str	r3, [r7, #56]	; 0x38
 8005378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	0159      	lsls	r1, r3, #5
 8005398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539c:	0150      	lsls	r0, r2, #5
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4621      	mov	r1, r4
 80053a4:	1a51      	subs	r1, r2, r1
 80053a6:	6139      	str	r1, [r7, #16]
 80053a8:	4629      	mov	r1, r5
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	018b      	lsls	r3, r1, #6
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c6:	4651      	mov	r1, sl
 80053c8:	018a      	lsls	r2, r1, #6
 80053ca:	4651      	mov	r1, sl
 80053cc:	ebb2 0801 	subs.w	r8, r2, r1
 80053d0:	4659      	mov	r1, fp
 80053d2:	eb63 0901 	sbc.w	r9, r3, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ea:	4690      	mov	r8, r2
 80053ec:	4699      	mov	r9, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	eb18 0303 	adds.w	r3, r8, r3
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	462b      	mov	r3, r5
 80053f8:	eb49 0303 	adc.w	r3, r9, r3
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800540a:	4629      	mov	r1, r5
 800540c:	024b      	lsls	r3, r1, #9
 800540e:	4621      	mov	r1, r4
 8005410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005414:	4621      	mov	r1, r4
 8005416:	024a      	lsls	r2, r1, #9
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005428:	f7fb fc36 	bl	8000c98 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005434:	e058      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	2200      	movs	r2, #0
 800543e:	4618      	mov	r0, r3
 8005440:	4611      	mov	r1, r2
 8005442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	2300      	movs	r3, #0
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
 800544c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	0159      	lsls	r1, r3, #5
 800545e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005462:	0150      	lsls	r0, r2, #5
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4641      	mov	r1, r8
 800546a:	ebb2 0a01 	subs.w	sl, r2, r1
 800546e:	4649      	mov	r1, r9
 8005470:	eb63 0b01 	sbc.w	fp, r3, r1
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005488:	ebb2 040a 	subs.w	r4, r2, sl
 800548c:	eb63 050b 	sbc.w	r5, r3, fp
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	00eb      	lsls	r3, r5, #3
 800549a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549e:	00e2      	lsls	r2, r4, #3
 80054a0:	4614      	mov	r4, r2
 80054a2:	461d      	mov	r5, r3
 80054a4:	4643      	mov	r3, r8
 80054a6:	18e3      	adds	r3, r4, r3
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	464b      	mov	r3, r9
 80054ac:	eb45 0303 	adc.w	r3, r5, r3
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054be:	4629      	mov	r1, r5
 80054c0:	028b      	lsls	r3, r1, #10
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c8:	4621      	mov	r1, r4
 80054ca:	028a      	lsls	r2, r1, #10
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	2200      	movs	r2, #0
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	61fa      	str	r2, [r7, #28]
 80054d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054dc:	f7fb fbdc 	bl	8000c98 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005502:	e002      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetSysClockFreq+0x204>)
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800550c:	4618      	mov	r0, r3
 800550e:	3750      	adds	r7, #80	; 0x50
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200

08005524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	0800bfa4 	.word	0x0800bfa4

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffdc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0b5b      	lsrs	r3, r3, #13
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	0800bfa4 	.word	0x0800bfa4

0800558c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e041      	b.n	8005622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fd f9dc 	bl	8002970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f000 fd88 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e044      	b.n	80056ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x6c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d013      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x6c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x6c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x6c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x6c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d111      	bne.n	80056bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d010      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ba:	e007      	b.n	80056cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40014000 	.word	0x40014000

080056f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e041      	b.n	8005786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f839 	bl	800578e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 fcd6 	bl	80060e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x24>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e022      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d109      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x3e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e015      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e008      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e068      	b.n	80058e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0x82>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005824:	e013      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0x92>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005834:	e00b      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005844:	e003      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fee8 	bl	800662c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_TIM_PWM_Start+0x14c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d107      	bne.n	8005876 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_TIM_PWM_Start+0x14c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d018      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x10e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d013      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x10e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_TIM_PWM_Start+0x150>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00e      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x10e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <HAL_TIM_PWM_Start+0x154>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x10e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a16      	ldr	r2, [pc, #88]	; (80058fc <HAL_TIM_PWM_Start+0x158>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d004      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x10e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <HAL_TIM_PWM_Start+0x15c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d111      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d010      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	e007      	b.n	80058e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40014000 	.word	0x40014000

08005904 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e097      	b.n	8005a48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fd f883 	bl	8002a38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005948:	f023 0307 	bic.w	r3, r3, #7
 800594c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 fbc1 	bl	80060e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	4313      	orrs	r3, r2
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059a4:	f023 030c 	bic.w	r3, r3, #12
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	4313      	orrs	r3, r2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	4313      	orrs	r3, r2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	4313      	orrs	r3, r2
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d110      	bne.n	8005aa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d102      	bne.n	8005a8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a86:	7b7b      	ldrb	r3, [r7, #13]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e069      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	e031      	b.n	8005b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d110      	bne.n	8005aca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d102      	bne.n	8005ab4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aae:	7b3b      	ldrb	r3, [r7, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d001      	beq.n	8005ab8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e055      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac8:	e01d      	b.n	8005b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d108      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad6:	7b7b      	ldrb	r3, [r7, #13]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d102      	bne.n	8005ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005adc:	7b3b      	ldrb	r3, [r7, #12]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03e      	b.n	8005b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_TIM_Encoder_Start+0xc4>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d008      	beq.n	8005b24 <HAL_TIM_Encoder_Start+0xd4>
 8005b12:	e00f      	b.n	8005b34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fd85 	bl	800662c <TIM_CCxChannelCmd>
      break;
 8005b22:	e016      	b.n	8005b52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fd7d 	bl	800662c <TIM_CCxChannelCmd>
      break;
 8005b32:	e00e      	b.n	8005b52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fd75 	bl	800662c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	2104      	movs	r1, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fd6e 	bl	800662c <TIM_CCxChannelCmd>
      break;
 8005b50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0202 	mvn.w	r2, #2
 8005b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa77 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa69 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa7a 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0204 	mvn.w	r2, #4
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa4d 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa3f 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa50 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0208 	mvn.w	r2, #8
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa23 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa15 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa26 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0210 	mvn.w	r2, #16
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9f9 	bl	80060a2 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9eb 	bl	800608e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9fc 	bl	80060b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0201 	mvn.w	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc fca6 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fd78 	bl	800680c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9c1 	bl	80060ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0220 	mvn.w	r2, #32
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd42 	bl	80067f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0ae      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f200 809f 	bhi.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ee9 	.word	0x08005ee9
 8005db8:	08005ee9 	.word	0x08005ee9
 8005dbc:	08005ee9 	.word	0x08005ee9
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08005ee9 	.word	0x08005ee9
 8005dc8:	08005ee9 	.word	0x08005ee9
 8005dcc:	08005ee9 	.word	0x08005ee9
 8005dd0:	08005e67 	.word	0x08005e67
 8005dd4:	08005ee9 	.word	0x08005ee9
 8005dd8:	08005ee9 	.word	0x08005ee9
 8005ddc:	08005ee9 	.word	0x08005ee9
 8005de0:	08005ea7 	.word	0x08005ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f9f8 	bl	80061e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0204 	bic.w	r2, r2, #4
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
      break;
 8005e22:	e064      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa3e 	bl	80062ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6999      	ldr	r1, [r3, #24]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	619a      	str	r2, [r3, #24]
      break;
 8005e64:	e043      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fa89 	bl	8006384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0208 	orr.w	r2, r2, #8
 8005e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0204 	bic.w	r2, r2, #4
 8005e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
      break;
 8005ea4:	e023      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fad3 	bl	8006458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69d9      	ldr	r1, [r3, #28]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	61da      	str	r2, [r3, #28]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIM_ConfigClockSource+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0b4      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x186>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f54:	d03e      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5a:	f200 8087 	bhi.w	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x172>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	d87f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b70      	cmp	r3, #112	; 0x70
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d87b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b60      	cmp	r3, #96	; 0x60
 8005f76:	d050      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x11a>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d877      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b50      	cmp	r3, #80	; 0x50
 8005f7e:	d03c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xfa>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d873      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d058      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x13a>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d86f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d064      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d86b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d060      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d867      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d05a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	e062      	b.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f000 fb19 	bl	80065ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04f      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f000 fb02 	bl	80065ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e03c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fa76 	bl	80064f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	; 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 facf 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006018:	e02c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fa95 	bl	8006556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	; 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fabf 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006038:	e01c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fa56 	bl	80064f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 faaf 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006058:	e00c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 faa6 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 800606a:	e003      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <TIM_Base_SetConfig+0xe4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00f      	beq.n	8006118 <TIM_Base_SetConfig+0x38>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d00b      	beq.n	8006118 <TIM_Base_SetConfig+0x38>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a31      	ldr	r2, [pc, #196]	; (80061c8 <TIM_Base_SetConfig+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d007      	beq.n	8006118 <TIM_Base_SetConfig+0x38>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a30      	ldr	r2, [pc, #192]	; (80061cc <TIM_Base_SetConfig+0xec>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_Base_SetConfig+0x38>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <TIM_Base_SetConfig+0xf0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d108      	bne.n	800612a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a25      	ldr	r2, [pc, #148]	; (80061c4 <TIM_Base_SetConfig+0xe4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01b      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d017      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <TIM_Base_SetConfig+0xe8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <TIM_Base_SetConfig+0xec>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <TIM_Base_SetConfig+0xf0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <TIM_Base_SetConfig+0xf4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <TIM_Base_SetConfig+0xf8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_Base_SetConfig+0x8a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <TIM_Base_SetConfig+0xfc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <TIM_Base_SetConfig+0xe4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d103      	bne.n	80061b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	615a      	str	r2, [r3, #20]
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800

080061e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <TIM_OC1_SetConfig+0xc8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10c      	bne.n	8006256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0308 	bic.w	r3, r3, #8
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <TIM_OC1_SetConfig+0xc8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40010000 	.word	0x40010000

080062ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0210 	bic.w	r2, r3, #16
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0320 	bic.w	r3, r3, #32
 80062f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1e      	ldr	r2, [pc, #120]	; (8006380 <TIM_OC2_SetConfig+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10d      	bne.n	8006328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <TIM_OC2_SetConfig+0xd4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d113      	bne.n	8006358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000

08006384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <TIM_OC3_SetConfig+0xd0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10d      	bne.n	80063fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a14      	ldr	r2, [pc, #80]	; (8006454 <TIM_OC3_SetConfig+0xd0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40010000 	.word	0x40010000

08006458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <TIM_OC4_SetConfig+0x9c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d109      	bne.n	80064cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000

080064f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 030a 	bic.w	r3, r3, #10
 8006534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006556:	b480      	push	{r7}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0210 	bic.w	r2, r3, #16
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f043 0307 	orr.w	r3, r3, #7
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	609a      	str	r2, [r3, #8]
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	431a      	orrs	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2201      	movs	r2, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e050      	b.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d013      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10c      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000

08006754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e03d      	b.n	80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e03f      	b.n	80068b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fc f9a0 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9cb 	bl	8006c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af02      	add	r7, sp, #8
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d17c      	bne.n	80069d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_UART_Transmit+0x2c>
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e075      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Transmit+0x3e>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e06e      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	; 0x21
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800690e:	f7fc fb6d 	bl	8002fec <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006928:	d108      	bne.n	800693c <HAL_UART_Transmit+0x82>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e003      	b.n	8006944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800694c:	e02a      	b.n	80069a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f8e2 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e036      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800697c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3302      	adds	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e007      	b.n	8006996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1cf      	bne.n	800694e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2140      	movs	r1, #64	; 0x40
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f8b2 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b08a      	sub	sp, #40	; 0x28
 80069e2:	af02      	add	r7, sp, #8
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	603b      	str	r3, [r7, #0]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	f040 808c 	bne.w	8006b18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_UART_Receive+0x2e>
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e084      	b.n	8006b1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Receive+0x40>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e07d      	b.n	8006b1a <HAL_UART_Receive+0x13c>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2222      	movs	r2, #34	; 0x22
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a3a:	f7fc fad7 	bl	8002fec <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	88fa      	ldrh	r2, [r7, #6]
 8006a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d108      	bne.n	8006a68 <HAL_UART_Receive+0x8a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d104      	bne.n	8006a68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	e003      	b.n	8006a70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a78:	e043      	b.n	8006b02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2120      	movs	r1, #32
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f84c 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e042      	b.n	8006b1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10c      	bne.n	8006ab4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	3302      	adds	r3, #2
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e01f      	b.n	8006af4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abc:	d007      	beq.n	8006ace <HAL_UART_Receive+0xf0>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_UART_Receive+0xfe>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e008      	b.n	8006aee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1b6      	bne.n	8006a7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b090      	sub	sp, #64	; 0x40
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b32:	e050      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d04c      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b42:	f7fc fa53 	bl	8002fec <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d241      	bcs.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b72:	637a      	str	r2, [r7, #52]	; 0x34
 8006b74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	613b      	str	r3, [r7, #16]
   return(result);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba6:	623a      	str	r2, [r7, #32]
 8006ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	6a3a      	ldr	r2, [r7, #32]
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e00f      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d09f      	beq.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3740      	adds	r7, #64	; 0x40
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b0c0      	sub	sp, #256	; 0x100
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	68d9      	ldr	r1, [r3, #12]
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	ea40 0301 	orr.w	r3, r0, r1
 8006c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c58:	f021 010c 	bic.w	r1, r1, #12
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c66:	430b      	orrs	r3, r1
 8006c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7a:	6999      	ldr	r1, [r3, #24]
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	ea40 0301 	orr.w	r3, r0, r1
 8006c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b8f      	ldr	r3, [pc, #572]	; (8006ecc <UART_SetConfig+0x2cc>)
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d005      	beq.n	8006ca0 <UART_SetConfig+0xa0>
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b8d      	ldr	r3, [pc, #564]	; (8006ed0 <UART_SetConfig+0x2d0>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d104      	bne.n	8006caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca0:	f7fe fc60 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ca8:	e003      	b.n	8006cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006caa:	f7fe fc47 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006cae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbc:	f040 810c 	bne.w	8006ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	1891      	adds	r1, r2, r2
 8006cd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cda:	415b      	adcs	r3, r3
 8006cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	eb12 0801 	adds.w	r8, r2, r1
 8006ce8:	4629      	mov	r1, r5
 8006cea:	eb43 0901 	adc.w	r9, r3, r1
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d02:	4690      	mov	r8, r2
 8006d04:	4699      	mov	r9, r3
 8006d06:	4623      	mov	r3, r4
 8006d08:	eb18 0303 	adds.w	r3, r8, r3
 8006d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d10:	462b      	mov	r3, r5
 8006d12:	eb49 0303 	adc.w	r3, r9, r3
 8006d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d2e:	460b      	mov	r3, r1
 8006d30:	18db      	adds	r3, r3, r3
 8006d32:	653b      	str	r3, [r7, #80]	; 0x50
 8006d34:	4613      	mov	r3, r2
 8006d36:	eb42 0303 	adc.w	r3, r2, r3
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d44:	f7f9 ffa8 	bl	8000c98 <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	011c      	lsls	r4, r3, #4
 8006d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	1891      	adds	r1, r2, r2
 8006d6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d70:	415b      	adcs	r3, r3
 8006d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d78:	4641      	mov	r1, r8
 8006d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d7e:	4649      	mov	r1, r9
 8006d80:	eb43 0b01 	adc.w	fp, r3, r1
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d98:	4692      	mov	sl, r2
 8006d9a:	469b      	mov	fp, r3
 8006d9c:	4643      	mov	r3, r8
 8006d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8006da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da6:	464b      	mov	r3, r9
 8006da8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	18db      	adds	r3, r3, r3
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dca:	4613      	mov	r3, r2
 8006dcc:	eb42 0303 	adc.w	r3, r2, r3
 8006dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dda:	f7f9 ff5d 	bl	8000c98 <__aeabi_uldivmod>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	4b3b      	ldr	r3, [pc, #236]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006de6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2264      	movs	r2, #100	; 0x64
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	1acb      	subs	r3, r1, r3
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dfa:	4b36      	ldr	r3, [pc, #216]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e08:	441c      	add	r4, r3
 8006e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	1891      	adds	r1, r2, r2
 8006e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e24:	415b      	adcs	r3, r3
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	1851      	adds	r1, r2, r1
 8006e30:	6339      	str	r1, [r7, #48]	; 0x30
 8006e32:	4649      	mov	r1, r9
 8006e34:	414b      	adcs	r3, r1
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e44:	4659      	mov	r1, fp
 8006e46:	00cb      	lsls	r3, r1, #3
 8006e48:	4651      	mov	r1, sl
 8006e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4e:	4651      	mov	r1, sl
 8006e50:	00ca      	lsls	r2, r1, #3
 8006e52:	4610      	mov	r0, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	4642      	mov	r2, r8
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e60:	464b      	mov	r3, r9
 8006e62:	460a      	mov	r2, r1
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e80:	460b      	mov	r3, r1
 8006e82:	18db      	adds	r3, r3, r3
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e86:	4613      	mov	r3, r2
 8006e88:	eb42 0303 	adc.w	r3, r2, r3
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e96:	f7f9 feff 	bl	8000c98 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <UART_SetConfig+0x2d4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4422      	add	r2, r4
 8006ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec8:	e105      	b.n	80070d6 <UART_SetConfig+0x4d6>
 8006eca:	bf00      	nop
 8006ecc:	40011000 	.word	0x40011000
 8006ed0:	40011400 	.word	0x40011400
 8006ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	1891      	adds	r1, r2, r2
 8006ef0:	6239      	str	r1, [r7, #32]
 8006ef2:	415b      	adcs	r3, r3
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006efa:	4641      	mov	r1, r8
 8006efc:	1854      	adds	r4, r2, r1
 8006efe:	4649      	mov	r1, r9
 8006f00:	eb43 0501 	adc.w	r5, r3, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	00eb      	lsls	r3, r5, #3
 8006f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f12:	00e2      	lsls	r2, r4, #3
 8006f14:	4614      	mov	r4, r2
 8006f16:	461d      	mov	r5, r3
 8006f18:	4643      	mov	r3, r8
 8006f1a:	18e3      	adds	r3, r4, r3
 8006f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f20:	464b      	mov	r3, r9
 8006f22:	eb45 0303 	adc.w	r3, r5, r3
 8006f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f46:	4629      	mov	r1, r5
 8006f48:	008b      	lsls	r3, r1, #2
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f50:	4621      	mov	r1, r4
 8006f52:	008a      	lsls	r2, r1, #2
 8006f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f58:	f7f9 fe9e 	bl	8000c98 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4b60      	ldr	r3, [pc, #384]	; (80070e4 <UART_SetConfig+0x4e4>)
 8006f62:	fba3 2302 	umull	r2, r3, r3, r2
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	011c      	lsls	r4, r3, #4
 8006f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	61b9      	str	r1, [r7, #24]
 8006f84:	415b      	adcs	r3, r3
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	1851      	adds	r1, r2, r1
 8006f90:	6139      	str	r1, [r7, #16]
 8006f92:	4649      	mov	r1, r9
 8006f94:	414b      	adcs	r3, r1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	00cb      	lsls	r3, r1, #3
 8006fa8:	4651      	mov	r1, sl
 8006faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fae:	4651      	mov	r1, sl
 8006fb0:	00ca      	lsls	r2, r1, #3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	eb42 0303 	adc.w	r3, r2, r3
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	008b      	lsls	r3, r1, #2
 8006fe8:	4641      	mov	r1, r8
 8006fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fee:	4641      	mov	r1, r8
 8006ff0:	008a      	lsls	r2, r1, #2
 8006ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ff6:	f7f9 fe4f 	bl	8000c98 <__aeabi_uldivmod>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <UART_SetConfig+0x4e4>)
 8007000:	fba3 1302 	umull	r1, r3, r3, r2
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	2164      	movs	r1, #100	; 0x64
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	3332      	adds	r3, #50	; 0x32
 8007012:	4a34      	ldr	r2, [pc, #208]	; (80070e4 <UART_SetConfig+0x4e4>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701e:	441c      	add	r4, r3
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007024:	2200      	movs	r2, #0
 8007026:	673b      	str	r3, [r7, #112]	; 0x70
 8007028:	677a      	str	r2, [r7, #116]	; 0x74
 800702a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800702e:	4642      	mov	r2, r8
 8007030:	464b      	mov	r3, r9
 8007032:	1891      	adds	r1, r2, r2
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	415b      	adcs	r3, r3
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703e:	4641      	mov	r1, r8
 8007040:	1851      	adds	r1, r2, r1
 8007042:	6039      	str	r1, [r7, #0]
 8007044:	4649      	mov	r1, r9
 8007046:	414b      	adcs	r3, r1
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007056:	4659      	mov	r1, fp
 8007058:	00cb      	lsls	r3, r1, #3
 800705a:	4651      	mov	r1, sl
 800705c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007060:	4651      	mov	r1, sl
 8007062:	00ca      	lsls	r2, r1, #3
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	4603      	mov	r3, r0
 800706a:	4642      	mov	r2, r8
 800706c:	189b      	adds	r3, r3, r2
 800706e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007070:	464b      	mov	r3, r9
 8007072:	460a      	mov	r2, r1
 8007074:	eb42 0303 	adc.w	r3, r2, r3
 8007078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	663b      	str	r3, [r7, #96]	; 0x60
 8007084:	667a      	str	r2, [r7, #100]	; 0x64
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007092:	4649      	mov	r1, r9
 8007094:	008b      	lsls	r3, r1, #2
 8007096:	4641      	mov	r1, r8
 8007098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800709c:	4641      	mov	r1, r8
 800709e:	008a      	lsls	r2, r1, #2
 80070a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070a4:	f7f9 fdf8 	bl	8000c98 <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <UART_SetConfig+0x4e4>)
 80070ae:	fba3 1302 	umull	r1, r3, r3, r2
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2164      	movs	r1, #100	; 0x64
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	3332      	adds	r3, #50	; 0x32
 80070c0:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <UART_SetConfig+0x4e4>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4422      	add	r2, r4
 80070d4:	609a      	str	r2, [r3, #8]
}
 80070d6:	bf00      	nop
 80070d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070dc:	46bd      	mov	sp, r7
 80070de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e2:	bf00      	nop
 80070e4:	51eb851f 	.word	0x51eb851f

080070e8 <__errno>:
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <__errno+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	2000001c 	.word	0x2000001c

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f004 fdf8 	bl	800bcfc <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	0800c4c0 	.word	0x0800c4c0
 8007130:	0800c4c0 	.word	0x0800c4c0
 8007134:	0800c4c0 	.word	0x0800c4c0
 8007138:	0800c4c4 	.word	0x0800c4c4

0800713c <malloc>:
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <malloc+0xc>)
 800713e:	4601      	mov	r1, r0
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f000 b88d 	b.w	8007260 <_malloc_r>
 8007146:	bf00      	nop
 8007148:	2000001c 	.word	0x2000001c

0800714c <free>:
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <free+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f000 b819 	b.w	8007188 <_free_r>
 8007156:	bf00      	nop
 8007158:	2000001c 	.word	0x2000001c

0800715c <memcpy>:
 800715c:	440a      	add	r2, r1
 800715e:	4291      	cmp	r1, r2
 8007160:	f100 33ff 	add.w	r3, r0, #4294967295
 8007164:	d100      	bne.n	8007168 <memcpy+0xc>
 8007166:	4770      	bx	lr
 8007168:	b510      	push	{r4, lr}
 800716a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007172:	4291      	cmp	r1, r2
 8007174:	d1f9      	bne.n	800716a <memcpy+0xe>
 8007176:	bd10      	pop	{r4, pc}

08007178 <memset>:
 8007178:	4402      	add	r2, r0
 800717a:	4603      	mov	r3, r0
 800717c:	4293      	cmp	r3, r2
 800717e:	d100      	bne.n	8007182 <memset+0xa>
 8007180:	4770      	bx	lr
 8007182:	f803 1b01 	strb.w	r1, [r3], #1
 8007186:	e7f9      	b.n	800717c <memset+0x4>

08007188 <_free_r>:
 8007188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800718a:	2900      	cmp	r1, #0
 800718c:	d044      	beq.n	8007218 <_free_r+0x90>
 800718e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007192:	9001      	str	r0, [sp, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f1a1 0404 	sub.w	r4, r1, #4
 800719a:	bfb8      	it	lt
 800719c:	18e4      	addlt	r4, r4, r3
 800719e:	f003 fca3 	bl	800aae8 <__malloc_lock>
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <_free_r+0x94>)
 80071a4:	9801      	ldr	r0, [sp, #4]
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	b933      	cbnz	r3, 80071b8 <_free_r+0x30>
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	b003      	add	sp, #12
 80071b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071b4:	f003 bc9e 	b.w	800aaf4 <__malloc_unlock>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d908      	bls.n	80071ce <_free_r+0x46>
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf01      	itttt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	1949      	addeq	r1, r1, r5
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	e7ed      	b.n	80071aa <_free_r+0x22>
 80071ce:	461a      	mov	r2, r3
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b10b      	cbz	r3, 80071d8 <_free_r+0x50>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d9fa      	bls.n	80071ce <_free_r+0x46>
 80071d8:	6811      	ldr	r1, [r2, #0]
 80071da:	1855      	adds	r5, r2, r1
 80071dc:	42a5      	cmp	r5, r4
 80071de:	d10b      	bne.n	80071f8 <_free_r+0x70>
 80071e0:	6824      	ldr	r4, [r4, #0]
 80071e2:	4421      	add	r1, r4
 80071e4:	1854      	adds	r4, r2, r1
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	d1e0      	bne.n	80071ae <_free_r+0x26>
 80071ec:	681c      	ldr	r4, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	6053      	str	r3, [r2, #4]
 80071f2:	4421      	add	r1, r4
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	e7da      	b.n	80071ae <_free_r+0x26>
 80071f8:	d902      	bls.n	8007200 <_free_r+0x78>
 80071fa:	230c      	movs	r3, #12
 80071fc:	6003      	str	r3, [r0, #0]
 80071fe:	e7d6      	b.n	80071ae <_free_r+0x26>
 8007200:	6825      	ldr	r5, [r4, #0]
 8007202:	1961      	adds	r1, r4, r5
 8007204:	428b      	cmp	r3, r1
 8007206:	bf04      	itt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	bf04      	itt	eq
 8007210:	1949      	addeq	r1, r1, r5
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	6054      	str	r4, [r2, #4]
 8007216:	e7ca      	b.n	80071ae <_free_r+0x26>
 8007218:	b003      	add	sp, #12
 800721a:	bd30      	pop	{r4, r5, pc}
 800721c:	20000538 	.word	0x20000538

08007220 <sbrk_aligned>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	4e0e      	ldr	r6, [pc, #56]	; (800725c <sbrk_aligned+0x3c>)
 8007224:	460c      	mov	r4, r1
 8007226:	6831      	ldr	r1, [r6, #0]
 8007228:	4605      	mov	r5, r0
 800722a:	b911      	cbnz	r1, 8007232 <sbrk_aligned+0x12>
 800722c:	f000 ff94 	bl	8008158 <_sbrk_r>
 8007230:	6030      	str	r0, [r6, #0]
 8007232:	4621      	mov	r1, r4
 8007234:	4628      	mov	r0, r5
 8007236:	f000 ff8f 	bl	8008158 <_sbrk_r>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d00a      	beq.n	8007254 <sbrk_aligned+0x34>
 800723e:	1cc4      	adds	r4, r0, #3
 8007240:	f024 0403 	bic.w	r4, r4, #3
 8007244:	42a0      	cmp	r0, r4
 8007246:	d007      	beq.n	8007258 <sbrk_aligned+0x38>
 8007248:	1a21      	subs	r1, r4, r0
 800724a:	4628      	mov	r0, r5
 800724c:	f000 ff84 	bl	8008158 <_sbrk_r>
 8007250:	3001      	adds	r0, #1
 8007252:	d101      	bne.n	8007258 <sbrk_aligned+0x38>
 8007254:	f04f 34ff 	mov.w	r4, #4294967295
 8007258:	4620      	mov	r0, r4
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	2000053c 	.word	0x2000053c

08007260 <_malloc_r>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	1ccd      	adds	r5, r1, #3
 8007266:	f025 0503 	bic.w	r5, r5, #3
 800726a:	3508      	adds	r5, #8
 800726c:	2d0c      	cmp	r5, #12
 800726e:	bf38      	it	cc
 8007270:	250c      	movcc	r5, #12
 8007272:	2d00      	cmp	r5, #0
 8007274:	4607      	mov	r7, r0
 8007276:	db01      	blt.n	800727c <_malloc_r+0x1c>
 8007278:	42a9      	cmp	r1, r5
 800727a:	d905      	bls.n	8007288 <_malloc_r+0x28>
 800727c:	230c      	movs	r3, #12
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	2600      	movs	r6, #0
 8007282:	4630      	mov	r0, r6
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	4e2e      	ldr	r6, [pc, #184]	; (8007344 <_malloc_r+0xe4>)
 800728a:	f003 fc2d 	bl	800aae8 <__malloc_lock>
 800728e:	6833      	ldr	r3, [r6, #0]
 8007290:	461c      	mov	r4, r3
 8007292:	bb34      	cbnz	r4, 80072e2 <_malloc_r+0x82>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	f7ff ffc2 	bl	8007220 <sbrk_aligned>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	4604      	mov	r4, r0
 80072a0:	d14d      	bne.n	800733e <_malloc_r+0xde>
 80072a2:	6834      	ldr	r4, [r6, #0]
 80072a4:	4626      	mov	r6, r4
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d140      	bne.n	800732c <_malloc_r+0xcc>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	4631      	mov	r1, r6
 80072ae:	4638      	mov	r0, r7
 80072b0:	eb04 0803 	add.w	r8, r4, r3
 80072b4:	f000 ff50 	bl	8008158 <_sbrk_r>
 80072b8:	4580      	cmp	r8, r0
 80072ba:	d13a      	bne.n	8007332 <_malloc_r+0xd2>
 80072bc:	6821      	ldr	r1, [r4, #0]
 80072be:	3503      	adds	r5, #3
 80072c0:	1a6d      	subs	r5, r5, r1
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	4629      	mov	r1, r5
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff ffa5 	bl	8007220 <sbrk_aligned>
 80072d6:	3001      	adds	r0, #1
 80072d8:	d02b      	beq.n	8007332 <_malloc_r+0xd2>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	442b      	add	r3, r5
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	e00e      	b.n	8007300 <_malloc_r+0xa0>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	1b52      	subs	r2, r2, r5
 80072e6:	d41e      	bmi.n	8007326 <_malloc_r+0xc6>
 80072e8:	2a0b      	cmp	r2, #11
 80072ea:	d916      	bls.n	800731a <_malloc_r+0xba>
 80072ec:	1961      	adds	r1, r4, r5
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	6025      	str	r5, [r4, #0]
 80072f2:	bf18      	it	ne
 80072f4:	6059      	strne	r1, [r3, #4]
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	bf08      	it	eq
 80072fa:	6031      	streq	r1, [r6, #0]
 80072fc:	5162      	str	r2, [r4, r5]
 80072fe:	604b      	str	r3, [r1, #4]
 8007300:	4638      	mov	r0, r7
 8007302:	f104 060b 	add.w	r6, r4, #11
 8007306:	f003 fbf5 	bl	800aaf4 <__malloc_unlock>
 800730a:	f026 0607 	bic.w	r6, r6, #7
 800730e:	1d23      	adds	r3, r4, #4
 8007310:	1af2      	subs	r2, r6, r3
 8007312:	d0b6      	beq.n	8007282 <_malloc_r+0x22>
 8007314:	1b9b      	subs	r3, r3, r6
 8007316:	50a3      	str	r3, [r4, r2]
 8007318:	e7b3      	b.n	8007282 <_malloc_r+0x22>
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	42a3      	cmp	r3, r4
 800731e:	bf0c      	ite	eq
 8007320:	6032      	streq	r2, [r6, #0]
 8007322:	605a      	strne	r2, [r3, #4]
 8007324:	e7ec      	b.n	8007300 <_malloc_r+0xa0>
 8007326:	4623      	mov	r3, r4
 8007328:	6864      	ldr	r4, [r4, #4]
 800732a:	e7b2      	b.n	8007292 <_malloc_r+0x32>
 800732c:	4634      	mov	r4, r6
 800732e:	6876      	ldr	r6, [r6, #4]
 8007330:	e7b9      	b.n	80072a6 <_malloc_r+0x46>
 8007332:	230c      	movs	r3, #12
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	4638      	mov	r0, r7
 8007338:	f003 fbdc 	bl	800aaf4 <__malloc_unlock>
 800733c:	e7a1      	b.n	8007282 <_malloc_r+0x22>
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	e7de      	b.n	8007300 <_malloc_r+0xa0>
 8007342:	bf00      	nop
 8007344:	20000538 	.word	0x20000538

08007348 <__cvt>:
 8007348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	ec55 4b10 	vmov	r4, r5, d0
 8007350:	2d00      	cmp	r5, #0
 8007352:	460e      	mov	r6, r1
 8007354:	4619      	mov	r1, r3
 8007356:	462b      	mov	r3, r5
 8007358:	bfbb      	ittet	lt
 800735a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800735e:	461d      	movlt	r5, r3
 8007360:	2300      	movge	r3, #0
 8007362:	232d      	movlt	r3, #45	; 0x2d
 8007364:	700b      	strb	r3, [r1, #0]
 8007366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007368:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800736c:	4691      	mov	r9, r2
 800736e:	f023 0820 	bic.w	r8, r3, #32
 8007372:	bfbc      	itt	lt
 8007374:	4622      	movlt	r2, r4
 8007376:	4614      	movlt	r4, r2
 8007378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800737c:	d005      	beq.n	800738a <__cvt+0x42>
 800737e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007382:	d100      	bne.n	8007386 <__cvt+0x3e>
 8007384:	3601      	adds	r6, #1
 8007386:	2102      	movs	r1, #2
 8007388:	e000      	b.n	800738c <__cvt+0x44>
 800738a:	2103      	movs	r1, #3
 800738c:	ab03      	add	r3, sp, #12
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	ab02      	add	r3, sp, #8
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	ec45 4b10 	vmov	d0, r4, r5
 8007398:	4653      	mov	r3, sl
 800739a:	4632      	mov	r2, r6
 800739c:	f002 f800 	bl	80093a0 <_dtoa_r>
 80073a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073a4:	4607      	mov	r7, r0
 80073a6:	d102      	bne.n	80073ae <__cvt+0x66>
 80073a8:	f019 0f01 	tst.w	r9, #1
 80073ac:	d022      	beq.n	80073f4 <__cvt+0xac>
 80073ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073b2:	eb07 0906 	add.w	r9, r7, r6
 80073b6:	d110      	bne.n	80073da <__cvt+0x92>
 80073b8:	783b      	ldrb	r3, [r7, #0]
 80073ba:	2b30      	cmp	r3, #48	; 0x30
 80073bc:	d10a      	bne.n	80073d4 <__cvt+0x8c>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 80073ca:	b918      	cbnz	r0, 80073d4 <__cvt+0x8c>
 80073cc:	f1c6 0601 	rsb	r6, r6, #1
 80073d0:	f8ca 6000 	str.w	r6, [sl]
 80073d4:	f8da 3000 	ldr.w	r3, [sl]
 80073d8:	4499      	add	r9, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	2300      	movs	r3, #0
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f9 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80073e6:	b108      	cbz	r0, 80073ec <__cvt+0xa4>
 80073e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80073ec:	2230      	movs	r2, #48	; 0x30
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	454b      	cmp	r3, r9
 80073f2:	d307      	bcc.n	8007404 <__cvt+0xbc>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f8:	1bdb      	subs	r3, r3, r7
 80073fa:	4638      	mov	r0, r7
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	b004      	add	sp, #16
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	1c59      	adds	r1, r3, #1
 8007406:	9103      	str	r1, [sp, #12]
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e7f0      	b.n	80073ee <__cvt+0xa6>

0800740c <__exponent>:
 800740c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740e:	4603      	mov	r3, r0
 8007410:	2900      	cmp	r1, #0
 8007412:	bfb8      	it	lt
 8007414:	4249      	neglt	r1, r1
 8007416:	f803 2b02 	strb.w	r2, [r3], #2
 800741a:	bfb4      	ite	lt
 800741c:	222d      	movlt	r2, #45	; 0x2d
 800741e:	222b      	movge	r2, #43	; 0x2b
 8007420:	2909      	cmp	r1, #9
 8007422:	7042      	strb	r2, [r0, #1]
 8007424:	dd2a      	ble.n	800747c <__exponent+0x70>
 8007426:	f10d 0407 	add.w	r4, sp, #7
 800742a:	46a4      	mov	ip, r4
 800742c:	270a      	movs	r7, #10
 800742e:	46a6      	mov	lr, r4
 8007430:	460a      	mov	r2, r1
 8007432:	fb91 f6f7 	sdiv	r6, r1, r7
 8007436:	fb07 1516 	mls	r5, r7, r6, r1
 800743a:	3530      	adds	r5, #48	; 0x30
 800743c:	2a63      	cmp	r2, #99	; 0x63
 800743e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007446:	4631      	mov	r1, r6
 8007448:	dcf1      	bgt.n	800742e <__exponent+0x22>
 800744a:	3130      	adds	r1, #48	; 0x30
 800744c:	f1ae 0502 	sub.w	r5, lr, #2
 8007450:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007454:	1c44      	adds	r4, r0, #1
 8007456:	4629      	mov	r1, r5
 8007458:	4561      	cmp	r1, ip
 800745a:	d30a      	bcc.n	8007472 <__exponent+0x66>
 800745c:	f10d 0209 	add.w	r2, sp, #9
 8007460:	eba2 020e 	sub.w	r2, r2, lr
 8007464:	4565      	cmp	r5, ip
 8007466:	bf88      	it	hi
 8007468:	2200      	movhi	r2, #0
 800746a:	4413      	add	r3, r2
 800746c:	1a18      	subs	r0, r3, r0
 800746e:	b003      	add	sp, #12
 8007470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007476:	f804 2f01 	strb.w	r2, [r4, #1]!
 800747a:	e7ed      	b.n	8007458 <__exponent+0x4c>
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	3130      	adds	r1, #48	; 0x30
 8007480:	7083      	strb	r3, [r0, #2]
 8007482:	70c1      	strb	r1, [r0, #3]
 8007484:	1d03      	adds	r3, r0, #4
 8007486:	e7f1      	b.n	800746c <__exponent+0x60>

08007488 <_printf_float>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	ed2d 8b02 	vpush	{d8}
 8007490:	b08d      	sub	sp, #52	; 0x34
 8007492:	460c      	mov	r4, r1
 8007494:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007498:	4616      	mov	r6, r2
 800749a:	461f      	mov	r7, r3
 800749c:	4605      	mov	r5, r0
 800749e:	f003 faa5 	bl	800a9ec <_localeconv_r>
 80074a2:	f8d0 a000 	ldr.w	sl, [r0]
 80074a6:	4650      	mov	r0, sl
 80074a8:	f7f8 fe9a 	bl	80001e0 <strlen>
 80074ac:	2300      	movs	r3, #0
 80074ae:	930a      	str	r3, [sp, #40]	; 0x28
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	f8d8 3000 	ldr.w	r3, [r8]
 80074b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074bc:	3307      	adds	r3, #7
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	f103 0208 	add.w	r2, r3, #8
 80074c6:	f8c8 2000 	str.w	r2, [r8]
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074da:	9307      	str	r3, [sp, #28]
 80074dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80074e0:	ee08 0a10 	vmov	s16, r0
 80074e4:	4b9f      	ldr	r3, [pc, #636]	; (8007764 <_printf_float+0x2dc>)
 80074e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	f7f9 fb25 	bl	8000b3c <__aeabi_dcmpun>
 80074f2:	bb88      	cbnz	r0, 8007558 <_printf_float+0xd0>
 80074f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f8:	4b9a      	ldr	r3, [pc, #616]	; (8007764 <_printf_float+0x2dc>)
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295
 80074fe:	f7f9 faff 	bl	8000b00 <__aeabi_dcmple>
 8007502:	bb48      	cbnz	r0, 8007558 <_printf_float+0xd0>
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	f7f9 faee 	bl	8000aec <__aeabi_dcmplt>
 8007510:	b110      	cbz	r0, 8007518 <_printf_float+0x90>
 8007512:	232d      	movs	r3, #45	; 0x2d
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007518:	4b93      	ldr	r3, [pc, #588]	; (8007768 <_printf_float+0x2e0>)
 800751a:	4894      	ldr	r0, [pc, #592]	; (800776c <_printf_float+0x2e4>)
 800751c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007520:	bf94      	ite	ls
 8007522:	4698      	movls	r8, r3
 8007524:	4680      	movhi	r8, r0
 8007526:	2303      	movs	r3, #3
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	9b05      	ldr	r3, [sp, #20]
 800752c:	f023 0204 	bic.w	r2, r3, #4
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	f04f 0900 	mov.w	r9, #0
 8007536:	9700      	str	r7, [sp, #0]
 8007538:	4633      	mov	r3, r6
 800753a:	aa0b      	add	r2, sp, #44	; 0x2c
 800753c:	4621      	mov	r1, r4
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f9d8 	bl	80078f4 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	f040 8090 	bne.w	800766a <_printf_float+0x1e2>
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	b00d      	add	sp, #52	; 0x34
 8007550:	ecbd 8b02 	vpop	{d8}
 8007554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007558:	4642      	mov	r2, r8
 800755a:	464b      	mov	r3, r9
 800755c:	4640      	mov	r0, r8
 800755e:	4649      	mov	r1, r9
 8007560:	f7f9 faec 	bl	8000b3c <__aeabi_dcmpun>
 8007564:	b140      	cbz	r0, 8007578 <_printf_float+0xf0>
 8007566:	464b      	mov	r3, r9
 8007568:	2b00      	cmp	r3, #0
 800756a:	bfbc      	itt	lt
 800756c:	232d      	movlt	r3, #45	; 0x2d
 800756e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007572:	487f      	ldr	r0, [pc, #508]	; (8007770 <_printf_float+0x2e8>)
 8007574:	4b7f      	ldr	r3, [pc, #508]	; (8007774 <_printf_float+0x2ec>)
 8007576:	e7d1      	b.n	800751c <_printf_float+0x94>
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800757e:	9206      	str	r2, [sp, #24]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	d13f      	bne.n	8007604 <_printf_float+0x17c>
 8007584:	2306      	movs	r3, #6
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	6861      	ldr	r1, [r4, #4]
 800758c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007590:	2300      	movs	r3, #0
 8007592:	9303      	str	r3, [sp, #12]
 8007594:	ab0a      	add	r3, sp, #40	; 0x28
 8007596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800759a:	ab09      	add	r3, sp, #36	; 0x24
 800759c:	ec49 8b10 	vmov	d0, r8, r9
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075a8:	4628      	mov	r0, r5
 80075aa:	f7ff fecd 	bl	8007348 <__cvt>
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075b2:	2b47      	cmp	r3, #71	; 0x47
 80075b4:	4680      	mov	r8, r0
 80075b6:	d108      	bne.n	80075ca <_printf_float+0x142>
 80075b8:	1cc8      	adds	r0, r1, #3
 80075ba:	db02      	blt.n	80075c2 <_printf_float+0x13a>
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	4299      	cmp	r1, r3
 80075c0:	dd41      	ble.n	8007646 <_printf_float+0x1be>
 80075c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80075c6:	fa5f fb8b 	uxtb.w	fp, fp
 80075ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075ce:	d820      	bhi.n	8007612 <_printf_float+0x18a>
 80075d0:	3901      	subs	r1, #1
 80075d2:	465a      	mov	r2, fp
 80075d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075d8:	9109      	str	r1, [sp, #36]	; 0x24
 80075da:	f7ff ff17 	bl	800740c <__exponent>
 80075de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e0:	1813      	adds	r3, r2, r0
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	4681      	mov	r9, r0
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	dc02      	bgt.n	80075f0 <_printf_float+0x168>
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	07d2      	lsls	r2, r2, #31
 80075ee:	d501      	bpl.n	80075f4 <_printf_float+0x16c>
 80075f0:	3301      	adds	r3, #1
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d09c      	beq.n	8007536 <_printf_float+0xae>
 80075fc:	232d      	movs	r3, #45	; 0x2d
 80075fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007602:	e798      	b.n	8007536 <_printf_float+0xae>
 8007604:	9a06      	ldr	r2, [sp, #24]
 8007606:	2a47      	cmp	r2, #71	; 0x47
 8007608:	d1be      	bne.n	8007588 <_printf_float+0x100>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1bc      	bne.n	8007588 <_printf_float+0x100>
 800760e:	2301      	movs	r3, #1
 8007610:	e7b9      	b.n	8007586 <_printf_float+0xfe>
 8007612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007616:	d118      	bne.n	800764a <_printf_float+0x1c2>
 8007618:	2900      	cmp	r1, #0
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	dd0b      	ble.n	8007636 <_printf_float+0x1ae>
 800761e:	6121      	str	r1, [r4, #16]
 8007620:	b913      	cbnz	r3, 8007628 <_printf_float+0x1a0>
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	07d0      	lsls	r0, r2, #31
 8007626:	d502      	bpl.n	800762e <_printf_float+0x1a6>
 8007628:	3301      	adds	r3, #1
 800762a:	440b      	add	r3, r1
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007630:	f04f 0900 	mov.w	r9, #0
 8007634:	e7de      	b.n	80075f4 <_printf_float+0x16c>
 8007636:	b913      	cbnz	r3, 800763e <_printf_float+0x1b6>
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	07d2      	lsls	r2, r2, #31
 800763c:	d501      	bpl.n	8007642 <_printf_float+0x1ba>
 800763e:	3302      	adds	r3, #2
 8007640:	e7f4      	b.n	800762c <_printf_float+0x1a4>
 8007642:	2301      	movs	r3, #1
 8007644:	e7f2      	b.n	800762c <_printf_float+0x1a4>
 8007646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800764a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764c:	4299      	cmp	r1, r3
 800764e:	db05      	blt.n	800765c <_printf_float+0x1d4>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	6121      	str	r1, [r4, #16]
 8007654:	07d8      	lsls	r0, r3, #31
 8007656:	d5ea      	bpl.n	800762e <_printf_float+0x1a6>
 8007658:	1c4b      	adds	r3, r1, #1
 800765a:	e7e7      	b.n	800762c <_printf_float+0x1a4>
 800765c:	2900      	cmp	r1, #0
 800765e:	bfd4      	ite	le
 8007660:	f1c1 0202 	rsble	r2, r1, #2
 8007664:	2201      	movgt	r2, #1
 8007666:	4413      	add	r3, r2
 8007668:	e7e0      	b.n	800762c <_printf_float+0x1a4>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	055a      	lsls	r2, r3, #21
 800766e:	d407      	bmi.n	8007680 <_printf_float+0x1f8>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	4642      	mov	r2, r8
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	d12c      	bne.n	80076d8 <_printf_float+0x250>
 800767e:	e764      	b.n	800754a <_printf_float+0xc2>
 8007680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007684:	f240 80e0 	bls.w	8007848 <_printf_float+0x3c0>
 8007688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	f7f9 fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007694:	2800      	cmp	r0, #0
 8007696:	d034      	beq.n	8007702 <_printf_float+0x27a>
 8007698:	4a37      	ldr	r2, [pc, #220]	; (8007778 <_printf_float+0x2f0>)
 800769a:	2301      	movs	r3, #1
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	f43f af51 	beq.w	800754a <_printf_float+0xc2>
 80076a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ac:	429a      	cmp	r2, r3
 80076ae:	db02      	blt.n	80076b6 <_printf_float+0x22e>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	07d8      	lsls	r0, r3, #31
 80076b4:	d510      	bpl.n	80076d8 <_printf_float+0x250>
 80076b6:	ee18 3a10 	vmov	r3, s16
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af41 	beq.w	800754a <_printf_float+0xc2>
 80076c8:	f04f 0800 	mov.w	r8, #0
 80076cc:	f104 091a 	add.w	r9, r4, #26
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4543      	cmp	r3, r8
 80076d6:	dc09      	bgt.n	80076ec <_printf_float+0x264>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	079b      	lsls	r3, r3, #30
 80076dc:	f100 8105 	bmi.w	80078ea <_printf_float+0x462>
 80076e0:	68e0      	ldr	r0, [r4, #12]
 80076e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e4:	4298      	cmp	r0, r3
 80076e6:	bfb8      	it	lt
 80076e8:	4618      	movlt	r0, r3
 80076ea:	e730      	b.n	800754e <_printf_float+0xc6>
 80076ec:	2301      	movs	r3, #1
 80076ee:	464a      	mov	r2, r9
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f af27 	beq.w	800754a <_printf_float+0xc2>
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	e7e6      	b.n	80076d0 <_printf_float+0x248>
 8007702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc39      	bgt.n	800777c <_printf_float+0x2f4>
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <_printf_float+0x2f0>)
 800770a:	2301      	movs	r3, #1
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af19 	beq.w	800754a <_printf_float+0xc2>
 8007718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800771c:	4313      	orrs	r3, r2
 800771e:	d102      	bne.n	8007726 <_printf_float+0x29e>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	07d9      	lsls	r1, r3, #31
 8007724:	d5d8      	bpl.n	80076d8 <_printf_float+0x250>
 8007726:	ee18 3a10 	vmov	r3, s16
 800772a:	4652      	mov	r2, sl
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af09 	beq.w	800754a <_printf_float+0xc2>
 8007738:	f04f 0900 	mov.w	r9, #0
 800773c:	f104 0a1a 	add.w	sl, r4, #26
 8007740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007742:	425b      	negs	r3, r3
 8007744:	454b      	cmp	r3, r9
 8007746:	dc01      	bgt.n	800774c <_printf_float+0x2c4>
 8007748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774a:	e792      	b.n	8007672 <_printf_float+0x1ea>
 800774c:	2301      	movs	r3, #1
 800774e:	4652      	mov	r2, sl
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f aef7 	beq.w	800754a <_printf_float+0xc2>
 800775c:	f109 0901 	add.w	r9, r9, #1
 8007760:	e7ee      	b.n	8007740 <_printf_float+0x2b8>
 8007762:	bf00      	nop
 8007764:	7fefffff 	.word	0x7fefffff
 8007768:	0800bfb0 	.word	0x0800bfb0
 800776c:	0800bfb4 	.word	0x0800bfb4
 8007770:	0800bfbc 	.word	0x0800bfbc
 8007774:	0800bfb8 	.word	0x0800bfb8
 8007778:	0800bfc0 	.word	0x0800bfc0
 800777c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800777e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007780:	429a      	cmp	r2, r3
 8007782:	bfa8      	it	ge
 8007784:	461a      	movge	r2, r3
 8007786:	2a00      	cmp	r2, #0
 8007788:	4691      	mov	r9, r2
 800778a:	dc37      	bgt.n	80077fc <_printf_float+0x374>
 800778c:	f04f 0b00 	mov.w	fp, #0
 8007790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007794:	f104 021a 	add.w	r2, r4, #26
 8007798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	eba3 0309 	sub.w	r3, r3, r9
 80077a0:	455b      	cmp	r3, fp
 80077a2:	dc33      	bgt.n	800780c <_printf_float+0x384>
 80077a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a8:	429a      	cmp	r2, r3
 80077aa:	db3b      	blt.n	8007824 <_printf_float+0x39c>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d438      	bmi.n	8007824 <_printf_float+0x39c>
 80077b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b4:	9a05      	ldr	r2, [sp, #20]
 80077b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b8:	1a9a      	subs	r2, r3, r2
 80077ba:	eba3 0901 	sub.w	r9, r3, r1
 80077be:	4591      	cmp	r9, r2
 80077c0:	bfa8      	it	ge
 80077c2:	4691      	movge	r9, r2
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	dc35      	bgt.n	8007836 <_printf_float+0x3ae>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d2:	f104 0a1a 	add.w	sl, r4, #26
 80077d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	eba3 0309 	sub.w	r3, r3, r9
 80077e0:	4543      	cmp	r3, r8
 80077e2:	f77f af79 	ble.w	80076d8 <_printf_float+0x250>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4652      	mov	r2, sl
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f aeaa 	beq.w	800754a <_printf_float+0xc2>
 80077f6:	f108 0801 	add.w	r8, r8, #1
 80077fa:	e7ec      	b.n	80077d6 <_printf_float+0x34e>
 80077fc:	4613      	mov	r3, r2
 80077fe:	4631      	mov	r1, r6
 8007800:	4642      	mov	r2, r8
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	d1c0      	bne.n	800778c <_printf_float+0x304>
 800780a:	e69e      	b.n	800754a <_printf_float+0xc2>
 800780c:	2301      	movs	r3, #1
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	9205      	str	r2, [sp, #20]
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f ae97 	beq.w	800754a <_printf_float+0xc2>
 800781c:	9a05      	ldr	r2, [sp, #20]
 800781e:	f10b 0b01 	add.w	fp, fp, #1
 8007822:	e7b9      	b.n	8007798 <_printf_float+0x310>
 8007824:	ee18 3a10 	vmov	r3, s16
 8007828:	4652      	mov	r2, sl
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	d1be      	bne.n	80077b2 <_printf_float+0x32a>
 8007834:	e689      	b.n	800754a <_printf_float+0xc2>
 8007836:	9a05      	ldr	r2, [sp, #20]
 8007838:	464b      	mov	r3, r9
 800783a:	4442      	add	r2, r8
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	d1c1      	bne.n	80077ca <_printf_float+0x342>
 8007846:	e680      	b.n	800754a <_printf_float+0xc2>
 8007848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800784a:	2a01      	cmp	r2, #1
 800784c:	dc01      	bgt.n	8007852 <_printf_float+0x3ca>
 800784e:	07db      	lsls	r3, r3, #31
 8007850:	d538      	bpl.n	80078c4 <_printf_float+0x43c>
 8007852:	2301      	movs	r3, #1
 8007854:	4642      	mov	r2, r8
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f ae74 	beq.w	800754a <_printf_float+0xc2>
 8007862:	ee18 3a10 	vmov	r3, s16
 8007866:	4652      	mov	r2, sl
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f ae6b 	beq.w	800754a <_printf_float+0xc2>
 8007874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	f7f9 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007880:	b9d8      	cbnz	r0, 80078ba <_printf_float+0x432>
 8007882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007884:	f108 0201 	add.w	r2, r8, #1
 8007888:	3b01      	subs	r3, #1
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	d10e      	bne.n	80078b2 <_printf_float+0x42a>
 8007894:	e659      	b.n	800754a <_printf_float+0xc2>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f ae52 	beq.w	800754a <_printf_float+0xc2>
 80078a6:	f108 0801 	add.w	r8, r8, #1
 80078aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	4543      	cmp	r3, r8
 80078b0:	dcf1      	bgt.n	8007896 <_printf_float+0x40e>
 80078b2:	464b      	mov	r3, r9
 80078b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078b8:	e6dc      	b.n	8007674 <_printf_float+0x1ec>
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	f104 0a1a 	add.w	sl, r4, #26
 80078c2:	e7f2      	b.n	80078aa <_printf_float+0x422>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4642      	mov	r2, r8
 80078c8:	e7df      	b.n	800788a <_printf_float+0x402>
 80078ca:	2301      	movs	r3, #1
 80078cc:	464a      	mov	r2, r9
 80078ce:	4631      	mov	r1, r6
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b8      	blx	r7
 80078d4:	3001      	adds	r0, #1
 80078d6:	f43f ae38 	beq.w	800754a <_printf_float+0xc2>
 80078da:	f108 0801 	add.w	r8, r8, #1
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078e2:	1a5b      	subs	r3, r3, r1
 80078e4:	4543      	cmp	r3, r8
 80078e6:	dcf0      	bgt.n	80078ca <_printf_float+0x442>
 80078e8:	e6fa      	b.n	80076e0 <_printf_float+0x258>
 80078ea:	f04f 0800 	mov.w	r8, #0
 80078ee:	f104 0919 	add.w	r9, r4, #25
 80078f2:	e7f4      	b.n	80078de <_printf_float+0x456>

080078f4 <_printf_common>:
 80078f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f8:	4616      	mov	r6, r2
 80078fa:	4699      	mov	r9, r3
 80078fc:	688a      	ldr	r2, [r1, #8]
 80078fe:	690b      	ldr	r3, [r1, #16]
 8007900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007904:	4293      	cmp	r3, r2
 8007906:	bfb8      	it	lt
 8007908:	4613      	movlt	r3, r2
 800790a:	6033      	str	r3, [r6, #0]
 800790c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007910:	4607      	mov	r7, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b10a      	cbz	r2, 800791a <_printf_common+0x26>
 8007916:	3301      	adds	r3, #1
 8007918:	6033      	str	r3, [r6, #0]
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	0699      	lsls	r1, r3, #26
 800791e:	bf42      	ittt	mi
 8007920:	6833      	ldrmi	r3, [r6, #0]
 8007922:	3302      	addmi	r3, #2
 8007924:	6033      	strmi	r3, [r6, #0]
 8007926:	6825      	ldr	r5, [r4, #0]
 8007928:	f015 0506 	ands.w	r5, r5, #6
 800792c:	d106      	bne.n	800793c <_printf_common+0x48>
 800792e:	f104 0a19 	add.w	sl, r4, #25
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	6832      	ldr	r2, [r6, #0]
 8007936:	1a9b      	subs	r3, r3, r2
 8007938:	42ab      	cmp	r3, r5
 800793a:	dc26      	bgt.n	800798a <_printf_common+0x96>
 800793c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007940:	1e13      	subs	r3, r2, #0
 8007942:	6822      	ldr	r2, [r4, #0]
 8007944:	bf18      	it	ne
 8007946:	2301      	movne	r3, #1
 8007948:	0692      	lsls	r2, r2, #26
 800794a:	d42b      	bmi.n	80079a4 <_printf_common+0xb0>
 800794c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007950:	4649      	mov	r1, r9
 8007952:	4638      	mov	r0, r7
 8007954:	47c0      	blx	r8
 8007956:	3001      	adds	r0, #1
 8007958:	d01e      	beq.n	8007998 <_printf_common+0xa4>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	68e5      	ldr	r5, [r4, #12]
 800795e:	6832      	ldr	r2, [r6, #0]
 8007960:	f003 0306 	and.w	r3, r3, #6
 8007964:	2b04      	cmp	r3, #4
 8007966:	bf08      	it	eq
 8007968:	1aad      	subeq	r5, r5, r2
 800796a:	68a3      	ldr	r3, [r4, #8]
 800796c:	6922      	ldr	r2, [r4, #16]
 800796e:	bf0c      	ite	eq
 8007970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007974:	2500      	movne	r5, #0
 8007976:	4293      	cmp	r3, r2
 8007978:	bfc4      	itt	gt
 800797a:	1a9b      	subgt	r3, r3, r2
 800797c:	18ed      	addgt	r5, r5, r3
 800797e:	2600      	movs	r6, #0
 8007980:	341a      	adds	r4, #26
 8007982:	42b5      	cmp	r5, r6
 8007984:	d11a      	bne.n	80079bc <_printf_common+0xc8>
 8007986:	2000      	movs	r0, #0
 8007988:	e008      	b.n	800799c <_printf_common+0xa8>
 800798a:	2301      	movs	r3, #1
 800798c:	4652      	mov	r2, sl
 800798e:	4649      	mov	r1, r9
 8007990:	4638      	mov	r0, r7
 8007992:	47c0      	blx	r8
 8007994:	3001      	adds	r0, #1
 8007996:	d103      	bne.n	80079a0 <_printf_common+0xac>
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a0:	3501      	adds	r5, #1
 80079a2:	e7c6      	b.n	8007932 <_printf_common+0x3e>
 80079a4:	18e1      	adds	r1, r4, r3
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	2030      	movs	r0, #48	; 0x30
 80079aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ae:	4422      	add	r2, r4
 80079b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079b8:	3302      	adds	r3, #2
 80079ba:	e7c7      	b.n	800794c <_printf_common+0x58>
 80079bc:	2301      	movs	r3, #1
 80079be:	4622      	mov	r2, r4
 80079c0:	4649      	mov	r1, r9
 80079c2:	4638      	mov	r0, r7
 80079c4:	47c0      	blx	r8
 80079c6:	3001      	adds	r0, #1
 80079c8:	d0e6      	beq.n	8007998 <_printf_common+0xa4>
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7d9      	b.n	8007982 <_printf_common+0x8e>
	...

080079d0 <_printf_i>:
 80079d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	7e0f      	ldrb	r7, [r1, #24]
 80079d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079d8:	2f78      	cmp	r7, #120	; 0x78
 80079da:	4691      	mov	r9, r2
 80079dc:	4680      	mov	r8, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	469a      	mov	sl, r3
 80079e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079e6:	d807      	bhi.n	80079f8 <_printf_i+0x28>
 80079e8:	2f62      	cmp	r7, #98	; 0x62
 80079ea:	d80a      	bhi.n	8007a02 <_printf_i+0x32>
 80079ec:	2f00      	cmp	r7, #0
 80079ee:	f000 80d8 	beq.w	8007ba2 <_printf_i+0x1d2>
 80079f2:	2f58      	cmp	r7, #88	; 0x58
 80079f4:	f000 80a3 	beq.w	8007b3e <_printf_i+0x16e>
 80079f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a00:	e03a      	b.n	8007a78 <_printf_i+0xa8>
 8007a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a06:	2b15      	cmp	r3, #21
 8007a08:	d8f6      	bhi.n	80079f8 <_printf_i+0x28>
 8007a0a:	a101      	add	r1, pc, #4	; (adr r1, 8007a10 <_printf_i+0x40>)
 8007a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a7d 	.word	0x08007a7d
 8007a18:	080079f9 	.word	0x080079f9
 8007a1c:	080079f9 	.word	0x080079f9
 8007a20:	080079f9 	.word	0x080079f9
 8007a24:	080079f9 	.word	0x080079f9
 8007a28:	08007a7d 	.word	0x08007a7d
 8007a2c:	080079f9 	.word	0x080079f9
 8007a30:	080079f9 	.word	0x080079f9
 8007a34:	080079f9 	.word	0x080079f9
 8007a38:	080079f9 	.word	0x080079f9
 8007a3c:	08007b89 	.word	0x08007b89
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007b6b 	.word	0x08007b6b
 8007a48:	080079f9 	.word	0x080079f9
 8007a4c:	080079f9 	.word	0x080079f9
 8007a50:	08007bab 	.word	0x08007bab
 8007a54:	080079f9 	.word	0x080079f9
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	080079f9 	.word	0x080079f9
 8007a60:	080079f9 	.word	0x080079f9
 8007a64:	08007b73 	.word	0x08007b73
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	602a      	str	r2, [r5, #0]
 8007a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0a3      	b.n	8007bc4 <_printf_i+0x1f4>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	6829      	ldr	r1, [r5, #0]
 8007a80:	0606      	lsls	r6, r0, #24
 8007a82:	f101 0304 	add.w	r3, r1, #4
 8007a86:	d50a      	bpl.n	8007a9e <_printf_i+0xce>
 8007a88:	680e      	ldr	r6, [r1, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	da03      	bge.n	8007a98 <_printf_i+0xc8>
 8007a90:	232d      	movs	r3, #45	; 0x2d
 8007a92:	4276      	negs	r6, r6
 8007a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a98:	485e      	ldr	r0, [pc, #376]	; (8007c14 <_printf_i+0x244>)
 8007a9a:	230a      	movs	r3, #10
 8007a9c:	e019      	b.n	8007ad2 <_printf_i+0x102>
 8007a9e:	680e      	ldr	r6, [r1, #0]
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aa6:	bf18      	it	ne
 8007aa8:	b236      	sxthne	r6, r6
 8007aaa:	e7ef      	b.n	8007a8c <_printf_i+0xbc>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	6029      	str	r1, [r5, #0]
 8007ab4:	0601      	lsls	r1, r0, #24
 8007ab6:	d501      	bpl.n	8007abc <_printf_i+0xec>
 8007ab8:	681e      	ldr	r6, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <_printf_i+0xf2>
 8007abc:	0646      	lsls	r6, r0, #25
 8007abe:	d5fb      	bpl.n	8007ab8 <_printf_i+0xe8>
 8007ac0:	881e      	ldrh	r6, [r3, #0]
 8007ac2:	4854      	ldr	r0, [pc, #336]	; (8007c14 <_printf_i+0x244>)
 8007ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2308      	moveq	r3, #8
 8007aca:	230a      	movne	r3, #10
 8007acc:	2100      	movs	r1, #0
 8007ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ad2:	6865      	ldr	r5, [r4, #4]
 8007ad4:	60a5      	str	r5, [r4, #8]
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	bfa2      	ittt	ge
 8007ada:	6821      	ldrge	r1, [r4, #0]
 8007adc:	f021 0104 	bicge.w	r1, r1, #4
 8007ae0:	6021      	strge	r1, [r4, #0]
 8007ae2:	b90e      	cbnz	r6, 8007ae8 <_printf_i+0x118>
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	d04d      	beq.n	8007b84 <_printf_i+0x1b4>
 8007ae8:	4615      	mov	r5, r2
 8007aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aee:	fb03 6711 	mls	r7, r3, r1, r6
 8007af2:	5dc7      	ldrb	r7, [r0, r7]
 8007af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007af8:	4637      	mov	r7, r6
 8007afa:	42bb      	cmp	r3, r7
 8007afc:	460e      	mov	r6, r1
 8007afe:	d9f4      	bls.n	8007aea <_printf_i+0x11a>
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d10b      	bne.n	8007b1c <_printf_i+0x14c>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	07de      	lsls	r6, r3, #31
 8007b08:	d508      	bpl.n	8007b1c <_printf_i+0x14c>
 8007b0a:	6923      	ldr	r3, [r4, #16]
 8007b0c:	6861      	ldr	r1, [r4, #4]
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	bfde      	ittt	le
 8007b12:	2330      	movle	r3, #48	; 0x30
 8007b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b1c:	1b52      	subs	r2, r2, r5
 8007b1e:	6122      	str	r2, [r4, #16]
 8007b20:	f8cd a000 	str.w	sl, [sp]
 8007b24:	464b      	mov	r3, r9
 8007b26:	aa03      	add	r2, sp, #12
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f7ff fee2 	bl	80078f4 <_printf_common>
 8007b30:	3001      	adds	r0, #1
 8007b32:	d14c      	bne.n	8007bce <_printf_i+0x1fe>
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	b004      	add	sp, #16
 8007b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3e:	4835      	ldr	r0, [pc, #212]	; (8007c14 <_printf_i+0x244>)
 8007b40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b44:	6829      	ldr	r1, [r5, #0]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b4c:	6029      	str	r1, [r5, #0]
 8007b4e:	061d      	lsls	r5, r3, #24
 8007b50:	d514      	bpl.n	8007b7c <_printf_i+0x1ac>
 8007b52:	07df      	lsls	r7, r3, #31
 8007b54:	bf44      	itt	mi
 8007b56:	f043 0320 	orrmi.w	r3, r3, #32
 8007b5a:	6023      	strmi	r3, [r4, #0]
 8007b5c:	b91e      	cbnz	r6, 8007b66 <_printf_i+0x196>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	f023 0320 	bic.w	r3, r3, #32
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	2310      	movs	r3, #16
 8007b68:	e7b0      	b.n	8007acc <_printf_i+0xfc>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f043 0320 	orr.w	r3, r3, #32
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	2378      	movs	r3, #120	; 0x78
 8007b74:	4828      	ldr	r0, [pc, #160]	; (8007c18 <_printf_i+0x248>)
 8007b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b7a:	e7e3      	b.n	8007b44 <_printf_i+0x174>
 8007b7c:	0659      	lsls	r1, r3, #25
 8007b7e:	bf48      	it	mi
 8007b80:	b2b6      	uxthmi	r6, r6
 8007b82:	e7e6      	b.n	8007b52 <_printf_i+0x182>
 8007b84:	4615      	mov	r5, r2
 8007b86:	e7bb      	b.n	8007b00 <_printf_i+0x130>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	6826      	ldr	r6, [r4, #0]
 8007b8c:	6961      	ldr	r1, [r4, #20]
 8007b8e:	1d18      	adds	r0, r3, #4
 8007b90:	6028      	str	r0, [r5, #0]
 8007b92:	0635      	lsls	r5, r6, #24
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	d501      	bpl.n	8007b9c <_printf_i+0x1cc>
 8007b98:	6019      	str	r1, [r3, #0]
 8007b9a:	e002      	b.n	8007ba2 <_printf_i+0x1d2>
 8007b9c:	0670      	lsls	r0, r6, #25
 8007b9e:	d5fb      	bpl.n	8007b98 <_printf_i+0x1c8>
 8007ba0:	8019      	strh	r1, [r3, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	4615      	mov	r5, r2
 8007ba8:	e7ba      	b.n	8007b20 <_printf_i+0x150>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	602a      	str	r2, [r5, #0]
 8007bb0:	681d      	ldr	r5, [r3, #0]
 8007bb2:	6862      	ldr	r2, [r4, #4]
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7f8 fb1a 	bl	80001f0 <memchr>
 8007bbc:	b108      	cbz	r0, 8007bc2 <_printf_i+0x1f2>
 8007bbe:	1b40      	subs	r0, r0, r5
 8007bc0:	6060      	str	r0, [r4, #4]
 8007bc2:	6863      	ldr	r3, [r4, #4]
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bcc:	e7a8      	b.n	8007b20 <_printf_i+0x150>
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	47d0      	blx	sl
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0ab      	beq.n	8007b34 <_printf_i+0x164>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	079b      	lsls	r3, r3, #30
 8007be0:	d413      	bmi.n	8007c0a <_printf_i+0x23a>
 8007be2:	68e0      	ldr	r0, [r4, #12]
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	4298      	cmp	r0, r3
 8007be8:	bfb8      	it	lt
 8007bea:	4618      	movlt	r0, r3
 8007bec:	e7a4      	b.n	8007b38 <_printf_i+0x168>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	47d0      	blx	sl
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d09b      	beq.n	8007b34 <_printf_i+0x164>
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	9903      	ldr	r1, [sp, #12]
 8007c02:	1a5b      	subs	r3, r3, r1
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dcf2      	bgt.n	8007bee <_printf_i+0x21e>
 8007c08:	e7eb      	b.n	8007be2 <_printf_i+0x212>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	f104 0619 	add.w	r6, r4, #25
 8007c10:	e7f5      	b.n	8007bfe <_printf_i+0x22e>
 8007c12:	bf00      	nop
 8007c14:	0800bfc2 	.word	0x0800bfc2
 8007c18:	0800bfd3 	.word	0x0800bfd3

08007c1c <_scanf_float>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	b087      	sub	sp, #28
 8007c22:	4617      	mov	r7, r2
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	688b      	ldr	r3, [r1, #8]
 8007c28:	1e5a      	subs	r2, r3, #1
 8007c2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c2e:	bf83      	ittte	hi
 8007c30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c34:	195b      	addhi	r3, r3, r5
 8007c36:	9302      	strhi	r3, [sp, #8]
 8007c38:	2300      	movls	r3, #0
 8007c3a:	bf86      	itte	hi
 8007c3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c40:	608b      	strhi	r3, [r1, #8]
 8007c42:	9302      	strls	r3, [sp, #8]
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	468b      	mov	fp, r1
 8007c48:	2500      	movs	r5, #0
 8007c4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c56:	4680      	mov	r8, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	465e      	mov	r6, fp
 8007c5c:	46aa      	mov	sl, r5
 8007c5e:	46a9      	mov	r9, r5
 8007c60:	9501      	str	r5, [sp, #4]
 8007c62:	68a2      	ldr	r2, [r4, #8]
 8007c64:	b152      	cbz	r2, 8007c7c <_scanf_float+0x60>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b4e      	cmp	r3, #78	; 0x4e
 8007c6c:	d864      	bhi.n	8007d38 <_scanf_float+0x11c>
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d83c      	bhi.n	8007cec <_scanf_float+0xd0>
 8007c72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c76:	b2c8      	uxtb	r0, r1
 8007c78:	280e      	cmp	r0, #14
 8007c7a:	d93a      	bls.n	8007cf2 <_scanf_float+0xd6>
 8007c7c:	f1b9 0f00 	cmp.w	r9, #0
 8007c80:	d003      	beq.n	8007c8a <_scanf_float+0x6e>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c8e:	f1ba 0f01 	cmp.w	sl, #1
 8007c92:	f200 8113 	bhi.w	8007ebc <_scanf_float+0x2a0>
 8007c96:	455e      	cmp	r6, fp
 8007c98:	f200 8105 	bhi.w	8007ea6 <_scanf_float+0x28a>
 8007c9c:	2501      	movs	r5, #1
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	b007      	add	sp, #28
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007caa:	2a0d      	cmp	r2, #13
 8007cac:	d8e6      	bhi.n	8007c7c <_scanf_float+0x60>
 8007cae:	a101      	add	r1, pc, #4	; (adr r1, 8007cb4 <_scanf_float+0x98>)
 8007cb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007cb4:	08007df3 	.word	0x08007df3
 8007cb8:	08007c7d 	.word	0x08007c7d
 8007cbc:	08007c7d 	.word	0x08007c7d
 8007cc0:	08007c7d 	.word	0x08007c7d
 8007cc4:	08007e53 	.word	0x08007e53
 8007cc8:	08007e2b 	.word	0x08007e2b
 8007ccc:	08007c7d 	.word	0x08007c7d
 8007cd0:	08007c7d 	.word	0x08007c7d
 8007cd4:	08007e01 	.word	0x08007e01
 8007cd8:	08007c7d 	.word	0x08007c7d
 8007cdc:	08007c7d 	.word	0x08007c7d
 8007ce0:	08007c7d 	.word	0x08007c7d
 8007ce4:	08007c7d 	.word	0x08007c7d
 8007ce8:	08007db9 	.word	0x08007db9
 8007cec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cf0:	e7db      	b.n	8007caa <_scanf_float+0x8e>
 8007cf2:	290e      	cmp	r1, #14
 8007cf4:	d8c2      	bhi.n	8007c7c <_scanf_float+0x60>
 8007cf6:	a001      	add	r0, pc, #4	; (adr r0, 8007cfc <_scanf_float+0xe0>)
 8007cf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cfc:	08007dab 	.word	0x08007dab
 8007d00:	08007c7d 	.word	0x08007c7d
 8007d04:	08007dab 	.word	0x08007dab
 8007d08:	08007e3f 	.word	0x08007e3f
 8007d0c:	08007c7d 	.word	0x08007c7d
 8007d10:	08007d59 	.word	0x08007d59
 8007d14:	08007d95 	.word	0x08007d95
 8007d18:	08007d95 	.word	0x08007d95
 8007d1c:	08007d95 	.word	0x08007d95
 8007d20:	08007d95 	.word	0x08007d95
 8007d24:	08007d95 	.word	0x08007d95
 8007d28:	08007d95 	.word	0x08007d95
 8007d2c:	08007d95 	.word	0x08007d95
 8007d30:	08007d95 	.word	0x08007d95
 8007d34:	08007d95 	.word	0x08007d95
 8007d38:	2b6e      	cmp	r3, #110	; 0x6e
 8007d3a:	d809      	bhi.n	8007d50 <_scanf_float+0x134>
 8007d3c:	2b60      	cmp	r3, #96	; 0x60
 8007d3e:	d8b2      	bhi.n	8007ca6 <_scanf_float+0x8a>
 8007d40:	2b54      	cmp	r3, #84	; 0x54
 8007d42:	d077      	beq.n	8007e34 <_scanf_float+0x218>
 8007d44:	2b59      	cmp	r3, #89	; 0x59
 8007d46:	d199      	bne.n	8007c7c <_scanf_float+0x60>
 8007d48:	2d07      	cmp	r5, #7
 8007d4a:	d197      	bne.n	8007c7c <_scanf_float+0x60>
 8007d4c:	2508      	movs	r5, #8
 8007d4e:	e029      	b.n	8007da4 <_scanf_float+0x188>
 8007d50:	2b74      	cmp	r3, #116	; 0x74
 8007d52:	d06f      	beq.n	8007e34 <_scanf_float+0x218>
 8007d54:	2b79      	cmp	r3, #121	; 0x79
 8007d56:	e7f6      	b.n	8007d46 <_scanf_float+0x12a>
 8007d58:	6821      	ldr	r1, [r4, #0]
 8007d5a:	05c8      	lsls	r0, r1, #23
 8007d5c:	d51a      	bpl.n	8007d94 <_scanf_float+0x178>
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d64:	6021      	str	r1, [r4, #0]
 8007d66:	f109 0901 	add.w	r9, r9, #1
 8007d6a:	b11b      	cbz	r3, 8007d74 <_scanf_float+0x158>
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	3201      	adds	r2, #1
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	60a2      	str	r2, [r4, #8]
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	60a3      	str	r3, [r4, #8]
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	f340 8084 	ble.w	8007e94 <_scanf_float+0x278>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	603b      	str	r3, [r7, #0]
 8007d92:	e766      	b.n	8007c62 <_scanf_float+0x46>
 8007d94:	eb1a 0f05 	cmn.w	sl, r5
 8007d98:	f47f af70 	bne.w	8007c7c <_scanf_float+0x60>
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007da2:	6022      	str	r2, [r4, #0]
 8007da4:	f806 3b01 	strb.w	r3, [r6], #1
 8007da8:	e7e4      	b.n	8007d74 <_scanf_float+0x158>
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	0610      	lsls	r0, r2, #24
 8007dae:	f57f af65 	bpl.w	8007c7c <_scanf_float+0x60>
 8007db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007db6:	e7f4      	b.n	8007da2 <_scanf_float+0x186>
 8007db8:	f1ba 0f00 	cmp.w	sl, #0
 8007dbc:	d10e      	bne.n	8007ddc <_scanf_float+0x1c0>
 8007dbe:	f1b9 0f00 	cmp.w	r9, #0
 8007dc2:	d10e      	bne.n	8007de2 <_scanf_float+0x1c6>
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007dca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007dce:	d108      	bne.n	8007de2 <_scanf_float+0x1c6>
 8007dd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007dd4:	6022      	str	r2, [r4, #0]
 8007dd6:	f04f 0a01 	mov.w	sl, #1
 8007dda:	e7e3      	b.n	8007da4 <_scanf_float+0x188>
 8007ddc:	f1ba 0f02 	cmp.w	sl, #2
 8007de0:	d055      	beq.n	8007e8e <_scanf_float+0x272>
 8007de2:	2d01      	cmp	r5, #1
 8007de4:	d002      	beq.n	8007dec <_scanf_float+0x1d0>
 8007de6:	2d04      	cmp	r5, #4
 8007de8:	f47f af48 	bne.w	8007c7c <_scanf_float+0x60>
 8007dec:	3501      	adds	r5, #1
 8007dee:	b2ed      	uxtb	r5, r5
 8007df0:	e7d8      	b.n	8007da4 <_scanf_float+0x188>
 8007df2:	f1ba 0f01 	cmp.w	sl, #1
 8007df6:	f47f af41 	bne.w	8007c7c <_scanf_float+0x60>
 8007dfa:	f04f 0a02 	mov.w	sl, #2
 8007dfe:	e7d1      	b.n	8007da4 <_scanf_float+0x188>
 8007e00:	b97d      	cbnz	r5, 8007e22 <_scanf_float+0x206>
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	f47f af3c 	bne.w	8007c82 <_scanf_float+0x66>
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e14:	f47f af39 	bne.w	8007c8a <_scanf_float+0x6e>
 8007e18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e1c:	6022      	str	r2, [r4, #0]
 8007e1e:	2501      	movs	r5, #1
 8007e20:	e7c0      	b.n	8007da4 <_scanf_float+0x188>
 8007e22:	2d03      	cmp	r5, #3
 8007e24:	d0e2      	beq.n	8007dec <_scanf_float+0x1d0>
 8007e26:	2d05      	cmp	r5, #5
 8007e28:	e7de      	b.n	8007de8 <_scanf_float+0x1cc>
 8007e2a:	2d02      	cmp	r5, #2
 8007e2c:	f47f af26 	bne.w	8007c7c <_scanf_float+0x60>
 8007e30:	2503      	movs	r5, #3
 8007e32:	e7b7      	b.n	8007da4 <_scanf_float+0x188>
 8007e34:	2d06      	cmp	r5, #6
 8007e36:	f47f af21 	bne.w	8007c7c <_scanf_float+0x60>
 8007e3a:	2507      	movs	r5, #7
 8007e3c:	e7b2      	b.n	8007da4 <_scanf_float+0x188>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	0591      	lsls	r1, r2, #22
 8007e42:	f57f af1b 	bpl.w	8007c7c <_scanf_float+0x60>
 8007e46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e50:	e7a8      	b.n	8007da4 <_scanf_float+0x188>
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e5c:	d006      	beq.n	8007e6c <_scanf_float+0x250>
 8007e5e:	0550      	lsls	r0, r2, #21
 8007e60:	f57f af0c 	bpl.w	8007c7c <_scanf_float+0x60>
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	f43f af0f 	beq.w	8007c8a <_scanf_float+0x6e>
 8007e6c:	0591      	lsls	r1, r2, #22
 8007e6e:	bf58      	it	pl
 8007e70:	9901      	ldrpl	r1, [sp, #4]
 8007e72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e76:	bf58      	it	pl
 8007e78:	eba9 0101 	subpl.w	r1, r9, r1
 8007e7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e80:	bf58      	it	pl
 8007e82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	f04f 0900 	mov.w	r9, #0
 8007e8c:	e78a      	b.n	8007da4 <_scanf_float+0x188>
 8007e8e:	f04f 0a03 	mov.w	sl, #3
 8007e92:	e787      	b.n	8007da4 <_scanf_float+0x188>
 8007e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4798      	blx	r3
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f aedf 	beq.w	8007c62 <_scanf_float+0x46>
 8007ea4:	e6ea      	b.n	8007c7c <_scanf_float+0x60>
 8007ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eae:	463a      	mov	r2, r7
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4798      	blx	r3
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	e6ec      	b.n	8007c96 <_scanf_float+0x7a>
 8007ebc:	1e6b      	subs	r3, r5, #1
 8007ebe:	2b06      	cmp	r3, #6
 8007ec0:	d825      	bhi.n	8007f0e <_scanf_float+0x2f2>
 8007ec2:	2d02      	cmp	r5, #2
 8007ec4:	d836      	bhi.n	8007f34 <_scanf_float+0x318>
 8007ec6:	455e      	cmp	r6, fp
 8007ec8:	f67f aee8 	bls.w	8007c9c <_scanf_float+0x80>
 8007ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ed0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ed4:	463a      	mov	r2, r7
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4798      	blx	r3
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	e7f1      	b.n	8007ec6 <_scanf_float+0x2aa>
 8007ee2:	9802      	ldr	r0, [sp, #8]
 8007ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ee8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007eec:	9002      	str	r0, [sp, #8]
 8007eee:	463a      	mov	r2, r7
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4798      	blx	r3
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007efe:	fa5f fa8a 	uxtb.w	sl, sl
 8007f02:	f1ba 0f02 	cmp.w	sl, #2
 8007f06:	d1ec      	bne.n	8007ee2 <_scanf_float+0x2c6>
 8007f08:	3d03      	subs	r5, #3
 8007f0a:	b2ed      	uxtb	r5, r5
 8007f0c:	1b76      	subs	r6, r6, r5
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	05da      	lsls	r2, r3, #23
 8007f12:	d52f      	bpl.n	8007f74 <_scanf_float+0x358>
 8007f14:	055b      	lsls	r3, r3, #21
 8007f16:	d510      	bpl.n	8007f3a <_scanf_float+0x31e>
 8007f18:	455e      	cmp	r6, fp
 8007f1a:	f67f aebf 	bls.w	8007c9c <_scanf_float+0x80>
 8007f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f26:	463a      	mov	r2, r7
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4798      	blx	r3
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	e7f1      	b.n	8007f18 <_scanf_float+0x2fc>
 8007f34:	46aa      	mov	sl, r5
 8007f36:	9602      	str	r6, [sp, #8]
 8007f38:	e7df      	b.n	8007efa <_scanf_float+0x2de>
 8007f3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	2965      	cmp	r1, #101	; 0x65
 8007f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f46:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	d00c      	beq.n	8007f68 <_scanf_float+0x34c>
 8007f4e:	2945      	cmp	r1, #69	; 0x45
 8007f50:	d00a      	beq.n	8007f68 <_scanf_float+0x34c>
 8007f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f56:	463a      	mov	r2, r7
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4798      	blx	r3
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	1eb5      	subs	r5, r6, #2
 8007f66:	6123      	str	r3, [r4, #16]
 8007f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6c:	463a      	mov	r2, r7
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4798      	blx	r3
 8007f72:	462e      	mov	r6, r5
 8007f74:	6825      	ldr	r5, [r4, #0]
 8007f76:	f015 0510 	ands.w	r5, r5, #16
 8007f7a:	d159      	bne.n	8008030 <_scanf_float+0x414>
 8007f7c:	7035      	strb	r5, [r6, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f88:	d11b      	bne.n	8007fc2 <_scanf_float+0x3a6>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	454b      	cmp	r3, r9
 8007f8e:	eba3 0209 	sub.w	r2, r3, r9
 8007f92:	d123      	bne.n	8007fdc <_scanf_float+0x3c0>
 8007f94:	2200      	movs	r2, #0
 8007f96:	4659      	mov	r1, fp
 8007f98:	4640      	mov	r0, r8
 8007f9a:	f000 ff53 	bl	8008e44 <_strtod_r>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	f012 0f02 	tst.w	r2, #2
 8007fa6:	ec57 6b10 	vmov	r6, r7, d0
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	d021      	beq.n	8007ff2 <_scanf_float+0x3d6>
 8007fae:	9903      	ldr	r1, [sp, #12]
 8007fb0:	1d1a      	adds	r2, r3, #4
 8007fb2:	600a      	str	r2, [r1, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	e9c3 6700 	strd	r6, r7, [r3]
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60e3      	str	r3, [r4, #12]
 8007fc0:	e66d      	b.n	8007c9e <_scanf_float+0x82>
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0e5      	beq.n	8007f94 <_scanf_float+0x378>
 8007fc8:	9905      	ldr	r1, [sp, #20]
 8007fca:	230a      	movs	r3, #10
 8007fcc:	462a      	mov	r2, r5
 8007fce:	3101      	adds	r1, #1
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	f001 f877 	bl	80090c4 <_strtol_r>
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	9e05      	ldr	r6, [sp, #20]
 8007fda:	1ac2      	subs	r2, r0, r3
 8007fdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fe0:	429e      	cmp	r6, r3
 8007fe2:	bf28      	it	cs
 8007fe4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fe8:	4912      	ldr	r1, [pc, #72]	; (8008034 <_scanf_float+0x418>)
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f8ca 	bl	8008184 <siprintf>
 8007ff0:	e7d0      	b.n	8007f94 <_scanf_float+0x378>
 8007ff2:	9903      	ldr	r1, [sp, #12]
 8007ff4:	f012 0f04 	tst.w	r2, #4
 8007ff8:	f103 0204 	add.w	r2, r3, #4
 8007ffc:	600a      	str	r2, [r1, #0]
 8007ffe:	d1d9      	bne.n	8007fb4 <_scanf_float+0x398>
 8008000:	f8d3 8000 	ldr.w	r8, [r3]
 8008004:	ee10 2a10 	vmov	r2, s0
 8008008:	ee10 0a10 	vmov	r0, s0
 800800c:	463b      	mov	r3, r7
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 fd94 	bl	8000b3c <__aeabi_dcmpun>
 8008014:	b128      	cbz	r0, 8008022 <_scanf_float+0x406>
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <_scanf_float+0x41c>)
 8008018:	f000 f8ae 	bl	8008178 <nanf>
 800801c:	ed88 0a00 	vstr	s0, [r8]
 8008020:	e7cb      	b.n	8007fba <_scanf_float+0x39e>
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fde7 	bl	8000bf8 <__aeabi_d2f>
 800802a:	f8c8 0000 	str.w	r0, [r8]
 800802e:	e7c4      	b.n	8007fba <_scanf_float+0x39e>
 8008030:	2500      	movs	r5, #0
 8008032:	e634      	b.n	8007c9e <_scanf_float+0x82>
 8008034:	0800bfe4 	.word	0x0800bfe4
 8008038:	0800c0ef 	.word	0x0800c0ef

0800803c <iprintf>:
 800803c:	b40f      	push	{r0, r1, r2, r3}
 800803e:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <iprintf+0x2c>)
 8008040:	b513      	push	{r0, r1, r4, lr}
 8008042:	681c      	ldr	r4, [r3, #0]
 8008044:	b124      	cbz	r4, 8008050 <iprintf+0x14>
 8008046:	69a3      	ldr	r3, [r4, #24]
 8008048:	b913      	cbnz	r3, 8008050 <iprintf+0x14>
 800804a:	4620      	mov	r0, r4
 800804c:	f002 f8b0 	bl	800a1b0 <__sinit>
 8008050:	ab05      	add	r3, sp, #20
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	68a1      	ldr	r1, [r4, #8]
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	4620      	mov	r0, r4
 800805a:	f003 fbad 	bl	800b7b8 <_vfiprintf_r>
 800805e:	b002      	add	sp, #8
 8008060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008064:	b004      	add	sp, #16
 8008066:	4770      	bx	lr
 8008068:	2000001c 	.word	0x2000001c

0800806c <_puts_r>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	460e      	mov	r6, r1
 8008070:	4605      	mov	r5, r0
 8008072:	b118      	cbz	r0, 800807c <_puts_r+0x10>
 8008074:	6983      	ldr	r3, [r0, #24]
 8008076:	b90b      	cbnz	r3, 800807c <_puts_r+0x10>
 8008078:	f002 f89a 	bl	800a1b0 <__sinit>
 800807c:	69ab      	ldr	r3, [r5, #24]
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	b913      	cbnz	r3, 8008088 <_puts_r+0x1c>
 8008082:	4628      	mov	r0, r5
 8008084:	f002 f894 	bl	800a1b0 <__sinit>
 8008088:	4b2c      	ldr	r3, [pc, #176]	; (800813c <_puts_r+0xd0>)
 800808a:	429c      	cmp	r4, r3
 800808c:	d120      	bne.n	80080d0 <_puts_r+0x64>
 800808e:	686c      	ldr	r4, [r5, #4]
 8008090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d405      	bmi.n	80080a2 <_puts_r+0x36>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	0598      	lsls	r0, r3, #22
 800809a:	d402      	bmi.n	80080a2 <_puts_r+0x36>
 800809c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800809e:	f002 fcaa 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	0719      	lsls	r1, r3, #28
 80080a6:	d51d      	bpl.n	80080e4 <_puts_r+0x78>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b1db      	cbz	r3, 80080e4 <_puts_r+0x78>
 80080ac:	3e01      	subs	r6, #1
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080b4:	3b01      	subs	r3, #1
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	bb39      	cbnz	r1, 800810a <_puts_r+0x9e>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	da38      	bge.n	8008130 <_puts_r+0xc4>
 80080be:	4622      	mov	r2, r4
 80080c0:	210a      	movs	r1, #10
 80080c2:	4628      	mov	r0, r5
 80080c4:	f001 f800 	bl	80090c8 <__swbuf_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d011      	beq.n	80080f0 <_puts_r+0x84>
 80080cc:	250a      	movs	r5, #10
 80080ce:	e011      	b.n	80080f4 <_puts_r+0x88>
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <_puts_r+0xd4>)
 80080d2:	429c      	cmp	r4, r3
 80080d4:	d101      	bne.n	80080da <_puts_r+0x6e>
 80080d6:	68ac      	ldr	r4, [r5, #8]
 80080d8:	e7da      	b.n	8008090 <_puts_r+0x24>
 80080da:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <_puts_r+0xd8>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	bf08      	it	eq
 80080e0:	68ec      	ldreq	r4, [r5, #12]
 80080e2:	e7d5      	b.n	8008090 <_puts_r+0x24>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4628      	mov	r0, r5
 80080e8:	f001 f840 	bl	800916c <__swsetup_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d0dd      	beq.n	80080ac <_puts_r+0x40>
 80080f0:	f04f 35ff 	mov.w	r5, #4294967295
 80080f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f6:	07da      	lsls	r2, r3, #31
 80080f8:	d405      	bmi.n	8008106 <_puts_r+0x9a>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	059b      	lsls	r3, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_puts_r+0x9a>
 8008100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008102:	f002 fc79 	bl	800a9f8 <__retarget_lock_release_recursive>
 8008106:	4628      	mov	r0, r5
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	2b00      	cmp	r3, #0
 800810c:	da04      	bge.n	8008118 <_puts_r+0xac>
 800810e:	69a2      	ldr	r2, [r4, #24]
 8008110:	429a      	cmp	r2, r3
 8008112:	dc06      	bgt.n	8008122 <_puts_r+0xb6>
 8008114:	290a      	cmp	r1, #10
 8008116:	d004      	beq.n	8008122 <_puts_r+0xb6>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	6022      	str	r2, [r4, #0]
 800811e:	7019      	strb	r1, [r3, #0]
 8008120:	e7c5      	b.n	80080ae <_puts_r+0x42>
 8008122:	4622      	mov	r2, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f000 ffcf 	bl	80090c8 <__swbuf_r>
 800812a:	3001      	adds	r0, #1
 800812c:	d1bf      	bne.n	80080ae <_puts_r+0x42>
 800812e:	e7df      	b.n	80080f0 <_puts_r+0x84>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	250a      	movs	r5, #10
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	701d      	strb	r5, [r3, #0]
 800813a:	e7db      	b.n	80080f4 <_puts_r+0x88>
 800813c:	0800c28c 	.word	0x0800c28c
 8008140:	0800c2ac 	.word	0x0800c2ac
 8008144:	0800c26c 	.word	0x0800c26c

08008148 <puts>:
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <puts+0xc>)
 800814a:	4601      	mov	r1, r0
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	f7ff bf8d 	b.w	800806c <_puts_r>
 8008152:	bf00      	nop
 8008154:	2000001c 	.word	0x2000001c

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7fa fe6a 	bl	8002e3c <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20000544 	.word	0x20000544

08008178 <nanf>:
 8008178:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008180 <nanf+0x8>
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	7fc00000 	.word	0x7fc00000

08008184 <siprintf>:
 8008184:	b40e      	push	{r1, r2, r3}
 8008186:	b500      	push	{lr}
 8008188:	b09c      	sub	sp, #112	; 0x70
 800818a:	ab1d      	add	r3, sp, #116	; 0x74
 800818c:	9002      	str	r0, [sp, #8]
 800818e:	9006      	str	r0, [sp, #24]
 8008190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008194:	4809      	ldr	r0, [pc, #36]	; (80081bc <siprintf+0x38>)
 8008196:	9107      	str	r1, [sp, #28]
 8008198:	9104      	str	r1, [sp, #16]
 800819a:	4909      	ldr	r1, [pc, #36]	; (80081c0 <siprintf+0x3c>)
 800819c:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	6800      	ldr	r0, [r0, #0]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	a902      	add	r1, sp, #8
 80081a8:	f003 f9dc 	bl	800b564 <_svfiprintf_r>
 80081ac:	9b02      	ldr	r3, [sp, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	b01c      	add	sp, #112	; 0x70
 80081b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081b8:	b003      	add	sp, #12
 80081ba:	4770      	bx	lr
 80081bc:	2000001c 	.word	0x2000001c
 80081c0:	ffff0208 	.word	0xffff0208

080081c4 <strdup>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <strdup+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 b803 	b.w	80081d4 <_strdup_r>
 80081ce:	bf00      	nop
 80081d0:	2000001c 	.word	0x2000001c

080081d4 <_strdup_r>:
 80081d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	460d      	mov	r5, r1
 80081dc:	f7f8 f800 	bl	80001e0 <strlen>
 80081e0:	1c42      	adds	r2, r0, #1
 80081e2:	4611      	mov	r1, r2
 80081e4:	4620      	mov	r0, r4
 80081e6:	9201      	str	r2, [sp, #4]
 80081e8:	f7ff f83a 	bl	8007260 <_malloc_r>
 80081ec:	4604      	mov	r4, r0
 80081ee:	b118      	cbz	r0, 80081f8 <_strdup_r+0x24>
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7fe ffb2 	bl	800715c <memcpy>
 80081f8:	4620      	mov	r0, r4
 80081fa:	b003      	add	sp, #12
 80081fc:	bd30      	pop	{r4, r5, pc}

080081fe <sulp>:
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	ec45 4b10 	vmov	d0, r4, r5
 8008208:	4616      	mov	r6, r2
 800820a:	f002 ffeb 	bl	800b1e4 <__ulp>
 800820e:	ec51 0b10 	vmov	r0, r1, d0
 8008212:	b17e      	cbz	r6, 8008234 <sulp+0x36>
 8008214:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd09      	ble.n	8008234 <sulp+0x36>
 8008220:	051b      	lsls	r3, r3, #20
 8008222:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008226:	2400      	movs	r4, #0
 8008228:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	f7f8 f9ea 	bl	8000608 <__aeabi_dmul>
 8008234:	bd70      	pop	{r4, r5, r6, pc}
	...

08008238 <_strtod_l>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	ed2d 8b02 	vpush	{d8}
 8008240:	b09d      	sub	sp, #116	; 0x74
 8008242:	461f      	mov	r7, r3
 8008244:	2300      	movs	r3, #0
 8008246:	9318      	str	r3, [sp, #96]	; 0x60
 8008248:	4ba2      	ldr	r3, [pc, #648]	; (80084d4 <_strtod_l+0x29c>)
 800824a:	9213      	str	r2, [sp, #76]	; 0x4c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	9305      	str	r3, [sp, #20]
 8008250:	4604      	mov	r4, r0
 8008252:	4618      	mov	r0, r3
 8008254:	4688      	mov	r8, r1
 8008256:	f7f7 ffc3 	bl	80001e0 <strlen>
 800825a:	f04f 0a00 	mov.w	sl, #0
 800825e:	4605      	mov	r5, r0
 8008260:	f04f 0b00 	mov.w	fp, #0
 8008264:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	2a2b      	cmp	r2, #43	; 0x2b
 800826e:	d04e      	beq.n	800830e <_strtod_l+0xd6>
 8008270:	d83b      	bhi.n	80082ea <_strtod_l+0xb2>
 8008272:	2a0d      	cmp	r2, #13
 8008274:	d834      	bhi.n	80082e0 <_strtod_l+0xa8>
 8008276:	2a08      	cmp	r2, #8
 8008278:	d834      	bhi.n	80082e4 <_strtod_l+0xac>
 800827a:	2a00      	cmp	r2, #0
 800827c:	d03e      	beq.n	80082fc <_strtod_l+0xc4>
 800827e:	2300      	movs	r3, #0
 8008280:	930a      	str	r3, [sp, #40]	; 0x28
 8008282:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008284:	7833      	ldrb	r3, [r6, #0]
 8008286:	2b30      	cmp	r3, #48	; 0x30
 8008288:	f040 80b0 	bne.w	80083ec <_strtod_l+0x1b4>
 800828c:	7873      	ldrb	r3, [r6, #1]
 800828e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008292:	2b58      	cmp	r3, #88	; 0x58
 8008294:	d168      	bne.n	8008368 <_strtod_l+0x130>
 8008296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	ab18      	add	r3, sp, #96	; 0x60
 800829c:	9702      	str	r7, [sp, #8]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4a8d      	ldr	r2, [pc, #564]	; (80084d8 <_strtod_l+0x2a0>)
 80082a2:	ab19      	add	r3, sp, #100	; 0x64
 80082a4:	a917      	add	r1, sp, #92	; 0x5c
 80082a6:	4620      	mov	r0, r4
 80082a8:	f002 f898 	bl	800a3dc <__gethex>
 80082ac:	f010 0707 	ands.w	r7, r0, #7
 80082b0:	4605      	mov	r5, r0
 80082b2:	d005      	beq.n	80082c0 <_strtod_l+0x88>
 80082b4:	2f06      	cmp	r7, #6
 80082b6:	d12c      	bne.n	8008312 <_strtod_l+0xda>
 80082b8:	3601      	adds	r6, #1
 80082ba:	2300      	movs	r3, #0
 80082bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80082be:	930a      	str	r3, [sp, #40]	; 0x28
 80082c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f040 8590 	bne.w	8008de8 <_strtod_l+0xbb0>
 80082c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ca:	b1eb      	cbz	r3, 8008308 <_strtod_l+0xd0>
 80082cc:	4652      	mov	r2, sl
 80082ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082d2:	ec43 2b10 	vmov	d0, r2, r3
 80082d6:	b01d      	add	sp, #116	; 0x74
 80082d8:	ecbd 8b02 	vpop	{d8}
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	2a20      	cmp	r2, #32
 80082e2:	d1cc      	bne.n	800827e <_strtod_l+0x46>
 80082e4:	3301      	adds	r3, #1
 80082e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80082e8:	e7be      	b.n	8008268 <_strtod_l+0x30>
 80082ea:	2a2d      	cmp	r2, #45	; 0x2d
 80082ec:	d1c7      	bne.n	800827e <_strtod_l+0x46>
 80082ee:	2201      	movs	r2, #1
 80082f0:	920a      	str	r2, [sp, #40]	; 0x28
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1c2      	bne.n	8008282 <_strtod_l+0x4a>
 80082fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 856e 	bne.w	8008de4 <_strtod_l+0xbac>
 8008308:	4652      	mov	r2, sl
 800830a:	465b      	mov	r3, fp
 800830c:	e7e1      	b.n	80082d2 <_strtod_l+0x9a>
 800830e:	2200      	movs	r2, #0
 8008310:	e7ee      	b.n	80082f0 <_strtod_l+0xb8>
 8008312:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008314:	b13a      	cbz	r2, 8008326 <_strtod_l+0xee>
 8008316:	2135      	movs	r1, #53	; 0x35
 8008318:	a81a      	add	r0, sp, #104	; 0x68
 800831a:	f003 f86e 	bl	800b3fa <__copybits>
 800831e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008320:	4620      	mov	r0, r4
 8008322:	f002 fc2d 	bl	800ab80 <_Bfree>
 8008326:	3f01      	subs	r7, #1
 8008328:	2f04      	cmp	r7, #4
 800832a:	d806      	bhi.n	800833a <_strtod_l+0x102>
 800832c:	e8df f007 	tbb	[pc, r7]
 8008330:	1714030a 	.word	0x1714030a
 8008334:	0a          	.byte	0x0a
 8008335:	00          	.byte	0x00
 8008336:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800833a:	0728      	lsls	r0, r5, #28
 800833c:	d5c0      	bpl.n	80082c0 <_strtod_l+0x88>
 800833e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008342:	e7bd      	b.n	80082c0 <_strtod_l+0x88>
 8008344:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800834a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800834e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008352:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008356:	e7f0      	b.n	800833a <_strtod_l+0x102>
 8008358:	f8df b180 	ldr.w	fp, [pc, #384]	; 80084dc <_strtod_l+0x2a4>
 800835c:	e7ed      	b.n	800833a <_strtod_l+0x102>
 800835e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008362:	f04f 3aff 	mov.w	sl, #4294967295
 8008366:	e7e8      	b.n	800833a <_strtod_l+0x102>
 8008368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	9217      	str	r2, [sp, #92]	; 0x5c
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b30      	cmp	r3, #48	; 0x30
 8008372:	d0f9      	beq.n	8008368 <_strtod_l+0x130>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0a3      	beq.n	80082c0 <_strtod_l+0x88>
 8008378:	2301      	movs	r3, #1
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	f8cd 901c 	str.w	r9, [sp, #28]
 8008388:	464f      	mov	r7, r9
 800838a:	220a      	movs	r2, #10
 800838c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800838e:	7806      	ldrb	r6, [r0, #0]
 8008390:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008394:	b2d9      	uxtb	r1, r3
 8008396:	2909      	cmp	r1, #9
 8008398:	d92a      	bls.n	80083f0 <_strtod_l+0x1b8>
 800839a:	9905      	ldr	r1, [sp, #20]
 800839c:	462a      	mov	r2, r5
 800839e:	f003 fb86 	bl	800baae <strncmp>
 80083a2:	b398      	cbz	r0, 800840c <_strtod_l+0x1d4>
 80083a4:	2000      	movs	r0, #0
 80083a6:	4632      	mov	r2, r6
 80083a8:	463d      	mov	r5, r7
 80083aa:	9005      	str	r0, [sp, #20]
 80083ac:	4603      	mov	r3, r0
 80083ae:	2a65      	cmp	r2, #101	; 0x65
 80083b0:	d001      	beq.n	80083b6 <_strtod_l+0x17e>
 80083b2:	2a45      	cmp	r2, #69	; 0x45
 80083b4:	d118      	bne.n	80083e8 <_strtod_l+0x1b0>
 80083b6:	b91d      	cbnz	r5, 80083c0 <_strtod_l+0x188>
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	4302      	orrs	r2, r0
 80083bc:	d09e      	beq.n	80082fc <_strtod_l+0xc4>
 80083be:	2500      	movs	r5, #0
 80083c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80083c4:	f108 0201 	add.w	r2, r8, #1
 80083c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80083ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80083ce:	2a2b      	cmp	r2, #43	; 0x2b
 80083d0:	d075      	beq.n	80084be <_strtod_l+0x286>
 80083d2:	2a2d      	cmp	r2, #45	; 0x2d
 80083d4:	d07b      	beq.n	80084ce <_strtod_l+0x296>
 80083d6:	f04f 0c00 	mov.w	ip, #0
 80083da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80083de:	2909      	cmp	r1, #9
 80083e0:	f240 8082 	bls.w	80084e8 <_strtod_l+0x2b0>
 80083e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083e8:	2600      	movs	r6, #0
 80083ea:	e09d      	b.n	8008528 <_strtod_l+0x2f0>
 80083ec:	2300      	movs	r3, #0
 80083ee:	e7c4      	b.n	800837a <_strtod_l+0x142>
 80083f0:	2f08      	cmp	r7, #8
 80083f2:	bfd8      	it	le
 80083f4:	9907      	ldrle	r1, [sp, #28]
 80083f6:	f100 0001 	add.w	r0, r0, #1
 80083fa:	bfda      	itte	le
 80083fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008400:	9307      	strle	r3, [sp, #28]
 8008402:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008406:	3701      	adds	r7, #1
 8008408:	9017      	str	r0, [sp, #92]	; 0x5c
 800840a:	e7bf      	b.n	800838c <_strtod_l+0x154>
 800840c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800840e:	195a      	adds	r2, r3, r5
 8008410:	9217      	str	r2, [sp, #92]	; 0x5c
 8008412:	5d5a      	ldrb	r2, [r3, r5]
 8008414:	2f00      	cmp	r7, #0
 8008416:	d037      	beq.n	8008488 <_strtod_l+0x250>
 8008418:	9005      	str	r0, [sp, #20]
 800841a:	463d      	mov	r5, r7
 800841c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008420:	2b09      	cmp	r3, #9
 8008422:	d912      	bls.n	800844a <_strtod_l+0x212>
 8008424:	2301      	movs	r3, #1
 8008426:	e7c2      	b.n	80083ae <_strtod_l+0x176>
 8008428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	9217      	str	r2, [sp, #92]	; 0x5c
 800842e:	785a      	ldrb	r2, [r3, #1]
 8008430:	3001      	adds	r0, #1
 8008432:	2a30      	cmp	r2, #48	; 0x30
 8008434:	d0f8      	beq.n	8008428 <_strtod_l+0x1f0>
 8008436:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800843a:	2b08      	cmp	r3, #8
 800843c:	f200 84d9 	bhi.w	8008df2 <_strtod_l+0xbba>
 8008440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008442:	9005      	str	r0, [sp, #20]
 8008444:	2000      	movs	r0, #0
 8008446:	9308      	str	r3, [sp, #32]
 8008448:	4605      	mov	r5, r0
 800844a:	3a30      	subs	r2, #48	; 0x30
 800844c:	f100 0301 	add.w	r3, r0, #1
 8008450:	d014      	beq.n	800847c <_strtod_l+0x244>
 8008452:	9905      	ldr	r1, [sp, #20]
 8008454:	4419      	add	r1, r3
 8008456:	9105      	str	r1, [sp, #20]
 8008458:	462b      	mov	r3, r5
 800845a:	eb00 0e05 	add.w	lr, r0, r5
 800845e:	210a      	movs	r1, #10
 8008460:	4573      	cmp	r3, lr
 8008462:	d113      	bne.n	800848c <_strtod_l+0x254>
 8008464:	182b      	adds	r3, r5, r0
 8008466:	2b08      	cmp	r3, #8
 8008468:	f105 0501 	add.w	r5, r5, #1
 800846c:	4405      	add	r5, r0
 800846e:	dc1c      	bgt.n	80084aa <_strtod_l+0x272>
 8008470:	9907      	ldr	r1, [sp, #28]
 8008472:	230a      	movs	r3, #10
 8008474:	fb03 2301 	mla	r3, r3, r1, r2
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	2300      	movs	r3, #0
 800847c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800847e:	1c51      	adds	r1, r2, #1
 8008480:	9117      	str	r1, [sp, #92]	; 0x5c
 8008482:	7852      	ldrb	r2, [r2, #1]
 8008484:	4618      	mov	r0, r3
 8008486:	e7c9      	b.n	800841c <_strtod_l+0x1e4>
 8008488:	4638      	mov	r0, r7
 800848a:	e7d2      	b.n	8008432 <_strtod_l+0x1fa>
 800848c:	2b08      	cmp	r3, #8
 800848e:	dc04      	bgt.n	800849a <_strtod_l+0x262>
 8008490:	9e07      	ldr	r6, [sp, #28]
 8008492:	434e      	muls	r6, r1
 8008494:	9607      	str	r6, [sp, #28]
 8008496:	3301      	adds	r3, #1
 8008498:	e7e2      	b.n	8008460 <_strtod_l+0x228>
 800849a:	f103 0c01 	add.w	ip, r3, #1
 800849e:	f1bc 0f10 	cmp.w	ip, #16
 80084a2:	bfd8      	it	le
 80084a4:	fb01 f909 	mulle.w	r9, r1, r9
 80084a8:	e7f5      	b.n	8008496 <_strtod_l+0x25e>
 80084aa:	2d10      	cmp	r5, #16
 80084ac:	bfdc      	itt	le
 80084ae:	230a      	movle	r3, #10
 80084b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80084b4:	e7e1      	b.n	800847a <_strtod_l+0x242>
 80084b6:	2300      	movs	r3, #0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	2301      	movs	r3, #1
 80084bc:	e77c      	b.n	80083b8 <_strtod_l+0x180>
 80084be:	f04f 0c00 	mov.w	ip, #0
 80084c2:	f108 0202 	add.w	r2, r8, #2
 80084c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80084c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80084cc:	e785      	b.n	80083da <_strtod_l+0x1a2>
 80084ce:	f04f 0c01 	mov.w	ip, #1
 80084d2:	e7f6      	b.n	80084c2 <_strtod_l+0x28a>
 80084d4:	0800c334 	.word	0x0800c334
 80084d8:	0800bfec 	.word	0x0800bfec
 80084dc:	7ff00000 	.word	0x7ff00000
 80084e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084e2:	1c51      	adds	r1, r2, #1
 80084e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80084e6:	7852      	ldrb	r2, [r2, #1]
 80084e8:	2a30      	cmp	r2, #48	; 0x30
 80084ea:	d0f9      	beq.n	80084e0 <_strtod_l+0x2a8>
 80084ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80084f0:	2908      	cmp	r1, #8
 80084f2:	f63f af79 	bhi.w	80083e8 <_strtod_l+0x1b0>
 80084f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80084fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084fc:	9206      	str	r2, [sp, #24]
 80084fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008500:	1c51      	adds	r1, r2, #1
 8008502:	9117      	str	r1, [sp, #92]	; 0x5c
 8008504:	7852      	ldrb	r2, [r2, #1]
 8008506:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800850a:	2e09      	cmp	r6, #9
 800850c:	d937      	bls.n	800857e <_strtod_l+0x346>
 800850e:	9e06      	ldr	r6, [sp, #24]
 8008510:	1b89      	subs	r1, r1, r6
 8008512:	2908      	cmp	r1, #8
 8008514:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008518:	dc02      	bgt.n	8008520 <_strtod_l+0x2e8>
 800851a:	4576      	cmp	r6, lr
 800851c:	bfa8      	it	ge
 800851e:	4676      	movge	r6, lr
 8008520:	f1bc 0f00 	cmp.w	ip, #0
 8008524:	d000      	beq.n	8008528 <_strtod_l+0x2f0>
 8008526:	4276      	negs	r6, r6
 8008528:	2d00      	cmp	r5, #0
 800852a:	d14d      	bne.n	80085c8 <_strtod_l+0x390>
 800852c:	9904      	ldr	r1, [sp, #16]
 800852e:	4301      	orrs	r1, r0
 8008530:	f47f aec6 	bne.w	80082c0 <_strtod_l+0x88>
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f aee1 	bne.w	80082fc <_strtod_l+0xc4>
 800853a:	2a69      	cmp	r2, #105	; 0x69
 800853c:	d027      	beq.n	800858e <_strtod_l+0x356>
 800853e:	dc24      	bgt.n	800858a <_strtod_l+0x352>
 8008540:	2a49      	cmp	r2, #73	; 0x49
 8008542:	d024      	beq.n	800858e <_strtod_l+0x356>
 8008544:	2a4e      	cmp	r2, #78	; 0x4e
 8008546:	f47f aed9 	bne.w	80082fc <_strtod_l+0xc4>
 800854a:	499f      	ldr	r1, [pc, #636]	; (80087c8 <_strtod_l+0x590>)
 800854c:	a817      	add	r0, sp, #92	; 0x5c
 800854e:	f002 f99d 	bl	800a88c <__match>
 8008552:	2800      	cmp	r0, #0
 8008554:	f43f aed2 	beq.w	80082fc <_strtod_l+0xc4>
 8008558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b28      	cmp	r3, #40	; 0x28
 800855e:	d12d      	bne.n	80085bc <_strtod_l+0x384>
 8008560:	499a      	ldr	r1, [pc, #616]	; (80087cc <_strtod_l+0x594>)
 8008562:	aa1a      	add	r2, sp, #104	; 0x68
 8008564:	a817      	add	r0, sp, #92	; 0x5c
 8008566:	f002 f9a5 	bl	800a8b4 <__hexnan>
 800856a:	2805      	cmp	r0, #5
 800856c:	d126      	bne.n	80085bc <_strtod_l+0x384>
 800856e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008570:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008574:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008578:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800857c:	e6a0      	b.n	80082c0 <_strtod_l+0x88>
 800857e:	210a      	movs	r1, #10
 8008580:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008584:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008588:	e7b9      	b.n	80084fe <_strtod_l+0x2c6>
 800858a:	2a6e      	cmp	r2, #110	; 0x6e
 800858c:	e7db      	b.n	8008546 <_strtod_l+0x30e>
 800858e:	4990      	ldr	r1, [pc, #576]	; (80087d0 <_strtod_l+0x598>)
 8008590:	a817      	add	r0, sp, #92	; 0x5c
 8008592:	f002 f97b 	bl	800a88c <__match>
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f aeb0 	beq.w	80082fc <_strtod_l+0xc4>
 800859c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800859e:	498d      	ldr	r1, [pc, #564]	; (80087d4 <_strtod_l+0x59c>)
 80085a0:	3b01      	subs	r3, #1
 80085a2:	a817      	add	r0, sp, #92	; 0x5c
 80085a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80085a6:	f002 f971 	bl	800a88c <__match>
 80085aa:	b910      	cbnz	r0, 80085b2 <_strtod_l+0x37a>
 80085ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ae:	3301      	adds	r3, #1
 80085b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80085b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80087e4 <_strtod_l+0x5ac>
 80085b6:	f04f 0a00 	mov.w	sl, #0
 80085ba:	e681      	b.n	80082c0 <_strtod_l+0x88>
 80085bc:	4886      	ldr	r0, [pc, #536]	; (80087d8 <_strtod_l+0x5a0>)
 80085be:	f003 fa2b 	bl	800ba18 <nan>
 80085c2:	ec5b ab10 	vmov	sl, fp, d0
 80085c6:	e67b      	b.n	80082c0 <_strtod_l+0x88>
 80085c8:	9b05      	ldr	r3, [sp, #20]
 80085ca:	9807      	ldr	r0, [sp, #28]
 80085cc:	1af3      	subs	r3, r6, r3
 80085ce:	2f00      	cmp	r7, #0
 80085d0:	bf08      	it	eq
 80085d2:	462f      	moveq	r7, r5
 80085d4:	2d10      	cmp	r5, #16
 80085d6:	9306      	str	r3, [sp, #24]
 80085d8:	46a8      	mov	r8, r5
 80085da:	bfa8      	it	ge
 80085dc:	f04f 0810 	movge.w	r8, #16
 80085e0:	f7f7 ff98 	bl	8000514 <__aeabi_ui2d>
 80085e4:	2d09      	cmp	r5, #9
 80085e6:	4682      	mov	sl, r0
 80085e8:	468b      	mov	fp, r1
 80085ea:	dd13      	ble.n	8008614 <_strtod_l+0x3dc>
 80085ec:	4b7b      	ldr	r3, [pc, #492]	; (80087dc <_strtod_l+0x5a4>)
 80085ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085f6:	f7f8 f807 	bl	8000608 <__aeabi_dmul>
 80085fa:	4682      	mov	sl, r0
 80085fc:	4648      	mov	r0, r9
 80085fe:	468b      	mov	fp, r1
 8008600:	f7f7 ff88 	bl	8000514 <__aeabi_ui2d>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4650      	mov	r0, sl
 800860a:	4659      	mov	r1, fp
 800860c:	f7f7 fe46 	bl	800029c <__adddf3>
 8008610:	4682      	mov	sl, r0
 8008612:	468b      	mov	fp, r1
 8008614:	2d0f      	cmp	r5, #15
 8008616:	dc38      	bgt.n	800868a <_strtod_l+0x452>
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f43f ae50 	beq.w	80082c0 <_strtod_l+0x88>
 8008620:	dd24      	ble.n	800866c <_strtod_l+0x434>
 8008622:	2b16      	cmp	r3, #22
 8008624:	dc0b      	bgt.n	800863e <_strtod_l+0x406>
 8008626:	496d      	ldr	r1, [pc, #436]	; (80087dc <_strtod_l+0x5a4>)
 8008628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800862c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008630:	4652      	mov	r2, sl
 8008632:	465b      	mov	r3, fp
 8008634:	f7f7 ffe8 	bl	8000608 <__aeabi_dmul>
 8008638:	4682      	mov	sl, r0
 800863a:	468b      	mov	fp, r1
 800863c:	e640      	b.n	80082c0 <_strtod_l+0x88>
 800863e:	9a06      	ldr	r2, [sp, #24]
 8008640:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008644:	4293      	cmp	r3, r2
 8008646:	db20      	blt.n	800868a <_strtod_l+0x452>
 8008648:	4c64      	ldr	r4, [pc, #400]	; (80087dc <_strtod_l+0x5a4>)
 800864a:	f1c5 050f 	rsb	r5, r5, #15
 800864e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008652:	4652      	mov	r2, sl
 8008654:	465b      	mov	r3, fp
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	f7f7 ffd5 	bl	8000608 <__aeabi_dmul>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	1b5d      	subs	r5, r3, r5
 8008662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800866a:	e7e3      	b.n	8008634 <_strtod_l+0x3fc>
 800866c:	9b06      	ldr	r3, [sp, #24]
 800866e:	3316      	adds	r3, #22
 8008670:	db0b      	blt.n	800868a <_strtod_l+0x452>
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	1b9e      	subs	r6, r3, r6
 8008676:	4b59      	ldr	r3, [pc, #356]	; (80087dc <_strtod_l+0x5a4>)
 8008678:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800867c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008680:	4650      	mov	r0, sl
 8008682:	4659      	mov	r1, fp
 8008684:	f7f8 f8ea 	bl	800085c <__aeabi_ddiv>
 8008688:	e7d6      	b.n	8008638 <_strtod_l+0x400>
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	eba5 0808 	sub.w	r8, r5, r8
 8008690:	4498      	add	r8, r3
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	dd74      	ble.n	8008782 <_strtod_l+0x54a>
 8008698:	f018 030f 	ands.w	r3, r8, #15
 800869c:	d00a      	beq.n	80086b4 <_strtod_l+0x47c>
 800869e:	494f      	ldr	r1, [pc, #316]	; (80087dc <_strtod_l+0x5a4>)
 80086a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086a4:	4652      	mov	r2, sl
 80086a6:	465b      	mov	r3, fp
 80086a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	f038 080f 	bics.w	r8, r8, #15
 80086b8:	d04f      	beq.n	800875a <_strtod_l+0x522>
 80086ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80086be:	dd22      	ble.n	8008706 <_strtod_l+0x4ce>
 80086c0:	2500      	movs	r5, #0
 80086c2:	462e      	mov	r6, r5
 80086c4:	9507      	str	r5, [sp, #28]
 80086c6:	9505      	str	r5, [sp, #20]
 80086c8:	2322      	movs	r3, #34	; 0x22
 80086ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80087e4 <_strtod_l+0x5ac>
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	f04f 0a00 	mov.w	sl, #0
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f43f adf2 	beq.w	80082c0 <_strtod_l+0x88>
 80086dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086de:	4620      	mov	r0, r4
 80086e0:	f002 fa4e 	bl	800ab80 <_Bfree>
 80086e4:	9905      	ldr	r1, [sp, #20]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f002 fa4a 	bl	800ab80 <_Bfree>
 80086ec:	4631      	mov	r1, r6
 80086ee:	4620      	mov	r0, r4
 80086f0:	f002 fa46 	bl	800ab80 <_Bfree>
 80086f4:	9907      	ldr	r1, [sp, #28]
 80086f6:	4620      	mov	r0, r4
 80086f8:	f002 fa42 	bl	800ab80 <_Bfree>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4620      	mov	r0, r4
 8008700:	f002 fa3e 	bl	800ab80 <_Bfree>
 8008704:	e5dc      	b.n	80082c0 <_strtod_l+0x88>
 8008706:	4b36      	ldr	r3, [pc, #216]	; (80087e0 <_strtod_l+0x5a8>)
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	2300      	movs	r3, #0
 800870c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	4699      	mov	r9, r3
 8008716:	f1b8 0f01 	cmp.w	r8, #1
 800871a:	dc21      	bgt.n	8008760 <_strtod_l+0x528>
 800871c:	b10b      	cbz	r3, 8008722 <_strtod_l+0x4ea>
 800871e:	4682      	mov	sl, r0
 8008720:	468b      	mov	fp, r1
 8008722:	4b2f      	ldr	r3, [pc, #188]	; (80087e0 <_strtod_l+0x5a8>)
 8008724:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008728:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800872c:	4652      	mov	r2, sl
 800872e:	465b      	mov	r3, fp
 8008730:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	4b2a      	ldr	r3, [pc, #168]	; (80087e4 <_strtod_l+0x5ac>)
 800873a:	460a      	mov	r2, r1
 800873c:	400b      	ands	r3, r1
 800873e:	492a      	ldr	r1, [pc, #168]	; (80087e8 <_strtod_l+0x5b0>)
 8008740:	428b      	cmp	r3, r1
 8008742:	4682      	mov	sl, r0
 8008744:	d8bc      	bhi.n	80086c0 <_strtod_l+0x488>
 8008746:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800874a:	428b      	cmp	r3, r1
 800874c:	bf86      	itte	hi
 800874e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80087ec <_strtod_l+0x5b4>
 8008752:	f04f 3aff 	movhi.w	sl, #4294967295
 8008756:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800875a:	2300      	movs	r3, #0
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	e084      	b.n	800886a <_strtod_l+0x632>
 8008760:	f018 0f01 	tst.w	r8, #1
 8008764:	d005      	beq.n	8008772 <_strtod_l+0x53a>
 8008766:	9b04      	ldr	r3, [sp, #16]
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f7 ff4c 	bl	8000608 <__aeabi_dmul>
 8008770:	2301      	movs	r3, #1
 8008772:	9a04      	ldr	r2, [sp, #16]
 8008774:	3208      	adds	r2, #8
 8008776:	f109 0901 	add.w	r9, r9, #1
 800877a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800877e:	9204      	str	r2, [sp, #16]
 8008780:	e7c9      	b.n	8008716 <_strtod_l+0x4de>
 8008782:	d0ea      	beq.n	800875a <_strtod_l+0x522>
 8008784:	f1c8 0800 	rsb	r8, r8, #0
 8008788:	f018 020f 	ands.w	r2, r8, #15
 800878c:	d00a      	beq.n	80087a4 <_strtod_l+0x56c>
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <_strtod_l+0x5a4>)
 8008790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008794:	4650      	mov	r0, sl
 8008796:	4659      	mov	r1, fp
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f7f8 f85e 	bl	800085c <__aeabi_ddiv>
 80087a0:	4682      	mov	sl, r0
 80087a2:	468b      	mov	fp, r1
 80087a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80087a8:	d0d7      	beq.n	800875a <_strtod_l+0x522>
 80087aa:	f1b8 0f1f 	cmp.w	r8, #31
 80087ae:	dd1f      	ble.n	80087f0 <_strtod_l+0x5b8>
 80087b0:	2500      	movs	r5, #0
 80087b2:	462e      	mov	r6, r5
 80087b4:	9507      	str	r5, [sp, #28]
 80087b6:	9505      	str	r5, [sp, #20]
 80087b8:	2322      	movs	r3, #34	; 0x22
 80087ba:	f04f 0a00 	mov.w	sl, #0
 80087be:	f04f 0b00 	mov.w	fp, #0
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	e786      	b.n	80086d4 <_strtod_l+0x49c>
 80087c6:	bf00      	nop
 80087c8:	0800bfbd 	.word	0x0800bfbd
 80087cc:	0800c000 	.word	0x0800c000
 80087d0:	0800bfb5 	.word	0x0800bfb5
 80087d4:	0800c1f4 	.word	0x0800c1f4
 80087d8:	0800c0ef 	.word	0x0800c0ef
 80087dc:	0800c3d0 	.word	0x0800c3d0
 80087e0:	0800c3a8 	.word	0x0800c3a8
 80087e4:	7ff00000 	.word	0x7ff00000
 80087e8:	7ca00000 	.word	0x7ca00000
 80087ec:	7fefffff 	.word	0x7fefffff
 80087f0:	f018 0310 	ands.w	r3, r8, #16
 80087f4:	bf18      	it	ne
 80087f6:	236a      	movne	r3, #106	; 0x6a
 80087f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008ba8 <_strtod_l+0x970>
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	2300      	movs	r3, #0
 8008804:	f018 0f01 	tst.w	r8, #1
 8008808:	d004      	beq.n	8008814 <_strtod_l+0x5dc>
 800880a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	2301      	movs	r3, #1
 8008814:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008818:	f109 0908 	add.w	r9, r9, #8
 800881c:	d1f2      	bne.n	8008804 <_strtod_l+0x5cc>
 800881e:	b10b      	cbz	r3, 8008824 <_strtod_l+0x5ec>
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	b1c3      	cbz	r3, 800885a <_strtod_l+0x622>
 8008828:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800882c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008830:	2b00      	cmp	r3, #0
 8008832:	4659      	mov	r1, fp
 8008834:	dd11      	ble.n	800885a <_strtod_l+0x622>
 8008836:	2b1f      	cmp	r3, #31
 8008838:	f340 8124 	ble.w	8008a84 <_strtod_l+0x84c>
 800883c:	2b34      	cmp	r3, #52	; 0x34
 800883e:	bfde      	ittt	le
 8008840:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008844:	f04f 33ff 	movle.w	r3, #4294967295
 8008848:	fa03 f202 	lslle.w	r2, r3, r2
 800884c:	f04f 0a00 	mov.w	sl, #0
 8008850:	bfcc      	ite	gt
 8008852:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008856:	ea02 0b01 	andle.w	fp, r2, r1
 800885a:	2200      	movs	r2, #0
 800885c:	2300      	movs	r3, #0
 800885e:	4650      	mov	r0, sl
 8008860:	4659      	mov	r1, fp
 8008862:	f7f8 f939 	bl	8000ad8 <__aeabi_dcmpeq>
 8008866:	2800      	cmp	r0, #0
 8008868:	d1a2      	bne.n	80087b0 <_strtod_l+0x578>
 800886a:	9b07      	ldr	r3, [sp, #28]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	9908      	ldr	r1, [sp, #32]
 8008870:	462b      	mov	r3, r5
 8008872:	463a      	mov	r2, r7
 8008874:	4620      	mov	r0, r4
 8008876:	f002 f9eb 	bl	800ac50 <__s2b>
 800887a:	9007      	str	r0, [sp, #28]
 800887c:	2800      	cmp	r0, #0
 800887e:	f43f af1f 	beq.w	80086c0 <_strtod_l+0x488>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	1b9e      	subs	r6, r3, r6
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfb4      	ite	lt
 800888c:	4633      	movlt	r3, r6
 800888e:	2300      	movge	r3, #0
 8008890:	930c      	str	r3, [sp, #48]	; 0x30
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	2500      	movs	r5, #0
 8008896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800889a:	9312      	str	r3, [sp, #72]	; 0x48
 800889c:	462e      	mov	r6, r5
 800889e:	9b07      	ldr	r3, [sp, #28]
 80088a0:	4620      	mov	r0, r4
 80088a2:	6859      	ldr	r1, [r3, #4]
 80088a4:	f002 f92c 	bl	800ab00 <_Balloc>
 80088a8:	9005      	str	r0, [sp, #20]
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f43f af0c 	beq.w	80086c8 <_strtod_l+0x490>
 80088b0:	9b07      	ldr	r3, [sp, #28]
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	3202      	adds	r2, #2
 80088b6:	f103 010c 	add.w	r1, r3, #12
 80088ba:	0092      	lsls	r2, r2, #2
 80088bc:	300c      	adds	r0, #12
 80088be:	f7fe fc4d 	bl	800715c <memcpy>
 80088c2:	ec4b ab10 	vmov	d0, sl, fp
 80088c6:	aa1a      	add	r2, sp, #104	; 0x68
 80088c8:	a919      	add	r1, sp, #100	; 0x64
 80088ca:	4620      	mov	r0, r4
 80088cc:	f002 fd06 	bl	800b2dc <__d2b>
 80088d0:	ec4b ab18 	vmov	d8, sl, fp
 80088d4:	9018      	str	r0, [sp, #96]	; 0x60
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f aef6 	beq.w	80086c8 <_strtod_l+0x490>
 80088dc:	2101      	movs	r1, #1
 80088de:	4620      	mov	r0, r4
 80088e0:	f002 fa50 	bl	800ad84 <__i2b>
 80088e4:	4606      	mov	r6, r0
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f aeee 	beq.w	80086c8 <_strtod_l+0x490>
 80088ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088ee:	9904      	ldr	r1, [sp, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfab      	itete	ge
 80088f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80088f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80088f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80088fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80088fe:	bfac      	ite	ge
 8008900:	eb03 0902 	addge.w	r9, r3, r2
 8008904:	1ad7      	sublt	r7, r2, r3
 8008906:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008908:	eba3 0801 	sub.w	r8, r3, r1
 800890c:	4490      	add	r8, r2
 800890e:	4ba1      	ldr	r3, [pc, #644]	; (8008b94 <_strtod_l+0x95c>)
 8008910:	f108 38ff 	add.w	r8, r8, #4294967295
 8008914:	4598      	cmp	r8, r3
 8008916:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800891a:	f280 80c7 	bge.w	8008aac <_strtod_l+0x874>
 800891e:	eba3 0308 	sub.w	r3, r3, r8
 8008922:	2b1f      	cmp	r3, #31
 8008924:	eba2 0203 	sub.w	r2, r2, r3
 8008928:	f04f 0101 	mov.w	r1, #1
 800892c:	f300 80b1 	bgt.w	8008a92 <_strtod_l+0x85a>
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	930d      	str	r3, [sp, #52]	; 0x34
 8008936:	2300      	movs	r3, #0
 8008938:	9308      	str	r3, [sp, #32]
 800893a:	eb09 0802 	add.w	r8, r9, r2
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	45c1      	cmp	r9, r8
 8008942:	4417      	add	r7, r2
 8008944:	441f      	add	r7, r3
 8008946:	464b      	mov	r3, r9
 8008948:	bfa8      	it	ge
 800894a:	4643      	movge	r3, r8
 800894c:	42bb      	cmp	r3, r7
 800894e:	bfa8      	it	ge
 8008950:	463b      	movge	r3, r7
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfc2      	ittt	gt
 8008956:	eba8 0803 	subgt.w	r8, r8, r3
 800895a:	1aff      	subgt	r7, r7, r3
 800895c:	eba9 0903 	subgt.w	r9, r9, r3
 8008960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	dd17      	ble.n	8008996 <_strtod_l+0x75e>
 8008966:	4631      	mov	r1, r6
 8008968:	461a      	mov	r2, r3
 800896a:	4620      	mov	r0, r4
 800896c:	f002 faca 	bl	800af04 <__pow5mult>
 8008970:	4606      	mov	r6, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	f43f aea8 	beq.w	80086c8 <_strtod_l+0x490>
 8008978:	4601      	mov	r1, r0
 800897a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800897c:	4620      	mov	r0, r4
 800897e:	f002 fa17 	bl	800adb0 <__multiply>
 8008982:	900b      	str	r0, [sp, #44]	; 0x2c
 8008984:	2800      	cmp	r0, #0
 8008986:	f43f ae9f 	beq.w	80086c8 <_strtod_l+0x490>
 800898a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800898c:	4620      	mov	r0, r4
 800898e:	f002 f8f7 	bl	800ab80 <_Bfree>
 8008992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008994:	9318      	str	r3, [sp, #96]	; 0x60
 8008996:	f1b8 0f00 	cmp.w	r8, #0
 800899a:	f300 808c 	bgt.w	8008ab6 <_strtod_l+0x87e>
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd08      	ble.n	80089b6 <_strtod_l+0x77e>
 80089a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089a6:	9905      	ldr	r1, [sp, #20]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f002 faab 	bl	800af04 <__pow5mult>
 80089ae:	9005      	str	r0, [sp, #20]
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f43f ae89 	beq.w	80086c8 <_strtod_l+0x490>
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	dd08      	ble.n	80089cc <_strtod_l+0x794>
 80089ba:	9905      	ldr	r1, [sp, #20]
 80089bc:	463a      	mov	r2, r7
 80089be:	4620      	mov	r0, r4
 80089c0:	f002 fafa 	bl	800afb8 <__lshift>
 80089c4:	9005      	str	r0, [sp, #20]
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f ae7e 	beq.w	80086c8 <_strtod_l+0x490>
 80089cc:	f1b9 0f00 	cmp.w	r9, #0
 80089d0:	dd08      	ble.n	80089e4 <_strtod_l+0x7ac>
 80089d2:	4631      	mov	r1, r6
 80089d4:	464a      	mov	r2, r9
 80089d6:	4620      	mov	r0, r4
 80089d8:	f002 faee 	bl	800afb8 <__lshift>
 80089dc:	4606      	mov	r6, r0
 80089de:	2800      	cmp	r0, #0
 80089e0:	f43f ae72 	beq.w	80086c8 <_strtod_l+0x490>
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089e8:	4620      	mov	r0, r4
 80089ea:	f002 fb71 	bl	800b0d0 <__mdiff>
 80089ee:	4605      	mov	r5, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f43f ae69 	beq.w	80086c8 <_strtod_l+0x490>
 80089f6:	68c3      	ldr	r3, [r0, #12]
 80089f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fa:	2300      	movs	r3, #0
 80089fc:	60c3      	str	r3, [r0, #12]
 80089fe:	4631      	mov	r1, r6
 8008a00:	f002 fb4a 	bl	800b098 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	da60      	bge.n	8008aca <_strtod_l+0x892>
 8008a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0a:	ea53 030a 	orrs.w	r3, r3, sl
 8008a0e:	f040 8082 	bne.w	8008b16 <_strtod_l+0x8de>
 8008a12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d17d      	bne.n	8008b16 <_strtod_l+0x8de>
 8008a1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a1e:	0d1b      	lsrs	r3, r3, #20
 8008a20:	051b      	lsls	r3, r3, #20
 8008a22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a26:	d976      	bls.n	8008b16 <_strtod_l+0x8de>
 8008a28:	696b      	ldr	r3, [r5, #20]
 8008a2a:	b913      	cbnz	r3, 8008a32 <_strtod_l+0x7fa>
 8008a2c:	692b      	ldr	r3, [r5, #16]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	dd71      	ble.n	8008b16 <_strtod_l+0x8de>
 8008a32:	4629      	mov	r1, r5
 8008a34:	2201      	movs	r2, #1
 8008a36:	4620      	mov	r0, r4
 8008a38:	f002 fabe 	bl	800afb8 <__lshift>
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4605      	mov	r5, r0
 8008a40:	f002 fb2a 	bl	800b098 <__mcmp>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	dd66      	ble.n	8008b16 <_strtod_l+0x8de>
 8008a48:	9904      	ldr	r1, [sp, #16]
 8008a4a:	4a53      	ldr	r2, [pc, #332]	; (8008b98 <_strtod_l+0x960>)
 8008a4c:	465b      	mov	r3, fp
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	f000 8081 	beq.w	8008b56 <_strtod_l+0x91e>
 8008a54:	ea02 010b 	and.w	r1, r2, fp
 8008a58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a5c:	dc7b      	bgt.n	8008b56 <_strtod_l+0x91e>
 8008a5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a62:	f77f aea9 	ble.w	80087b8 <_strtod_l+0x580>
 8008a66:	4b4d      	ldr	r3, [pc, #308]	; (8008b9c <_strtod_l+0x964>)
 8008a68:	4650      	mov	r0, sl
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f7f7 fdcb 	bl	8000608 <__aeabi_dmul>
 8008a72:	460b      	mov	r3, r1
 8008a74:	4303      	orrs	r3, r0
 8008a76:	bf08      	it	eq
 8008a78:	2322      	moveq	r3, #34	; 0x22
 8008a7a:	4682      	mov	sl, r0
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	bf08      	it	eq
 8008a80:	6023      	streq	r3, [r4, #0]
 8008a82:	e62b      	b.n	80086dc <_strtod_l+0x4a4>
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	ea03 0a0a 	and.w	sl, r3, sl
 8008a90:	e6e3      	b.n	800885a <_strtod_l+0x622>
 8008a92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008aa2:	fa01 f308 	lsl.w	r3, r1, r8
 8008aa6:	9308      	str	r3, [sp, #32]
 8008aa8:	910d      	str	r1, [sp, #52]	; 0x34
 8008aaa:	e746      	b.n	800893a <_strtod_l+0x702>
 8008aac:	2300      	movs	r3, #0
 8008aae:	9308      	str	r3, [sp, #32]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ab4:	e741      	b.n	800893a <_strtod_l+0x702>
 8008ab6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4620      	mov	r0, r4
 8008abc:	f002 fa7c 	bl	800afb8 <__lshift>
 8008ac0:	9018      	str	r0, [sp, #96]	; 0x60
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f47f af6b 	bne.w	800899e <_strtod_l+0x766>
 8008ac8:	e5fe      	b.n	80086c8 <_strtod_l+0x490>
 8008aca:	465f      	mov	r7, fp
 8008acc:	d16e      	bne.n	8008bac <_strtod_l+0x974>
 8008ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ad0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ad4:	b342      	cbz	r2, 8008b28 <_strtod_l+0x8f0>
 8008ad6:	4a32      	ldr	r2, [pc, #200]	; (8008ba0 <_strtod_l+0x968>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d128      	bne.n	8008b2e <_strtod_l+0x8f6>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	4651      	mov	r1, sl
 8008ae0:	b1eb      	cbz	r3, 8008b1e <_strtod_l+0x8e6>
 8008ae2:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <_strtod_l+0x960>)
 8008ae4:	403b      	ands	r3, r7
 8008ae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aea:	f04f 32ff 	mov.w	r2, #4294967295
 8008aee:	d819      	bhi.n	8008b24 <_strtod_l+0x8ec>
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d117      	bne.n	8008b2e <_strtod_l+0x8f6>
 8008afe:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <_strtod_l+0x96c>)
 8008b00:	429f      	cmp	r7, r3
 8008b02:	d102      	bne.n	8008b0a <_strtod_l+0x8d2>
 8008b04:	3101      	adds	r1, #1
 8008b06:	f43f addf 	beq.w	80086c8 <_strtod_l+0x490>
 8008b0a:	4b23      	ldr	r3, [pc, #140]	; (8008b98 <_strtod_l+0x960>)
 8008b0c:	403b      	ands	r3, r7
 8008b0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008b12:	f04f 0a00 	mov.w	sl, #0
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1a4      	bne.n	8008a66 <_strtod_l+0x82e>
 8008b1c:	e5de      	b.n	80086dc <_strtod_l+0x4a4>
 8008b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b22:	e7ea      	b.n	8008afa <_strtod_l+0x8c2>
 8008b24:	4613      	mov	r3, r2
 8008b26:	e7e8      	b.n	8008afa <_strtod_l+0x8c2>
 8008b28:	ea53 030a 	orrs.w	r3, r3, sl
 8008b2c:	d08c      	beq.n	8008a48 <_strtod_l+0x810>
 8008b2e:	9b08      	ldr	r3, [sp, #32]
 8008b30:	b1db      	cbz	r3, 8008b6a <_strtod_l+0x932>
 8008b32:	423b      	tst	r3, r7
 8008b34:	d0ef      	beq.n	8008b16 <_strtod_l+0x8de>
 8008b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b38:	9a04      	ldr	r2, [sp, #16]
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	b1c3      	cbz	r3, 8008b72 <_strtod_l+0x93a>
 8008b40:	f7ff fb5d 	bl	80081fe <sulp>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	ec51 0b18 	vmov	r0, r1, d8
 8008b4c:	f7f7 fba6 	bl	800029c <__adddf3>
 8008b50:	4682      	mov	sl, r0
 8008b52:	468b      	mov	fp, r1
 8008b54:	e7df      	b.n	8008b16 <_strtod_l+0x8de>
 8008b56:	4013      	ands	r3, r2
 8008b58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b64:	f04f 3aff 	mov.w	sl, #4294967295
 8008b68:	e7d5      	b.n	8008b16 <_strtod_l+0x8de>
 8008b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6c:	ea13 0f0a 	tst.w	r3, sl
 8008b70:	e7e0      	b.n	8008b34 <_strtod_l+0x8fc>
 8008b72:	f7ff fb44 	bl	80081fe <sulp>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	ec51 0b18 	vmov	r0, r1, d8
 8008b7e:	f7f7 fb8b 	bl	8000298 <__aeabi_dsub>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2300      	movs	r3, #0
 8008b86:	4682      	mov	sl, r0
 8008b88:	468b      	mov	fp, r1
 8008b8a:	f7f7 ffa5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0c1      	beq.n	8008b16 <_strtod_l+0x8de>
 8008b92:	e611      	b.n	80087b8 <_strtod_l+0x580>
 8008b94:	fffffc02 	.word	0xfffffc02
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	39500000 	.word	0x39500000
 8008ba0:	000fffff 	.word	0x000fffff
 8008ba4:	7fefffff 	.word	0x7fefffff
 8008ba8:	0800c018 	.word	0x0800c018
 8008bac:	4631      	mov	r1, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f002 fbf0 	bl	800b394 <__ratio>
 8008bb4:	ec59 8b10 	vmov	r8, r9, d0
 8008bb8:	ee10 0a10 	vmov	r0, s0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 ff9c 	bl	8000b00 <__aeabi_dcmple>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d07a      	beq.n	8008cc2 <_strtod_l+0xa8a>
 8008bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04a      	beq.n	8008c68 <_strtod_l+0xa30>
 8008bd2:	4b95      	ldr	r3, [pc, #596]	; (8008e28 <_strtod_l+0xbf0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008e28 <_strtod_l+0xbf0>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	4b92      	ldr	r3, [pc, #584]	; (8008e2c <_strtod_l+0xbf4>)
 8008be4:	403b      	ands	r3, r7
 8008be6:	930d      	str	r3, [sp, #52]	; 0x34
 8008be8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bea:	4b91      	ldr	r3, [pc, #580]	; (8008e30 <_strtod_l+0xbf8>)
 8008bec:	429a      	cmp	r2, r3
 8008bee:	f040 80b0 	bne.w	8008d52 <_strtod_l+0xb1a>
 8008bf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008bfa:	ec4b ab10 	vmov	d0, sl, fp
 8008bfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c02:	f002 faef 	bl	800b1e4 <__ulp>
 8008c06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c0a:	ec53 2b10 	vmov	r2, r3, d0
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	4652      	mov	r2, sl
 8008c14:	465b      	mov	r3, fp
 8008c16:	f7f7 fb41 	bl	800029c <__adddf3>
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4983      	ldr	r1, [pc, #524]	; (8008e2c <_strtod_l+0xbf4>)
 8008c1e:	4a85      	ldr	r2, [pc, #532]	; (8008e34 <_strtod_l+0xbfc>)
 8008c20:	4019      	ands	r1, r3
 8008c22:	4291      	cmp	r1, r2
 8008c24:	4682      	mov	sl, r0
 8008c26:	d960      	bls.n	8008cea <_strtod_l+0xab2>
 8008c28:	ee18 3a90 	vmov	r3, s17
 8008c2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d104      	bne.n	8008c3e <_strtod_l+0xa06>
 8008c34:	ee18 3a10 	vmov	r3, s16
 8008c38:	3301      	adds	r3, #1
 8008c3a:	f43f ad45 	beq.w	80086c8 <_strtod_l+0x490>
 8008c3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008e40 <_strtod_l+0xc08>
 8008c42:	f04f 3aff 	mov.w	sl, #4294967295
 8008c46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f001 ff99 	bl	800ab80 <_Bfree>
 8008c4e:	9905      	ldr	r1, [sp, #20]
 8008c50:	4620      	mov	r0, r4
 8008c52:	f001 ff95 	bl	800ab80 <_Bfree>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f001 ff91 	bl	800ab80 <_Bfree>
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4620      	mov	r0, r4
 8008c62:	f001 ff8d 	bl	800ab80 <_Bfree>
 8008c66:	e61a      	b.n	800889e <_strtod_l+0x666>
 8008c68:	f1ba 0f00 	cmp.w	sl, #0
 8008c6c:	d11b      	bne.n	8008ca6 <_strtod_l+0xa6e>
 8008c6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c72:	b9f3      	cbnz	r3, 8008cb2 <_strtod_l+0xa7a>
 8008c74:	4b6c      	ldr	r3, [pc, #432]	; (8008e28 <_strtod_l+0xbf0>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 ff36 	bl	8000aec <__aeabi_dcmplt>
 8008c80:	b9d0      	cbnz	r0, 8008cb8 <_strtod_l+0xa80>
 8008c82:	4640      	mov	r0, r8
 8008c84:	4649      	mov	r1, r9
 8008c86:	4b6c      	ldr	r3, [pc, #432]	; (8008e38 <_strtod_l+0xc00>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f7f7 fcbd 	bl	8000608 <__aeabi_dmul>
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4689      	mov	r9, r1
 8008c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008c9a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ca4:	e79d      	b.n	8008be2 <_strtod_l+0x9aa>
 8008ca6:	f1ba 0f01 	cmp.w	sl, #1
 8008caa:	d102      	bne.n	8008cb2 <_strtod_l+0xa7a>
 8008cac:	2f00      	cmp	r7, #0
 8008cae:	f43f ad83 	beq.w	80087b8 <_strtod_l+0x580>
 8008cb2:	4b62      	ldr	r3, [pc, #392]	; (8008e3c <_strtod_l+0xc04>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	e78e      	b.n	8008bd6 <_strtod_l+0x99e>
 8008cb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008e38 <_strtod_l+0xc00>
 8008cbc:	f04f 0800 	mov.w	r8, #0
 8008cc0:	e7e7      	b.n	8008c92 <_strtod_l+0xa5a>
 8008cc2:	4b5d      	ldr	r3, [pc, #372]	; (8008e38 <_strtod_l+0xc00>)
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4689      	mov	r9, r1
 8008cd4:	b933      	cbnz	r3, 8008ce4 <_strtod_l+0xaac>
 8008cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cda:	900e      	str	r0, [sp, #56]	; 0x38
 8008cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ce2:	e7dd      	b.n	8008ca0 <_strtod_l+0xa68>
 8008ce4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008ce8:	e7f9      	b.n	8008cde <_strtod_l+0xaa6>
 8008cea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1a8      	bne.n	8008c46 <_strtod_l+0xa0e>
 8008cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cfa:	0d1b      	lsrs	r3, r3, #20
 8008cfc:	051b      	lsls	r3, r3, #20
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d1a1      	bne.n	8008c46 <_strtod_l+0xa0e>
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 ffdf 	bl	8000cc8 <__aeabi_d2lz>
 8008d0a:	f7f7 fc4f 	bl	80005ac <__aeabi_l2d>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fabf 	bl	8000298 <__aeabi_dsub>
 8008d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d20:	ea43 030a 	orr.w	r3, r3, sl
 8008d24:	4313      	orrs	r3, r2
 8008d26:	4680      	mov	r8, r0
 8008d28:	4689      	mov	r9, r1
 8008d2a:	d055      	beq.n	8008dd8 <_strtod_l+0xba0>
 8008d2c:	a336      	add	r3, pc, #216	; (adr r3, 8008e08 <_strtod_l+0xbd0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fedb 	bl	8000aec <__aeabi_dcmplt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f47f acd0 	bne.w	80086dc <_strtod_l+0x4a4>
 8008d3c:	a334      	add	r3, pc, #208	; (adr r3, 8008e10 <_strtod_l+0xbd8>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 feef 	bl	8000b28 <__aeabi_dcmpgt>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f af7b 	beq.w	8008c46 <_strtod_l+0xa0e>
 8008d50:	e4c4      	b.n	80086dc <_strtod_l+0x4a4>
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	b333      	cbz	r3, 8008da4 <_strtod_l+0xb6c>
 8008d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d5c:	d822      	bhi.n	8008da4 <_strtod_l+0xb6c>
 8008d5e:	a32e      	add	r3, pc, #184	; (adr r3, 8008e18 <_strtod_l+0xbe0>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	4640      	mov	r0, r8
 8008d66:	4649      	mov	r1, r9
 8008d68:	f7f7 feca 	bl	8000b00 <__aeabi_dcmple>
 8008d6c:	b1a0      	cbz	r0, 8008d98 <_strtod_l+0xb60>
 8008d6e:	4649      	mov	r1, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	f7f7 ff21 	bl	8000bb8 <__aeabi_d2uiz>
 8008d76:	2801      	cmp	r0, #1
 8008d78:	bf38      	it	cc
 8008d7a:	2001      	movcc	r0, #1
 8008d7c:	f7f7 fbca 	bl	8000514 <__aeabi_ui2d>
 8008d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d82:	4680      	mov	r8, r0
 8008d84:	4689      	mov	r9, r1
 8008d86:	bb23      	cbnz	r3, 8008dd2 <_strtod_l+0xb9a>
 8008d88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d8c:	9010      	str	r0, [sp, #64]	; 0x40
 8008d8e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008da8:	eeb0 0a48 	vmov.f32	s0, s16
 8008dac:	eef0 0a68 	vmov.f32	s1, s17
 8008db0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008db4:	f002 fa16 	bl	800b1e4 <__ulp>
 8008db8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dbc:	ec53 2b10 	vmov	r2, r3, d0
 8008dc0:	f7f7 fc22 	bl	8000608 <__aeabi_dmul>
 8008dc4:	ec53 2b18 	vmov	r2, r3, d8
 8008dc8:	f7f7 fa68 	bl	800029c <__adddf3>
 8008dcc:	4682      	mov	sl, r0
 8008dce:	468b      	mov	fp, r1
 8008dd0:	e78d      	b.n	8008cee <_strtod_l+0xab6>
 8008dd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008dd6:	e7db      	b.n	8008d90 <_strtod_l+0xb58>
 8008dd8:	a311      	add	r3, pc, #68	; (adr r3, 8008e20 <_strtod_l+0xbe8>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f7f7 fe85 	bl	8000aec <__aeabi_dcmplt>
 8008de2:	e7b2      	b.n	8008d4a <_strtod_l+0xb12>
 8008de4:	2300      	movs	r3, #0
 8008de6:	930a      	str	r3, [sp, #40]	; 0x28
 8008de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	f7ff ba6b 	b.w	80082c8 <_strtod_l+0x90>
 8008df2:	2a65      	cmp	r2, #101	; 0x65
 8008df4:	f43f ab5f 	beq.w	80084b6 <_strtod_l+0x27e>
 8008df8:	2a45      	cmp	r2, #69	; 0x45
 8008dfa:	f43f ab5c 	beq.w	80084b6 <_strtod_l+0x27e>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f7ff bb94 	b.w	800852c <_strtod_l+0x2f4>
 8008e04:	f3af 8000 	nop.w
 8008e08:	94a03595 	.word	0x94a03595
 8008e0c:	3fdfffff 	.word	0x3fdfffff
 8008e10:	35afe535 	.word	0x35afe535
 8008e14:	3fe00000 	.word	0x3fe00000
 8008e18:	ffc00000 	.word	0xffc00000
 8008e1c:	41dfffff 	.word	0x41dfffff
 8008e20:	94a03595 	.word	0x94a03595
 8008e24:	3fcfffff 	.word	0x3fcfffff
 8008e28:	3ff00000 	.word	0x3ff00000
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	7fe00000 	.word	0x7fe00000
 8008e34:	7c9fffff 	.word	0x7c9fffff
 8008e38:	3fe00000 	.word	0x3fe00000
 8008e3c:	bff00000 	.word	0xbff00000
 8008e40:	7fefffff 	.word	0x7fefffff

08008e44 <_strtod_r>:
 8008e44:	4b01      	ldr	r3, [pc, #4]	; (8008e4c <_strtod_r+0x8>)
 8008e46:	f7ff b9f7 	b.w	8008238 <_strtod_l>
 8008e4a:	bf00      	nop
 8008e4c:	20000084 	.word	0x20000084

08008e50 <strtof>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008f04 <strtof+0xb4>
 8008e58:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <strtof+0xa4>)
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	ed2d 8b02 	vpush	{d8}
 8008e60:	4601      	mov	r1, r0
 8008e62:	f8d8 0000 	ldr.w	r0, [r8]
 8008e66:	f7ff f9e7 	bl	8008238 <_strtod_l>
 8008e6a:	ec55 4b10 	vmov	r4, r5, d0
 8008e6e:	ee10 2a10 	vmov	r2, s0
 8008e72:	ee10 0a10 	vmov	r0, s0
 8008e76:	462b      	mov	r3, r5
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fe5f 	bl	8000b3c <__aeabi_dcmpun>
 8008e7e:	b190      	cbz	r0, 8008ea6 <strtof+0x56>
 8008e80:	2d00      	cmp	r5, #0
 8008e82:	481d      	ldr	r0, [pc, #116]	; (8008ef8 <strtof+0xa8>)
 8008e84:	da09      	bge.n	8008e9a <strtof+0x4a>
 8008e86:	f7ff f977 	bl	8008178 <nanf>
 8008e8a:	eeb1 8a40 	vneg.f32	s16, s0
 8008e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8008e92:	ecbd 8b02 	vpop	{d8}
 8008e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9a:	ecbd 8b02 	vpop	{d8}
 8008e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea2:	f7ff b969 	b.w	8008178 <nanf>
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fea5 	bl	8000bf8 <__aeabi_d2f>
 8008eae:	ee08 0a10 	vmov	s16, r0
 8008eb2:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008efc <strtof+0xac>
 8008eb6:	eeb0 7ac8 	vabs.f32	s14, s16
 8008eba:	eeb4 7a67 	vcmp.f32	s14, s15
 8008ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec2:	dde4      	ble.n	8008e8e <strtof+0x3e>
 8008ec4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <strtof+0xb0>)
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 fe33 	bl	8000b3c <__aeabi_dcmpun>
 8008ed6:	b940      	cbnz	r0, 8008eea <strtof+0x9a>
 8008ed8:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <strtof+0xb0>)
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fe0d 	bl	8000b00 <__aeabi_dcmple>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0d1      	beq.n	8008e8e <strtof+0x3e>
 8008eea:	f8d8 3000 	ldr.w	r3, [r8]
 8008eee:	2222      	movs	r2, #34	; 0x22
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	e7cc      	b.n	8008e8e <strtof+0x3e>
 8008ef4:	20000084 	.word	0x20000084
 8008ef8:	0800c0ef 	.word	0x0800c0ef
 8008efc:	7f7fffff 	.word	0x7f7fffff
 8008f00:	7fefffff 	.word	0x7fefffff
 8008f04:	2000001c 	.word	0x2000001c

08008f08 <strtok>:
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <strtok+0x5c>)
 8008f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f0c:	681e      	ldr	r6, [r3, #0]
 8008f0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008f10:	4605      	mov	r5, r0
 8008f12:	b9fc      	cbnz	r4, 8008f54 <strtok+0x4c>
 8008f14:	2050      	movs	r0, #80	; 0x50
 8008f16:	9101      	str	r1, [sp, #4]
 8008f18:	f7fe f910 	bl	800713c <malloc>
 8008f1c:	9901      	ldr	r1, [sp, #4]
 8008f1e:	65b0      	str	r0, [r6, #88]	; 0x58
 8008f20:	4602      	mov	r2, r0
 8008f22:	b920      	cbnz	r0, 8008f2e <strtok+0x26>
 8008f24:	4b10      	ldr	r3, [pc, #64]	; (8008f68 <strtok+0x60>)
 8008f26:	4811      	ldr	r0, [pc, #68]	; (8008f6c <strtok+0x64>)
 8008f28:	2157      	movs	r1, #87	; 0x57
 8008f2a:	f000 f98d 	bl	8009248 <__assert_func>
 8008f2e:	e9c0 4400 	strd	r4, r4, [r0]
 8008f32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008f36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008f3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008f3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008f42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008f46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008f4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008f4e:	6184      	str	r4, [r0, #24]
 8008f50:	7704      	strb	r4, [r0, #28]
 8008f52:	6244      	str	r4, [r0, #36]	; 0x24
 8008f54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008f56:	2301      	movs	r3, #1
 8008f58:	4628      	mov	r0, r5
 8008f5a:	b002      	add	sp, #8
 8008f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f60:	f000 b806 	b.w	8008f70 <__strtok_r>
 8008f64:	2000001c 	.word	0x2000001c
 8008f68:	0800c040 	.word	0x0800c040
 8008f6c:	0800c057 	.word	0x0800c057

08008f70 <__strtok_r>:
 8008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f72:	b908      	cbnz	r0, 8008f78 <__strtok_r+0x8>
 8008f74:	6810      	ldr	r0, [r2, #0]
 8008f76:	b188      	cbz	r0, 8008f9c <__strtok_r+0x2c>
 8008f78:	4604      	mov	r4, r0
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f80:	460f      	mov	r7, r1
 8008f82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f86:	b91e      	cbnz	r6, 8008f90 <__strtok_r+0x20>
 8008f88:	b965      	cbnz	r5, 8008fa4 <__strtok_r+0x34>
 8008f8a:	6015      	str	r5, [r2, #0]
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	e005      	b.n	8008f9c <__strtok_r+0x2c>
 8008f90:	42b5      	cmp	r5, r6
 8008f92:	d1f6      	bne.n	8008f82 <__strtok_r+0x12>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f0      	bne.n	8008f7a <__strtok_r+0xa>
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	7003      	strb	r3, [r0, #0]
 8008f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9e:	461c      	mov	r4, r3
 8008fa0:	e00c      	b.n	8008fbc <__strtok_r+0x4c>
 8008fa2:	b915      	cbnz	r5, 8008faa <__strtok_r+0x3a>
 8008fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fa8:	460e      	mov	r6, r1
 8008faa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008fae:	42ab      	cmp	r3, r5
 8008fb0:	d1f7      	bne.n	8008fa2 <__strtok_r+0x32>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0f3      	beq.n	8008f9e <__strtok_r+0x2e>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008fbc:	6014      	str	r4, [r2, #0]
 8008fbe:	e7ed      	b.n	8008f9c <__strtok_r+0x2c>

08008fc0 <_strtol_l.constprop.0>:
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc6:	d001      	beq.n	8008fcc <_strtol_l.constprop.0+0xc>
 8008fc8:	2b24      	cmp	r3, #36	; 0x24
 8008fca:	d906      	bls.n	8008fda <_strtol_l.constprop.0+0x1a>
 8008fcc:	f7fe f88c 	bl	80070e8 <__errno>
 8008fd0:	2316      	movs	r3, #22
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090c0 <_strtol_l.constprop.0+0x100>
 8008fde:	460d      	mov	r5, r1
 8008fe0:	462e      	mov	r6, r5
 8008fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008fea:	f017 0708 	ands.w	r7, r7, #8
 8008fee:	d1f7      	bne.n	8008fe0 <_strtol_l.constprop.0+0x20>
 8008ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8008ff2:	d132      	bne.n	800905a <_strtol_l.constprop.0+0x9a>
 8008ff4:	782c      	ldrb	r4, [r5, #0]
 8008ff6:	2701      	movs	r7, #1
 8008ff8:	1cb5      	adds	r5, r6, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d05b      	beq.n	80090b6 <_strtol_l.constprop.0+0xf6>
 8008ffe:	2b10      	cmp	r3, #16
 8009000:	d109      	bne.n	8009016 <_strtol_l.constprop.0+0x56>
 8009002:	2c30      	cmp	r4, #48	; 0x30
 8009004:	d107      	bne.n	8009016 <_strtol_l.constprop.0+0x56>
 8009006:	782c      	ldrb	r4, [r5, #0]
 8009008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800900c:	2c58      	cmp	r4, #88	; 0x58
 800900e:	d14d      	bne.n	80090ac <_strtol_l.constprop.0+0xec>
 8009010:	786c      	ldrb	r4, [r5, #1]
 8009012:	2310      	movs	r3, #16
 8009014:	3502      	adds	r5, #2
 8009016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800901a:	f108 38ff 	add.w	r8, r8, #4294967295
 800901e:	f04f 0c00 	mov.w	ip, #0
 8009022:	fbb8 f9f3 	udiv	r9, r8, r3
 8009026:	4666      	mov	r6, ip
 8009028:	fb03 8a19 	mls	sl, r3, r9, r8
 800902c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009030:	f1be 0f09 	cmp.w	lr, #9
 8009034:	d816      	bhi.n	8009064 <_strtol_l.constprop.0+0xa4>
 8009036:	4674      	mov	r4, lr
 8009038:	42a3      	cmp	r3, r4
 800903a:	dd24      	ble.n	8009086 <_strtol_l.constprop.0+0xc6>
 800903c:	f1bc 0f00 	cmp.w	ip, #0
 8009040:	db1e      	blt.n	8009080 <_strtol_l.constprop.0+0xc0>
 8009042:	45b1      	cmp	r9, r6
 8009044:	d31c      	bcc.n	8009080 <_strtol_l.constprop.0+0xc0>
 8009046:	d101      	bne.n	800904c <_strtol_l.constprop.0+0x8c>
 8009048:	45a2      	cmp	sl, r4
 800904a:	db19      	blt.n	8009080 <_strtol_l.constprop.0+0xc0>
 800904c:	fb06 4603 	mla	r6, r6, r3, r4
 8009050:	f04f 0c01 	mov.w	ip, #1
 8009054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009058:	e7e8      	b.n	800902c <_strtol_l.constprop.0+0x6c>
 800905a:	2c2b      	cmp	r4, #43	; 0x2b
 800905c:	bf04      	itt	eq
 800905e:	782c      	ldrbeq	r4, [r5, #0]
 8009060:	1cb5      	addeq	r5, r6, #2
 8009062:	e7ca      	b.n	8008ffa <_strtol_l.constprop.0+0x3a>
 8009064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009068:	f1be 0f19 	cmp.w	lr, #25
 800906c:	d801      	bhi.n	8009072 <_strtol_l.constprop.0+0xb2>
 800906e:	3c37      	subs	r4, #55	; 0x37
 8009070:	e7e2      	b.n	8009038 <_strtol_l.constprop.0+0x78>
 8009072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009076:	f1be 0f19 	cmp.w	lr, #25
 800907a:	d804      	bhi.n	8009086 <_strtol_l.constprop.0+0xc6>
 800907c:	3c57      	subs	r4, #87	; 0x57
 800907e:	e7db      	b.n	8009038 <_strtol_l.constprop.0+0x78>
 8009080:	f04f 3cff 	mov.w	ip, #4294967295
 8009084:	e7e6      	b.n	8009054 <_strtol_l.constprop.0+0x94>
 8009086:	f1bc 0f00 	cmp.w	ip, #0
 800908a:	da05      	bge.n	8009098 <_strtol_l.constprop.0+0xd8>
 800908c:	2322      	movs	r3, #34	; 0x22
 800908e:	6003      	str	r3, [r0, #0]
 8009090:	4646      	mov	r6, r8
 8009092:	b942      	cbnz	r2, 80090a6 <_strtol_l.constprop.0+0xe6>
 8009094:	4630      	mov	r0, r6
 8009096:	e79e      	b.n	8008fd6 <_strtol_l.constprop.0+0x16>
 8009098:	b107      	cbz	r7, 800909c <_strtol_l.constprop.0+0xdc>
 800909a:	4276      	negs	r6, r6
 800909c:	2a00      	cmp	r2, #0
 800909e:	d0f9      	beq.n	8009094 <_strtol_l.constprop.0+0xd4>
 80090a0:	f1bc 0f00 	cmp.w	ip, #0
 80090a4:	d000      	beq.n	80090a8 <_strtol_l.constprop.0+0xe8>
 80090a6:	1e69      	subs	r1, r5, #1
 80090a8:	6011      	str	r1, [r2, #0]
 80090aa:	e7f3      	b.n	8009094 <_strtol_l.constprop.0+0xd4>
 80090ac:	2430      	movs	r4, #48	; 0x30
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1b1      	bne.n	8009016 <_strtol_l.constprop.0+0x56>
 80090b2:	2308      	movs	r3, #8
 80090b4:	e7af      	b.n	8009016 <_strtol_l.constprop.0+0x56>
 80090b6:	2c30      	cmp	r4, #48	; 0x30
 80090b8:	d0a5      	beq.n	8009006 <_strtol_l.constprop.0+0x46>
 80090ba:	230a      	movs	r3, #10
 80090bc:	e7ab      	b.n	8009016 <_strtol_l.constprop.0+0x56>
 80090be:	bf00      	nop
 80090c0:	0800c0f1 	.word	0x0800c0f1

080090c4 <_strtol_r>:
 80090c4:	f7ff bf7c 	b.w	8008fc0 <_strtol_l.constprop.0>

080090c8 <__swbuf_r>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	460e      	mov	r6, r1
 80090cc:	4614      	mov	r4, r2
 80090ce:	4605      	mov	r5, r0
 80090d0:	b118      	cbz	r0, 80090da <__swbuf_r+0x12>
 80090d2:	6983      	ldr	r3, [r0, #24]
 80090d4:	b90b      	cbnz	r3, 80090da <__swbuf_r+0x12>
 80090d6:	f001 f86b 	bl	800a1b0 <__sinit>
 80090da:	4b21      	ldr	r3, [pc, #132]	; (8009160 <__swbuf_r+0x98>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	d12b      	bne.n	8009138 <__swbuf_r+0x70>
 80090e0:	686c      	ldr	r4, [r5, #4]
 80090e2:	69a3      	ldr	r3, [r4, #24]
 80090e4:	60a3      	str	r3, [r4, #8]
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	071a      	lsls	r2, r3, #28
 80090ea:	d52f      	bpl.n	800914c <__swbuf_r+0x84>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	b36b      	cbz	r3, 800914c <__swbuf_r+0x84>
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	6820      	ldr	r0, [r4, #0]
 80090f4:	1ac0      	subs	r0, r0, r3
 80090f6:	6963      	ldr	r3, [r4, #20]
 80090f8:	b2f6      	uxtb	r6, r6
 80090fa:	4283      	cmp	r3, r0
 80090fc:	4637      	mov	r7, r6
 80090fe:	dc04      	bgt.n	800910a <__swbuf_r+0x42>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 ffc0 	bl	800a088 <_fflush_r>
 8009108:	bb30      	cbnz	r0, 8009158 <__swbuf_r+0x90>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	701e      	strb	r6, [r3, #0]
 8009118:	6963      	ldr	r3, [r4, #20]
 800911a:	3001      	adds	r0, #1
 800911c:	4283      	cmp	r3, r0
 800911e:	d004      	beq.n	800912a <__swbuf_r+0x62>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	07db      	lsls	r3, r3, #31
 8009124:	d506      	bpl.n	8009134 <__swbuf_r+0x6c>
 8009126:	2e0a      	cmp	r6, #10
 8009128:	d104      	bne.n	8009134 <__swbuf_r+0x6c>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 ffab 	bl	800a088 <_fflush_r>
 8009132:	b988      	cbnz	r0, 8009158 <__swbuf_r+0x90>
 8009134:	4638      	mov	r0, r7
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <__swbuf_r+0x9c>)
 800913a:	429c      	cmp	r4, r3
 800913c:	d101      	bne.n	8009142 <__swbuf_r+0x7a>
 800913e:	68ac      	ldr	r4, [r5, #8]
 8009140:	e7cf      	b.n	80090e2 <__swbuf_r+0x1a>
 8009142:	4b09      	ldr	r3, [pc, #36]	; (8009168 <__swbuf_r+0xa0>)
 8009144:	429c      	cmp	r4, r3
 8009146:	bf08      	it	eq
 8009148:	68ec      	ldreq	r4, [r5, #12]
 800914a:	e7ca      	b.n	80090e2 <__swbuf_r+0x1a>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f80c 	bl	800916c <__swsetup_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	d0cb      	beq.n	80090f0 <__swbuf_r+0x28>
 8009158:	f04f 37ff 	mov.w	r7, #4294967295
 800915c:	e7ea      	b.n	8009134 <__swbuf_r+0x6c>
 800915e:	bf00      	nop
 8009160:	0800c28c 	.word	0x0800c28c
 8009164:	0800c2ac 	.word	0x0800c2ac
 8009168:	0800c26c 	.word	0x0800c26c

0800916c <__swsetup_r>:
 800916c:	4b32      	ldr	r3, [pc, #200]	; (8009238 <__swsetup_r+0xcc>)
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	4606      	mov	r6, r0
 8009174:	460c      	mov	r4, r1
 8009176:	b125      	cbz	r5, 8009182 <__swsetup_r+0x16>
 8009178:	69ab      	ldr	r3, [r5, #24]
 800917a:	b913      	cbnz	r3, 8009182 <__swsetup_r+0x16>
 800917c:	4628      	mov	r0, r5
 800917e:	f001 f817 	bl	800a1b0 <__sinit>
 8009182:	4b2e      	ldr	r3, [pc, #184]	; (800923c <__swsetup_r+0xd0>)
 8009184:	429c      	cmp	r4, r3
 8009186:	d10f      	bne.n	80091a8 <__swsetup_r+0x3c>
 8009188:	686c      	ldr	r4, [r5, #4]
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009190:	0719      	lsls	r1, r3, #28
 8009192:	d42c      	bmi.n	80091ee <__swsetup_r+0x82>
 8009194:	06dd      	lsls	r5, r3, #27
 8009196:	d411      	bmi.n	80091bc <__swsetup_r+0x50>
 8009198:	2309      	movs	r3, #9
 800919a:	6033      	str	r3, [r6, #0]
 800919c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295
 80091a6:	e03e      	b.n	8009226 <__swsetup_r+0xba>
 80091a8:	4b25      	ldr	r3, [pc, #148]	; (8009240 <__swsetup_r+0xd4>)
 80091aa:	429c      	cmp	r4, r3
 80091ac:	d101      	bne.n	80091b2 <__swsetup_r+0x46>
 80091ae:	68ac      	ldr	r4, [r5, #8]
 80091b0:	e7eb      	b.n	800918a <__swsetup_r+0x1e>
 80091b2:	4b24      	ldr	r3, [pc, #144]	; (8009244 <__swsetup_r+0xd8>)
 80091b4:	429c      	cmp	r4, r3
 80091b6:	bf08      	it	eq
 80091b8:	68ec      	ldreq	r4, [r5, #12]
 80091ba:	e7e6      	b.n	800918a <__swsetup_r+0x1e>
 80091bc:	0758      	lsls	r0, r3, #29
 80091be:	d512      	bpl.n	80091e6 <__swsetup_r+0x7a>
 80091c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c2:	b141      	cbz	r1, 80091d6 <__swsetup_r+0x6a>
 80091c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d002      	beq.n	80091d2 <__swsetup_r+0x66>
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7fd ffdb 	bl	8007188 <_free_r>
 80091d2:	2300      	movs	r3, #0
 80091d4:	6363      	str	r3, [r4, #52]	; 0x34
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	2300      	movs	r3, #0
 80091e0:	6063      	str	r3, [r4, #4]
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f043 0308 	orr.w	r3, r3, #8
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	b94b      	cbnz	r3, 8009206 <__swsetup_r+0x9a>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091fc:	d003      	beq.n	8009206 <__swsetup_r+0x9a>
 80091fe:	4621      	mov	r1, r4
 8009200:	4630      	mov	r0, r6
 8009202:	f001 fc1f 	bl	800aa44 <__smakebuf_r>
 8009206:	89a0      	ldrh	r0, [r4, #12]
 8009208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800920c:	f010 0301 	ands.w	r3, r0, #1
 8009210:	d00a      	beq.n	8009228 <__swsetup_r+0xbc>
 8009212:	2300      	movs	r3, #0
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	6963      	ldr	r3, [r4, #20]
 8009218:	425b      	negs	r3, r3
 800921a:	61a3      	str	r3, [r4, #24]
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	b943      	cbnz	r3, 8009232 <__swsetup_r+0xc6>
 8009220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009224:	d1ba      	bne.n	800919c <__swsetup_r+0x30>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	0781      	lsls	r1, r0, #30
 800922a:	bf58      	it	pl
 800922c:	6963      	ldrpl	r3, [r4, #20]
 800922e:	60a3      	str	r3, [r4, #8]
 8009230:	e7f4      	b.n	800921c <__swsetup_r+0xb0>
 8009232:	2000      	movs	r0, #0
 8009234:	e7f7      	b.n	8009226 <__swsetup_r+0xba>
 8009236:	bf00      	nop
 8009238:	2000001c 	.word	0x2000001c
 800923c:	0800c28c 	.word	0x0800c28c
 8009240:	0800c2ac 	.word	0x0800c2ac
 8009244:	0800c26c 	.word	0x0800c26c

08009248 <__assert_func>:
 8009248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800924a:	4614      	mov	r4, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <__assert_func+0x2c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4605      	mov	r5, r0
 8009254:	68d8      	ldr	r0, [r3, #12]
 8009256:	b14c      	cbz	r4, 800926c <__assert_func+0x24>
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <__assert_func+0x30>)
 800925a:	9100      	str	r1, [sp, #0]
 800925c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009260:	4906      	ldr	r1, [pc, #24]	; (800927c <__assert_func+0x34>)
 8009262:	462b      	mov	r3, r5
 8009264:	f001 f822 	bl	800a2ac <fiprintf>
 8009268:	f002 fc54 	bl	800bb14 <abort>
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <__assert_func+0x38>)
 800926e:	461c      	mov	r4, r3
 8009270:	e7f3      	b.n	800925a <__assert_func+0x12>
 8009272:	bf00      	nop
 8009274:	2000001c 	.word	0x2000001c
 8009278:	0800c0b4 	.word	0x0800c0b4
 800927c:	0800c0c1 	.word	0x0800c0c1
 8009280:	0800c0ef 	.word	0x0800c0ef

08009284 <quorem>:
 8009284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	6903      	ldr	r3, [r0, #16]
 800928a:	690c      	ldr	r4, [r1, #16]
 800928c:	42a3      	cmp	r3, r4
 800928e:	4607      	mov	r7, r0
 8009290:	f2c0 8081 	blt.w	8009396 <quorem+0x112>
 8009294:	3c01      	subs	r4, #1
 8009296:	f101 0814 	add.w	r8, r1, #20
 800929a:	f100 0514 	add.w	r5, r0, #20
 800929e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ac:	3301      	adds	r3, #1
 80092ae:	429a      	cmp	r2, r3
 80092b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80092bc:	d331      	bcc.n	8009322 <quorem+0x9e>
 80092be:	f04f 0e00 	mov.w	lr, #0
 80092c2:	4640      	mov	r0, r8
 80092c4:	46ac      	mov	ip, r5
 80092c6:	46f2      	mov	sl, lr
 80092c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80092cc:	b293      	uxth	r3, r2
 80092ce:	fb06 e303 	mla	r3, r6, r3, lr
 80092d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ebaa 0303 	sub.w	r3, sl, r3
 80092dc:	f8dc a000 	ldr.w	sl, [ip]
 80092e0:	0c12      	lsrs	r2, r2, #16
 80092e2:	fa13 f38a 	uxtah	r3, r3, sl
 80092e6:	fb06 e202 	mla	r2, r6, r2, lr
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092f2:	b292      	uxth	r2, r2
 80092f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009300:	4581      	cmp	r9, r0
 8009302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009306:	f84c 3b04 	str.w	r3, [ip], #4
 800930a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800930e:	d2db      	bcs.n	80092c8 <quorem+0x44>
 8009310:	f855 300b 	ldr.w	r3, [r5, fp]
 8009314:	b92b      	cbnz	r3, 8009322 <quorem+0x9e>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	3b04      	subs	r3, #4
 800931a:	429d      	cmp	r5, r3
 800931c:	461a      	mov	r2, r3
 800931e:	d32e      	bcc.n	800937e <quorem+0xfa>
 8009320:	613c      	str	r4, [r7, #16]
 8009322:	4638      	mov	r0, r7
 8009324:	f001 feb8 	bl	800b098 <__mcmp>
 8009328:	2800      	cmp	r0, #0
 800932a:	db24      	blt.n	8009376 <quorem+0xf2>
 800932c:	3601      	adds	r6, #1
 800932e:	4628      	mov	r0, r5
 8009330:	f04f 0c00 	mov.w	ip, #0
 8009334:	f858 2b04 	ldr.w	r2, [r8], #4
 8009338:	f8d0 e000 	ldr.w	lr, [r0]
 800933c:	b293      	uxth	r3, r2
 800933e:	ebac 0303 	sub.w	r3, ip, r3
 8009342:	0c12      	lsrs	r2, r2, #16
 8009344:	fa13 f38e 	uxtah	r3, r3, lr
 8009348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800934c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009350:	b29b      	uxth	r3, r3
 8009352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009356:	45c1      	cmp	r9, r8
 8009358:	f840 3b04 	str.w	r3, [r0], #4
 800935c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009360:	d2e8      	bcs.n	8009334 <quorem+0xb0>
 8009362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800936a:	b922      	cbnz	r2, 8009376 <quorem+0xf2>
 800936c:	3b04      	subs	r3, #4
 800936e:	429d      	cmp	r5, r3
 8009370:	461a      	mov	r2, r3
 8009372:	d30a      	bcc.n	800938a <quorem+0x106>
 8009374:	613c      	str	r4, [r7, #16]
 8009376:	4630      	mov	r0, r6
 8009378:	b003      	add	sp, #12
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	3b04      	subs	r3, #4
 8009382:	2a00      	cmp	r2, #0
 8009384:	d1cc      	bne.n	8009320 <quorem+0x9c>
 8009386:	3c01      	subs	r4, #1
 8009388:	e7c7      	b.n	800931a <quorem+0x96>
 800938a:	6812      	ldr	r2, [r2, #0]
 800938c:	3b04      	subs	r3, #4
 800938e:	2a00      	cmp	r2, #0
 8009390:	d1f0      	bne.n	8009374 <quorem+0xf0>
 8009392:	3c01      	subs	r4, #1
 8009394:	e7eb      	b.n	800936e <quorem+0xea>
 8009396:	2000      	movs	r0, #0
 8009398:	e7ee      	b.n	8009378 <quorem+0xf4>
 800939a:	0000      	movs	r0, r0
 800939c:	0000      	movs	r0, r0
	...

080093a0 <_dtoa_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	ed2d 8b04 	vpush	{d8-d9}
 80093a8:	ec57 6b10 	vmov	r6, r7, d0
 80093ac:	b093      	sub	sp, #76	; 0x4c
 80093ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093b4:	9106      	str	r1, [sp, #24]
 80093b6:	ee10 aa10 	vmov	sl, s0
 80093ba:	4604      	mov	r4, r0
 80093bc:	9209      	str	r2, [sp, #36]	; 0x24
 80093be:	930c      	str	r3, [sp, #48]	; 0x30
 80093c0:	46bb      	mov	fp, r7
 80093c2:	b975      	cbnz	r5, 80093e2 <_dtoa_r+0x42>
 80093c4:	2010      	movs	r0, #16
 80093c6:	f7fd feb9 	bl	800713c <malloc>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6260      	str	r0, [r4, #36]	; 0x24
 80093ce:	b920      	cbnz	r0, 80093da <_dtoa_r+0x3a>
 80093d0:	4ba7      	ldr	r3, [pc, #668]	; (8009670 <_dtoa_r+0x2d0>)
 80093d2:	21ea      	movs	r1, #234	; 0xea
 80093d4:	48a7      	ldr	r0, [pc, #668]	; (8009674 <_dtoa_r+0x2d4>)
 80093d6:	f7ff ff37 	bl	8009248 <__assert_func>
 80093da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093de:	6005      	str	r5, [r0, #0]
 80093e0:	60c5      	str	r5, [r0, #12]
 80093e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e4:	6819      	ldr	r1, [r3, #0]
 80093e6:	b151      	cbz	r1, 80093fe <_dtoa_r+0x5e>
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	604a      	str	r2, [r1, #4]
 80093ec:	2301      	movs	r3, #1
 80093ee:	4093      	lsls	r3, r2
 80093f0:	608b      	str	r3, [r1, #8]
 80093f2:	4620      	mov	r0, r4
 80093f4:	f001 fbc4 	bl	800ab80 <_Bfree>
 80093f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	1e3b      	subs	r3, r7, #0
 8009400:	bfaa      	itet	ge
 8009402:	2300      	movge	r3, #0
 8009404:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009408:	f8c8 3000 	strge.w	r3, [r8]
 800940c:	4b9a      	ldr	r3, [pc, #616]	; (8009678 <_dtoa_r+0x2d8>)
 800940e:	bfbc      	itt	lt
 8009410:	2201      	movlt	r2, #1
 8009412:	f8c8 2000 	strlt.w	r2, [r8]
 8009416:	ea33 030b 	bics.w	r3, r3, fp
 800941a:	d11b      	bne.n	8009454 <_dtoa_r+0xb4>
 800941c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800941e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009428:	4333      	orrs	r3, r6
 800942a:	f000 8592 	beq.w	8009f52 <_dtoa_r+0xbb2>
 800942e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009430:	b963      	cbnz	r3, 800944c <_dtoa_r+0xac>
 8009432:	4b92      	ldr	r3, [pc, #584]	; (800967c <_dtoa_r+0x2dc>)
 8009434:	e022      	b.n	800947c <_dtoa_r+0xdc>
 8009436:	4b92      	ldr	r3, [pc, #584]	; (8009680 <_dtoa_r+0x2e0>)
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	3308      	adds	r3, #8
 800943c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	9801      	ldr	r0, [sp, #4]
 8009442:	b013      	add	sp, #76	; 0x4c
 8009444:	ecbd 8b04 	vpop	{d8-d9}
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	4b8b      	ldr	r3, [pc, #556]	; (800967c <_dtoa_r+0x2dc>)
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	3303      	adds	r3, #3
 8009452:	e7f3      	b.n	800943c <_dtoa_r+0x9c>
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009460:	ec4b ab19 	vmov	d9, sl, fp
 8009464:	4680      	mov	r8, r0
 8009466:	b158      	cbz	r0, 8009480 <_dtoa_r+0xe0>
 8009468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800946a:	2301      	movs	r3, #1
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 856b 	beq.w	8009f4c <_dtoa_r+0xbac>
 8009476:	4883      	ldr	r0, [pc, #524]	; (8009684 <_dtoa_r+0x2e4>)
 8009478:	6018      	str	r0, [r3, #0]
 800947a:	1e43      	subs	r3, r0, #1
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	e7df      	b.n	8009440 <_dtoa_r+0xa0>
 8009480:	ec4b ab10 	vmov	d0, sl, fp
 8009484:	aa10      	add	r2, sp, #64	; 0x40
 8009486:	a911      	add	r1, sp, #68	; 0x44
 8009488:	4620      	mov	r0, r4
 800948a:	f001 ff27 	bl	800b2dc <__d2b>
 800948e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009492:	ee08 0a10 	vmov	s16, r0
 8009496:	2d00      	cmp	r5, #0
 8009498:	f000 8084 	beq.w	80095a4 <_dtoa_r+0x204>
 800949c:	ee19 3a90 	vmov	r3, s19
 80094a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094a8:	4656      	mov	r6, sl
 80094aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80094b6:	4b74      	ldr	r3, [pc, #464]	; (8009688 <_dtoa_r+0x2e8>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	4630      	mov	r0, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	f7f6 feeb 	bl	8000298 <__aeabi_dsub>
 80094c2:	a365      	add	r3, pc, #404	; (adr r3, 8009658 <_dtoa_r+0x2b8>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f7 f89e 	bl	8000608 <__aeabi_dmul>
 80094cc:	a364      	add	r3, pc, #400	; (adr r3, 8009660 <_dtoa_r+0x2c0>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 fee3 	bl	800029c <__adddf3>
 80094d6:	4606      	mov	r6, r0
 80094d8:	4628      	mov	r0, r5
 80094da:	460f      	mov	r7, r1
 80094dc:	f7f7 f82a 	bl	8000534 <__aeabi_i2d>
 80094e0:	a361      	add	r3, pc, #388	; (adr r3, 8009668 <_dtoa_r+0x2c8>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f7 f88f 	bl	8000608 <__aeabi_dmul>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f6 fed3 	bl	800029c <__adddf3>
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	f7f7 fb35 	bl	8000b68 <__aeabi_d2iz>
 80094fe:	2200      	movs	r2, #0
 8009500:	9000      	str	r0, [sp, #0]
 8009502:	2300      	movs	r3, #0
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f7f7 faf0 	bl	8000aec <__aeabi_dcmplt>
 800950c:	b150      	cbz	r0, 8009524 <_dtoa_r+0x184>
 800950e:	9800      	ldr	r0, [sp, #0]
 8009510:	f7f7 f810 	bl	8000534 <__aeabi_i2d>
 8009514:	4632      	mov	r2, r6
 8009516:	463b      	mov	r3, r7
 8009518:	f7f7 fade 	bl	8000ad8 <__aeabi_dcmpeq>
 800951c:	b910      	cbnz	r0, 8009524 <_dtoa_r+0x184>
 800951e:	9b00      	ldr	r3, [sp, #0]
 8009520:	3b01      	subs	r3, #1
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	2b16      	cmp	r3, #22
 8009528:	d85a      	bhi.n	80095e0 <_dtoa_r+0x240>
 800952a:	9a00      	ldr	r2, [sp, #0]
 800952c:	4b57      	ldr	r3, [pc, #348]	; (800968c <_dtoa_r+0x2ec>)
 800952e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	ec51 0b19 	vmov	r0, r1, d9
 800953a:	f7f7 fad7 	bl	8000aec <__aeabi_dcmplt>
 800953e:	2800      	cmp	r0, #0
 8009540:	d050      	beq.n	80095e4 <_dtoa_r+0x244>
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	3b01      	subs	r3, #1
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	2300      	movs	r3, #0
 800954a:	930b      	str	r3, [sp, #44]	; 0x2c
 800954c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800954e:	1b5d      	subs	r5, r3, r5
 8009550:	1e6b      	subs	r3, r5, #1
 8009552:	9305      	str	r3, [sp, #20]
 8009554:	bf45      	ittet	mi
 8009556:	f1c5 0301 	rsbmi	r3, r5, #1
 800955a:	9304      	strmi	r3, [sp, #16]
 800955c:	2300      	movpl	r3, #0
 800955e:	2300      	movmi	r3, #0
 8009560:	bf4c      	ite	mi
 8009562:	9305      	strmi	r3, [sp, #20]
 8009564:	9304      	strpl	r3, [sp, #16]
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	db3d      	blt.n	80095e8 <_dtoa_r+0x248>
 800956c:	9b05      	ldr	r3, [sp, #20]
 800956e:	9a00      	ldr	r2, [sp, #0]
 8009570:	920a      	str	r2, [sp, #40]	; 0x28
 8009572:	4413      	add	r3, r2
 8009574:	9305      	str	r3, [sp, #20]
 8009576:	2300      	movs	r3, #0
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	9b06      	ldr	r3, [sp, #24]
 800957c:	2b09      	cmp	r3, #9
 800957e:	f200 8089 	bhi.w	8009694 <_dtoa_r+0x2f4>
 8009582:	2b05      	cmp	r3, #5
 8009584:	bfc4      	itt	gt
 8009586:	3b04      	subgt	r3, #4
 8009588:	9306      	strgt	r3, [sp, #24]
 800958a:	9b06      	ldr	r3, [sp, #24]
 800958c:	f1a3 0302 	sub.w	r3, r3, #2
 8009590:	bfcc      	ite	gt
 8009592:	2500      	movgt	r5, #0
 8009594:	2501      	movle	r5, #1
 8009596:	2b03      	cmp	r3, #3
 8009598:	f200 8087 	bhi.w	80096aa <_dtoa_r+0x30a>
 800959c:	e8df f003 	tbb	[pc, r3]
 80095a0:	59383a2d 	.word	0x59383a2d
 80095a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80095a8:	441d      	add	r5, r3
 80095aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	bfc1      	itttt	gt
 80095b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80095be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095c2:	bfda      	itte	le
 80095c4:	f1c3 0320 	rsble	r3, r3, #32
 80095c8:	fa06 f003 	lslle.w	r0, r6, r3
 80095cc:	4318      	orrgt	r0, r3
 80095ce:	f7f6 ffa1 	bl	8000514 <__aeabi_ui2d>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4606      	mov	r6, r0
 80095d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095da:	3d01      	subs	r5, #1
 80095dc:	930e      	str	r3, [sp, #56]	; 0x38
 80095de:	e76a      	b.n	80094b6 <_dtoa_r+0x116>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e7b2      	b.n	800954a <_dtoa_r+0x1aa>
 80095e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80095e6:	e7b1      	b.n	800954c <_dtoa_r+0x1ac>
 80095e8:	9b04      	ldr	r3, [sp, #16]
 80095ea:	9a00      	ldr	r2, [sp, #0]
 80095ec:	1a9b      	subs	r3, r3, r2
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	4253      	negs	r3, r2
 80095f2:	9307      	str	r3, [sp, #28]
 80095f4:	2300      	movs	r3, #0
 80095f6:	930a      	str	r3, [sp, #40]	; 0x28
 80095f8:	e7bf      	b.n	800957a <_dtoa_r+0x1da>
 80095fa:	2300      	movs	r3, #0
 80095fc:	9308      	str	r3, [sp, #32]
 80095fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	dc55      	bgt.n	80096b0 <_dtoa_r+0x310>
 8009604:	2301      	movs	r3, #1
 8009606:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800960a:	461a      	mov	r2, r3
 800960c:	9209      	str	r2, [sp, #36]	; 0x24
 800960e:	e00c      	b.n	800962a <_dtoa_r+0x28a>
 8009610:	2301      	movs	r3, #1
 8009612:	e7f3      	b.n	80095fc <_dtoa_r+0x25c>
 8009614:	2300      	movs	r3, #0
 8009616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009618:	9308      	str	r3, [sp, #32]
 800961a:	9b00      	ldr	r3, [sp, #0]
 800961c:	4413      	add	r3, r2
 800961e:	9302      	str	r3, [sp, #8]
 8009620:	3301      	adds	r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	9303      	str	r3, [sp, #12]
 8009626:	bfb8      	it	lt
 8009628:	2301      	movlt	r3, #1
 800962a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800962c:	2200      	movs	r2, #0
 800962e:	6042      	str	r2, [r0, #4]
 8009630:	2204      	movs	r2, #4
 8009632:	f102 0614 	add.w	r6, r2, #20
 8009636:	429e      	cmp	r6, r3
 8009638:	6841      	ldr	r1, [r0, #4]
 800963a:	d93d      	bls.n	80096b8 <_dtoa_r+0x318>
 800963c:	4620      	mov	r0, r4
 800963e:	f001 fa5f 	bl	800ab00 <_Balloc>
 8009642:	9001      	str	r0, [sp, #4]
 8009644:	2800      	cmp	r0, #0
 8009646:	d13b      	bne.n	80096c0 <_dtoa_r+0x320>
 8009648:	4b11      	ldr	r3, [pc, #68]	; (8009690 <_dtoa_r+0x2f0>)
 800964a:	4602      	mov	r2, r0
 800964c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009650:	e6c0      	b.n	80093d4 <_dtoa_r+0x34>
 8009652:	2301      	movs	r3, #1
 8009654:	e7df      	b.n	8009616 <_dtoa_r+0x276>
 8009656:	bf00      	nop
 8009658:	636f4361 	.word	0x636f4361
 800965c:	3fd287a7 	.word	0x3fd287a7
 8009660:	8b60c8b3 	.word	0x8b60c8b3
 8009664:	3fc68a28 	.word	0x3fc68a28
 8009668:	509f79fb 	.word	0x509f79fb
 800966c:	3fd34413 	.word	0x3fd34413
 8009670:	0800c040 	.word	0x0800c040
 8009674:	0800c1fe 	.word	0x0800c1fe
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	0800c1fa 	.word	0x0800c1fa
 8009680:	0800c1f1 	.word	0x0800c1f1
 8009684:	0800bfc1 	.word	0x0800bfc1
 8009688:	3ff80000 	.word	0x3ff80000
 800968c:	0800c3d0 	.word	0x0800c3d0
 8009690:	0800c259 	.word	0x0800c259
 8009694:	2501      	movs	r5, #1
 8009696:	2300      	movs	r3, #0
 8009698:	9306      	str	r3, [sp, #24]
 800969a:	9508      	str	r5, [sp, #32]
 800969c:	f04f 33ff 	mov.w	r3, #4294967295
 80096a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	2312      	movs	r3, #18
 80096a8:	e7b0      	b.n	800960c <_dtoa_r+0x26c>
 80096aa:	2301      	movs	r3, #1
 80096ac:	9308      	str	r3, [sp, #32]
 80096ae:	e7f5      	b.n	800969c <_dtoa_r+0x2fc>
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096b6:	e7b8      	b.n	800962a <_dtoa_r+0x28a>
 80096b8:	3101      	adds	r1, #1
 80096ba:	6041      	str	r1, [r0, #4]
 80096bc:	0052      	lsls	r2, r2, #1
 80096be:	e7b8      	b.n	8009632 <_dtoa_r+0x292>
 80096c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c2:	9a01      	ldr	r2, [sp, #4]
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	2b0e      	cmp	r3, #14
 80096ca:	f200 809d 	bhi.w	8009808 <_dtoa_r+0x468>
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	f000 809a 	beq.w	8009808 <_dtoa_r+0x468>
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd32      	ble.n	8009740 <_dtoa_r+0x3a0>
 80096da:	4ab7      	ldr	r2, [pc, #732]	; (80099b8 <_dtoa_r+0x618>)
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	05d8      	lsls	r0, r3, #23
 80096ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80096f0:	d516      	bpl.n	8009720 <_dtoa_r+0x380>
 80096f2:	4bb2      	ldr	r3, [pc, #712]	; (80099bc <_dtoa_r+0x61c>)
 80096f4:	ec51 0b19 	vmov	r0, r1, d9
 80096f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096fc:	f7f7 f8ae 	bl	800085c <__aeabi_ddiv>
 8009700:	f007 070f 	and.w	r7, r7, #15
 8009704:	4682      	mov	sl, r0
 8009706:	468b      	mov	fp, r1
 8009708:	2503      	movs	r5, #3
 800970a:	4eac      	ldr	r6, [pc, #688]	; (80099bc <_dtoa_r+0x61c>)
 800970c:	b957      	cbnz	r7, 8009724 <_dtoa_r+0x384>
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	4650      	mov	r0, sl
 8009714:	4659      	mov	r1, fp
 8009716:	f7f7 f8a1 	bl	800085c <__aeabi_ddiv>
 800971a:	4682      	mov	sl, r0
 800971c:	468b      	mov	fp, r1
 800971e:	e028      	b.n	8009772 <_dtoa_r+0x3d2>
 8009720:	2502      	movs	r5, #2
 8009722:	e7f2      	b.n	800970a <_dtoa_r+0x36a>
 8009724:	07f9      	lsls	r1, r7, #31
 8009726:	d508      	bpl.n	800973a <_dtoa_r+0x39a>
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009730:	f7f6 ff6a 	bl	8000608 <__aeabi_dmul>
 8009734:	3501      	adds	r5, #1
 8009736:	4680      	mov	r8, r0
 8009738:	4689      	mov	r9, r1
 800973a:	107f      	asrs	r7, r7, #1
 800973c:	3608      	adds	r6, #8
 800973e:	e7e5      	b.n	800970c <_dtoa_r+0x36c>
 8009740:	f000 809b 	beq.w	800987a <_dtoa_r+0x4da>
 8009744:	9b00      	ldr	r3, [sp, #0]
 8009746:	4f9d      	ldr	r7, [pc, #628]	; (80099bc <_dtoa_r+0x61c>)
 8009748:	425e      	negs	r6, r3
 800974a:	4b9b      	ldr	r3, [pc, #620]	; (80099b8 <_dtoa_r+0x618>)
 800974c:	f006 020f 	and.w	r2, r6, #15
 8009750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	ec51 0b19 	vmov	r0, r1, d9
 800975c:	f7f6 ff54 	bl	8000608 <__aeabi_dmul>
 8009760:	1136      	asrs	r6, r6, #4
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	2300      	movs	r3, #0
 8009768:	2502      	movs	r5, #2
 800976a:	2e00      	cmp	r6, #0
 800976c:	d17a      	bne.n	8009864 <_dtoa_r+0x4c4>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1d3      	bne.n	800971a <_dtoa_r+0x37a>
 8009772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8082 	beq.w	800987e <_dtoa_r+0x4de>
 800977a:	4b91      	ldr	r3, [pc, #580]	; (80099c0 <_dtoa_r+0x620>)
 800977c:	2200      	movs	r2, #0
 800977e:	4650      	mov	r0, sl
 8009780:	4659      	mov	r1, fp
 8009782:	f7f7 f9b3 	bl	8000aec <__aeabi_dcmplt>
 8009786:	2800      	cmp	r0, #0
 8009788:	d079      	beq.n	800987e <_dtoa_r+0x4de>
 800978a:	9b03      	ldr	r3, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d076      	beq.n	800987e <_dtoa_r+0x4de>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	dd36      	ble.n	8009804 <_dtoa_r+0x464>
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	4650      	mov	r0, sl
 800979a:	4659      	mov	r1, fp
 800979c:	1e5f      	subs	r7, r3, #1
 800979e:	2200      	movs	r2, #0
 80097a0:	4b88      	ldr	r3, [pc, #544]	; (80099c4 <_dtoa_r+0x624>)
 80097a2:	f7f6 ff31 	bl	8000608 <__aeabi_dmul>
 80097a6:	9e02      	ldr	r6, [sp, #8]
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	3501      	adds	r5, #1
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7f6 fec0 	bl	8000534 <__aeabi_i2d>
 80097b4:	4652      	mov	r2, sl
 80097b6:	465b      	mov	r3, fp
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	4b82      	ldr	r3, [pc, #520]	; (80099c8 <_dtoa_r+0x628>)
 80097be:	2200      	movs	r2, #0
 80097c0:	f7f6 fd6c 	bl	800029c <__adddf3>
 80097c4:	46d0      	mov	r8, sl
 80097c6:	46d9      	mov	r9, fp
 80097c8:	4682      	mov	sl, r0
 80097ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d158      	bne.n	8009884 <_dtoa_r+0x4e4>
 80097d2:	4b7e      	ldr	r3, [pc, #504]	; (80099cc <_dtoa_r+0x62c>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	f7f6 fd5d 	bl	8000298 <__aeabi_dsub>
 80097de:	4652      	mov	r2, sl
 80097e0:	465b      	mov	r3, fp
 80097e2:	4680      	mov	r8, r0
 80097e4:	4689      	mov	r9, r1
 80097e6:	f7f7 f99f 	bl	8000b28 <__aeabi_dcmpgt>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f040 8295 	bne.w	8009d1a <_dtoa_r+0x97a>
 80097f0:	4652      	mov	r2, sl
 80097f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097f6:	4640      	mov	r0, r8
 80097f8:	4649      	mov	r1, r9
 80097fa:	f7f7 f977 	bl	8000aec <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8289 	bne.w	8009d16 <_dtoa_r+0x976>
 8009804:	ec5b ab19 	vmov	sl, fp, d9
 8009808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800980a:	2b00      	cmp	r3, #0
 800980c:	f2c0 8148 	blt.w	8009aa0 <_dtoa_r+0x700>
 8009810:	9a00      	ldr	r2, [sp, #0]
 8009812:	2a0e      	cmp	r2, #14
 8009814:	f300 8144 	bgt.w	8009aa0 <_dtoa_r+0x700>
 8009818:	4b67      	ldr	r3, [pc, #412]	; (80099b8 <_dtoa_r+0x618>)
 800981a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800981e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009824:	2b00      	cmp	r3, #0
 8009826:	f280 80d5 	bge.w	80099d4 <_dtoa_r+0x634>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f300 80d1 	bgt.w	80099d4 <_dtoa_r+0x634>
 8009832:	f040 826f 	bne.w	8009d14 <_dtoa_r+0x974>
 8009836:	4b65      	ldr	r3, [pc, #404]	; (80099cc <_dtoa_r+0x62c>)
 8009838:	2200      	movs	r2, #0
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f6 fee3 	bl	8000608 <__aeabi_dmul>
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	f7f7 f965 	bl	8000b14 <__aeabi_dcmpge>
 800984a:	9e03      	ldr	r6, [sp, #12]
 800984c:	4637      	mov	r7, r6
 800984e:	2800      	cmp	r0, #0
 8009850:	f040 8245 	bne.w	8009cde <_dtoa_r+0x93e>
 8009854:	9d01      	ldr	r5, [sp, #4]
 8009856:	2331      	movs	r3, #49	; 0x31
 8009858:	f805 3b01 	strb.w	r3, [r5], #1
 800985c:	9b00      	ldr	r3, [sp, #0]
 800985e:	3301      	adds	r3, #1
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	e240      	b.n	8009ce6 <_dtoa_r+0x946>
 8009864:	07f2      	lsls	r2, r6, #31
 8009866:	d505      	bpl.n	8009874 <_dtoa_r+0x4d4>
 8009868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800986c:	f7f6 fecc 	bl	8000608 <__aeabi_dmul>
 8009870:	3501      	adds	r5, #1
 8009872:	2301      	movs	r3, #1
 8009874:	1076      	asrs	r6, r6, #1
 8009876:	3708      	adds	r7, #8
 8009878:	e777      	b.n	800976a <_dtoa_r+0x3ca>
 800987a:	2502      	movs	r5, #2
 800987c:	e779      	b.n	8009772 <_dtoa_r+0x3d2>
 800987e:	9f00      	ldr	r7, [sp, #0]
 8009880:	9e03      	ldr	r6, [sp, #12]
 8009882:	e794      	b.n	80097ae <_dtoa_r+0x40e>
 8009884:	9901      	ldr	r1, [sp, #4]
 8009886:	4b4c      	ldr	r3, [pc, #304]	; (80099b8 <_dtoa_r+0x618>)
 8009888:	4431      	add	r1, r6
 800988a:	910d      	str	r1, [sp, #52]	; 0x34
 800988c:	9908      	ldr	r1, [sp, #32]
 800988e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009896:	2900      	cmp	r1, #0
 8009898:	d043      	beq.n	8009922 <_dtoa_r+0x582>
 800989a:	494d      	ldr	r1, [pc, #308]	; (80099d0 <_dtoa_r+0x630>)
 800989c:	2000      	movs	r0, #0
 800989e:	f7f6 ffdd 	bl	800085c <__aeabi_ddiv>
 80098a2:	4652      	mov	r2, sl
 80098a4:	465b      	mov	r3, fp
 80098a6:	f7f6 fcf7 	bl	8000298 <__aeabi_dsub>
 80098aa:	9d01      	ldr	r5, [sp, #4]
 80098ac:	4682      	mov	sl, r0
 80098ae:	468b      	mov	fp, r1
 80098b0:	4649      	mov	r1, r9
 80098b2:	4640      	mov	r0, r8
 80098b4:	f7f7 f958 	bl	8000b68 <__aeabi_d2iz>
 80098b8:	4606      	mov	r6, r0
 80098ba:	f7f6 fe3b 	bl	8000534 <__aeabi_i2d>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 fce7 	bl	8000298 <__aeabi_dsub>
 80098ca:	3630      	adds	r6, #48	; 0x30
 80098cc:	f805 6b01 	strb.w	r6, [r5], #1
 80098d0:	4652      	mov	r2, sl
 80098d2:	465b      	mov	r3, fp
 80098d4:	4680      	mov	r8, r0
 80098d6:	4689      	mov	r9, r1
 80098d8:	f7f7 f908 	bl	8000aec <__aeabi_dcmplt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d163      	bne.n	80099a8 <_dtoa_r+0x608>
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	4936      	ldr	r1, [pc, #216]	; (80099c0 <_dtoa_r+0x620>)
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7f6 fcd6 	bl	8000298 <__aeabi_dsub>
 80098ec:	4652      	mov	r2, sl
 80098ee:	465b      	mov	r3, fp
 80098f0:	f7f7 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f040 80b5 	bne.w	8009a64 <_dtoa_r+0x6c4>
 80098fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098fc:	429d      	cmp	r5, r3
 80098fe:	d081      	beq.n	8009804 <_dtoa_r+0x464>
 8009900:	4b30      	ldr	r3, [pc, #192]	; (80099c4 <_dtoa_r+0x624>)
 8009902:	2200      	movs	r2, #0
 8009904:	4650      	mov	r0, sl
 8009906:	4659      	mov	r1, fp
 8009908:	f7f6 fe7e 	bl	8000608 <__aeabi_dmul>
 800990c:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <_dtoa_r+0x624>)
 800990e:	4682      	mov	sl, r0
 8009910:	468b      	mov	fp, r1
 8009912:	4640      	mov	r0, r8
 8009914:	4649      	mov	r1, r9
 8009916:	2200      	movs	r2, #0
 8009918:	f7f6 fe76 	bl	8000608 <__aeabi_dmul>
 800991c:	4680      	mov	r8, r0
 800991e:	4689      	mov	r9, r1
 8009920:	e7c6      	b.n	80098b0 <_dtoa_r+0x510>
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	f7f6 fe6f 	bl	8000608 <__aeabi_dmul>
 800992a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992c:	9d01      	ldr	r5, [sp, #4]
 800992e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009930:	4682      	mov	sl, r0
 8009932:	468b      	mov	fp, r1
 8009934:	4649      	mov	r1, r9
 8009936:	4640      	mov	r0, r8
 8009938:	f7f7 f916 	bl	8000b68 <__aeabi_d2iz>
 800993c:	4606      	mov	r6, r0
 800993e:	f7f6 fdf9 	bl	8000534 <__aeabi_i2d>
 8009942:	3630      	adds	r6, #48	; 0x30
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f6 fca4 	bl	8000298 <__aeabi_dsub>
 8009950:	f805 6b01 	strb.w	r6, [r5], #1
 8009954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009956:	429d      	cmp	r5, r3
 8009958:	4680      	mov	r8, r0
 800995a:	4689      	mov	r9, r1
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	d124      	bne.n	80099ac <_dtoa_r+0x60c>
 8009962:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <_dtoa_r+0x630>)
 8009964:	4650      	mov	r0, sl
 8009966:	4659      	mov	r1, fp
 8009968:	f7f6 fc98 	bl	800029c <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f7 f8d8 	bl	8000b28 <__aeabi_dcmpgt>
 8009978:	2800      	cmp	r0, #0
 800997a:	d173      	bne.n	8009a64 <_dtoa_r+0x6c4>
 800997c:	4652      	mov	r2, sl
 800997e:	465b      	mov	r3, fp
 8009980:	4913      	ldr	r1, [pc, #76]	; (80099d0 <_dtoa_r+0x630>)
 8009982:	2000      	movs	r0, #0
 8009984:	f7f6 fc88 	bl	8000298 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	f7f7 f8ac 	bl	8000aec <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f af35 	beq.w	8009804 <_dtoa_r+0x464>
 800999a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800999c:	1e6b      	subs	r3, r5, #1
 800999e:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099a4:	2b30      	cmp	r3, #48	; 0x30
 80099a6:	d0f8      	beq.n	800999a <_dtoa_r+0x5fa>
 80099a8:	9700      	str	r7, [sp, #0]
 80099aa:	e049      	b.n	8009a40 <_dtoa_r+0x6a0>
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <_dtoa_r+0x624>)
 80099ae:	f7f6 fe2b 	bl	8000608 <__aeabi_dmul>
 80099b2:	4680      	mov	r8, r0
 80099b4:	4689      	mov	r9, r1
 80099b6:	e7bd      	b.n	8009934 <_dtoa_r+0x594>
 80099b8:	0800c3d0 	.word	0x0800c3d0
 80099bc:	0800c3a8 	.word	0x0800c3a8
 80099c0:	3ff00000 	.word	0x3ff00000
 80099c4:	40240000 	.word	0x40240000
 80099c8:	401c0000 	.word	0x401c0000
 80099cc:	40140000 	.word	0x40140000
 80099d0:	3fe00000 	.word	0x3fe00000
 80099d4:	9d01      	ldr	r5, [sp, #4]
 80099d6:	4656      	mov	r6, sl
 80099d8:	465f      	mov	r7, fp
 80099da:	4642      	mov	r2, r8
 80099dc:	464b      	mov	r3, r9
 80099de:	4630      	mov	r0, r6
 80099e0:	4639      	mov	r1, r7
 80099e2:	f7f6 ff3b 	bl	800085c <__aeabi_ddiv>
 80099e6:	f7f7 f8bf 	bl	8000b68 <__aeabi_d2iz>
 80099ea:	4682      	mov	sl, r0
 80099ec:	f7f6 fda2 	bl	8000534 <__aeabi_i2d>
 80099f0:	4642      	mov	r2, r8
 80099f2:	464b      	mov	r3, r9
 80099f4:	f7f6 fe08 	bl	8000608 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a04:	f7f6 fc48 	bl	8000298 <__aeabi_dsub>
 8009a08:	f805 6b01 	strb.w	r6, [r5], #1
 8009a0c:	9e01      	ldr	r6, [sp, #4]
 8009a0e:	9f03      	ldr	r7, [sp, #12]
 8009a10:	1bae      	subs	r6, r5, r6
 8009a12:	42b7      	cmp	r7, r6
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	d135      	bne.n	8009a86 <_dtoa_r+0x6e6>
 8009a1a:	f7f6 fc3f 	bl	800029c <__adddf3>
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	f7f7 f87f 	bl	8000b28 <__aeabi_dcmpgt>
 8009a2a:	b9d0      	cbnz	r0, 8009a62 <_dtoa_r+0x6c2>
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	464b      	mov	r3, r9
 8009a30:	4630      	mov	r0, r6
 8009a32:	4639      	mov	r1, r7
 8009a34:	f7f7 f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a38:	b110      	cbz	r0, 8009a40 <_dtoa_r+0x6a0>
 8009a3a:	f01a 0f01 	tst.w	sl, #1
 8009a3e:	d110      	bne.n	8009a62 <_dtoa_r+0x6c2>
 8009a40:	4620      	mov	r0, r4
 8009a42:	ee18 1a10 	vmov	r1, s16
 8009a46:	f001 f89b 	bl	800ab80 <_Bfree>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9800      	ldr	r0, [sp, #0]
 8009a4e:	702b      	strb	r3, [r5, #0]
 8009a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a52:	3001      	adds	r0, #1
 8009a54:	6018      	str	r0, [r3, #0]
 8009a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f43f acf1 	beq.w	8009440 <_dtoa_r+0xa0>
 8009a5e:	601d      	str	r5, [r3, #0]
 8009a60:	e4ee      	b.n	8009440 <_dtoa_r+0xa0>
 8009a62:	9f00      	ldr	r7, [sp, #0]
 8009a64:	462b      	mov	r3, r5
 8009a66:	461d      	mov	r5, r3
 8009a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a6c:	2a39      	cmp	r2, #57	; 0x39
 8009a6e:	d106      	bne.n	8009a7e <_dtoa_r+0x6de>
 8009a70:	9a01      	ldr	r2, [sp, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d1f7      	bne.n	8009a66 <_dtoa_r+0x6c6>
 8009a76:	9901      	ldr	r1, [sp, #4]
 8009a78:	2230      	movs	r2, #48	; 0x30
 8009a7a:	3701      	adds	r7, #1
 8009a7c:	700a      	strb	r2, [r1, #0]
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	3201      	adds	r2, #1
 8009a82:	701a      	strb	r2, [r3, #0]
 8009a84:	e790      	b.n	80099a8 <_dtoa_r+0x608>
 8009a86:	4ba6      	ldr	r3, [pc, #664]	; (8009d20 <_dtoa_r+0x980>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7f6 fdbd 	bl	8000608 <__aeabi_dmul>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2300      	movs	r3, #0
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	f7f7 f81f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d09d      	beq.n	80099da <_dtoa_r+0x63a>
 8009a9e:	e7cf      	b.n	8009a40 <_dtoa_r+0x6a0>
 8009aa0:	9a08      	ldr	r2, [sp, #32]
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	f000 80d7 	beq.w	8009c56 <_dtoa_r+0x8b6>
 8009aa8:	9a06      	ldr	r2, [sp, #24]
 8009aaa:	2a01      	cmp	r2, #1
 8009aac:	f300 80ba 	bgt.w	8009c24 <_dtoa_r+0x884>
 8009ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ab2:	2a00      	cmp	r2, #0
 8009ab4:	f000 80b2 	beq.w	8009c1c <_dtoa_r+0x87c>
 8009ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009abc:	9e07      	ldr	r6, [sp, #28]
 8009abe:	9d04      	ldr	r5, [sp, #16]
 8009ac0:	9a04      	ldr	r2, [sp, #16]
 8009ac2:	441a      	add	r2, r3
 8009ac4:	9204      	str	r2, [sp, #16]
 8009ac6:	9a05      	ldr	r2, [sp, #20]
 8009ac8:	2101      	movs	r1, #1
 8009aca:	441a      	add	r2, r3
 8009acc:	4620      	mov	r0, r4
 8009ace:	9205      	str	r2, [sp, #20]
 8009ad0:	f001 f958 	bl	800ad84 <__i2b>
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	dd0c      	ble.n	8009af4 <_dtoa_r+0x754>
 8009ada:	9b05      	ldr	r3, [sp, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd09      	ble.n	8009af4 <_dtoa_r+0x754>
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	9a04      	ldr	r2, [sp, #16]
 8009ae4:	bfa8      	it	ge
 8009ae6:	462b      	movge	r3, r5
 8009ae8:	1ad2      	subs	r2, r2, r3
 8009aea:	9204      	str	r2, [sp, #16]
 8009aec:	9a05      	ldr	r2, [sp, #20]
 8009aee:	1aed      	subs	r5, r5, r3
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	b31b      	cbz	r3, 8009b40 <_dtoa_r+0x7a0>
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 80af 	beq.w	8009c5e <_dtoa_r+0x8be>
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	dd13      	ble.n	8009b2c <_dtoa_r+0x78c>
 8009b04:	4639      	mov	r1, r7
 8009b06:	4632      	mov	r2, r6
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f001 f9fb 	bl	800af04 <__pow5mult>
 8009b0e:	ee18 2a10 	vmov	r2, s16
 8009b12:	4601      	mov	r1, r0
 8009b14:	4607      	mov	r7, r0
 8009b16:	4620      	mov	r0, r4
 8009b18:	f001 f94a 	bl	800adb0 <__multiply>
 8009b1c:	ee18 1a10 	vmov	r1, s16
 8009b20:	4680      	mov	r8, r0
 8009b22:	4620      	mov	r0, r4
 8009b24:	f001 f82c 	bl	800ab80 <_Bfree>
 8009b28:	ee08 8a10 	vmov	s16, r8
 8009b2c:	9b07      	ldr	r3, [sp, #28]
 8009b2e:	1b9a      	subs	r2, r3, r6
 8009b30:	d006      	beq.n	8009b40 <_dtoa_r+0x7a0>
 8009b32:	ee18 1a10 	vmov	r1, s16
 8009b36:	4620      	mov	r0, r4
 8009b38:	f001 f9e4 	bl	800af04 <__pow5mult>
 8009b3c:	ee08 0a10 	vmov	s16, r0
 8009b40:	2101      	movs	r1, #1
 8009b42:	4620      	mov	r0, r4
 8009b44:	f001 f91e 	bl	800ad84 <__i2b>
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	f340 8088 	ble.w	8009c62 <_dtoa_r+0x8c2>
 8009b52:	461a      	mov	r2, r3
 8009b54:	4601      	mov	r1, r0
 8009b56:	4620      	mov	r0, r4
 8009b58:	f001 f9d4 	bl	800af04 <__pow5mult>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	4606      	mov	r6, r0
 8009b62:	f340 8081 	ble.w	8009c68 <_dtoa_r+0x8c8>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	6933      	ldr	r3, [r6, #16]
 8009b6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b70:	6918      	ldr	r0, [r3, #16]
 8009b72:	f001 f8b7 	bl	800ace4 <__hi0bits>
 8009b76:	f1c0 0020 	rsb	r0, r0, #32
 8009b7a:	9b05      	ldr	r3, [sp, #20]
 8009b7c:	4418      	add	r0, r3
 8009b7e:	f010 001f 	ands.w	r0, r0, #31
 8009b82:	f000 8092 	beq.w	8009caa <_dtoa_r+0x90a>
 8009b86:	f1c0 0320 	rsb	r3, r0, #32
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	f340 808a 	ble.w	8009ca4 <_dtoa_r+0x904>
 8009b90:	f1c0 001c 	rsb	r0, r0, #28
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	4403      	add	r3, r0
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	9b05      	ldr	r3, [sp, #20]
 8009b9c:	4403      	add	r3, r0
 8009b9e:	4405      	add	r5, r0
 8009ba0:	9305      	str	r3, [sp, #20]
 8009ba2:	9b04      	ldr	r3, [sp, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dd07      	ble.n	8009bb8 <_dtoa_r+0x818>
 8009ba8:	ee18 1a10 	vmov	r1, s16
 8009bac:	461a      	mov	r2, r3
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f001 fa02 	bl	800afb8 <__lshift>
 8009bb4:	ee08 0a10 	vmov	s16, r0
 8009bb8:	9b05      	ldr	r3, [sp, #20]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd05      	ble.n	8009bca <_dtoa_r+0x82a>
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f001 f9f8 	bl	800afb8 <__lshift>
 8009bc8:	4606      	mov	r6, r0
 8009bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d06e      	beq.n	8009cae <_dtoa_r+0x90e>
 8009bd0:	ee18 0a10 	vmov	r0, s16
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	f001 fa5f 	bl	800b098 <__mcmp>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	da67      	bge.n	8009cae <_dtoa_r+0x90e>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	ee18 1a10 	vmov	r1, s16
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	220a      	movs	r2, #10
 8009bea:	2300      	movs	r3, #0
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 ffe9 	bl	800abc4 <__multadd>
 8009bf2:	9b08      	ldr	r3, [sp, #32]
 8009bf4:	ee08 0a10 	vmov	s16, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 81b1 	beq.w	8009f60 <_dtoa_r+0xbc0>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4639      	mov	r1, r7
 8009c02:	220a      	movs	r2, #10
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 ffdd 	bl	800abc4 <__multadd>
 8009c0a:	9b02      	ldr	r3, [sp, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	4607      	mov	r7, r0
 8009c10:	f300 808e 	bgt.w	8009d30 <_dtoa_r+0x990>
 8009c14:	9b06      	ldr	r3, [sp, #24]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	dc51      	bgt.n	8009cbe <_dtoa_r+0x91e>
 8009c1a:	e089      	b.n	8009d30 <_dtoa_r+0x990>
 8009c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c22:	e74b      	b.n	8009abc <_dtoa_r+0x71c>
 8009c24:	9b03      	ldr	r3, [sp, #12]
 8009c26:	1e5e      	subs	r6, r3, #1
 8009c28:	9b07      	ldr	r3, [sp, #28]
 8009c2a:	42b3      	cmp	r3, r6
 8009c2c:	bfbf      	itttt	lt
 8009c2e:	9b07      	ldrlt	r3, [sp, #28]
 8009c30:	9607      	strlt	r6, [sp, #28]
 8009c32:	1af2      	sublt	r2, r6, r3
 8009c34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c36:	bfb6      	itet	lt
 8009c38:	189b      	addlt	r3, r3, r2
 8009c3a:	1b9e      	subge	r6, r3, r6
 8009c3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c3e:	9b03      	ldr	r3, [sp, #12]
 8009c40:	bfb8      	it	lt
 8009c42:	2600      	movlt	r6, #0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bfb7      	itett	lt
 8009c48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009c4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c50:	1a9d      	sublt	r5, r3, r2
 8009c52:	2300      	movlt	r3, #0
 8009c54:	e734      	b.n	8009ac0 <_dtoa_r+0x720>
 8009c56:	9e07      	ldr	r6, [sp, #28]
 8009c58:	9d04      	ldr	r5, [sp, #16]
 8009c5a:	9f08      	ldr	r7, [sp, #32]
 8009c5c:	e73b      	b.n	8009ad6 <_dtoa_r+0x736>
 8009c5e:	9a07      	ldr	r2, [sp, #28]
 8009c60:	e767      	b.n	8009b32 <_dtoa_r+0x792>
 8009c62:	9b06      	ldr	r3, [sp, #24]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	dc18      	bgt.n	8009c9a <_dtoa_r+0x8fa>
 8009c68:	f1ba 0f00 	cmp.w	sl, #0
 8009c6c:	d115      	bne.n	8009c9a <_dtoa_r+0x8fa>
 8009c6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c72:	b993      	cbnz	r3, 8009c9a <_dtoa_r+0x8fa>
 8009c74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c78:	0d1b      	lsrs	r3, r3, #20
 8009c7a:	051b      	lsls	r3, r3, #20
 8009c7c:	b183      	cbz	r3, 8009ca0 <_dtoa_r+0x900>
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	3301      	adds	r3, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	9b05      	ldr	r3, [sp, #20]
 8009c86:	3301      	adds	r3, #1
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	f04f 0801 	mov.w	r8, #1
 8009c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f47f af6a 	bne.w	8009b6a <_dtoa_r+0x7ca>
 8009c96:	2001      	movs	r0, #1
 8009c98:	e76f      	b.n	8009b7a <_dtoa_r+0x7da>
 8009c9a:	f04f 0800 	mov.w	r8, #0
 8009c9e:	e7f6      	b.n	8009c8e <_dtoa_r+0x8ee>
 8009ca0:	4698      	mov	r8, r3
 8009ca2:	e7f4      	b.n	8009c8e <_dtoa_r+0x8ee>
 8009ca4:	f43f af7d 	beq.w	8009ba2 <_dtoa_r+0x802>
 8009ca8:	4618      	mov	r0, r3
 8009caa:	301c      	adds	r0, #28
 8009cac:	e772      	b.n	8009b94 <_dtoa_r+0x7f4>
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc37      	bgt.n	8009d24 <_dtoa_r+0x984>
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	dd34      	ble.n	8009d24 <_dtoa_r+0x984>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	9302      	str	r3, [sp, #8]
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	b96b      	cbnz	r3, 8009cde <_dtoa_r+0x93e>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	2205      	movs	r2, #5
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 ff7c 	bl	800abc4 <__multadd>
 8009ccc:	4601      	mov	r1, r0
 8009cce:	4606      	mov	r6, r0
 8009cd0:	ee18 0a10 	vmov	r0, s16
 8009cd4:	f001 f9e0 	bl	800b098 <__mcmp>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f73f adbb 	bgt.w	8009854 <_dtoa_r+0x4b4>
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	9d01      	ldr	r5, [sp, #4]
 8009ce2:	43db      	mvns	r3, r3
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	4631      	mov	r1, r6
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 ff47 	bl	800ab80 <_Bfree>
 8009cf2:	2f00      	cmp	r7, #0
 8009cf4:	f43f aea4 	beq.w	8009a40 <_dtoa_r+0x6a0>
 8009cf8:	f1b8 0f00 	cmp.w	r8, #0
 8009cfc:	d005      	beq.n	8009d0a <_dtoa_r+0x96a>
 8009cfe:	45b8      	cmp	r8, r7
 8009d00:	d003      	beq.n	8009d0a <_dtoa_r+0x96a>
 8009d02:	4641      	mov	r1, r8
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 ff3b 	bl	800ab80 <_Bfree>
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 ff37 	bl	800ab80 <_Bfree>
 8009d12:	e695      	b.n	8009a40 <_dtoa_r+0x6a0>
 8009d14:	2600      	movs	r6, #0
 8009d16:	4637      	mov	r7, r6
 8009d18:	e7e1      	b.n	8009cde <_dtoa_r+0x93e>
 8009d1a:	9700      	str	r7, [sp, #0]
 8009d1c:	4637      	mov	r7, r6
 8009d1e:	e599      	b.n	8009854 <_dtoa_r+0x4b4>
 8009d20:	40240000 	.word	0x40240000
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 80ca 	beq.w	8009ec0 <_dtoa_r+0xb20>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	dd05      	ble.n	8009d40 <_dtoa_r+0x9a0>
 8009d34:	4639      	mov	r1, r7
 8009d36:	462a      	mov	r2, r5
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f001 f93d 	bl	800afb8 <__lshift>
 8009d3e:	4607      	mov	r7, r0
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	d05b      	beq.n	8009dfe <_dtoa_r+0xa5e>
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fed9 	bl	800ab00 <_Balloc>
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b928      	cbnz	r0, 8009d5e <_dtoa_r+0x9be>
 8009d52:	4b87      	ldr	r3, [pc, #540]	; (8009f70 <_dtoa_r+0xbd0>)
 8009d54:	4602      	mov	r2, r0
 8009d56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d5a:	f7ff bb3b 	b.w	80093d4 <_dtoa_r+0x34>
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	3202      	adds	r2, #2
 8009d62:	0092      	lsls	r2, r2, #2
 8009d64:	f107 010c 	add.w	r1, r7, #12
 8009d68:	300c      	adds	r0, #12
 8009d6a:	f7fd f9f7 	bl	800715c <memcpy>
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4629      	mov	r1, r5
 8009d72:	4620      	mov	r0, r4
 8009d74:	f001 f920 	bl	800afb8 <__lshift>
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	f103 0901 	add.w	r9, r3, #1
 8009d7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d82:	4413      	add	r3, r2
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	f00a 0301 	and.w	r3, sl, #1
 8009d8a:	46b8      	mov	r8, r7
 8009d8c:	9304      	str	r3, [sp, #16]
 8009d8e:	4607      	mov	r7, r0
 8009d90:	4631      	mov	r1, r6
 8009d92:	ee18 0a10 	vmov	r0, s16
 8009d96:	f7ff fa75 	bl	8009284 <quorem>
 8009d9a:	4641      	mov	r1, r8
 8009d9c:	9002      	str	r0, [sp, #8]
 8009d9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009da2:	ee18 0a10 	vmov	r0, s16
 8009da6:	f001 f977 	bl	800b098 <__mcmp>
 8009daa:	463a      	mov	r2, r7
 8009dac:	9003      	str	r0, [sp, #12]
 8009dae:	4631      	mov	r1, r6
 8009db0:	4620      	mov	r0, r4
 8009db2:	f001 f98d 	bl	800b0d0 <__mdiff>
 8009db6:	68c2      	ldr	r2, [r0, #12]
 8009db8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	bb02      	cbnz	r2, 8009e02 <_dtoa_r+0xa62>
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	ee18 0a10 	vmov	r0, s16
 8009dc6:	f001 f967 	bl	800b098 <__mcmp>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4620      	mov	r0, r4
 8009dd0:	9207      	str	r2, [sp, #28]
 8009dd2:	f000 fed5 	bl	800ab80 <_Bfree>
 8009dd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009dda:	ea43 0102 	orr.w	r1, r3, r2
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	430b      	orrs	r3, r1
 8009de2:	464d      	mov	r5, r9
 8009de4:	d10f      	bne.n	8009e06 <_dtoa_r+0xa66>
 8009de6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009dea:	d02a      	beq.n	8009e42 <_dtoa_r+0xaa2>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dd02      	ble.n	8009df8 <_dtoa_r+0xa58>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009df8:	f88b a000 	strb.w	sl, [fp]
 8009dfc:	e775      	b.n	8009cea <_dtoa_r+0x94a>
 8009dfe:	4638      	mov	r0, r7
 8009e00:	e7ba      	b.n	8009d78 <_dtoa_r+0x9d8>
 8009e02:	2201      	movs	r2, #1
 8009e04:	e7e2      	b.n	8009dcc <_dtoa_r+0xa2c>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db04      	blt.n	8009e16 <_dtoa_r+0xa76>
 8009e0c:	9906      	ldr	r1, [sp, #24]
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	9904      	ldr	r1, [sp, #16]
 8009e12:	430b      	orrs	r3, r1
 8009e14:	d122      	bne.n	8009e5c <_dtoa_r+0xabc>
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	ddee      	ble.n	8009df8 <_dtoa_r+0xa58>
 8009e1a:	ee18 1a10 	vmov	r1, s16
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4620      	mov	r0, r4
 8009e22:	f001 f8c9 	bl	800afb8 <__lshift>
 8009e26:	4631      	mov	r1, r6
 8009e28:	ee08 0a10 	vmov	s16, r0
 8009e2c:	f001 f934 	bl	800b098 <__mcmp>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	dc03      	bgt.n	8009e3c <_dtoa_r+0xa9c>
 8009e34:	d1e0      	bne.n	8009df8 <_dtoa_r+0xa58>
 8009e36:	f01a 0f01 	tst.w	sl, #1
 8009e3a:	d0dd      	beq.n	8009df8 <_dtoa_r+0xa58>
 8009e3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e40:	d1d7      	bne.n	8009df2 <_dtoa_r+0xa52>
 8009e42:	2339      	movs	r3, #57	; 0x39
 8009e44:	f88b 3000 	strb.w	r3, [fp]
 8009e48:	462b      	mov	r3, r5
 8009e4a:	461d      	mov	r5, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e52:	2a39      	cmp	r2, #57	; 0x39
 8009e54:	d071      	beq.n	8009f3a <_dtoa_r+0xb9a>
 8009e56:	3201      	adds	r2, #1
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e746      	b.n	8009cea <_dtoa_r+0x94a>
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	dd07      	ble.n	8009e70 <_dtoa_r+0xad0>
 8009e60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e64:	d0ed      	beq.n	8009e42 <_dtoa_r+0xaa2>
 8009e66:	f10a 0301 	add.w	r3, sl, #1
 8009e6a:	f88b 3000 	strb.w	r3, [fp]
 8009e6e:	e73c      	b.n	8009cea <_dtoa_r+0x94a>
 8009e70:	9b05      	ldr	r3, [sp, #20]
 8009e72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009e76:	4599      	cmp	r9, r3
 8009e78:	d047      	beq.n	8009f0a <_dtoa_r+0xb6a>
 8009e7a:	ee18 1a10 	vmov	r1, s16
 8009e7e:	2300      	movs	r3, #0
 8009e80:	220a      	movs	r2, #10
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fe9e 	bl	800abc4 <__multadd>
 8009e88:	45b8      	cmp	r8, r7
 8009e8a:	ee08 0a10 	vmov	s16, r0
 8009e8e:	f04f 0300 	mov.w	r3, #0
 8009e92:	f04f 020a 	mov.w	r2, #10
 8009e96:	4641      	mov	r1, r8
 8009e98:	4620      	mov	r0, r4
 8009e9a:	d106      	bne.n	8009eaa <_dtoa_r+0xb0a>
 8009e9c:	f000 fe92 	bl	800abc4 <__multadd>
 8009ea0:	4680      	mov	r8, r0
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	f109 0901 	add.w	r9, r9, #1
 8009ea8:	e772      	b.n	8009d90 <_dtoa_r+0x9f0>
 8009eaa:	f000 fe8b 	bl	800abc4 <__multadd>
 8009eae:	4639      	mov	r1, r7
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	220a      	movs	r2, #10
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 fe84 	bl	800abc4 <__multadd>
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	e7f1      	b.n	8009ea4 <_dtoa_r+0xb04>
 8009ec0:	9b03      	ldr	r3, [sp, #12]
 8009ec2:	9302      	str	r3, [sp, #8]
 8009ec4:	9d01      	ldr	r5, [sp, #4]
 8009ec6:	ee18 0a10 	vmov	r0, s16
 8009eca:	4631      	mov	r1, r6
 8009ecc:	f7ff f9da 	bl	8009284 <quorem>
 8009ed0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	f805 ab01 	strb.w	sl, [r5], #1
 8009eda:	1aea      	subs	r2, r5, r3
 8009edc:	9b02      	ldr	r3, [sp, #8]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	dd09      	ble.n	8009ef6 <_dtoa_r+0xb56>
 8009ee2:	ee18 1a10 	vmov	r1, s16
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	220a      	movs	r2, #10
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fe6a 	bl	800abc4 <__multadd>
 8009ef0:	ee08 0a10 	vmov	s16, r0
 8009ef4:	e7e7      	b.n	8009ec6 <_dtoa_r+0xb26>
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfc8      	it	gt
 8009efc:	461d      	movgt	r5, r3
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	bfd8      	it	le
 8009f02:	2501      	movle	r5, #1
 8009f04:	441d      	add	r5, r3
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	ee18 1a10 	vmov	r1, s16
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4620      	mov	r0, r4
 8009f12:	f001 f851 	bl	800afb8 <__lshift>
 8009f16:	4631      	mov	r1, r6
 8009f18:	ee08 0a10 	vmov	s16, r0
 8009f1c:	f001 f8bc 	bl	800b098 <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dc91      	bgt.n	8009e48 <_dtoa_r+0xaa8>
 8009f24:	d102      	bne.n	8009f2c <_dtoa_r+0xb8c>
 8009f26:	f01a 0f01 	tst.w	sl, #1
 8009f2a:	d18d      	bne.n	8009e48 <_dtoa_r+0xaa8>
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	461d      	mov	r5, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a30      	cmp	r2, #48	; 0x30
 8009f36:	d0fa      	beq.n	8009f2e <_dtoa_r+0xb8e>
 8009f38:	e6d7      	b.n	8009cea <_dtoa_r+0x94a>
 8009f3a:	9a01      	ldr	r2, [sp, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d184      	bne.n	8009e4a <_dtoa_r+0xaaa>
 8009f40:	9b00      	ldr	r3, [sp, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	2331      	movs	r3, #49	; 0x31
 8009f48:	7013      	strb	r3, [r2, #0]
 8009f4a:	e6ce      	b.n	8009cea <_dtoa_r+0x94a>
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <_dtoa_r+0xbd4>)
 8009f4e:	f7ff ba95 	b.w	800947c <_dtoa_r+0xdc>
 8009f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f47f aa6e 	bne.w	8009436 <_dtoa_r+0x96>
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <_dtoa_r+0xbd8>)
 8009f5c:	f7ff ba8e 	b.w	800947c <_dtoa_r+0xdc>
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dcae      	bgt.n	8009ec4 <_dtoa_r+0xb24>
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	f73f aea8 	bgt.w	8009cbe <_dtoa_r+0x91e>
 8009f6e:	e7a9      	b.n	8009ec4 <_dtoa_r+0xb24>
 8009f70:	0800c259 	.word	0x0800c259
 8009f74:	0800bfc0 	.word	0x0800bfc0
 8009f78:	0800c1f1 	.word	0x0800c1f1

08009f7c <__sflush_r>:
 8009f7c:	898a      	ldrh	r2, [r1, #12]
 8009f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f82:	4605      	mov	r5, r0
 8009f84:	0710      	lsls	r0, r2, #28
 8009f86:	460c      	mov	r4, r1
 8009f88:	d458      	bmi.n	800a03c <__sflush_r+0xc0>
 8009f8a:	684b      	ldr	r3, [r1, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dc05      	bgt.n	8009f9c <__sflush_r+0x20>
 8009f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc02      	bgt.n	8009f9c <__sflush_r+0x20>
 8009f96:	2000      	movs	r0, #0
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d0f9      	beq.n	8009f96 <__sflush_r+0x1a>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fa8:	682f      	ldr	r7, [r5, #0]
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	d032      	beq.n	800a014 <__sflush_r+0x98>
 8009fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	075a      	lsls	r2, r3, #29
 8009fb4:	d505      	bpl.n	8009fc2 <__sflush_r+0x46>
 8009fb6:	6863      	ldr	r3, [r4, #4]
 8009fb8:	1ac0      	subs	r0, r0, r3
 8009fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fbc:	b10b      	cbz	r3, 8009fc2 <__sflush_r+0x46>
 8009fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fc0:	1ac0      	subs	r0, r0, r3
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fc8:	6a21      	ldr	r1, [r4, #32]
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b0      	blx	r6
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	d106      	bne.n	8009fe2 <__sflush_r+0x66>
 8009fd4:	6829      	ldr	r1, [r5, #0]
 8009fd6:	291d      	cmp	r1, #29
 8009fd8:	d82c      	bhi.n	800a034 <__sflush_r+0xb8>
 8009fda:	4a2a      	ldr	r2, [pc, #168]	; (800a084 <__sflush_r+0x108>)
 8009fdc:	40ca      	lsrs	r2, r1
 8009fde:	07d6      	lsls	r6, r2, #31
 8009fe0:	d528      	bpl.n	800a034 <__sflush_r+0xb8>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	6062      	str	r2, [r4, #4]
 8009fe6:	04d9      	lsls	r1, r3, #19
 8009fe8:	6922      	ldr	r2, [r4, #16]
 8009fea:	6022      	str	r2, [r4, #0]
 8009fec:	d504      	bpl.n	8009ff8 <__sflush_r+0x7c>
 8009fee:	1c42      	adds	r2, r0, #1
 8009ff0:	d101      	bne.n	8009ff6 <__sflush_r+0x7a>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	b903      	cbnz	r3, 8009ff8 <__sflush_r+0x7c>
 8009ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ffa:	602f      	str	r7, [r5, #0]
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d0ca      	beq.n	8009f96 <__sflush_r+0x1a>
 800a000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a004:	4299      	cmp	r1, r3
 800a006:	d002      	beq.n	800a00e <__sflush_r+0x92>
 800a008:	4628      	mov	r0, r5
 800a00a:	f7fd f8bd 	bl	8007188 <_free_r>
 800a00e:	2000      	movs	r0, #0
 800a010:	6360      	str	r0, [r4, #52]	; 0x34
 800a012:	e7c1      	b.n	8009f98 <__sflush_r+0x1c>
 800a014:	6a21      	ldr	r1, [r4, #32]
 800a016:	2301      	movs	r3, #1
 800a018:	4628      	mov	r0, r5
 800a01a:	47b0      	blx	r6
 800a01c:	1c41      	adds	r1, r0, #1
 800a01e:	d1c7      	bne.n	8009fb0 <__sflush_r+0x34>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0c4      	beq.n	8009fb0 <__sflush_r+0x34>
 800a026:	2b1d      	cmp	r3, #29
 800a028:	d001      	beq.n	800a02e <__sflush_r+0xb2>
 800a02a:	2b16      	cmp	r3, #22
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0xb6>
 800a02e:	602f      	str	r7, [r5, #0]
 800a030:	e7b1      	b.n	8009f96 <__sflush_r+0x1a>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	e7ad      	b.n	8009f98 <__sflush_r+0x1c>
 800a03c:	690f      	ldr	r7, [r1, #16]
 800a03e:	2f00      	cmp	r7, #0
 800a040:	d0a9      	beq.n	8009f96 <__sflush_r+0x1a>
 800a042:	0793      	lsls	r3, r2, #30
 800a044:	680e      	ldr	r6, [r1, #0]
 800a046:	bf08      	it	eq
 800a048:	694b      	ldreq	r3, [r1, #20]
 800a04a:	600f      	str	r7, [r1, #0]
 800a04c:	bf18      	it	ne
 800a04e:	2300      	movne	r3, #0
 800a050:	eba6 0807 	sub.w	r8, r6, r7
 800a054:	608b      	str	r3, [r1, #8]
 800a056:	f1b8 0f00 	cmp.w	r8, #0
 800a05a:	dd9c      	ble.n	8009f96 <__sflush_r+0x1a>
 800a05c:	6a21      	ldr	r1, [r4, #32]
 800a05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a060:	4643      	mov	r3, r8
 800a062:	463a      	mov	r2, r7
 800a064:	4628      	mov	r0, r5
 800a066:	47b0      	blx	r6
 800a068:	2800      	cmp	r0, #0
 800a06a:	dc06      	bgt.n	800a07a <__sflush_r+0xfe>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e78e      	b.n	8009f98 <__sflush_r+0x1c>
 800a07a:	4407      	add	r7, r0
 800a07c:	eba8 0800 	sub.w	r8, r8, r0
 800a080:	e7e9      	b.n	800a056 <__sflush_r+0xda>
 800a082:	bf00      	nop
 800a084:	20400001 	.word	0x20400001

0800a088 <_fflush_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	690b      	ldr	r3, [r1, #16]
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b913      	cbnz	r3, 800a098 <_fflush_r+0x10>
 800a092:	2500      	movs	r5, #0
 800a094:	4628      	mov	r0, r5
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	b118      	cbz	r0, 800a0a2 <_fflush_r+0x1a>
 800a09a:	6983      	ldr	r3, [r0, #24]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <_fflush_r+0x1a>
 800a09e:	f000 f887 	bl	800a1b0 <__sinit>
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <_fflush_r+0x6c>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d11b      	bne.n	800a0e0 <_fflush_r+0x58>
 800a0a8:	686c      	ldr	r4, [r5, #4]
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0ef      	beq.n	800a092 <_fflush_r+0xa>
 800a0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0b4:	07d0      	lsls	r0, r2, #31
 800a0b6:	d404      	bmi.n	800a0c2 <_fflush_r+0x3a>
 800a0b8:	0599      	lsls	r1, r3, #22
 800a0ba:	d402      	bmi.n	800a0c2 <_fflush_r+0x3a>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0be:	f000 fc9a 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7ff ff59 	bl	8009f7c <__sflush_r>
 800a0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0cc:	07da      	lsls	r2, r3, #31
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	d4e0      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	059b      	lsls	r3, r3, #22
 800a0d6:	d4dd      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0da:	f000 fc8d 	bl	800a9f8 <__retarget_lock_release_recursive>
 800a0de:	e7d9      	b.n	800a094 <_fflush_r+0xc>
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <_fflush_r+0x70>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d101      	bne.n	800a0ea <_fflush_r+0x62>
 800a0e6:	68ac      	ldr	r4, [r5, #8]
 800a0e8:	e7df      	b.n	800a0aa <_fflush_r+0x22>
 800a0ea:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <_fflush_r+0x74>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf08      	it	eq
 800a0f0:	68ec      	ldreq	r4, [r5, #12]
 800a0f2:	e7da      	b.n	800a0aa <_fflush_r+0x22>
 800a0f4:	0800c28c 	.word	0x0800c28c
 800a0f8:	0800c2ac 	.word	0x0800c2ac
 800a0fc:	0800c26c 	.word	0x0800c26c

0800a100 <std>:
 800a100:	2300      	movs	r3, #0
 800a102:	b510      	push	{r4, lr}
 800a104:	4604      	mov	r4, r0
 800a106:	e9c0 3300 	strd	r3, r3, [r0]
 800a10a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a10e:	6083      	str	r3, [r0, #8]
 800a110:	8181      	strh	r1, [r0, #12]
 800a112:	6643      	str	r3, [r0, #100]	; 0x64
 800a114:	81c2      	strh	r2, [r0, #14]
 800a116:	6183      	str	r3, [r0, #24]
 800a118:	4619      	mov	r1, r3
 800a11a:	2208      	movs	r2, #8
 800a11c:	305c      	adds	r0, #92	; 0x5c
 800a11e:	f7fd f82b 	bl	8007178 <memset>
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <std+0x38>)
 800a124:	6263      	str	r3, [r4, #36]	; 0x24
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <std+0x3c>)
 800a128:	62a3      	str	r3, [r4, #40]	; 0x28
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <std+0x40>)
 800a12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a12e:	4b05      	ldr	r3, [pc, #20]	; (800a144 <std+0x44>)
 800a130:	6224      	str	r4, [r4, #32]
 800a132:	6323      	str	r3, [r4, #48]	; 0x30
 800a134:	bd10      	pop	{r4, pc}
 800a136:	bf00      	nop
 800a138:	0800ba29 	.word	0x0800ba29
 800a13c:	0800ba4b 	.word	0x0800ba4b
 800a140:	0800ba83 	.word	0x0800ba83
 800a144:	0800baa7 	.word	0x0800baa7

0800a148 <_cleanup_r>:
 800a148:	4901      	ldr	r1, [pc, #4]	; (800a150 <_cleanup_r+0x8>)
 800a14a:	f000 b8c1 	b.w	800a2d0 <_fwalk_reent>
 800a14e:	bf00      	nop
 800a150:	0800a089 	.word	0x0800a089

0800a154 <__sfmoreglue>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	2268      	movs	r2, #104	; 0x68
 800a158:	1e4d      	subs	r5, r1, #1
 800a15a:	4355      	muls	r5, r2
 800a15c:	460e      	mov	r6, r1
 800a15e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a162:	f7fd f87d 	bl	8007260 <_malloc_r>
 800a166:	4604      	mov	r4, r0
 800a168:	b140      	cbz	r0, 800a17c <__sfmoreglue+0x28>
 800a16a:	2100      	movs	r1, #0
 800a16c:	e9c0 1600 	strd	r1, r6, [r0]
 800a170:	300c      	adds	r0, #12
 800a172:	60a0      	str	r0, [r4, #8]
 800a174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a178:	f7fc fffe 	bl	8007178 <memset>
 800a17c:	4620      	mov	r0, r4
 800a17e:	bd70      	pop	{r4, r5, r6, pc}

0800a180 <__sfp_lock_acquire>:
 800a180:	4801      	ldr	r0, [pc, #4]	; (800a188 <__sfp_lock_acquire+0x8>)
 800a182:	f000 bc38 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800a186:	bf00      	nop
 800a188:	20000541 	.word	0x20000541

0800a18c <__sfp_lock_release>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__sfp_lock_release+0x8>)
 800a18e:	f000 bc33 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800a192:	bf00      	nop
 800a194:	20000541 	.word	0x20000541

0800a198 <__sinit_lock_acquire>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sinit_lock_acquire+0x8>)
 800a19a:	f000 bc2c 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20000542 	.word	0x20000542

0800a1a4 <__sinit_lock_release>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sinit_lock_release+0x8>)
 800a1a6:	f000 bc27 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	20000542 	.word	0x20000542

0800a1b0 <__sinit>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	f7ff fff0 	bl	800a198 <__sinit_lock_acquire>
 800a1b8:	69a3      	ldr	r3, [r4, #24]
 800a1ba:	b11b      	cbz	r3, 800a1c4 <__sinit+0x14>
 800a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c0:	f7ff bff0 	b.w	800a1a4 <__sinit_lock_release>
 800a1c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <__sinit+0x68>)
 800a1cc:	4a13      	ldr	r2, [pc, #76]	; (800a21c <__sinit+0x6c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	bf04      	itt	eq
 800a1d6:	2301      	moveq	r3, #1
 800a1d8:	61a3      	streq	r3, [r4, #24]
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 f820 	bl	800a220 <__sfp>
 800a1e0:	6060      	str	r0, [r4, #4]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 f81c 	bl	800a220 <__sfp>
 800a1e8:	60a0      	str	r0, [r4, #8]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 f818 	bl	800a220 <__sfp>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	60e0      	str	r0, [r4, #12]
 800a1f4:	2104      	movs	r1, #4
 800a1f6:	6860      	ldr	r0, [r4, #4]
 800a1f8:	f7ff ff82 	bl	800a100 <std>
 800a1fc:	68a0      	ldr	r0, [r4, #8]
 800a1fe:	2201      	movs	r2, #1
 800a200:	2109      	movs	r1, #9
 800a202:	f7ff ff7d 	bl	800a100 <std>
 800a206:	68e0      	ldr	r0, [r4, #12]
 800a208:	2202      	movs	r2, #2
 800a20a:	2112      	movs	r1, #18
 800a20c:	f7ff ff78 	bl	800a100 <std>
 800a210:	2301      	movs	r3, #1
 800a212:	61a3      	str	r3, [r4, #24]
 800a214:	e7d2      	b.n	800a1bc <__sinit+0xc>
 800a216:	bf00      	nop
 800a218:	0800bfac 	.word	0x0800bfac
 800a21c:	0800a149 	.word	0x0800a149

0800a220 <__sfp>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	4607      	mov	r7, r0
 800a224:	f7ff ffac 	bl	800a180 <__sfp_lock_acquire>
 800a228:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <__sfp+0x84>)
 800a22a:	681e      	ldr	r6, [r3, #0]
 800a22c:	69b3      	ldr	r3, [r6, #24]
 800a22e:	b913      	cbnz	r3, 800a236 <__sfp+0x16>
 800a230:	4630      	mov	r0, r6
 800a232:	f7ff ffbd 	bl	800a1b0 <__sinit>
 800a236:	3648      	adds	r6, #72	; 0x48
 800a238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	d503      	bpl.n	800a248 <__sfp+0x28>
 800a240:	6833      	ldr	r3, [r6, #0]
 800a242:	b30b      	cbz	r3, 800a288 <__sfp+0x68>
 800a244:	6836      	ldr	r6, [r6, #0]
 800a246:	e7f7      	b.n	800a238 <__sfp+0x18>
 800a248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a24c:	b9d5      	cbnz	r5, 800a284 <__sfp+0x64>
 800a24e:	4b16      	ldr	r3, [pc, #88]	; (800a2a8 <__sfp+0x88>)
 800a250:	60e3      	str	r3, [r4, #12]
 800a252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a256:	6665      	str	r5, [r4, #100]	; 0x64
 800a258:	f000 fbcc 	bl	800a9f4 <__retarget_lock_init_recursive>
 800a25c:	f7ff ff96 	bl	800a18c <__sfp_lock_release>
 800a260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a268:	6025      	str	r5, [r4, #0]
 800a26a:	61a5      	str	r5, [r4, #24]
 800a26c:	2208      	movs	r2, #8
 800a26e:	4629      	mov	r1, r5
 800a270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a274:	f7fc ff80 	bl	8007178 <memset>
 800a278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a27c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a280:	4620      	mov	r0, r4
 800a282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a284:	3468      	adds	r4, #104	; 0x68
 800a286:	e7d9      	b.n	800a23c <__sfp+0x1c>
 800a288:	2104      	movs	r1, #4
 800a28a:	4638      	mov	r0, r7
 800a28c:	f7ff ff62 	bl	800a154 <__sfmoreglue>
 800a290:	4604      	mov	r4, r0
 800a292:	6030      	str	r0, [r6, #0]
 800a294:	2800      	cmp	r0, #0
 800a296:	d1d5      	bne.n	800a244 <__sfp+0x24>
 800a298:	f7ff ff78 	bl	800a18c <__sfp_lock_release>
 800a29c:	230c      	movs	r3, #12
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	e7ee      	b.n	800a280 <__sfp+0x60>
 800a2a2:	bf00      	nop
 800a2a4:	0800bfac 	.word	0x0800bfac
 800a2a8:	ffff0001 	.word	0xffff0001

0800a2ac <fiprintf>:
 800a2ac:	b40e      	push	{r1, r2, r3}
 800a2ae:	b503      	push	{r0, r1, lr}
 800a2b0:	4601      	mov	r1, r0
 800a2b2:	ab03      	add	r3, sp, #12
 800a2b4:	4805      	ldr	r0, [pc, #20]	; (800a2cc <fiprintf+0x20>)
 800a2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ba:	6800      	ldr	r0, [r0, #0]
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	f001 fa7b 	bl	800b7b8 <_vfiprintf_r>
 800a2c2:	b002      	add	sp, #8
 800a2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2c8:	b003      	add	sp, #12
 800a2ca:	4770      	bx	lr
 800a2cc:	2000001c 	.word	0x2000001c

0800a2d0 <_fwalk_reent>:
 800a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	4688      	mov	r8, r1
 800a2d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2dc:	2700      	movs	r7, #0
 800a2de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a2e6:	d505      	bpl.n	800a2f4 <_fwalk_reent+0x24>
 800a2e8:	6824      	ldr	r4, [r4, #0]
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	d1f7      	bne.n	800a2de <_fwalk_reent+0xe>
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f4:	89ab      	ldrh	r3, [r5, #12]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d907      	bls.n	800a30a <_fwalk_reent+0x3a>
 800a2fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2fe:	3301      	adds	r3, #1
 800a300:	d003      	beq.n	800a30a <_fwalk_reent+0x3a>
 800a302:	4629      	mov	r1, r5
 800a304:	4630      	mov	r0, r6
 800a306:	47c0      	blx	r8
 800a308:	4307      	orrs	r7, r0
 800a30a:	3568      	adds	r5, #104	; 0x68
 800a30c:	e7e9      	b.n	800a2e2 <_fwalk_reent+0x12>

0800a30e <rshift>:
 800a30e:	6903      	ldr	r3, [r0, #16]
 800a310:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a318:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a31c:	f100 0414 	add.w	r4, r0, #20
 800a320:	dd45      	ble.n	800a3ae <rshift+0xa0>
 800a322:	f011 011f 	ands.w	r1, r1, #31
 800a326:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a32a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a32e:	d10c      	bne.n	800a34a <rshift+0x3c>
 800a330:	f100 0710 	add.w	r7, r0, #16
 800a334:	4629      	mov	r1, r5
 800a336:	42b1      	cmp	r1, r6
 800a338:	d334      	bcc.n	800a3a4 <rshift+0x96>
 800a33a:	1a9b      	subs	r3, r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	1eea      	subs	r2, r5, #3
 800a340:	4296      	cmp	r6, r2
 800a342:	bf38      	it	cc
 800a344:	2300      	movcc	r3, #0
 800a346:	4423      	add	r3, r4
 800a348:	e015      	b.n	800a376 <rshift+0x68>
 800a34a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a34e:	f1c1 0820 	rsb	r8, r1, #32
 800a352:	40cf      	lsrs	r7, r1
 800a354:	f105 0e04 	add.w	lr, r5, #4
 800a358:	46a1      	mov	r9, r4
 800a35a:	4576      	cmp	r6, lr
 800a35c:	46f4      	mov	ip, lr
 800a35e:	d815      	bhi.n	800a38c <rshift+0x7e>
 800a360:	1a9a      	subs	r2, r3, r2
 800a362:	0092      	lsls	r2, r2, #2
 800a364:	3a04      	subs	r2, #4
 800a366:	3501      	adds	r5, #1
 800a368:	42ae      	cmp	r6, r5
 800a36a:	bf38      	it	cc
 800a36c:	2200      	movcc	r2, #0
 800a36e:	18a3      	adds	r3, r4, r2
 800a370:	50a7      	str	r7, [r4, r2]
 800a372:	b107      	cbz	r7, 800a376 <rshift+0x68>
 800a374:	3304      	adds	r3, #4
 800a376:	1b1a      	subs	r2, r3, r4
 800a378:	42a3      	cmp	r3, r4
 800a37a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a37e:	bf08      	it	eq
 800a380:	2300      	moveq	r3, #0
 800a382:	6102      	str	r2, [r0, #16]
 800a384:	bf08      	it	eq
 800a386:	6143      	streq	r3, [r0, #20]
 800a388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a38c:	f8dc c000 	ldr.w	ip, [ip]
 800a390:	fa0c fc08 	lsl.w	ip, ip, r8
 800a394:	ea4c 0707 	orr.w	r7, ip, r7
 800a398:	f849 7b04 	str.w	r7, [r9], #4
 800a39c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3a0:	40cf      	lsrs	r7, r1
 800a3a2:	e7da      	b.n	800a35a <rshift+0x4c>
 800a3a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3ac:	e7c3      	b.n	800a336 <rshift+0x28>
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	e7e1      	b.n	800a376 <rshift+0x68>

0800a3b2 <__hexdig_fun>:
 800a3b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	d802      	bhi.n	800a3c0 <__hexdig_fun+0xe>
 800a3ba:	3820      	subs	r0, #32
 800a3bc:	b2c0      	uxtb	r0, r0
 800a3be:	4770      	bx	lr
 800a3c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3c4:	2b05      	cmp	r3, #5
 800a3c6:	d801      	bhi.n	800a3cc <__hexdig_fun+0x1a>
 800a3c8:	3847      	subs	r0, #71	; 0x47
 800a3ca:	e7f7      	b.n	800a3bc <__hexdig_fun+0xa>
 800a3cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d801      	bhi.n	800a3d8 <__hexdig_fun+0x26>
 800a3d4:	3827      	subs	r0, #39	; 0x27
 800a3d6:	e7f1      	b.n	800a3bc <__hexdig_fun+0xa>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	4770      	bx	lr

0800a3dc <__gethex>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	ed2d 8b02 	vpush	{d8}
 800a3e4:	b089      	sub	sp, #36	; 0x24
 800a3e6:	ee08 0a10 	vmov	s16, r0
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	4bb4      	ldr	r3, [pc, #720]	; (800a6c0 <__gethex+0x2e4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	468b      	mov	fp, r1
 800a3f6:	4690      	mov	r8, r2
 800a3f8:	f7f5 fef2 	bl	80001e0 <strlen>
 800a3fc:	9b01      	ldr	r3, [sp, #4]
 800a3fe:	f8db 2000 	ldr.w	r2, [fp]
 800a402:	4403      	add	r3, r0
 800a404:	4682      	mov	sl, r0
 800a406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	1c93      	adds	r3, r2, #2
 800a40e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a416:	32fe      	adds	r2, #254	; 0xfe
 800a418:	18d1      	adds	r1, r2, r3
 800a41a:	461f      	mov	r7, r3
 800a41c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a420:	9100      	str	r1, [sp, #0]
 800a422:	2830      	cmp	r0, #48	; 0x30
 800a424:	d0f8      	beq.n	800a418 <__gethex+0x3c>
 800a426:	f7ff ffc4 	bl	800a3b2 <__hexdig_fun>
 800a42a:	4604      	mov	r4, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d13a      	bne.n	800a4a6 <__gethex+0xca>
 800a430:	9901      	ldr	r1, [sp, #4]
 800a432:	4652      	mov	r2, sl
 800a434:	4638      	mov	r0, r7
 800a436:	f001 fb3a 	bl	800baae <strncmp>
 800a43a:	4605      	mov	r5, r0
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d168      	bne.n	800a512 <__gethex+0x136>
 800a440:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a444:	eb07 060a 	add.w	r6, r7, sl
 800a448:	f7ff ffb3 	bl	800a3b2 <__hexdig_fun>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d062      	beq.n	800a516 <__gethex+0x13a>
 800a450:	4633      	mov	r3, r6
 800a452:	7818      	ldrb	r0, [r3, #0]
 800a454:	2830      	cmp	r0, #48	; 0x30
 800a456:	461f      	mov	r7, r3
 800a458:	f103 0301 	add.w	r3, r3, #1
 800a45c:	d0f9      	beq.n	800a452 <__gethex+0x76>
 800a45e:	f7ff ffa8 	bl	800a3b2 <__hexdig_fun>
 800a462:	2301      	movs	r3, #1
 800a464:	fab0 f480 	clz	r4, r0
 800a468:	0964      	lsrs	r4, r4, #5
 800a46a:	4635      	mov	r5, r6
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	463a      	mov	r2, r7
 800a470:	4616      	mov	r6, r2
 800a472:	3201      	adds	r2, #1
 800a474:	7830      	ldrb	r0, [r6, #0]
 800a476:	f7ff ff9c 	bl	800a3b2 <__hexdig_fun>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d1f8      	bne.n	800a470 <__gethex+0x94>
 800a47e:	9901      	ldr	r1, [sp, #4]
 800a480:	4652      	mov	r2, sl
 800a482:	4630      	mov	r0, r6
 800a484:	f001 fb13 	bl	800baae <strncmp>
 800a488:	b980      	cbnz	r0, 800a4ac <__gethex+0xd0>
 800a48a:	b94d      	cbnz	r5, 800a4a0 <__gethex+0xc4>
 800a48c:	eb06 050a 	add.w	r5, r6, sl
 800a490:	462a      	mov	r2, r5
 800a492:	4616      	mov	r6, r2
 800a494:	3201      	adds	r2, #1
 800a496:	7830      	ldrb	r0, [r6, #0]
 800a498:	f7ff ff8b 	bl	800a3b2 <__hexdig_fun>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d1f8      	bne.n	800a492 <__gethex+0xb6>
 800a4a0:	1bad      	subs	r5, r5, r6
 800a4a2:	00ad      	lsls	r5, r5, #2
 800a4a4:	e004      	b.n	800a4b0 <__gethex+0xd4>
 800a4a6:	2400      	movs	r4, #0
 800a4a8:	4625      	mov	r5, r4
 800a4aa:	e7e0      	b.n	800a46e <__gethex+0x92>
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	d1f7      	bne.n	800a4a0 <__gethex+0xc4>
 800a4b0:	7833      	ldrb	r3, [r6, #0]
 800a4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4b6:	2b50      	cmp	r3, #80	; 0x50
 800a4b8:	d13b      	bne.n	800a532 <__gethex+0x156>
 800a4ba:	7873      	ldrb	r3, [r6, #1]
 800a4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a4be:	d02c      	beq.n	800a51a <__gethex+0x13e>
 800a4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a4c2:	d02e      	beq.n	800a522 <__gethex+0x146>
 800a4c4:	1c71      	adds	r1, r6, #1
 800a4c6:	f04f 0900 	mov.w	r9, #0
 800a4ca:	7808      	ldrb	r0, [r1, #0]
 800a4cc:	f7ff ff71 	bl	800a3b2 <__hexdig_fun>
 800a4d0:	1e43      	subs	r3, r0, #1
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b18      	cmp	r3, #24
 800a4d6:	d82c      	bhi.n	800a532 <__gethex+0x156>
 800a4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4e0:	f7ff ff67 	bl	800a3b2 <__hexdig_fun>
 800a4e4:	1e43      	subs	r3, r0, #1
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b18      	cmp	r3, #24
 800a4ea:	d91d      	bls.n	800a528 <__gethex+0x14c>
 800a4ec:	f1b9 0f00 	cmp.w	r9, #0
 800a4f0:	d000      	beq.n	800a4f4 <__gethex+0x118>
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	4415      	add	r5, r2
 800a4f6:	f8cb 1000 	str.w	r1, [fp]
 800a4fa:	b1e4      	cbz	r4, 800a536 <__gethex+0x15a>
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	bf14      	ite	ne
 800a502:	2700      	movne	r7, #0
 800a504:	2706      	moveq	r7, #6
 800a506:	4638      	mov	r0, r7
 800a508:	b009      	add	sp, #36	; 0x24
 800a50a:	ecbd 8b02 	vpop	{d8}
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	463e      	mov	r6, r7
 800a514:	4625      	mov	r5, r4
 800a516:	2401      	movs	r4, #1
 800a518:	e7ca      	b.n	800a4b0 <__gethex+0xd4>
 800a51a:	f04f 0900 	mov.w	r9, #0
 800a51e:	1cb1      	adds	r1, r6, #2
 800a520:	e7d3      	b.n	800a4ca <__gethex+0xee>
 800a522:	f04f 0901 	mov.w	r9, #1
 800a526:	e7fa      	b.n	800a51e <__gethex+0x142>
 800a528:	230a      	movs	r3, #10
 800a52a:	fb03 0202 	mla	r2, r3, r2, r0
 800a52e:	3a10      	subs	r2, #16
 800a530:	e7d4      	b.n	800a4dc <__gethex+0x100>
 800a532:	4631      	mov	r1, r6
 800a534:	e7df      	b.n	800a4f6 <__gethex+0x11a>
 800a536:	1bf3      	subs	r3, r6, r7
 800a538:	3b01      	subs	r3, #1
 800a53a:	4621      	mov	r1, r4
 800a53c:	2b07      	cmp	r3, #7
 800a53e:	dc0b      	bgt.n	800a558 <__gethex+0x17c>
 800a540:	ee18 0a10 	vmov	r0, s16
 800a544:	f000 fadc 	bl	800ab00 <_Balloc>
 800a548:	4604      	mov	r4, r0
 800a54a:	b940      	cbnz	r0, 800a55e <__gethex+0x182>
 800a54c:	4b5d      	ldr	r3, [pc, #372]	; (800a6c4 <__gethex+0x2e8>)
 800a54e:	4602      	mov	r2, r0
 800a550:	21de      	movs	r1, #222	; 0xde
 800a552:	485d      	ldr	r0, [pc, #372]	; (800a6c8 <__gethex+0x2ec>)
 800a554:	f7fe fe78 	bl	8009248 <__assert_func>
 800a558:	3101      	adds	r1, #1
 800a55a:	105b      	asrs	r3, r3, #1
 800a55c:	e7ee      	b.n	800a53c <__gethex+0x160>
 800a55e:	f100 0914 	add.w	r9, r0, #20
 800a562:	f04f 0b00 	mov.w	fp, #0
 800a566:	f1ca 0301 	rsb	r3, sl, #1
 800a56a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a56e:	f8cd b000 	str.w	fp, [sp]
 800a572:	9306      	str	r3, [sp, #24]
 800a574:	42b7      	cmp	r7, r6
 800a576:	d340      	bcc.n	800a5fa <__gethex+0x21e>
 800a578:	9802      	ldr	r0, [sp, #8]
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	f840 3b04 	str.w	r3, [r0], #4
 800a580:	eba0 0009 	sub.w	r0, r0, r9
 800a584:	1080      	asrs	r0, r0, #2
 800a586:	0146      	lsls	r6, r0, #5
 800a588:	6120      	str	r0, [r4, #16]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fbaa 	bl	800ace4 <__hi0bits>
 800a590:	1a30      	subs	r0, r6, r0
 800a592:	f8d8 6000 	ldr.w	r6, [r8]
 800a596:	42b0      	cmp	r0, r6
 800a598:	dd63      	ble.n	800a662 <__gethex+0x286>
 800a59a:	1b87      	subs	r7, r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 ff4e 	bl	800b440 <__any_on>
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	b1a8      	cbz	r0, 800a5d4 <__gethex+0x1f8>
 800a5a8:	1e7b      	subs	r3, r7, #1
 800a5aa:	1159      	asrs	r1, r3, #5
 800a5ac:	f003 021f 	and.w	r2, r3, #31
 800a5b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5b4:	f04f 0a01 	mov.w	sl, #1
 800a5b8:	fa0a f202 	lsl.w	r2, sl, r2
 800a5bc:	420a      	tst	r2, r1
 800a5be:	d009      	beq.n	800a5d4 <__gethex+0x1f8>
 800a5c0:	4553      	cmp	r3, sl
 800a5c2:	dd05      	ble.n	800a5d0 <__gethex+0x1f4>
 800a5c4:	1eb9      	subs	r1, r7, #2
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 ff3a 	bl	800b440 <__any_on>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d145      	bne.n	800a65c <__gethex+0x280>
 800a5d0:	f04f 0a02 	mov.w	sl, #2
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f7ff fe99 	bl	800a30e <rshift>
 800a5dc:	443d      	add	r5, r7
 800a5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5e2:	42ab      	cmp	r3, r5
 800a5e4:	da4c      	bge.n	800a680 <__gethex+0x2a4>
 800a5e6:	ee18 0a10 	vmov	r0, s16
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f000 fac8 	bl	800ab80 <_Bfree>
 800a5f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	27a3      	movs	r7, #163	; 0xa3
 800a5f8:	e785      	b.n	800a506 <__gethex+0x12a>
 800a5fa:	1e73      	subs	r3, r6, #1
 800a5fc:	9a05      	ldr	r2, [sp, #20]
 800a5fe:	9303      	str	r3, [sp, #12]
 800a600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a604:	4293      	cmp	r3, r2
 800a606:	d019      	beq.n	800a63c <__gethex+0x260>
 800a608:	f1bb 0f20 	cmp.w	fp, #32
 800a60c:	d107      	bne.n	800a61e <__gethex+0x242>
 800a60e:	9b02      	ldr	r3, [sp, #8]
 800a610:	9a00      	ldr	r2, [sp, #0]
 800a612:	f843 2b04 	str.w	r2, [r3], #4
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	2300      	movs	r3, #0
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	469b      	mov	fp, r3
 800a61e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a622:	f7ff fec6 	bl	800a3b2 <__hexdig_fun>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	f000 000f 	and.w	r0, r0, #15
 800a62c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a630:	4303      	orrs	r3, r0
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	f10b 0b04 	add.w	fp, fp, #4
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	e00d      	b.n	800a658 <__gethex+0x27c>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	9a06      	ldr	r2, [sp, #24]
 800a640:	4413      	add	r3, r2
 800a642:	42bb      	cmp	r3, r7
 800a644:	d3e0      	bcc.n	800a608 <__gethex+0x22c>
 800a646:	4618      	mov	r0, r3
 800a648:	9901      	ldr	r1, [sp, #4]
 800a64a:	9307      	str	r3, [sp, #28]
 800a64c:	4652      	mov	r2, sl
 800a64e:	f001 fa2e 	bl	800baae <strncmp>
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	2800      	cmp	r0, #0
 800a656:	d1d7      	bne.n	800a608 <__gethex+0x22c>
 800a658:	461e      	mov	r6, r3
 800a65a:	e78b      	b.n	800a574 <__gethex+0x198>
 800a65c:	f04f 0a03 	mov.w	sl, #3
 800a660:	e7b8      	b.n	800a5d4 <__gethex+0x1f8>
 800a662:	da0a      	bge.n	800a67a <__gethex+0x29e>
 800a664:	1a37      	subs	r7, r6, r0
 800a666:	4621      	mov	r1, r4
 800a668:	ee18 0a10 	vmov	r0, s16
 800a66c:	463a      	mov	r2, r7
 800a66e:	f000 fca3 	bl	800afb8 <__lshift>
 800a672:	1bed      	subs	r5, r5, r7
 800a674:	4604      	mov	r4, r0
 800a676:	f100 0914 	add.w	r9, r0, #20
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	e7ae      	b.n	800a5de <__gethex+0x202>
 800a680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a684:	42a8      	cmp	r0, r5
 800a686:	dd72      	ble.n	800a76e <__gethex+0x392>
 800a688:	1b45      	subs	r5, r0, r5
 800a68a:	42ae      	cmp	r6, r5
 800a68c:	dc36      	bgt.n	800a6fc <__gethex+0x320>
 800a68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d02a      	beq.n	800a6ec <__gethex+0x310>
 800a696:	2b03      	cmp	r3, #3
 800a698:	d02c      	beq.n	800a6f4 <__gethex+0x318>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d11c      	bne.n	800a6d8 <__gethex+0x2fc>
 800a69e:	42ae      	cmp	r6, r5
 800a6a0:	d11a      	bne.n	800a6d8 <__gethex+0x2fc>
 800a6a2:	2e01      	cmp	r6, #1
 800a6a4:	d112      	bne.n	800a6cc <__gethex+0x2f0>
 800a6a6:	9a04      	ldr	r2, [sp, #16]
 800a6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	f8c9 3000 	str.w	r3, [r9]
 800a6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6b8:	2762      	movs	r7, #98	; 0x62
 800a6ba:	601c      	str	r4, [r3, #0]
 800a6bc:	e723      	b.n	800a506 <__gethex+0x12a>
 800a6be:	bf00      	nop
 800a6c0:	0800c334 	.word	0x0800c334
 800a6c4:	0800c259 	.word	0x0800c259
 800a6c8:	0800c2cc 	.word	0x0800c2cc
 800a6cc:	1e71      	subs	r1, r6, #1
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 feb6 	bl	800b440 <__any_on>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1e6      	bne.n	800a6a6 <__gethex+0x2ca>
 800a6d8:	ee18 0a10 	vmov	r0, s16
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f000 fa4f 	bl	800ab80 <_Bfree>
 800a6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	2750      	movs	r7, #80	; 0x50
 800a6ea:	e70c      	b.n	800a506 <__gethex+0x12a>
 800a6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1f2      	bne.n	800a6d8 <__gethex+0x2fc>
 800a6f2:	e7d8      	b.n	800a6a6 <__gethex+0x2ca>
 800a6f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1d5      	bne.n	800a6a6 <__gethex+0x2ca>
 800a6fa:	e7ed      	b.n	800a6d8 <__gethex+0x2fc>
 800a6fc:	1e6f      	subs	r7, r5, #1
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	d131      	bne.n	800a768 <__gethex+0x38c>
 800a704:	b127      	cbz	r7, 800a710 <__gethex+0x334>
 800a706:	4639      	mov	r1, r7
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 fe99 	bl	800b440 <__any_on>
 800a70e:	4682      	mov	sl, r0
 800a710:	117b      	asrs	r3, r7, #5
 800a712:	2101      	movs	r1, #1
 800a714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a718:	f007 071f 	and.w	r7, r7, #31
 800a71c:	fa01 f707 	lsl.w	r7, r1, r7
 800a720:	421f      	tst	r7, r3
 800a722:	4629      	mov	r1, r5
 800a724:	4620      	mov	r0, r4
 800a726:	bf18      	it	ne
 800a728:	f04a 0a02 	orrne.w	sl, sl, #2
 800a72c:	1b76      	subs	r6, r6, r5
 800a72e:	f7ff fdee 	bl	800a30e <rshift>
 800a732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a736:	2702      	movs	r7, #2
 800a738:	f1ba 0f00 	cmp.w	sl, #0
 800a73c:	d048      	beq.n	800a7d0 <__gethex+0x3f4>
 800a73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d015      	beq.n	800a772 <__gethex+0x396>
 800a746:	2b03      	cmp	r3, #3
 800a748:	d017      	beq.n	800a77a <__gethex+0x39e>
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d109      	bne.n	800a762 <__gethex+0x386>
 800a74e:	f01a 0f02 	tst.w	sl, #2
 800a752:	d006      	beq.n	800a762 <__gethex+0x386>
 800a754:	f8d9 0000 	ldr.w	r0, [r9]
 800a758:	ea4a 0a00 	orr.w	sl, sl, r0
 800a75c:	f01a 0f01 	tst.w	sl, #1
 800a760:	d10e      	bne.n	800a780 <__gethex+0x3a4>
 800a762:	f047 0710 	orr.w	r7, r7, #16
 800a766:	e033      	b.n	800a7d0 <__gethex+0x3f4>
 800a768:	f04f 0a01 	mov.w	sl, #1
 800a76c:	e7d0      	b.n	800a710 <__gethex+0x334>
 800a76e:	2701      	movs	r7, #1
 800a770:	e7e2      	b.n	800a738 <__gethex+0x35c>
 800a772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a774:	f1c3 0301 	rsb	r3, r3, #1
 800a778:	9315      	str	r3, [sp, #84]	; 0x54
 800a77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0f0      	beq.n	800a762 <__gethex+0x386>
 800a780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a784:	f104 0314 	add.w	r3, r4, #20
 800a788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a78c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a790:	f04f 0c00 	mov.w	ip, #0
 800a794:	4618      	mov	r0, r3
 800a796:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a79e:	d01c      	beq.n	800a7da <__gethex+0x3fe>
 800a7a0:	3201      	adds	r2, #1
 800a7a2:	6002      	str	r2, [r0, #0]
 800a7a4:	2f02      	cmp	r7, #2
 800a7a6:	f104 0314 	add.w	r3, r4, #20
 800a7aa:	d13f      	bne.n	800a82c <__gethex+0x450>
 800a7ac:	f8d8 2000 	ldr.w	r2, [r8]
 800a7b0:	3a01      	subs	r2, #1
 800a7b2:	42b2      	cmp	r2, r6
 800a7b4:	d10a      	bne.n	800a7cc <__gethex+0x3f0>
 800a7b6:	1171      	asrs	r1, r6, #5
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7be:	f006 061f 	and.w	r6, r6, #31
 800a7c2:	fa02 f606 	lsl.w	r6, r2, r6
 800a7c6:	421e      	tst	r6, r3
 800a7c8:	bf18      	it	ne
 800a7ca:	4617      	movne	r7, r2
 800a7cc:	f047 0720 	orr.w	r7, r7, #32
 800a7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7d2:	601c      	str	r4, [r3, #0]
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	601d      	str	r5, [r3, #0]
 800a7d8:	e695      	b.n	800a506 <__gethex+0x12a>
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7e0:	d8d8      	bhi.n	800a794 <__gethex+0x3b8>
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	459b      	cmp	fp, r3
 800a7e6:	db19      	blt.n	800a81c <__gethex+0x440>
 800a7e8:	6861      	ldr	r1, [r4, #4]
 800a7ea:	ee18 0a10 	vmov	r0, s16
 800a7ee:	3101      	adds	r1, #1
 800a7f0:	f000 f986 	bl	800ab00 <_Balloc>
 800a7f4:	4681      	mov	r9, r0
 800a7f6:	b918      	cbnz	r0, 800a800 <__gethex+0x424>
 800a7f8:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <__gethex+0x488>)
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	2184      	movs	r1, #132	; 0x84
 800a7fe:	e6a8      	b.n	800a552 <__gethex+0x176>
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	3202      	adds	r2, #2
 800a804:	f104 010c 	add.w	r1, r4, #12
 800a808:	0092      	lsls	r2, r2, #2
 800a80a:	300c      	adds	r0, #12
 800a80c:	f7fc fca6 	bl	800715c <memcpy>
 800a810:	4621      	mov	r1, r4
 800a812:	ee18 0a10 	vmov	r0, s16
 800a816:	f000 f9b3 	bl	800ab80 <_Bfree>
 800a81a:	464c      	mov	r4, r9
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a824:	6122      	str	r2, [r4, #16]
 800a826:	2201      	movs	r2, #1
 800a828:	615a      	str	r2, [r3, #20]
 800a82a:	e7bb      	b.n	800a7a4 <__gethex+0x3c8>
 800a82c:	6922      	ldr	r2, [r4, #16]
 800a82e:	455a      	cmp	r2, fp
 800a830:	dd0b      	ble.n	800a84a <__gethex+0x46e>
 800a832:	2101      	movs	r1, #1
 800a834:	4620      	mov	r0, r4
 800a836:	f7ff fd6a 	bl	800a30e <rshift>
 800a83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a83e:	3501      	adds	r5, #1
 800a840:	42ab      	cmp	r3, r5
 800a842:	f6ff aed0 	blt.w	800a5e6 <__gethex+0x20a>
 800a846:	2701      	movs	r7, #1
 800a848:	e7c0      	b.n	800a7cc <__gethex+0x3f0>
 800a84a:	f016 061f 	ands.w	r6, r6, #31
 800a84e:	d0fa      	beq.n	800a846 <__gethex+0x46a>
 800a850:	4453      	add	r3, sl
 800a852:	f1c6 0620 	rsb	r6, r6, #32
 800a856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a85a:	f000 fa43 	bl	800ace4 <__hi0bits>
 800a85e:	42b0      	cmp	r0, r6
 800a860:	dbe7      	blt.n	800a832 <__gethex+0x456>
 800a862:	e7f0      	b.n	800a846 <__gethex+0x46a>
 800a864:	0800c259 	.word	0x0800c259

0800a868 <L_shift>:
 800a868:	f1c2 0208 	rsb	r2, r2, #8
 800a86c:	0092      	lsls	r2, r2, #2
 800a86e:	b570      	push	{r4, r5, r6, lr}
 800a870:	f1c2 0620 	rsb	r6, r2, #32
 800a874:	6843      	ldr	r3, [r0, #4]
 800a876:	6804      	ldr	r4, [r0, #0]
 800a878:	fa03 f506 	lsl.w	r5, r3, r6
 800a87c:	432c      	orrs	r4, r5
 800a87e:	40d3      	lsrs	r3, r2
 800a880:	6004      	str	r4, [r0, #0]
 800a882:	f840 3f04 	str.w	r3, [r0, #4]!
 800a886:	4288      	cmp	r0, r1
 800a888:	d3f4      	bcc.n	800a874 <L_shift+0xc>
 800a88a:	bd70      	pop	{r4, r5, r6, pc}

0800a88c <__match>:
 800a88c:	b530      	push	{r4, r5, lr}
 800a88e:	6803      	ldr	r3, [r0, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a896:	b914      	cbnz	r4, 800a89e <__match+0x12>
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	2001      	movs	r0, #1
 800a89c:	bd30      	pop	{r4, r5, pc}
 800a89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8a6:	2d19      	cmp	r5, #25
 800a8a8:	bf98      	it	ls
 800a8aa:	3220      	addls	r2, #32
 800a8ac:	42a2      	cmp	r2, r4
 800a8ae:	d0f0      	beq.n	800a892 <__match+0x6>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7f3      	b.n	800a89c <__match+0x10>

0800a8b4 <__hexnan>:
 800a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	680b      	ldr	r3, [r1, #0]
 800a8ba:	115e      	asrs	r6, r3, #5
 800a8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8c0:	f013 031f 	ands.w	r3, r3, #31
 800a8c4:	b087      	sub	sp, #28
 800a8c6:	bf18      	it	ne
 800a8c8:	3604      	addne	r6, #4
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	1f37      	subs	r7, r6, #4
 800a8ce:	4690      	mov	r8, r2
 800a8d0:	6802      	ldr	r2, [r0, #0]
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8da:	46b9      	mov	r9, r7
 800a8dc:	463c      	mov	r4, r7
 800a8de:	9502      	str	r5, [sp, #8]
 800a8e0:	46ab      	mov	fp, r5
 800a8e2:	7851      	ldrb	r1, [r2, #1]
 800a8e4:	1c53      	adds	r3, r2, #1
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	b341      	cbz	r1, 800a93c <__hexnan+0x88>
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	9205      	str	r2, [sp, #20]
 800a8ee:	9104      	str	r1, [sp, #16]
 800a8f0:	f7ff fd5f 	bl	800a3b2 <__hexdig_fun>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d14f      	bne.n	800a998 <__hexnan+0xe4>
 800a8f8:	9904      	ldr	r1, [sp, #16]
 800a8fa:	9a05      	ldr	r2, [sp, #20]
 800a8fc:	2920      	cmp	r1, #32
 800a8fe:	d818      	bhi.n	800a932 <__hexnan+0x7e>
 800a900:	9b02      	ldr	r3, [sp, #8]
 800a902:	459b      	cmp	fp, r3
 800a904:	dd13      	ble.n	800a92e <__hexnan+0x7a>
 800a906:	454c      	cmp	r4, r9
 800a908:	d206      	bcs.n	800a918 <__hexnan+0x64>
 800a90a:	2d07      	cmp	r5, #7
 800a90c:	dc04      	bgt.n	800a918 <__hexnan+0x64>
 800a90e:	462a      	mov	r2, r5
 800a910:	4649      	mov	r1, r9
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff ffa8 	bl	800a868 <L_shift>
 800a918:	4544      	cmp	r4, r8
 800a91a:	d950      	bls.n	800a9be <__hexnan+0x10a>
 800a91c:	2300      	movs	r3, #0
 800a91e:	f1a4 0904 	sub.w	r9, r4, #4
 800a922:	f844 3c04 	str.w	r3, [r4, #-4]
 800a926:	f8cd b008 	str.w	fp, [sp, #8]
 800a92a:	464c      	mov	r4, r9
 800a92c:	461d      	mov	r5, r3
 800a92e:	9a03      	ldr	r2, [sp, #12]
 800a930:	e7d7      	b.n	800a8e2 <__hexnan+0x2e>
 800a932:	2929      	cmp	r1, #41	; 0x29
 800a934:	d156      	bne.n	800a9e4 <__hexnan+0x130>
 800a936:	3202      	adds	r2, #2
 800a938:	f8ca 2000 	str.w	r2, [sl]
 800a93c:	f1bb 0f00 	cmp.w	fp, #0
 800a940:	d050      	beq.n	800a9e4 <__hexnan+0x130>
 800a942:	454c      	cmp	r4, r9
 800a944:	d206      	bcs.n	800a954 <__hexnan+0xa0>
 800a946:	2d07      	cmp	r5, #7
 800a948:	dc04      	bgt.n	800a954 <__hexnan+0xa0>
 800a94a:	462a      	mov	r2, r5
 800a94c:	4649      	mov	r1, r9
 800a94e:	4620      	mov	r0, r4
 800a950:	f7ff ff8a 	bl	800a868 <L_shift>
 800a954:	4544      	cmp	r4, r8
 800a956:	d934      	bls.n	800a9c2 <__hexnan+0x10e>
 800a958:	f1a8 0204 	sub.w	r2, r8, #4
 800a95c:	4623      	mov	r3, r4
 800a95e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a962:	f842 1f04 	str.w	r1, [r2, #4]!
 800a966:	429f      	cmp	r7, r3
 800a968:	d2f9      	bcs.n	800a95e <__hexnan+0xaa>
 800a96a:	1b3b      	subs	r3, r7, r4
 800a96c:	f023 0303 	bic.w	r3, r3, #3
 800a970:	3304      	adds	r3, #4
 800a972:	3401      	adds	r4, #1
 800a974:	3e03      	subs	r6, #3
 800a976:	42b4      	cmp	r4, r6
 800a978:	bf88      	it	hi
 800a97a:	2304      	movhi	r3, #4
 800a97c:	4443      	add	r3, r8
 800a97e:	2200      	movs	r2, #0
 800a980:	f843 2b04 	str.w	r2, [r3], #4
 800a984:	429f      	cmp	r7, r3
 800a986:	d2fb      	bcs.n	800a980 <__hexnan+0xcc>
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	b91b      	cbnz	r3, 800a994 <__hexnan+0xe0>
 800a98c:	4547      	cmp	r7, r8
 800a98e:	d127      	bne.n	800a9e0 <__hexnan+0x12c>
 800a990:	2301      	movs	r3, #1
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	2005      	movs	r0, #5
 800a996:	e026      	b.n	800a9e6 <__hexnan+0x132>
 800a998:	3501      	adds	r5, #1
 800a99a:	2d08      	cmp	r5, #8
 800a99c:	f10b 0b01 	add.w	fp, fp, #1
 800a9a0:	dd06      	ble.n	800a9b0 <__hexnan+0xfc>
 800a9a2:	4544      	cmp	r4, r8
 800a9a4:	d9c3      	bls.n	800a92e <__hexnan+0x7a>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ac:	2501      	movs	r5, #1
 800a9ae:	3c04      	subs	r4, #4
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	f000 000f 	and.w	r0, r0, #15
 800a9b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9ba:	6022      	str	r2, [r4, #0]
 800a9bc:	e7b7      	b.n	800a92e <__hexnan+0x7a>
 800a9be:	2508      	movs	r5, #8
 800a9c0:	e7b5      	b.n	800a92e <__hexnan+0x7a>
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0df      	beq.n	800a988 <__hexnan+0xd4>
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	f1c3 0320 	rsb	r3, r3, #32
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9d8:	401a      	ands	r2, r3
 800a9da:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9de:	e7d3      	b.n	800a988 <__hexnan+0xd4>
 800a9e0:	3f04      	subs	r7, #4
 800a9e2:	e7d1      	b.n	800a988 <__hexnan+0xd4>
 800a9e4:	2004      	movs	r0, #4
 800a9e6:	b007      	add	sp, #28
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9ec <_localeconv_r>:
 800a9ec:	4800      	ldr	r0, [pc, #0]	; (800a9f0 <_localeconv_r+0x4>)
 800a9ee:	4770      	bx	lr
 800a9f0:	20000174 	.word	0x20000174

0800a9f4 <__retarget_lock_init_recursive>:
 800a9f4:	4770      	bx	lr

0800a9f6 <__retarget_lock_acquire_recursive>:
 800a9f6:	4770      	bx	lr

0800a9f8 <__retarget_lock_release_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <__swhatbuf_r>:
 800a9fa:	b570      	push	{r4, r5, r6, lr}
 800a9fc:	460e      	mov	r6, r1
 800a9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa02:	2900      	cmp	r1, #0
 800aa04:	b096      	sub	sp, #88	; 0x58
 800aa06:	4614      	mov	r4, r2
 800aa08:	461d      	mov	r5, r3
 800aa0a:	da08      	bge.n	800aa1e <__swhatbuf_r+0x24>
 800aa0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	602a      	str	r2, [r5, #0]
 800aa14:	061a      	lsls	r2, r3, #24
 800aa16:	d410      	bmi.n	800aa3a <__swhatbuf_r+0x40>
 800aa18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa1c:	e00e      	b.n	800aa3c <__swhatbuf_r+0x42>
 800aa1e:	466a      	mov	r2, sp
 800aa20:	f001 f890 	bl	800bb44 <_fstat_r>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	dbf1      	blt.n	800aa0c <__swhatbuf_r+0x12>
 800aa28:	9a01      	ldr	r2, [sp, #4]
 800aa2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa32:	425a      	negs	r2, r3
 800aa34:	415a      	adcs	r2, r3
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	e7ee      	b.n	800aa18 <__swhatbuf_r+0x1e>
 800aa3a:	2340      	movs	r3, #64	; 0x40
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	b016      	add	sp, #88	; 0x58
 800aa42:	bd70      	pop	{r4, r5, r6, pc}

0800aa44 <__smakebuf_r>:
 800aa44:	898b      	ldrh	r3, [r1, #12]
 800aa46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa48:	079d      	lsls	r5, r3, #30
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	d507      	bpl.n	800aa60 <__smakebuf_r+0x1c>
 800aa50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	6123      	str	r3, [r4, #16]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	6163      	str	r3, [r4, #20]
 800aa5c:	b002      	add	sp, #8
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	ab01      	add	r3, sp, #4
 800aa62:	466a      	mov	r2, sp
 800aa64:	f7ff ffc9 	bl	800a9fa <__swhatbuf_r>
 800aa68:	9900      	ldr	r1, [sp, #0]
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7fc fbf7 	bl	8007260 <_malloc_r>
 800aa72:	b948      	cbnz	r0, 800aa88 <__smakebuf_r+0x44>
 800aa74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa78:	059a      	lsls	r2, r3, #22
 800aa7a:	d4ef      	bmi.n	800aa5c <__smakebuf_r+0x18>
 800aa7c:	f023 0303 	bic.w	r3, r3, #3
 800aa80:	f043 0302 	orr.w	r3, r3, #2
 800aa84:	81a3      	strh	r3, [r4, #12]
 800aa86:	e7e3      	b.n	800aa50 <__smakebuf_r+0xc>
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <__smakebuf_r+0x7c>)
 800aa8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	6020      	str	r0, [r4, #0]
 800aa90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	9b00      	ldr	r3, [sp, #0]
 800aa98:	6163      	str	r3, [r4, #20]
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	6120      	str	r0, [r4, #16]
 800aa9e:	b15b      	cbz	r3, 800aab8 <__smakebuf_r+0x74>
 800aaa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f001 f85f 	bl	800bb68 <_isatty_r>
 800aaaa:	b128      	cbz	r0, 800aab8 <__smakebuf_r+0x74>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f023 0303 	bic.w	r3, r3, #3
 800aab2:	f043 0301 	orr.w	r3, r3, #1
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	89a0      	ldrh	r0, [r4, #12]
 800aaba:	4305      	orrs	r5, r0
 800aabc:	81a5      	strh	r5, [r4, #12]
 800aabe:	e7cd      	b.n	800aa5c <__smakebuf_r+0x18>
 800aac0:	0800a149 	.word	0x0800a149

0800aac4 <__ascii_mbtowc>:
 800aac4:	b082      	sub	sp, #8
 800aac6:	b901      	cbnz	r1, 800aaca <__ascii_mbtowc+0x6>
 800aac8:	a901      	add	r1, sp, #4
 800aaca:	b142      	cbz	r2, 800aade <__ascii_mbtowc+0x1a>
 800aacc:	b14b      	cbz	r3, 800aae2 <__ascii_mbtowc+0x1e>
 800aace:	7813      	ldrb	r3, [r2, #0]
 800aad0:	600b      	str	r3, [r1, #0]
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	1e10      	subs	r0, r2, #0
 800aad6:	bf18      	it	ne
 800aad8:	2001      	movne	r0, #1
 800aada:	b002      	add	sp, #8
 800aadc:	4770      	bx	lr
 800aade:	4610      	mov	r0, r2
 800aae0:	e7fb      	b.n	800aada <__ascii_mbtowc+0x16>
 800aae2:	f06f 0001 	mvn.w	r0, #1
 800aae6:	e7f8      	b.n	800aada <__ascii_mbtowc+0x16>

0800aae8 <__malloc_lock>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__malloc_lock+0x8>)
 800aaea:	f7ff bf84 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20000540 	.word	0x20000540

0800aaf4 <__malloc_unlock>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__malloc_unlock+0x8>)
 800aaf6:	f7ff bf7f 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800aafa:	bf00      	nop
 800aafc:	20000540 	.word	0x20000540

0800ab00 <_Balloc>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	b976      	cbnz	r6, 800ab28 <_Balloc+0x28>
 800ab0a:	2010      	movs	r0, #16
 800ab0c:	f7fc fb16 	bl	800713c <malloc>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6260      	str	r0, [r4, #36]	; 0x24
 800ab14:	b920      	cbnz	r0, 800ab20 <_Balloc+0x20>
 800ab16:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <_Balloc+0x78>)
 800ab18:	4818      	ldr	r0, [pc, #96]	; (800ab7c <_Balloc+0x7c>)
 800ab1a:	2166      	movs	r1, #102	; 0x66
 800ab1c:	f7fe fb94 	bl	8009248 <__assert_func>
 800ab20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab24:	6006      	str	r6, [r0, #0]
 800ab26:	60c6      	str	r6, [r0, #12]
 800ab28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab2a:	68f3      	ldr	r3, [r6, #12]
 800ab2c:	b183      	cbz	r3, 800ab50 <_Balloc+0x50>
 800ab2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab36:	b9b8      	cbnz	r0, 800ab68 <_Balloc+0x68>
 800ab38:	2101      	movs	r1, #1
 800ab3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab3e:	1d72      	adds	r2, r6, #5
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 fc9d 	bl	800b482 <_calloc_r>
 800ab48:	b160      	cbz	r0, 800ab64 <_Balloc+0x64>
 800ab4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab4e:	e00e      	b.n	800ab6e <_Balloc+0x6e>
 800ab50:	2221      	movs	r2, #33	; 0x21
 800ab52:	2104      	movs	r1, #4
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fc94 	bl	800b482 <_calloc_r>
 800ab5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab5c:	60f0      	str	r0, [r6, #12]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e4      	bne.n	800ab2e <_Balloc+0x2e>
 800ab64:	2000      	movs	r0, #0
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	6802      	ldr	r2, [r0, #0]
 800ab6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab74:	e7f7      	b.n	800ab66 <_Balloc+0x66>
 800ab76:	bf00      	nop
 800ab78:	0800c040 	.word	0x0800c040
 800ab7c:	0800c348 	.word	0x0800c348

0800ab80 <_Bfree>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab84:	4605      	mov	r5, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	b976      	cbnz	r6, 800aba8 <_Bfree+0x28>
 800ab8a:	2010      	movs	r0, #16
 800ab8c:	f7fc fad6 	bl	800713c <malloc>
 800ab90:	4602      	mov	r2, r0
 800ab92:	6268      	str	r0, [r5, #36]	; 0x24
 800ab94:	b920      	cbnz	r0, 800aba0 <_Bfree+0x20>
 800ab96:	4b09      	ldr	r3, [pc, #36]	; (800abbc <_Bfree+0x3c>)
 800ab98:	4809      	ldr	r0, [pc, #36]	; (800abc0 <_Bfree+0x40>)
 800ab9a:	218a      	movs	r1, #138	; 0x8a
 800ab9c:	f7fe fb54 	bl	8009248 <__assert_func>
 800aba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba4:	6006      	str	r6, [r0, #0]
 800aba6:	60c6      	str	r6, [r0, #12]
 800aba8:	b13c      	cbz	r4, 800abba <_Bfree+0x3a>
 800abaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abac:	6862      	ldr	r2, [r4, #4]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abb4:	6021      	str	r1, [r4, #0]
 800abb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abba:	bd70      	pop	{r4, r5, r6, pc}
 800abbc:	0800c040 	.word	0x0800c040
 800abc0:	0800c348 	.word	0x0800c348

0800abc4 <__multadd>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	690d      	ldr	r5, [r1, #16]
 800abca:	4607      	mov	r7, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	461e      	mov	r6, r3
 800abd0:	f101 0c14 	add.w	ip, r1, #20
 800abd4:	2000      	movs	r0, #0
 800abd6:	f8dc 3000 	ldr.w	r3, [ip]
 800abda:	b299      	uxth	r1, r3
 800abdc:	fb02 6101 	mla	r1, r2, r1, r6
 800abe0:	0c1e      	lsrs	r6, r3, #16
 800abe2:	0c0b      	lsrs	r3, r1, #16
 800abe4:	fb02 3306 	mla	r3, r2, r6, r3
 800abe8:	b289      	uxth	r1, r1
 800abea:	3001      	adds	r0, #1
 800abec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abf0:	4285      	cmp	r5, r0
 800abf2:	f84c 1b04 	str.w	r1, [ip], #4
 800abf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abfa:	dcec      	bgt.n	800abd6 <__multadd+0x12>
 800abfc:	b30e      	cbz	r6, 800ac42 <__multadd+0x7e>
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	42ab      	cmp	r3, r5
 800ac02:	dc19      	bgt.n	800ac38 <__multadd+0x74>
 800ac04:	6861      	ldr	r1, [r4, #4]
 800ac06:	4638      	mov	r0, r7
 800ac08:	3101      	adds	r1, #1
 800ac0a:	f7ff ff79 	bl	800ab00 <_Balloc>
 800ac0e:	4680      	mov	r8, r0
 800ac10:	b928      	cbnz	r0, 800ac1e <__multadd+0x5a>
 800ac12:	4602      	mov	r2, r0
 800ac14:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <__multadd+0x84>)
 800ac16:	480d      	ldr	r0, [pc, #52]	; (800ac4c <__multadd+0x88>)
 800ac18:	21b5      	movs	r1, #181	; 0xb5
 800ac1a:	f7fe fb15 	bl	8009248 <__assert_func>
 800ac1e:	6922      	ldr	r2, [r4, #16]
 800ac20:	3202      	adds	r2, #2
 800ac22:	f104 010c 	add.w	r1, r4, #12
 800ac26:	0092      	lsls	r2, r2, #2
 800ac28:	300c      	adds	r0, #12
 800ac2a:	f7fc fa97 	bl	800715c <memcpy>
 800ac2e:	4621      	mov	r1, r4
 800ac30:	4638      	mov	r0, r7
 800ac32:	f7ff ffa5 	bl	800ab80 <_Bfree>
 800ac36:	4644      	mov	r4, r8
 800ac38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	615e      	str	r6, [r3, #20]
 800ac40:	6125      	str	r5, [r4, #16]
 800ac42:	4620      	mov	r0, r4
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	0800c259 	.word	0x0800c259
 800ac4c:	0800c348 	.word	0x0800c348

0800ac50 <__s2b>:
 800ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	4615      	mov	r5, r2
 800ac58:	461f      	mov	r7, r3
 800ac5a:	2209      	movs	r2, #9
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	4606      	mov	r6, r0
 800ac60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac64:	2100      	movs	r1, #0
 800ac66:	2201      	movs	r2, #1
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	db09      	blt.n	800ac80 <__s2b+0x30>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff ff47 	bl	800ab00 <_Balloc>
 800ac72:	b940      	cbnz	r0, 800ac86 <__s2b+0x36>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b19      	ldr	r3, [pc, #100]	; (800acdc <__s2b+0x8c>)
 800ac78:	4819      	ldr	r0, [pc, #100]	; (800ace0 <__s2b+0x90>)
 800ac7a:	21ce      	movs	r1, #206	; 0xce
 800ac7c:	f7fe fae4 	bl	8009248 <__assert_func>
 800ac80:	0052      	lsls	r2, r2, #1
 800ac82:	3101      	adds	r1, #1
 800ac84:	e7f0      	b.n	800ac68 <__s2b+0x18>
 800ac86:	9b08      	ldr	r3, [sp, #32]
 800ac88:	6143      	str	r3, [r0, #20]
 800ac8a:	2d09      	cmp	r5, #9
 800ac8c:	f04f 0301 	mov.w	r3, #1
 800ac90:	6103      	str	r3, [r0, #16]
 800ac92:	dd16      	ble.n	800acc2 <__s2b+0x72>
 800ac94:	f104 0909 	add.w	r9, r4, #9
 800ac98:	46c8      	mov	r8, r9
 800ac9a:	442c      	add	r4, r5
 800ac9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aca0:	4601      	mov	r1, r0
 800aca2:	3b30      	subs	r3, #48	; 0x30
 800aca4:	220a      	movs	r2, #10
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7ff ff8c 	bl	800abc4 <__multadd>
 800acac:	45a0      	cmp	r8, r4
 800acae:	d1f5      	bne.n	800ac9c <__s2b+0x4c>
 800acb0:	f1a5 0408 	sub.w	r4, r5, #8
 800acb4:	444c      	add	r4, r9
 800acb6:	1b2d      	subs	r5, r5, r4
 800acb8:	1963      	adds	r3, r4, r5
 800acba:	42bb      	cmp	r3, r7
 800acbc:	db04      	blt.n	800acc8 <__s2b+0x78>
 800acbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc2:	340a      	adds	r4, #10
 800acc4:	2509      	movs	r5, #9
 800acc6:	e7f6      	b.n	800acb6 <__s2b+0x66>
 800acc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800accc:	4601      	mov	r1, r0
 800acce:	3b30      	subs	r3, #48	; 0x30
 800acd0:	220a      	movs	r2, #10
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7ff ff76 	bl	800abc4 <__multadd>
 800acd8:	e7ee      	b.n	800acb8 <__s2b+0x68>
 800acda:	bf00      	nop
 800acdc:	0800c259 	.word	0x0800c259
 800ace0:	0800c348 	.word	0x0800c348

0800ace4 <__hi0bits>:
 800ace4:	0c03      	lsrs	r3, r0, #16
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	b9d3      	cbnz	r3, 800ad20 <__hi0bits+0x3c>
 800acea:	0400      	lsls	r0, r0, #16
 800acec:	2310      	movs	r3, #16
 800acee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acf2:	bf04      	itt	eq
 800acf4:	0200      	lsleq	r0, r0, #8
 800acf6:	3308      	addeq	r3, #8
 800acf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acfc:	bf04      	itt	eq
 800acfe:	0100      	lsleq	r0, r0, #4
 800ad00:	3304      	addeq	r3, #4
 800ad02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad06:	bf04      	itt	eq
 800ad08:	0080      	lsleq	r0, r0, #2
 800ad0a:	3302      	addeq	r3, #2
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	db05      	blt.n	800ad1c <__hi0bits+0x38>
 800ad10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad14:	f103 0301 	add.w	r3, r3, #1
 800ad18:	bf08      	it	eq
 800ad1a:	2320      	moveq	r3, #32
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	4770      	bx	lr
 800ad20:	2300      	movs	r3, #0
 800ad22:	e7e4      	b.n	800acee <__hi0bits+0xa>

0800ad24 <__lo0bits>:
 800ad24:	6803      	ldr	r3, [r0, #0]
 800ad26:	f013 0207 	ands.w	r2, r3, #7
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	d00b      	beq.n	800ad46 <__lo0bits+0x22>
 800ad2e:	07da      	lsls	r2, r3, #31
 800ad30:	d423      	bmi.n	800ad7a <__lo0bits+0x56>
 800ad32:	0798      	lsls	r0, r3, #30
 800ad34:	bf49      	itett	mi
 800ad36:	085b      	lsrmi	r3, r3, #1
 800ad38:	089b      	lsrpl	r3, r3, #2
 800ad3a:	2001      	movmi	r0, #1
 800ad3c:	600b      	strmi	r3, [r1, #0]
 800ad3e:	bf5c      	itt	pl
 800ad40:	600b      	strpl	r3, [r1, #0]
 800ad42:	2002      	movpl	r0, #2
 800ad44:	4770      	bx	lr
 800ad46:	b298      	uxth	r0, r3
 800ad48:	b9a8      	cbnz	r0, 800ad76 <__lo0bits+0x52>
 800ad4a:	0c1b      	lsrs	r3, r3, #16
 800ad4c:	2010      	movs	r0, #16
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	b90a      	cbnz	r2, 800ad56 <__lo0bits+0x32>
 800ad52:	3008      	adds	r0, #8
 800ad54:	0a1b      	lsrs	r3, r3, #8
 800ad56:	071a      	lsls	r2, r3, #28
 800ad58:	bf04      	itt	eq
 800ad5a:	091b      	lsreq	r3, r3, #4
 800ad5c:	3004      	addeq	r0, #4
 800ad5e:	079a      	lsls	r2, r3, #30
 800ad60:	bf04      	itt	eq
 800ad62:	089b      	lsreq	r3, r3, #2
 800ad64:	3002      	addeq	r0, #2
 800ad66:	07da      	lsls	r2, r3, #31
 800ad68:	d403      	bmi.n	800ad72 <__lo0bits+0x4e>
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	f100 0001 	add.w	r0, r0, #1
 800ad70:	d005      	beq.n	800ad7e <__lo0bits+0x5a>
 800ad72:	600b      	str	r3, [r1, #0]
 800ad74:	4770      	bx	lr
 800ad76:	4610      	mov	r0, r2
 800ad78:	e7e9      	b.n	800ad4e <__lo0bits+0x2a>
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	4770      	bx	lr
 800ad7e:	2020      	movs	r0, #32
 800ad80:	4770      	bx	lr
	...

0800ad84 <__i2b>:
 800ad84:	b510      	push	{r4, lr}
 800ad86:	460c      	mov	r4, r1
 800ad88:	2101      	movs	r1, #1
 800ad8a:	f7ff feb9 	bl	800ab00 <_Balloc>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	b928      	cbnz	r0, 800ad9e <__i2b+0x1a>
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <__i2b+0x24>)
 800ad94:	4805      	ldr	r0, [pc, #20]	; (800adac <__i2b+0x28>)
 800ad96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad9a:	f7fe fa55 	bl	8009248 <__assert_func>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	6144      	str	r4, [r0, #20]
 800ada2:	6103      	str	r3, [r0, #16]
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	bf00      	nop
 800ada8:	0800c259 	.word	0x0800c259
 800adac:	0800c348 	.word	0x0800c348

0800adb0 <__multiply>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	4691      	mov	r9, r2
 800adb6:	690a      	ldr	r2, [r1, #16]
 800adb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	bfb8      	it	lt
 800adc0:	460b      	movlt	r3, r1
 800adc2:	460c      	mov	r4, r1
 800adc4:	bfbc      	itt	lt
 800adc6:	464c      	movlt	r4, r9
 800adc8:	4699      	movlt	r9, r3
 800adca:	6927      	ldr	r7, [r4, #16]
 800adcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	6861      	ldr	r1, [r4, #4]
 800add4:	eb07 060a 	add.w	r6, r7, sl
 800add8:	42b3      	cmp	r3, r6
 800adda:	b085      	sub	sp, #20
 800addc:	bfb8      	it	lt
 800adde:	3101      	addlt	r1, #1
 800ade0:	f7ff fe8e 	bl	800ab00 <_Balloc>
 800ade4:	b930      	cbnz	r0, 800adf4 <__multiply+0x44>
 800ade6:	4602      	mov	r2, r0
 800ade8:	4b44      	ldr	r3, [pc, #272]	; (800aefc <__multiply+0x14c>)
 800adea:	4845      	ldr	r0, [pc, #276]	; (800af00 <__multiply+0x150>)
 800adec:	f240 115d 	movw	r1, #349	; 0x15d
 800adf0:	f7fe fa2a 	bl	8009248 <__assert_func>
 800adf4:	f100 0514 	add.w	r5, r0, #20
 800adf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adfc:	462b      	mov	r3, r5
 800adfe:	2200      	movs	r2, #0
 800ae00:	4543      	cmp	r3, r8
 800ae02:	d321      	bcc.n	800ae48 <__multiply+0x98>
 800ae04:	f104 0314 	add.w	r3, r4, #20
 800ae08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae0c:	f109 0314 	add.w	r3, r9, #20
 800ae10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae14:	9202      	str	r2, [sp, #8]
 800ae16:	1b3a      	subs	r2, r7, r4
 800ae18:	3a15      	subs	r2, #21
 800ae1a:	f022 0203 	bic.w	r2, r2, #3
 800ae1e:	3204      	adds	r2, #4
 800ae20:	f104 0115 	add.w	r1, r4, #21
 800ae24:	428f      	cmp	r7, r1
 800ae26:	bf38      	it	cc
 800ae28:	2204      	movcc	r2, #4
 800ae2a:	9201      	str	r2, [sp, #4]
 800ae2c:	9a02      	ldr	r2, [sp, #8]
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d80c      	bhi.n	800ae4e <__multiply+0x9e>
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	dd03      	ble.n	800ae40 <__multiply+0x90>
 800ae38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d05a      	beq.n	800aef6 <__multiply+0x146>
 800ae40:	6106      	str	r6, [r0, #16]
 800ae42:	b005      	add	sp, #20
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	f843 2b04 	str.w	r2, [r3], #4
 800ae4c:	e7d8      	b.n	800ae00 <__multiply+0x50>
 800ae4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae52:	f1ba 0f00 	cmp.w	sl, #0
 800ae56:	d024      	beq.n	800aea2 <__multiply+0xf2>
 800ae58:	f104 0e14 	add.w	lr, r4, #20
 800ae5c:	46a9      	mov	r9, r5
 800ae5e:	f04f 0c00 	mov.w	ip, #0
 800ae62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae66:	f8d9 1000 	ldr.w	r1, [r9]
 800ae6a:	fa1f fb82 	uxth.w	fp, r2
 800ae6e:	b289      	uxth	r1, r1
 800ae70:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae78:	f8d9 2000 	ldr.w	r2, [r9]
 800ae7c:	4461      	add	r1, ip
 800ae7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae82:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae8a:	b289      	uxth	r1, r1
 800ae8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae90:	4577      	cmp	r7, lr
 800ae92:	f849 1b04 	str.w	r1, [r9], #4
 800ae96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae9a:	d8e2      	bhi.n	800ae62 <__multiply+0xb2>
 800ae9c:	9a01      	ldr	r2, [sp, #4]
 800ae9e:	f845 c002 	str.w	ip, [r5, r2]
 800aea2:	9a03      	ldr	r2, [sp, #12]
 800aea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	f1b9 0f00 	cmp.w	r9, #0
 800aeae:	d020      	beq.n	800aef2 <__multiply+0x142>
 800aeb0:	6829      	ldr	r1, [r5, #0]
 800aeb2:	f104 0c14 	add.w	ip, r4, #20
 800aeb6:	46ae      	mov	lr, r5
 800aeb8:	f04f 0a00 	mov.w	sl, #0
 800aebc:	f8bc b000 	ldrh.w	fp, [ip]
 800aec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aec4:	fb09 220b 	mla	r2, r9, fp, r2
 800aec8:	4492      	add	sl, r2
 800aeca:	b289      	uxth	r1, r1
 800aecc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aed0:	f84e 1b04 	str.w	r1, [lr], #4
 800aed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aed8:	f8be 1000 	ldrh.w	r1, [lr]
 800aedc:	0c12      	lsrs	r2, r2, #16
 800aede:	fb09 1102 	mla	r1, r9, r2, r1
 800aee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aee6:	4567      	cmp	r7, ip
 800aee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aeec:	d8e6      	bhi.n	800aebc <__multiply+0x10c>
 800aeee:	9a01      	ldr	r2, [sp, #4]
 800aef0:	50a9      	str	r1, [r5, r2]
 800aef2:	3504      	adds	r5, #4
 800aef4:	e79a      	b.n	800ae2c <__multiply+0x7c>
 800aef6:	3e01      	subs	r6, #1
 800aef8:	e79c      	b.n	800ae34 <__multiply+0x84>
 800aefa:	bf00      	nop
 800aefc:	0800c259 	.word	0x0800c259
 800af00:	0800c348 	.word	0x0800c348

0800af04 <__pow5mult>:
 800af04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af08:	4615      	mov	r5, r2
 800af0a:	f012 0203 	ands.w	r2, r2, #3
 800af0e:	4606      	mov	r6, r0
 800af10:	460f      	mov	r7, r1
 800af12:	d007      	beq.n	800af24 <__pow5mult+0x20>
 800af14:	4c25      	ldr	r4, [pc, #148]	; (800afac <__pow5mult+0xa8>)
 800af16:	3a01      	subs	r2, #1
 800af18:	2300      	movs	r3, #0
 800af1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af1e:	f7ff fe51 	bl	800abc4 <__multadd>
 800af22:	4607      	mov	r7, r0
 800af24:	10ad      	asrs	r5, r5, #2
 800af26:	d03d      	beq.n	800afa4 <__pow5mult+0xa0>
 800af28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af2a:	b97c      	cbnz	r4, 800af4c <__pow5mult+0x48>
 800af2c:	2010      	movs	r0, #16
 800af2e:	f7fc f905 	bl	800713c <malloc>
 800af32:	4602      	mov	r2, r0
 800af34:	6270      	str	r0, [r6, #36]	; 0x24
 800af36:	b928      	cbnz	r0, 800af44 <__pow5mult+0x40>
 800af38:	4b1d      	ldr	r3, [pc, #116]	; (800afb0 <__pow5mult+0xac>)
 800af3a:	481e      	ldr	r0, [pc, #120]	; (800afb4 <__pow5mult+0xb0>)
 800af3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af40:	f7fe f982 	bl	8009248 <__assert_func>
 800af44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af48:	6004      	str	r4, [r0, #0]
 800af4a:	60c4      	str	r4, [r0, #12]
 800af4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af54:	b94c      	cbnz	r4, 800af6a <__pow5mult+0x66>
 800af56:	f240 2171 	movw	r1, #625	; 0x271
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ff12 	bl	800ad84 <__i2b>
 800af60:	2300      	movs	r3, #0
 800af62:	f8c8 0008 	str.w	r0, [r8, #8]
 800af66:	4604      	mov	r4, r0
 800af68:	6003      	str	r3, [r0, #0]
 800af6a:	f04f 0900 	mov.w	r9, #0
 800af6e:	07eb      	lsls	r3, r5, #31
 800af70:	d50a      	bpl.n	800af88 <__pow5mult+0x84>
 800af72:	4639      	mov	r1, r7
 800af74:	4622      	mov	r2, r4
 800af76:	4630      	mov	r0, r6
 800af78:	f7ff ff1a 	bl	800adb0 <__multiply>
 800af7c:	4639      	mov	r1, r7
 800af7e:	4680      	mov	r8, r0
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff fdfd 	bl	800ab80 <_Bfree>
 800af86:	4647      	mov	r7, r8
 800af88:	106d      	asrs	r5, r5, #1
 800af8a:	d00b      	beq.n	800afa4 <__pow5mult+0xa0>
 800af8c:	6820      	ldr	r0, [r4, #0]
 800af8e:	b938      	cbnz	r0, 800afa0 <__pow5mult+0x9c>
 800af90:	4622      	mov	r2, r4
 800af92:	4621      	mov	r1, r4
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff ff0b 	bl	800adb0 <__multiply>
 800af9a:	6020      	str	r0, [r4, #0]
 800af9c:	f8c0 9000 	str.w	r9, [r0]
 800afa0:	4604      	mov	r4, r0
 800afa2:	e7e4      	b.n	800af6e <__pow5mult+0x6a>
 800afa4:	4638      	mov	r0, r7
 800afa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afaa:	bf00      	nop
 800afac:	0800c498 	.word	0x0800c498
 800afb0:	0800c040 	.word	0x0800c040
 800afb4:	0800c348 	.word	0x0800c348

0800afb8 <__lshift>:
 800afb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	460c      	mov	r4, r1
 800afbe:	6849      	ldr	r1, [r1, #4]
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	4607      	mov	r7, r0
 800afca:	4691      	mov	r9, r2
 800afcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afd0:	f108 0601 	add.w	r6, r8, #1
 800afd4:	42b3      	cmp	r3, r6
 800afd6:	db0b      	blt.n	800aff0 <__lshift+0x38>
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff fd91 	bl	800ab00 <_Balloc>
 800afde:	4605      	mov	r5, r0
 800afe0:	b948      	cbnz	r0, 800aff6 <__lshift+0x3e>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b2a      	ldr	r3, [pc, #168]	; (800b090 <__lshift+0xd8>)
 800afe6:	482b      	ldr	r0, [pc, #172]	; (800b094 <__lshift+0xdc>)
 800afe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afec:	f7fe f92c 	bl	8009248 <__assert_func>
 800aff0:	3101      	adds	r1, #1
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	e7ee      	b.n	800afd4 <__lshift+0x1c>
 800aff6:	2300      	movs	r3, #0
 800aff8:	f100 0114 	add.w	r1, r0, #20
 800affc:	f100 0210 	add.w	r2, r0, #16
 800b000:	4618      	mov	r0, r3
 800b002:	4553      	cmp	r3, sl
 800b004:	db37      	blt.n	800b076 <__lshift+0xbe>
 800b006:	6920      	ldr	r0, [r4, #16]
 800b008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b00c:	f104 0314 	add.w	r3, r4, #20
 800b010:	f019 091f 	ands.w	r9, r9, #31
 800b014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b01c:	d02f      	beq.n	800b07e <__lshift+0xc6>
 800b01e:	f1c9 0e20 	rsb	lr, r9, #32
 800b022:	468a      	mov	sl, r1
 800b024:	f04f 0c00 	mov.w	ip, #0
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	fa02 f209 	lsl.w	r2, r2, r9
 800b02e:	ea42 020c 	orr.w	r2, r2, ip
 800b032:	f84a 2b04 	str.w	r2, [sl], #4
 800b036:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03a:	4298      	cmp	r0, r3
 800b03c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b040:	d8f2      	bhi.n	800b028 <__lshift+0x70>
 800b042:	1b03      	subs	r3, r0, r4
 800b044:	3b15      	subs	r3, #21
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	3304      	adds	r3, #4
 800b04c:	f104 0215 	add.w	r2, r4, #21
 800b050:	4290      	cmp	r0, r2
 800b052:	bf38      	it	cc
 800b054:	2304      	movcc	r3, #4
 800b056:	f841 c003 	str.w	ip, [r1, r3]
 800b05a:	f1bc 0f00 	cmp.w	ip, #0
 800b05e:	d001      	beq.n	800b064 <__lshift+0xac>
 800b060:	f108 0602 	add.w	r6, r8, #2
 800b064:	3e01      	subs	r6, #1
 800b066:	4638      	mov	r0, r7
 800b068:	612e      	str	r6, [r5, #16]
 800b06a:	4621      	mov	r1, r4
 800b06c:	f7ff fd88 	bl	800ab80 <_Bfree>
 800b070:	4628      	mov	r0, r5
 800b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b076:	f842 0f04 	str.w	r0, [r2, #4]!
 800b07a:	3301      	adds	r3, #1
 800b07c:	e7c1      	b.n	800b002 <__lshift+0x4a>
 800b07e:	3904      	subs	r1, #4
 800b080:	f853 2b04 	ldr.w	r2, [r3], #4
 800b084:	f841 2f04 	str.w	r2, [r1, #4]!
 800b088:	4298      	cmp	r0, r3
 800b08a:	d8f9      	bhi.n	800b080 <__lshift+0xc8>
 800b08c:	e7ea      	b.n	800b064 <__lshift+0xac>
 800b08e:	bf00      	nop
 800b090:	0800c259 	.word	0x0800c259
 800b094:	0800c348 	.word	0x0800c348

0800b098 <__mcmp>:
 800b098:	b530      	push	{r4, r5, lr}
 800b09a:	6902      	ldr	r2, [r0, #16]
 800b09c:	690c      	ldr	r4, [r1, #16]
 800b09e:	1b12      	subs	r2, r2, r4
 800b0a0:	d10e      	bne.n	800b0c0 <__mcmp+0x28>
 800b0a2:	f100 0314 	add.w	r3, r0, #20
 800b0a6:	3114      	adds	r1, #20
 800b0a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0b8:	42a5      	cmp	r5, r4
 800b0ba:	d003      	beq.n	800b0c4 <__mcmp+0x2c>
 800b0bc:	d305      	bcc.n	800b0ca <__mcmp+0x32>
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	bd30      	pop	{r4, r5, pc}
 800b0c4:	4283      	cmp	r3, r0
 800b0c6:	d3f3      	bcc.n	800b0b0 <__mcmp+0x18>
 800b0c8:	e7fa      	b.n	800b0c0 <__mcmp+0x28>
 800b0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ce:	e7f7      	b.n	800b0c0 <__mcmp+0x28>

0800b0d0 <__mdiff>:
 800b0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	4611      	mov	r1, r2
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4690      	mov	r8, r2
 800b0de:	f7ff ffdb 	bl	800b098 <__mcmp>
 800b0e2:	1e05      	subs	r5, r0, #0
 800b0e4:	d110      	bne.n	800b108 <__mdiff+0x38>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff fd09 	bl	800ab00 <_Balloc>
 800b0ee:	b930      	cbnz	r0, 800b0fe <__mdiff+0x2e>
 800b0f0:	4b3a      	ldr	r3, [pc, #232]	; (800b1dc <__mdiff+0x10c>)
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	f240 2132 	movw	r1, #562	; 0x232
 800b0f8:	4839      	ldr	r0, [pc, #228]	; (800b1e0 <__mdiff+0x110>)
 800b0fa:	f7fe f8a5 	bl	8009248 <__assert_func>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	bfa4      	itt	ge
 800b10a:	4643      	movge	r3, r8
 800b10c:	46a0      	movge	r8, r4
 800b10e:	4630      	mov	r0, r6
 800b110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b114:	bfa6      	itte	ge
 800b116:	461c      	movge	r4, r3
 800b118:	2500      	movge	r5, #0
 800b11a:	2501      	movlt	r5, #1
 800b11c:	f7ff fcf0 	bl	800ab00 <_Balloc>
 800b120:	b920      	cbnz	r0, 800b12c <__mdiff+0x5c>
 800b122:	4b2e      	ldr	r3, [pc, #184]	; (800b1dc <__mdiff+0x10c>)
 800b124:	4602      	mov	r2, r0
 800b126:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b12a:	e7e5      	b.n	800b0f8 <__mdiff+0x28>
 800b12c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b130:	6926      	ldr	r6, [r4, #16]
 800b132:	60c5      	str	r5, [r0, #12]
 800b134:	f104 0914 	add.w	r9, r4, #20
 800b138:	f108 0514 	add.w	r5, r8, #20
 800b13c:	f100 0e14 	add.w	lr, r0, #20
 800b140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b148:	f108 0210 	add.w	r2, r8, #16
 800b14c:	46f2      	mov	sl, lr
 800b14e:	2100      	movs	r1, #0
 800b150:	f859 3b04 	ldr.w	r3, [r9], #4
 800b154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b158:	fa1f f883 	uxth.w	r8, r3
 800b15c:	fa11 f18b 	uxtah	r1, r1, fp
 800b160:	0c1b      	lsrs	r3, r3, #16
 800b162:	eba1 0808 	sub.w	r8, r1, r8
 800b166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b16a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b16e:	fa1f f888 	uxth.w	r8, r8
 800b172:	1419      	asrs	r1, r3, #16
 800b174:	454e      	cmp	r6, r9
 800b176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b17a:	f84a 3b04 	str.w	r3, [sl], #4
 800b17e:	d8e7      	bhi.n	800b150 <__mdiff+0x80>
 800b180:	1b33      	subs	r3, r6, r4
 800b182:	3b15      	subs	r3, #21
 800b184:	f023 0303 	bic.w	r3, r3, #3
 800b188:	3304      	adds	r3, #4
 800b18a:	3415      	adds	r4, #21
 800b18c:	42a6      	cmp	r6, r4
 800b18e:	bf38      	it	cc
 800b190:	2304      	movcc	r3, #4
 800b192:	441d      	add	r5, r3
 800b194:	4473      	add	r3, lr
 800b196:	469e      	mov	lr, r3
 800b198:	462e      	mov	r6, r5
 800b19a:	4566      	cmp	r6, ip
 800b19c:	d30e      	bcc.n	800b1bc <__mdiff+0xec>
 800b19e:	f10c 0203 	add.w	r2, ip, #3
 800b1a2:	1b52      	subs	r2, r2, r5
 800b1a4:	f022 0203 	bic.w	r2, r2, #3
 800b1a8:	3d03      	subs	r5, #3
 800b1aa:	45ac      	cmp	ip, r5
 800b1ac:	bf38      	it	cc
 800b1ae:	2200      	movcc	r2, #0
 800b1b0:	441a      	add	r2, r3
 800b1b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1b6:	b17b      	cbz	r3, 800b1d8 <__mdiff+0x108>
 800b1b8:	6107      	str	r7, [r0, #16]
 800b1ba:	e7a3      	b.n	800b104 <__mdiff+0x34>
 800b1bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1c0:	fa11 f288 	uxtah	r2, r1, r8
 800b1c4:	1414      	asrs	r4, r2, #16
 800b1c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b1d4:	1421      	asrs	r1, r4, #16
 800b1d6:	e7e0      	b.n	800b19a <__mdiff+0xca>
 800b1d8:	3f01      	subs	r7, #1
 800b1da:	e7ea      	b.n	800b1b2 <__mdiff+0xe2>
 800b1dc:	0800c259 	.word	0x0800c259
 800b1e0:	0800c348 	.word	0x0800c348

0800b1e4 <__ulp>:
 800b1e4:	b082      	sub	sp, #8
 800b1e6:	ed8d 0b00 	vstr	d0, [sp]
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	4912      	ldr	r1, [pc, #72]	; (800b238 <__ulp+0x54>)
 800b1ee:	4019      	ands	r1, r3
 800b1f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	dd05      	ble.n	800b204 <__ulp+0x20>
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	ec43 2b10 	vmov	d0, r2, r3
 800b200:	b002      	add	sp, #8
 800b202:	4770      	bx	lr
 800b204:	4249      	negs	r1, r1
 800b206:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b20a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b20e:	f04f 0200 	mov.w	r2, #0
 800b212:	f04f 0300 	mov.w	r3, #0
 800b216:	da04      	bge.n	800b222 <__ulp+0x3e>
 800b218:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b21c:	fa41 f300 	asr.w	r3, r1, r0
 800b220:	e7ec      	b.n	800b1fc <__ulp+0x18>
 800b222:	f1a0 0114 	sub.w	r1, r0, #20
 800b226:	291e      	cmp	r1, #30
 800b228:	bfda      	itte	le
 800b22a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b22e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b232:	2101      	movgt	r1, #1
 800b234:	460a      	mov	r2, r1
 800b236:	e7e1      	b.n	800b1fc <__ulp+0x18>
 800b238:	7ff00000 	.word	0x7ff00000

0800b23c <__b2d>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	6905      	ldr	r5, [r0, #16]
 800b240:	f100 0714 	add.w	r7, r0, #20
 800b244:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b248:	1f2e      	subs	r6, r5, #4
 800b24a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b24e:	4620      	mov	r0, r4
 800b250:	f7ff fd48 	bl	800ace4 <__hi0bits>
 800b254:	f1c0 0320 	rsb	r3, r0, #32
 800b258:	280a      	cmp	r0, #10
 800b25a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2d8 <__b2d+0x9c>
 800b25e:	600b      	str	r3, [r1, #0]
 800b260:	dc14      	bgt.n	800b28c <__b2d+0x50>
 800b262:	f1c0 0e0b 	rsb	lr, r0, #11
 800b266:	fa24 f10e 	lsr.w	r1, r4, lr
 800b26a:	42b7      	cmp	r7, r6
 800b26c:	ea41 030c 	orr.w	r3, r1, ip
 800b270:	bf34      	ite	cc
 800b272:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b276:	2100      	movcs	r1, #0
 800b278:	3015      	adds	r0, #21
 800b27a:	fa04 f000 	lsl.w	r0, r4, r0
 800b27e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b282:	ea40 0201 	orr.w	r2, r0, r1
 800b286:	ec43 2b10 	vmov	d0, r2, r3
 800b28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28c:	42b7      	cmp	r7, r6
 800b28e:	bf3a      	itte	cc
 800b290:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b294:	f1a5 0608 	subcc.w	r6, r5, #8
 800b298:	2100      	movcs	r1, #0
 800b29a:	380b      	subs	r0, #11
 800b29c:	d017      	beq.n	800b2ce <__b2d+0x92>
 800b29e:	f1c0 0c20 	rsb	ip, r0, #32
 800b2a2:	fa04 f500 	lsl.w	r5, r4, r0
 800b2a6:	42be      	cmp	r6, r7
 800b2a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2ac:	ea45 0504 	orr.w	r5, r5, r4
 800b2b0:	bf8c      	ite	hi
 800b2b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2b6:	2400      	movls	r4, #0
 800b2b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2bc:	fa01 f000 	lsl.w	r0, r1, r0
 800b2c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2c8:	ea40 0204 	orr.w	r2, r0, r4
 800b2cc:	e7db      	b.n	800b286 <__b2d+0x4a>
 800b2ce:	ea44 030c 	orr.w	r3, r4, ip
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	e7d7      	b.n	800b286 <__b2d+0x4a>
 800b2d6:	bf00      	nop
 800b2d8:	3ff00000 	.word	0x3ff00000

0800b2dc <__d2b>:
 800b2dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	ec57 6b10 	vmov	r6, r7, d0
 800b2e8:	4690      	mov	r8, r2
 800b2ea:	f7ff fc09 	bl	800ab00 <_Balloc>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	b930      	cbnz	r0, 800b300 <__d2b+0x24>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b25      	ldr	r3, [pc, #148]	; (800b38c <__d2b+0xb0>)
 800b2f6:	4826      	ldr	r0, [pc, #152]	; (800b390 <__d2b+0xb4>)
 800b2f8:	f240 310a 	movw	r1, #778	; 0x30a
 800b2fc:	f7fd ffa4 	bl	8009248 <__assert_func>
 800b300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b308:	bb35      	cbnz	r5, 800b358 <__d2b+0x7c>
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	d028      	beq.n	800b362 <__d2b+0x86>
 800b310:	4668      	mov	r0, sp
 800b312:	9600      	str	r6, [sp, #0]
 800b314:	f7ff fd06 	bl	800ad24 <__lo0bits>
 800b318:	9900      	ldr	r1, [sp, #0]
 800b31a:	b300      	cbz	r0, 800b35e <__d2b+0x82>
 800b31c:	9a01      	ldr	r2, [sp, #4]
 800b31e:	f1c0 0320 	rsb	r3, r0, #32
 800b322:	fa02 f303 	lsl.w	r3, r2, r3
 800b326:	430b      	orrs	r3, r1
 800b328:	40c2      	lsrs	r2, r0
 800b32a:	6163      	str	r3, [r4, #20]
 800b32c:	9201      	str	r2, [sp, #4]
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	61a3      	str	r3, [r4, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bf14      	ite	ne
 800b336:	2202      	movne	r2, #2
 800b338:	2201      	moveq	r2, #1
 800b33a:	6122      	str	r2, [r4, #16]
 800b33c:	b1d5      	cbz	r5, 800b374 <__d2b+0x98>
 800b33e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b342:	4405      	add	r5, r0
 800b344:	f8c9 5000 	str.w	r5, [r9]
 800b348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b34c:	f8c8 0000 	str.w	r0, [r8]
 800b350:	4620      	mov	r0, r4
 800b352:	b003      	add	sp, #12
 800b354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b35c:	e7d5      	b.n	800b30a <__d2b+0x2e>
 800b35e:	6161      	str	r1, [r4, #20]
 800b360:	e7e5      	b.n	800b32e <__d2b+0x52>
 800b362:	a801      	add	r0, sp, #4
 800b364:	f7ff fcde 	bl	800ad24 <__lo0bits>
 800b368:	9b01      	ldr	r3, [sp, #4]
 800b36a:	6163      	str	r3, [r4, #20]
 800b36c:	2201      	movs	r2, #1
 800b36e:	6122      	str	r2, [r4, #16]
 800b370:	3020      	adds	r0, #32
 800b372:	e7e3      	b.n	800b33c <__d2b+0x60>
 800b374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b37c:	f8c9 0000 	str.w	r0, [r9]
 800b380:	6918      	ldr	r0, [r3, #16]
 800b382:	f7ff fcaf 	bl	800ace4 <__hi0bits>
 800b386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b38a:	e7df      	b.n	800b34c <__d2b+0x70>
 800b38c:	0800c259 	.word	0x0800c259
 800b390:	0800c348 	.word	0x0800c348

0800b394 <__ratio>:
 800b394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	4688      	mov	r8, r1
 800b39a:	4669      	mov	r1, sp
 800b39c:	4681      	mov	r9, r0
 800b39e:	f7ff ff4d 	bl	800b23c <__b2d>
 800b3a2:	a901      	add	r1, sp, #4
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	ec55 4b10 	vmov	r4, r5, d0
 800b3aa:	f7ff ff47 	bl	800b23c <__b2d>
 800b3ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3b6:	eba3 0c02 	sub.w	ip, r3, r2
 800b3ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3c4:	ec51 0b10 	vmov	r0, r1, d0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfd6      	itet	le
 800b3cc:	460a      	movle	r2, r1
 800b3ce:	462a      	movgt	r2, r5
 800b3d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3d4:	468b      	mov	fp, r1
 800b3d6:	462f      	mov	r7, r5
 800b3d8:	bfd4      	ite	le
 800b3da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	ee10 2a10 	vmov	r2, s0
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f5 fa36 	bl	800085c <__aeabi_ddiv>
 800b3f0:	ec41 0b10 	vmov	d0, r0, r1
 800b3f4:	b003      	add	sp, #12
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3fa <__copybits>:
 800b3fa:	3901      	subs	r1, #1
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	1149      	asrs	r1, r1, #5
 800b400:	6914      	ldr	r4, [r2, #16]
 800b402:	3101      	adds	r1, #1
 800b404:	f102 0314 	add.w	r3, r2, #20
 800b408:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b40c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b410:	1f05      	subs	r5, r0, #4
 800b412:	42a3      	cmp	r3, r4
 800b414:	d30c      	bcc.n	800b430 <__copybits+0x36>
 800b416:	1aa3      	subs	r3, r4, r2
 800b418:	3b11      	subs	r3, #17
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	3211      	adds	r2, #17
 800b420:	42a2      	cmp	r2, r4
 800b422:	bf88      	it	hi
 800b424:	2300      	movhi	r3, #0
 800b426:	4418      	add	r0, r3
 800b428:	2300      	movs	r3, #0
 800b42a:	4288      	cmp	r0, r1
 800b42c:	d305      	bcc.n	800b43a <__copybits+0x40>
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	f853 6b04 	ldr.w	r6, [r3], #4
 800b434:	f845 6f04 	str.w	r6, [r5, #4]!
 800b438:	e7eb      	b.n	800b412 <__copybits+0x18>
 800b43a:	f840 3b04 	str.w	r3, [r0], #4
 800b43e:	e7f4      	b.n	800b42a <__copybits+0x30>

0800b440 <__any_on>:
 800b440:	f100 0214 	add.w	r2, r0, #20
 800b444:	6900      	ldr	r0, [r0, #16]
 800b446:	114b      	asrs	r3, r1, #5
 800b448:	4298      	cmp	r0, r3
 800b44a:	b510      	push	{r4, lr}
 800b44c:	db11      	blt.n	800b472 <__any_on+0x32>
 800b44e:	dd0a      	ble.n	800b466 <__any_on+0x26>
 800b450:	f011 011f 	ands.w	r1, r1, #31
 800b454:	d007      	beq.n	800b466 <__any_on+0x26>
 800b456:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b45a:	fa24 f001 	lsr.w	r0, r4, r1
 800b45e:	fa00 f101 	lsl.w	r1, r0, r1
 800b462:	428c      	cmp	r4, r1
 800b464:	d10b      	bne.n	800b47e <__any_on+0x3e>
 800b466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d803      	bhi.n	800b476 <__any_on+0x36>
 800b46e:	2000      	movs	r0, #0
 800b470:	bd10      	pop	{r4, pc}
 800b472:	4603      	mov	r3, r0
 800b474:	e7f7      	b.n	800b466 <__any_on+0x26>
 800b476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b47a:	2900      	cmp	r1, #0
 800b47c:	d0f5      	beq.n	800b46a <__any_on+0x2a>
 800b47e:	2001      	movs	r0, #1
 800b480:	e7f6      	b.n	800b470 <__any_on+0x30>

0800b482 <_calloc_r>:
 800b482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b484:	fba1 2402 	umull	r2, r4, r1, r2
 800b488:	b94c      	cbnz	r4, 800b49e <_calloc_r+0x1c>
 800b48a:	4611      	mov	r1, r2
 800b48c:	9201      	str	r2, [sp, #4]
 800b48e:	f7fb fee7 	bl	8007260 <_malloc_r>
 800b492:	9a01      	ldr	r2, [sp, #4]
 800b494:	4605      	mov	r5, r0
 800b496:	b930      	cbnz	r0, 800b4a6 <_calloc_r+0x24>
 800b498:	4628      	mov	r0, r5
 800b49a:	b003      	add	sp, #12
 800b49c:	bd30      	pop	{r4, r5, pc}
 800b49e:	220c      	movs	r2, #12
 800b4a0:	6002      	str	r2, [r0, #0]
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	e7f8      	b.n	800b498 <_calloc_r+0x16>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f7fb fe66 	bl	8007178 <memset>
 800b4ac:	e7f4      	b.n	800b498 <_calloc_r+0x16>

0800b4ae <__ssputs_r>:
 800b4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b2:	688e      	ldr	r6, [r1, #8]
 800b4b4:	429e      	cmp	r6, r3
 800b4b6:	4682      	mov	sl, r0
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	4690      	mov	r8, r2
 800b4bc:	461f      	mov	r7, r3
 800b4be:	d838      	bhi.n	800b532 <__ssputs_r+0x84>
 800b4c0:	898a      	ldrh	r2, [r1, #12]
 800b4c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4c6:	d032      	beq.n	800b52e <__ssputs_r+0x80>
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	6909      	ldr	r1, [r1, #16]
 800b4cc:	eba5 0901 	sub.w	r9, r5, r1
 800b4d0:	6965      	ldr	r5, [r4, #20]
 800b4d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4da:	3301      	adds	r3, #1
 800b4dc:	444b      	add	r3, r9
 800b4de:	106d      	asrs	r5, r5, #1
 800b4e0:	429d      	cmp	r5, r3
 800b4e2:	bf38      	it	cc
 800b4e4:	461d      	movcc	r5, r3
 800b4e6:	0553      	lsls	r3, r2, #21
 800b4e8:	d531      	bpl.n	800b54e <__ssputs_r+0xa0>
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7fb feb8 	bl	8007260 <_malloc_r>
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	b950      	cbnz	r0, 800b50a <__ssputs_r+0x5c>
 800b4f4:	230c      	movs	r3, #12
 800b4f6:	f8ca 3000 	str.w	r3, [sl]
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	f04f 30ff 	mov.w	r0, #4294967295
 800b506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50a:	6921      	ldr	r1, [r4, #16]
 800b50c:	464a      	mov	r2, r9
 800b50e:	f7fb fe25 	bl	800715c <memcpy>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	6126      	str	r6, [r4, #16]
 800b520:	6165      	str	r5, [r4, #20]
 800b522:	444e      	add	r6, r9
 800b524:	eba5 0509 	sub.w	r5, r5, r9
 800b528:	6026      	str	r6, [r4, #0]
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	463e      	mov	r6, r7
 800b52e:	42be      	cmp	r6, r7
 800b530:	d900      	bls.n	800b534 <__ssputs_r+0x86>
 800b532:	463e      	mov	r6, r7
 800b534:	6820      	ldr	r0, [r4, #0]
 800b536:	4632      	mov	r2, r6
 800b538:	4641      	mov	r1, r8
 800b53a:	f000 fb37 	bl	800bbac <memmove>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	1b9b      	subs	r3, r3, r6
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	4433      	add	r3, r6
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	2000      	movs	r0, #0
 800b54c:	e7db      	b.n	800b506 <__ssputs_r+0x58>
 800b54e:	462a      	mov	r2, r5
 800b550:	f000 fb46 	bl	800bbe0 <_realloc_r>
 800b554:	4606      	mov	r6, r0
 800b556:	2800      	cmp	r0, #0
 800b558:	d1e1      	bne.n	800b51e <__ssputs_r+0x70>
 800b55a:	6921      	ldr	r1, [r4, #16]
 800b55c:	4650      	mov	r0, sl
 800b55e:	f7fb fe13 	bl	8007188 <_free_r>
 800b562:	e7c7      	b.n	800b4f4 <__ssputs_r+0x46>

0800b564 <_svfiprintf_r>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	4698      	mov	r8, r3
 800b56a:	898b      	ldrh	r3, [r1, #12]
 800b56c:	061b      	lsls	r3, r3, #24
 800b56e:	b09d      	sub	sp, #116	; 0x74
 800b570:	4607      	mov	r7, r0
 800b572:	460d      	mov	r5, r1
 800b574:	4614      	mov	r4, r2
 800b576:	d50e      	bpl.n	800b596 <_svfiprintf_r+0x32>
 800b578:	690b      	ldr	r3, [r1, #16]
 800b57a:	b963      	cbnz	r3, 800b596 <_svfiprintf_r+0x32>
 800b57c:	2140      	movs	r1, #64	; 0x40
 800b57e:	f7fb fe6f 	bl	8007260 <_malloc_r>
 800b582:	6028      	str	r0, [r5, #0]
 800b584:	6128      	str	r0, [r5, #16]
 800b586:	b920      	cbnz	r0, 800b592 <_svfiprintf_r+0x2e>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	e0d1      	b.n	800b736 <_svfiprintf_r+0x1d2>
 800b592:	2340      	movs	r3, #64	; 0x40
 800b594:	616b      	str	r3, [r5, #20]
 800b596:	2300      	movs	r3, #0
 800b598:	9309      	str	r3, [sp, #36]	; 0x24
 800b59a:	2320      	movs	r3, #32
 800b59c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a4:	2330      	movs	r3, #48	; 0x30
 800b5a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b750 <_svfiprintf_r+0x1ec>
 800b5aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ae:	f04f 0901 	mov.w	r9, #1
 800b5b2:	4623      	mov	r3, r4
 800b5b4:	469a      	mov	sl, r3
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	b10a      	cbz	r2, 800b5c0 <_svfiprintf_r+0x5c>
 800b5bc:	2a25      	cmp	r2, #37	; 0x25
 800b5be:	d1f9      	bne.n	800b5b4 <_svfiprintf_r+0x50>
 800b5c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c4:	d00b      	beq.n	800b5de <_svfiprintf_r+0x7a>
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f7ff ff6e 	bl	800b4ae <__ssputs_r>
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f000 80aa 	beq.w	800b72c <_svfiprintf_r+0x1c8>
 800b5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5da:	445a      	add	r2, fp
 800b5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5de:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 80a2 	beq.w	800b72c <_svfiprintf_r+0x1c8>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f2:	f10a 0a01 	add.w	sl, sl, #1
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	9307      	str	r3, [sp, #28]
 800b5fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b600:	4654      	mov	r4, sl
 800b602:	2205      	movs	r2, #5
 800b604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b608:	4851      	ldr	r0, [pc, #324]	; (800b750 <_svfiprintf_r+0x1ec>)
 800b60a:	f7f4 fdf1 	bl	80001f0 <memchr>
 800b60e:	9a04      	ldr	r2, [sp, #16]
 800b610:	b9d8      	cbnz	r0, 800b64a <_svfiprintf_r+0xe6>
 800b612:	06d0      	lsls	r0, r2, #27
 800b614:	bf44      	itt	mi
 800b616:	2320      	movmi	r3, #32
 800b618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b61c:	0711      	lsls	r1, r2, #28
 800b61e:	bf44      	itt	mi
 800b620:	232b      	movmi	r3, #43	; 0x2b
 800b622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b626:	f89a 3000 	ldrb.w	r3, [sl]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d015      	beq.n	800b65a <_svfiprintf_r+0xf6>
 800b62e:	9a07      	ldr	r2, [sp, #28]
 800b630:	4654      	mov	r4, sl
 800b632:	2000      	movs	r0, #0
 800b634:	f04f 0c0a 	mov.w	ip, #10
 800b638:	4621      	mov	r1, r4
 800b63a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63e:	3b30      	subs	r3, #48	; 0x30
 800b640:	2b09      	cmp	r3, #9
 800b642:	d94e      	bls.n	800b6e2 <_svfiprintf_r+0x17e>
 800b644:	b1b0      	cbz	r0, 800b674 <_svfiprintf_r+0x110>
 800b646:	9207      	str	r2, [sp, #28]
 800b648:	e014      	b.n	800b674 <_svfiprintf_r+0x110>
 800b64a:	eba0 0308 	sub.w	r3, r0, r8
 800b64e:	fa09 f303 	lsl.w	r3, r9, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	9304      	str	r3, [sp, #16]
 800b656:	46a2      	mov	sl, r4
 800b658:	e7d2      	b.n	800b600 <_svfiprintf_r+0x9c>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	1d19      	adds	r1, r3, #4
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	9103      	str	r1, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfbb      	ittet	lt
 800b666:	425b      	neglt	r3, r3
 800b668:	f042 0202 	orrlt.w	r2, r2, #2
 800b66c:	9307      	strge	r3, [sp, #28]
 800b66e:	9307      	strlt	r3, [sp, #28]
 800b670:	bfb8      	it	lt
 800b672:	9204      	strlt	r2, [sp, #16]
 800b674:	7823      	ldrb	r3, [r4, #0]
 800b676:	2b2e      	cmp	r3, #46	; 0x2e
 800b678:	d10c      	bne.n	800b694 <_svfiprintf_r+0x130>
 800b67a:	7863      	ldrb	r3, [r4, #1]
 800b67c:	2b2a      	cmp	r3, #42	; 0x2a
 800b67e:	d135      	bne.n	800b6ec <_svfiprintf_r+0x188>
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	9203      	str	r2, [sp, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	bfb8      	it	lt
 800b68c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b690:	3402      	adds	r4, #2
 800b692:	9305      	str	r3, [sp, #20]
 800b694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b760 <_svfiprintf_r+0x1fc>
 800b698:	7821      	ldrb	r1, [r4, #0]
 800b69a:	2203      	movs	r2, #3
 800b69c:	4650      	mov	r0, sl
 800b69e:	f7f4 fda7 	bl	80001f0 <memchr>
 800b6a2:	b140      	cbz	r0, 800b6b6 <_svfiprintf_r+0x152>
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	eba0 000a 	sub.w	r0, r0, sl
 800b6aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	4303      	orrs	r3, r0
 800b6b2:	3401      	adds	r4, #1
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ba:	4826      	ldr	r0, [pc, #152]	; (800b754 <_svfiprintf_r+0x1f0>)
 800b6bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6c0:	2206      	movs	r2, #6
 800b6c2:	f7f4 fd95 	bl	80001f0 <memchr>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d038      	beq.n	800b73c <_svfiprintf_r+0x1d8>
 800b6ca:	4b23      	ldr	r3, [pc, #140]	; (800b758 <_svfiprintf_r+0x1f4>)
 800b6cc:	bb1b      	cbnz	r3, 800b716 <_svfiprintf_r+0x1b2>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	3307      	adds	r3, #7
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6dc:	4433      	add	r3, r6
 800b6de:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e0:	e767      	b.n	800b5b2 <_svfiprintf_r+0x4e>
 800b6e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	e7a5      	b.n	800b638 <_svfiprintf_r+0xd4>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	3401      	adds	r4, #1
 800b6f0:	9305      	str	r3, [sp, #20]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	f04f 0c0a 	mov.w	ip, #10
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6fe:	3a30      	subs	r2, #48	; 0x30
 800b700:	2a09      	cmp	r2, #9
 800b702:	d903      	bls.n	800b70c <_svfiprintf_r+0x1a8>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0c5      	beq.n	800b694 <_svfiprintf_r+0x130>
 800b708:	9105      	str	r1, [sp, #20]
 800b70a:	e7c3      	b.n	800b694 <_svfiprintf_r+0x130>
 800b70c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b710:	4604      	mov	r4, r0
 800b712:	2301      	movs	r3, #1
 800b714:	e7f0      	b.n	800b6f8 <_svfiprintf_r+0x194>
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <_svfiprintf_r+0x1f8>)
 800b71e:	a904      	add	r1, sp, #16
 800b720:	4638      	mov	r0, r7
 800b722:	f7fb feb1 	bl	8007488 <_printf_float>
 800b726:	1c42      	adds	r2, r0, #1
 800b728:	4606      	mov	r6, r0
 800b72a:	d1d6      	bne.n	800b6da <_svfiprintf_r+0x176>
 800b72c:	89ab      	ldrh	r3, [r5, #12]
 800b72e:	065b      	lsls	r3, r3, #25
 800b730:	f53f af2c 	bmi.w	800b58c <_svfiprintf_r+0x28>
 800b734:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b736:	b01d      	add	sp, #116	; 0x74
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	ab03      	add	r3, sp, #12
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	462a      	mov	r2, r5
 800b742:	4b06      	ldr	r3, [pc, #24]	; (800b75c <_svfiprintf_r+0x1f8>)
 800b744:	a904      	add	r1, sp, #16
 800b746:	4638      	mov	r0, r7
 800b748:	f7fc f942 	bl	80079d0 <_printf_i>
 800b74c:	e7eb      	b.n	800b726 <_svfiprintf_r+0x1c2>
 800b74e:	bf00      	nop
 800b750:	0800c4a4 	.word	0x0800c4a4
 800b754:	0800c4ae 	.word	0x0800c4ae
 800b758:	08007489 	.word	0x08007489
 800b75c:	0800b4af 	.word	0x0800b4af
 800b760:	0800c4aa 	.word	0x0800c4aa

0800b764 <__sfputc_r>:
 800b764:	6893      	ldr	r3, [r2, #8]
 800b766:	3b01      	subs	r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	b410      	push	{r4}
 800b76c:	6093      	str	r3, [r2, #8]
 800b76e:	da08      	bge.n	800b782 <__sfputc_r+0x1e>
 800b770:	6994      	ldr	r4, [r2, #24]
 800b772:	42a3      	cmp	r3, r4
 800b774:	db01      	blt.n	800b77a <__sfputc_r+0x16>
 800b776:	290a      	cmp	r1, #10
 800b778:	d103      	bne.n	800b782 <__sfputc_r+0x1e>
 800b77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77e:	f7fd bca3 	b.w	80090c8 <__swbuf_r>
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	1c58      	adds	r0, r3, #1
 800b786:	6010      	str	r0, [r2, #0]
 800b788:	7019      	strb	r1, [r3, #0]
 800b78a:	4608      	mov	r0, r1
 800b78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <__sfputs_r>:
 800b792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	4614      	mov	r4, r2
 800b79a:	18d5      	adds	r5, r2, r3
 800b79c:	42ac      	cmp	r4, r5
 800b79e:	d101      	bne.n	800b7a4 <__sfputs_r+0x12>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e007      	b.n	800b7b4 <__sfputs_r+0x22>
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	463a      	mov	r2, r7
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ffda 	bl	800b764 <__sfputc_r>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d1f3      	bne.n	800b79c <__sfputs_r+0xa>
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7b8 <_vfiprintf_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460d      	mov	r5, r1
 800b7be:	b09d      	sub	sp, #116	; 0x74
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	4698      	mov	r8, r3
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b118      	cbz	r0, 800b7d0 <_vfiprintf_r+0x18>
 800b7c8:	6983      	ldr	r3, [r0, #24]
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x18>
 800b7cc:	f7fe fcf0 	bl	800a1b0 <__sinit>
 800b7d0:	4b89      	ldr	r3, [pc, #548]	; (800b9f8 <_vfiprintf_r+0x240>)
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	d11b      	bne.n	800b80e <_vfiprintf_r+0x56>
 800b7d6:	6875      	ldr	r5, [r6, #4]
 800b7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	059a      	lsls	r2, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e6:	f7ff f906 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	071b      	lsls	r3, r3, #28
 800b7ee:	d501      	bpl.n	800b7f4 <_vfiprintf_r+0x3c>
 800b7f0:	692b      	ldr	r3, [r5, #16]
 800b7f2:	b9eb      	cbnz	r3, 800b830 <_vfiprintf_r+0x78>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7fd fcb8 	bl	800916c <__swsetup_r>
 800b7fc:	b1c0      	cbz	r0, 800b830 <_vfiprintf_r+0x78>
 800b7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b800:	07dc      	lsls	r4, r3, #31
 800b802:	d50e      	bpl.n	800b822 <_vfiprintf_r+0x6a>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	b01d      	add	sp, #116	; 0x74
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	4b7b      	ldr	r3, [pc, #492]	; (800b9fc <_vfiprintf_r+0x244>)
 800b810:	429d      	cmp	r5, r3
 800b812:	d101      	bne.n	800b818 <_vfiprintf_r+0x60>
 800b814:	68b5      	ldr	r5, [r6, #8]
 800b816:	e7df      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b818:	4b79      	ldr	r3, [pc, #484]	; (800ba00 <_vfiprintf_r+0x248>)
 800b81a:	429d      	cmp	r5, r3
 800b81c:	bf08      	it	eq
 800b81e:	68f5      	ldreq	r5, [r6, #12]
 800b820:	e7da      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d4ed      	bmi.n	800b804 <_vfiprintf_r+0x4c>
 800b828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b82a:	f7ff f8e5 	bl	800a9f8 <__retarget_lock_release_recursive>
 800b82e:	e7e9      	b.n	800b804 <_vfiprintf_r+0x4c>
 800b830:	2300      	movs	r3, #0
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2320      	movs	r3, #32
 800b836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83e:	2330      	movs	r3, #48	; 0x30
 800b840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba04 <_vfiprintf_r+0x24c>
 800b844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b848:	f04f 0901 	mov.w	r9, #1
 800b84c:	4623      	mov	r3, r4
 800b84e:	469a      	mov	sl, r3
 800b850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b854:	b10a      	cbz	r2, 800b85a <_vfiprintf_r+0xa2>
 800b856:	2a25      	cmp	r2, #37	; 0x25
 800b858:	d1f9      	bne.n	800b84e <_vfiprintf_r+0x96>
 800b85a:	ebba 0b04 	subs.w	fp, sl, r4
 800b85e:	d00b      	beq.n	800b878 <_vfiprintf_r+0xc0>
 800b860:	465b      	mov	r3, fp
 800b862:	4622      	mov	r2, r4
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f7ff ff93 	bl	800b792 <__sfputs_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	f000 80aa 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b874:	445a      	add	r2, fp
 800b876:	9209      	str	r2, [sp, #36]	; 0x24
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80a2 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b882:	2300      	movs	r3, #0
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88c:	f10a 0a01 	add.w	sl, sl, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b898:	931a      	str	r3, [sp, #104]	; 0x68
 800b89a:	4654      	mov	r4, sl
 800b89c:	2205      	movs	r2, #5
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4858      	ldr	r0, [pc, #352]	; (800ba04 <_vfiprintf_r+0x24c>)
 800b8a4:	f7f4 fca4 	bl	80001f0 <memchr>
 800b8a8:	9a04      	ldr	r2, [sp, #16]
 800b8aa:	b9d8      	cbnz	r0, 800b8e4 <_vfiprintf_r+0x12c>
 800b8ac:	06d1      	lsls	r1, r2, #27
 800b8ae:	bf44      	itt	mi
 800b8b0:	2320      	movmi	r3, #32
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b6:	0713      	lsls	r3, r2, #28
 800b8b8:	bf44      	itt	mi
 800b8ba:	232b      	movmi	r3, #43	; 0x2b
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c6:	d015      	beq.n	800b8f4 <_vfiprintf_r+0x13c>
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	4654      	mov	r4, sl
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f04f 0c0a 	mov.w	ip, #10
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d8:	3b30      	subs	r3, #48	; 0x30
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d94e      	bls.n	800b97c <_vfiprintf_r+0x1c4>
 800b8de:	b1b0      	cbz	r0, 800b90e <_vfiprintf_r+0x156>
 800b8e0:	9207      	str	r2, [sp, #28]
 800b8e2:	e014      	b.n	800b90e <_vfiprintf_r+0x156>
 800b8e4:	eba0 0308 	sub.w	r3, r0, r8
 800b8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	46a2      	mov	sl, r4
 800b8f2:	e7d2      	b.n	800b89a <_vfiprintf_r+0xe2>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d19      	adds	r1, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	425b      	neglt	r3, r3
 800b902:	f042 0202 	orrlt.w	r2, r2, #2
 800b906:	9307      	strge	r3, [sp, #28]
 800b908:	9307      	strlt	r3, [sp, #28]
 800b90a:	bfb8      	it	lt
 800b90c:	9204      	strlt	r2, [sp, #16]
 800b90e:	7823      	ldrb	r3, [r4, #0]
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d10c      	bne.n	800b92e <_vfiprintf_r+0x176>
 800b914:	7863      	ldrb	r3, [r4, #1]
 800b916:	2b2a      	cmp	r3, #42	; 0x2a
 800b918:	d135      	bne.n	800b986 <_vfiprintf_r+0x1ce>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d1a      	adds	r2, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9203      	str	r2, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92a:	3402      	adds	r4, #2
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba14 <_vfiprintf_r+0x25c>
 800b932:	7821      	ldrb	r1, [r4, #0]
 800b934:	2203      	movs	r2, #3
 800b936:	4650      	mov	r0, sl
 800b938:	f7f4 fc5a 	bl	80001f0 <memchr>
 800b93c:	b140      	cbz	r0, 800b950 <_vfiprintf_r+0x198>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	eba0 000a 	sub.w	r0, r0, sl
 800b944:	fa03 f000 	lsl.w	r0, r3, r0
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	4303      	orrs	r3, r0
 800b94c:	3401      	adds	r4, #1
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	482c      	ldr	r0, [pc, #176]	; (800ba08 <_vfiprintf_r+0x250>)
 800b956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95a:	2206      	movs	r2, #6
 800b95c:	f7f4 fc48 	bl	80001f0 <memchr>
 800b960:	2800      	cmp	r0, #0
 800b962:	d03f      	beq.n	800b9e4 <_vfiprintf_r+0x22c>
 800b964:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <_vfiprintf_r+0x254>)
 800b966:	bb1b      	cbnz	r3, 800b9b0 <_vfiprintf_r+0x1f8>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	3307      	adds	r3, #7
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	443b      	add	r3, r7
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	e767      	b.n	800b84c <_vfiprintf_r+0x94>
 800b97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b980:	460c      	mov	r4, r1
 800b982:	2001      	movs	r0, #1
 800b984:	e7a5      	b.n	800b8d2 <_vfiprintf_r+0x11a>
 800b986:	2300      	movs	r3, #0
 800b988:	3401      	adds	r4, #1
 800b98a:	9305      	str	r3, [sp, #20]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b998:	3a30      	subs	r2, #48	; 0x30
 800b99a:	2a09      	cmp	r2, #9
 800b99c:	d903      	bls.n	800b9a6 <_vfiprintf_r+0x1ee>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0c5      	beq.n	800b92e <_vfiprintf_r+0x176>
 800b9a2:	9105      	str	r1, [sp, #20]
 800b9a4:	e7c3      	b.n	800b92e <_vfiprintf_r+0x176>
 800b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e7f0      	b.n	800b992 <_vfiprintf_r+0x1da>
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7fb fd64 	bl	8007488 <_printf_float>
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	1c78      	adds	r0, r7, #1
 800b9c4:	d1d6      	bne.n	800b974 <_vfiprintf_r+0x1bc>
 800b9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d405      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	059a      	lsls	r2, r3, #22
 800b9d0:	d402      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d4:	f7ff f810 	bl	800a9f8 <__retarget_lock_release_recursive>
 800b9d8:	89ab      	ldrh	r3, [r5, #12]
 800b9da:	065b      	lsls	r3, r3, #25
 800b9dc:	f53f af12 	bmi.w	800b804 <_vfiprintf_r+0x4c>
 800b9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e2:	e711      	b.n	800b808 <_vfiprintf_r+0x50>
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9ec:	a904      	add	r1, sp, #16
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7fb ffee 	bl	80079d0 <_printf_i>
 800b9f4:	e7e4      	b.n	800b9c0 <_vfiprintf_r+0x208>
 800b9f6:	bf00      	nop
 800b9f8:	0800c28c 	.word	0x0800c28c
 800b9fc:	0800c2ac 	.word	0x0800c2ac
 800ba00:	0800c26c 	.word	0x0800c26c
 800ba04:	0800c4a4 	.word	0x0800c4a4
 800ba08:	0800c4ae 	.word	0x0800c4ae
 800ba0c:	08007489 	.word	0x08007489
 800ba10:	0800b793 	.word	0x0800b793
 800ba14:	0800c4aa 	.word	0x0800c4aa

0800ba18 <nan>:
 800ba18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba20 <nan+0x8>
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	00000000 	.word	0x00000000
 800ba24:	7ff80000 	.word	0x7ff80000

0800ba28 <__sread>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	f000 f906 	bl	800bc40 <_read_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	bfab      	itete	ge
 800ba38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba3c:	181b      	addge	r3, r3, r0
 800ba3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba42:	bfac      	ite	ge
 800ba44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba46:	81a3      	strhlt	r3, [r4, #12]
 800ba48:	bd10      	pop	{r4, pc}

0800ba4a <__swrite>:
 800ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	461f      	mov	r7, r3
 800ba50:	898b      	ldrh	r3, [r1, #12]
 800ba52:	05db      	lsls	r3, r3, #23
 800ba54:	4605      	mov	r5, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	4616      	mov	r6, r2
 800ba5a:	d505      	bpl.n	800ba68 <__swrite+0x1e>
 800ba5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba60:	2302      	movs	r3, #2
 800ba62:	2200      	movs	r2, #0
 800ba64:	f000 f890 	bl	800bb88 <_lseek_r>
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	4632      	mov	r2, r6
 800ba76:	463b      	mov	r3, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	f000 b837 	b.w	800baf0 <_write_r>

0800ba82 <__sseek>:
 800ba82:	b510      	push	{r4, lr}
 800ba84:	460c      	mov	r4, r1
 800ba86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8a:	f000 f87d 	bl	800bb88 <_lseek_r>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	bf15      	itete	ne
 800ba94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba9e:	81a3      	strheq	r3, [r4, #12]
 800baa0:	bf18      	it	ne
 800baa2:	81a3      	strhne	r3, [r4, #12]
 800baa4:	bd10      	pop	{r4, pc}

0800baa6 <__sclose>:
 800baa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baaa:	f000 b83b 	b.w	800bb24 <_close_r>

0800baae <strncmp>:
 800baae:	b510      	push	{r4, lr}
 800bab0:	b17a      	cbz	r2, 800bad2 <strncmp+0x24>
 800bab2:	4603      	mov	r3, r0
 800bab4:	3901      	subs	r1, #1
 800bab6:	1884      	adds	r4, r0, r2
 800bab8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800babc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bac0:	4290      	cmp	r0, r2
 800bac2:	d101      	bne.n	800bac8 <strncmp+0x1a>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d101      	bne.n	800bacc <strncmp+0x1e>
 800bac8:	1a80      	subs	r0, r0, r2
 800baca:	bd10      	pop	{r4, pc}
 800bacc:	2800      	cmp	r0, #0
 800bace:	d1f3      	bne.n	800bab8 <strncmp+0xa>
 800bad0:	e7fa      	b.n	800bac8 <strncmp+0x1a>
 800bad2:	4610      	mov	r0, r2
 800bad4:	e7f9      	b.n	800baca <strncmp+0x1c>

0800bad6 <__ascii_wctomb>:
 800bad6:	b149      	cbz	r1, 800baec <__ascii_wctomb+0x16>
 800bad8:	2aff      	cmp	r2, #255	; 0xff
 800bada:	bf85      	ittet	hi
 800badc:	238a      	movhi	r3, #138	; 0x8a
 800bade:	6003      	strhi	r3, [r0, #0]
 800bae0:	700a      	strbls	r2, [r1, #0]
 800bae2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bae6:	bf98      	it	ls
 800bae8:	2001      	movls	r0, #1
 800baea:	4770      	bx	lr
 800baec:	4608      	mov	r0, r1
 800baee:	4770      	bx	lr

0800baf0 <_write_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	; (800bb10 <_write_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f7 f94b 	bl	8002d9a <_write>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_write_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_write_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20000544 	.word	0x20000544

0800bb14 <abort>:
 800bb14:	b508      	push	{r3, lr}
 800bb16:	2006      	movs	r0, #6
 800bb18:	f000 f8cc 	bl	800bcb4 <raise>
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	f7f7 f915 	bl	8002d4c <_exit>
	...

0800bb24 <_close_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d06      	ldr	r5, [pc, #24]	; (800bb40 <_close_r+0x1c>)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f7 f94f 	bl	8002dd2 <_close>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_close_r+0x1a>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_close_r+0x1a>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20000544 	.word	0x20000544

0800bb44 <_fstat_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	; (800bb64 <_fstat_r+0x20>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	4611      	mov	r1, r2
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	f7f7 f94a 	bl	8002dea <_fstat>
 800bb56:	1c43      	adds	r3, r0, #1
 800bb58:	d102      	bne.n	800bb60 <_fstat_r+0x1c>
 800bb5a:	682b      	ldr	r3, [r5, #0]
 800bb5c:	b103      	cbz	r3, 800bb60 <_fstat_r+0x1c>
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	bf00      	nop
 800bb64:	20000544 	.word	0x20000544

0800bb68 <_isatty_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d06      	ldr	r5, [pc, #24]	; (800bb84 <_isatty_r+0x1c>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	602b      	str	r3, [r5, #0]
 800bb74:	f7f7 f949 	bl	8002e0a <_isatty>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_isatty_r+0x1a>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_isatty_r+0x1a>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20000544 	.word	0x20000544

0800bb88 <_lseek_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	; (800bba8 <_lseek_r+0x20>)
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	4611      	mov	r1, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	602a      	str	r2, [r5, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f7f7 f942 	bl	8002e20 <_lseek>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_lseek_r+0x1e>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_lseek_r+0x1e>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20000544 	.word	0x20000544

0800bbac <memmove>:
 800bbac:	4288      	cmp	r0, r1
 800bbae:	b510      	push	{r4, lr}
 800bbb0:	eb01 0402 	add.w	r4, r1, r2
 800bbb4:	d902      	bls.n	800bbbc <memmove+0x10>
 800bbb6:	4284      	cmp	r4, r0
 800bbb8:	4623      	mov	r3, r4
 800bbba:	d807      	bhi.n	800bbcc <memmove+0x20>
 800bbbc:	1e43      	subs	r3, r0, #1
 800bbbe:	42a1      	cmp	r1, r4
 800bbc0:	d008      	beq.n	800bbd4 <memmove+0x28>
 800bbc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbca:	e7f8      	b.n	800bbbe <memmove+0x12>
 800bbcc:	4402      	add	r2, r0
 800bbce:	4601      	mov	r1, r0
 800bbd0:	428a      	cmp	r2, r1
 800bbd2:	d100      	bne.n	800bbd6 <memmove+0x2a>
 800bbd4:	bd10      	pop	{r4, pc}
 800bbd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbde:	e7f7      	b.n	800bbd0 <memmove+0x24>

0800bbe0 <_realloc_r>:
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	460e      	mov	r6, r1
 800bbea:	b921      	cbnz	r1, 800bbf6 <_realloc_r+0x16>
 800bbec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	f7fb bb35 	b.w	8007260 <_malloc_r>
 800bbf6:	b92a      	cbnz	r2, 800bc04 <_realloc_r+0x24>
 800bbf8:	f7fb fac6 	bl	8007188 <_free_r>
 800bbfc:	4625      	mov	r5, r4
 800bbfe:	4628      	mov	r0, r5
 800bc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc04:	f000 f872 	bl	800bcec <_malloc_usable_size_r>
 800bc08:	4284      	cmp	r4, r0
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	d802      	bhi.n	800bc14 <_realloc_r+0x34>
 800bc0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc12:	d812      	bhi.n	800bc3a <_realloc_r+0x5a>
 800bc14:	4621      	mov	r1, r4
 800bc16:	4640      	mov	r0, r8
 800bc18:	f7fb fb22 	bl	8007260 <_malloc_r>
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d0ed      	beq.n	800bbfe <_realloc_r+0x1e>
 800bc22:	42bc      	cmp	r4, r7
 800bc24:	4622      	mov	r2, r4
 800bc26:	4631      	mov	r1, r6
 800bc28:	bf28      	it	cs
 800bc2a:	463a      	movcs	r2, r7
 800bc2c:	f7fb fa96 	bl	800715c <memcpy>
 800bc30:	4631      	mov	r1, r6
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7fb faa8 	bl	8007188 <_free_r>
 800bc38:	e7e1      	b.n	800bbfe <_realloc_r+0x1e>
 800bc3a:	4635      	mov	r5, r6
 800bc3c:	e7df      	b.n	800bbfe <_realloc_r+0x1e>
	...

0800bc40 <_read_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_read_r+0x20>)
 800bc44:	4604      	mov	r4, r0
 800bc46:	4608      	mov	r0, r1
 800bc48:	4611      	mov	r1, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f7f7 f886 	bl	8002d60 <_read>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_read_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_read_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20000544 	.word	0x20000544

0800bc64 <_raise_r>:
 800bc64:	291f      	cmp	r1, #31
 800bc66:	b538      	push	{r3, r4, r5, lr}
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	d904      	bls.n	800bc78 <_raise_r+0x14>
 800bc6e:	2316      	movs	r3, #22
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	f04f 30ff 	mov.w	r0, #4294967295
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc7a:	b112      	cbz	r2, 800bc82 <_raise_r+0x1e>
 800bc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc80:	b94b      	cbnz	r3, 800bc96 <_raise_r+0x32>
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f830 	bl	800bce8 <_getpid_r>
 800bc88:	462a      	mov	r2, r5
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc92:	f000 b817 	b.w	800bcc4 <_kill_r>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d00a      	beq.n	800bcb0 <_raise_r+0x4c>
 800bc9a:	1c59      	adds	r1, r3, #1
 800bc9c:	d103      	bne.n	800bca6 <_raise_r+0x42>
 800bc9e:	2316      	movs	r3, #22
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	2001      	movs	r0, #1
 800bca4:	e7e7      	b.n	800bc76 <_raise_r+0x12>
 800bca6:	2400      	movs	r4, #0
 800bca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcac:	4628      	mov	r0, r5
 800bcae:	4798      	blx	r3
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e7e0      	b.n	800bc76 <_raise_r+0x12>

0800bcb4 <raise>:
 800bcb4:	4b02      	ldr	r3, [pc, #8]	; (800bcc0 <raise+0xc>)
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f7ff bfd3 	b.w	800bc64 <_raise_r>
 800bcbe:	bf00      	nop
 800bcc0:	2000001c 	.word	0x2000001c

0800bcc4 <_kill_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	; (800bce4 <_kill_r+0x20>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	4611      	mov	r1, r2
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	f7f7 f82b 	bl	8002d2c <_kill>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d102      	bne.n	800bce0 <_kill_r+0x1c>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b103      	cbz	r3, 800bce0 <_kill_r+0x1c>
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	bd38      	pop	{r3, r4, r5, pc}
 800bce2:	bf00      	nop
 800bce4:	20000544 	.word	0x20000544

0800bce8 <_getpid_r>:
 800bce8:	f7f7 b818 	b.w	8002d1c <_getpid>

0800bcec <_malloc_usable_size_r>:
 800bcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf0:	1f18      	subs	r0, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfbc      	itt	lt
 800bcf6:	580b      	ldrlt	r3, [r1, r0]
 800bcf8:	18c0      	addlt	r0, r0, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_init>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr

0800bd08 <_fini>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	bf00      	nop
 800bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0e:	bc08      	pop	{r3}
 800bd10:	469e      	mov	lr, r3
 800bd12:	4770      	bx	lr
